,Unnamed: 0.1,Unnamed: 0,project,sha,message,link
0,0.0,0.0,felipebravom/AffectiveTweets,8adc5a0fff12a875455c90d3b45849372ea505e0,Refactored the Embedding handler,https://github.com/felipebravom/AffectiveTweets/commit/8adc5a0fff12a875455c90d3b45849372ea505e0
1,1.0,1.0,stanfordnlp/CoreNLP,83612aafeccd59f75dbf2c002951372402052df2,Refactor some shared code for processing serialized annotations and combining them with the tokens,https://github.com/stanfordnlp/CoreNLP/commit/83612aafeccd59f75dbf2c002951372402052df2
2,2.0,2.0,stanfordnlp/CoreNLP,3c40ba32ca51af02936b907d03406e2158883f7b,"Start refactoring a couple things which should be common to all language tokenizers, such as space characters and filenames",https://github.com/stanfordnlp/CoreNLP/commit/3c40ba32ca51af02936b907d03406e2158883f7b
3,3.0,3.0,stanfordnlp/CoreNLP,dba0752a2a01bacd3c27d80c85da01662e08c202,refactor,https://github.com/stanfordnlp/CoreNLP/commit/dba0752a2a01bacd3c27d80c85da01662e08c202
4,4.0,4.0,stanfordnlp/CoreNLP,66d2a80dfbf76ab4821716626fc41b210a366187,Refactor a bit,https://github.com/stanfordnlp/CoreNLP/commit/66d2a80dfbf76ab4821716626fc41b210a366187
5,5.0,5.0,stanfordnlp/CoreNLP,916f3b676585b5d2e42701d36694d9b6d2d568ce,Refactor 00a7 to a constant name,https://github.com/stanfordnlp/CoreNLP/commit/916f3b676585b5d2e42701d36694d9b6d2d568ce
6,6.0,6.0,stanfordnlp/CoreNLP,89eaea4ae05081a510a3347844cf1c0d15dc1b24,Refactor a bit,https://github.com/stanfordnlp/CoreNLP/commit/89eaea4ae05081a510a3347844cf1c0d15dc1b24
7,7.0,7.0,stanfordnlp/CoreNLP,a32e720b31206f9ce03b95c91c4f37ff61564c7c,Refactor 00a7 to a constant name,https://github.com/stanfordnlp/CoreNLP/commit/a32e720b31206f9ce03b95c91c4f37ff61564c7c
8,8.0,8.0,stanfordnlp/CoreNLP,99b4fb5426f2378d9142c5067037340642be012d,Refactor the TextOutputter a big so that outputting quotes can be used elsewhere,https://github.com/stanfordnlp/CoreNLP/commit/99b4fb5426f2378d9142c5067037340642be012d
9,9.0,9.0,stanfordnlp/CoreNLP,22831c7b3fb3238d64bbf72532e50cb700e99c93,"Refactor Weight a bit and add a test.  This will make it easier to compress to 3 shorts instead of 1 long per weight

Add a getScore and a testAddScaled

Add a toString() and a test of a bunch of random operations, literally in one case

Includes a test which happened to reveal a math error in the 48 bit weights",https://github.com/stanfordnlp/CoreNLP/commit/22831c7b3fb3238d64bbf72532e50cb700e99c93
10,10.0,10.0,stanfordnlp/CoreNLP,48b8dd4554e08a50eb740ec5b6d8df2ee4efa979,Refactor the main method of UniversalEnhancer from the actual enhancements,https://github.com/stanfordnlp/CoreNLP/commit/48b8dd4554e08a50eb740ec5b6d8df2ee4efa979
11,11.0,11.0,stanfordnlp/CoreNLP,35ecb521bf847eb787bce5233a081230417959d0,Refactor,https://github.com/stanfordnlp/CoreNLP/commit/35ecb521bf847eb787bce5233a081230417959d0
12,12.0,12.0,stanfordnlp/CoreNLP,8bfd2c1cde9a35875709a7f5bd6d7e437fa292d5,Refactor the method to convert properties to a json string,https://github.com/stanfordnlp/CoreNLP/commit/8bfd2c1cde9a35875709a7f5bd6d7e437fa292d5
13,13.0,13.0,stanfordnlp/CoreNLP,6a8cb31919eba5e95d3f1729651a0fc5e81ae881,refactor handling of server IO defaults,https://github.com/stanfordnlp/CoreNLP/commit/6a8cb31919eba5e95d3f1729651a0fc5e81ae881
14,14.0,14.0,stanfordnlp/CoreNLP,d3f86df508aa97c40598cecb96f074e8010dd464,Refactor adding the sentiment and add the array of scores to the sentiment element,https://github.com/stanfordnlp/CoreNLP/commit/d3f86df508aa97c40598cecb96f074e8010dd464
15,15.0,15.0,stanfordnlp/CoreNLP,29b6105c907b7964bf2b158bc074aa1a41e1dcf7,Refactor SentenceTest and add some coverage,https://github.com/stanfordnlp/CoreNLP/commit/29b6105c907b7964bf2b158bc074aa1a41e1dcf7
16,16.0,16.0,stanfordnlp/CoreNLP,eb058068ca72be723df41c2f4b3730e818974713,Refactor the text of a document used more than once,https://github.com/stanfordnlp/CoreNLP/commit/eb058068ca72be723df41c2f4b3730e818974713
17,17.0,17.0,stanfordnlp/CoreNLP,82ed565af1583749fda586fc29d6f289b714f8db,Refactor the method to get the default English parser,https://github.com/stanfordnlp/CoreNLP/commit/82ed565af1583749fda586fc29d6f289b714f8db
18,18.0,18.0,stanfordnlp/CoreNLP,efaebfb40acf23b191d8daf6c565b36eec466ad7,Refactor some shared patterns into EnglishPatterns.java,https://github.com/stanfordnlp/CoreNLP/commit/efaebfb40acf23b191d8daf6c565b36eec466ad7
19,19.0,19.0,stanfordnlp/CoreNLP,98953dc8525ee40b5a212f4b774b2a5014b712ec,"Update a test, refactor some defaults for Spanish",https://github.com/stanfordnlp/CoreNLP/commit/98953dc8525ee40b5a212f4b774b2a5014b712ec
20,20.0,20.0,stanfordnlp/CoreNLP,34bd3847f7b636be55dde3224c413aee9a007d3c,"Refactor NodeAttributes so that we can do some error checking. Also, this will allow us to combine root with other attributes. See issue https://github.com/stanfordnlp/CoreNLP/issues/552",https://github.com/stanfordnlp/CoreNLP/commit/34bd3847f7b636be55dde3224c413aee9a007d3c
21,21.0,21.0,stanfordnlp/CoreNLP,45c948b540d65b8c312ac43ec79afcd06f25f8f8,Simplify and use the refactored text split,https://github.com/stanfordnlp/CoreNLP/commit/45c948b540d65b8c312ac43ec79afcd06f25f8f8
22,22.0,22.0,stanfordnlp/CoreNLP,95e5211f2a3422dbee05e8cff9bb6d7976e9c913,refactor to have NERCombinerAnnotator directly alter tokenization to an NER-specific tokenization,https://github.com/stanfordnlp/CoreNLP/commit/95e5211f2a3422dbee05e8cff9bb6d7976e9c913
23,23.0,23.0,stanfordnlp/CoreNLP,fd3e9fef3404c1d4ece81576ce92141184d17201,"Various code optimizations: refactor some methods, only run hash lookups once, etc",https://github.com/stanfordnlp/CoreNLP/commit/fd3e9fef3404c1d4ece81576ce92141184d17201
24,24.0,24.0,stanfordnlp/CoreNLP,1d5474b7260d64998972890e17dcf6553c339160,"add number range handling, refactor some",https://github.com/stanfordnlp/CoreNLP/commit/1d5474b7260d64998972890e17dcf6553c339160
25,25.0,25.0,stanfordnlp/CoreNLP,a1f844ded4e30839d751f58d914ac8193d05b9fb,"Update a comment, minor rearrangement to look like the parent class (need to refactor)",https://github.com/stanfordnlp/CoreNLP/commit/a1f844ded4e30839d751f58d914ac8193d05b9fb
26,26.0,26.0,stanfordnlp/CoreNLP,6cb32ee6aa4edfc21aadc4b0e3999657342cb8ee,"begin refactor process, remove german and spanish from old test",https://github.com/stanfordnlp/CoreNLP/commit/6cb32ee6aa4edfc21aadc4b0e3999657342cb8ee
27,27.0,27.0,stanfordnlp/CoreNLP,75285cd46658eef2730288299c4f5bc50442f58f,refactored german ner benchmark,https://github.com/stanfordnlp/CoreNLP/commit/75285cd46658eef2730288299c4f5bc50442f58f
28,28.0,28.0,stanfordnlp/CoreNLP,637ef5d31658abad47a0acf4f742d2ad54297da0,refactor ner benchmark,https://github.com/stanfordnlp/CoreNLP/commit/637ef5d31658abad47a0acf4f742d2ad54297da0
29,29.0,29.0,stanfordnlp/CoreNLP,84ef48b0ce32469ea0048f90f37ea2d9f6347131,refactor ner benchmark,https://github.com/stanfordnlp/CoreNLP/commit/84ef48b0ce32469ea0048f90f37ea2d9f6347131
30,30.0,30.0,stanfordnlp/CoreNLP,00d4c2a11e552cc677a5ffc78435a12ef469be59,refactor part-of-speech benchmarking,https://github.com/stanfordnlp/CoreNLP/commit/00d4c2a11e552cc677a5ffc78435a12ef469be59
31,31.0,31.0,stanfordnlp/CoreNLP,4816ccd0317ab7a94b2a49bce93feaf32e40cd61,refactor test,https://github.com/stanfordnlp/CoreNLP/commit/4816ccd0317ab7a94b2a49bce93feaf32e40cd61
32,32.0,32.0,stanfordnlp/CoreNLP,907f380bf153e5f1fd14c678d38a4bf80471cb05,(refactor) some opportunities to use Anonymous inner Classes,https://github.com/stanfordnlp/CoreNLP/commit/907f380bf153e5f1fd14c678d38a4bf80471cb05
33,33.0,33.0,stanfordnlp/CoreNLP,b81597f9c246124c306330cd345ec1ea4576e3b6,(refactor) some opportunities to use Switch String,https://github.com/stanfordnlp/CoreNLP/commit/b81597f9c246124c306330cd345ec1ea4576e3b6
34,34.0,34.0,stanfordnlp/CoreNLP,616d266aa8235e3ee6c45c8cbbfb209f67a9c7a8,(refactor) some opportunities to use Multi-Catch,https://github.com/stanfordnlp/CoreNLP/commit/616d266aa8235e3ee6c45c8cbbfb209f67a9c7a8
35,35.0,35.0,stanfordnlp/CoreNLP,b5cdaee3ed09366c4b3670a2eeddab0f5e211ff8,refactor UniversalDependenciesConverter changes,https://github.com/stanfordnlp/CoreNLP/commit/b5cdaee3ed09366c4b3670a2eeddab0f5e211ff8
36,36.0,36.0,stanfordnlp/CoreNLP,a0fb86fa1c62e2e9a7764733f04872230751fb38,(refactor) some opportunities to use diamond operator,https://github.com/stanfordnlp/CoreNLP/commit/a0fb86fa1c62e2e9a7764733f04872230751fb38
37,37.0,37.0,stanfordnlp/CoreNLP,8b54f5b9651313f4af629fe2f1d4365d3cf860ce,"Refactoring 2 instances from Function<V,Double> to ToDoubleFunction<V>",https://github.com/stanfordnlp/CoreNLP/commit/8b54f5b9651313f4af629fe2f1d4365d3cf860ce
38,38.0,38.0,stanfordnlp/CoreNLP,01ae51c4102dbea515f2646762baa96b08ed79d1,"Print out sections and some refactoring. Print the sections, but maybe this should be changed a bit so the sentences are a simple list, not a list of maps. Do a little refactoring out of repeated code blocks.",https://github.com/stanfordnlp/CoreNLP/commit/01ae51c4102dbea515f2646762baa96b08ed79d1
39,39.0,39.0,stanfordnlp/CoreNLP,b11991d3906bc3c2e7e1896252ce50f0246442fb,"Fix multithreading issue with ChineseStringUtils, small refactor",https://github.com/stanfordnlp/CoreNLP/commit/b11991d3906bc3c2e7e1896252ce50f0246442fb
40,40.0,40.0,stanfordnlp/CoreNLP,96c26bef69a8cd53b23fad40f5b9c06e7b19e8a8,refactor KBP benchmark,https://github.com/stanfordnlp/CoreNLP/commit/96c26bef69a8cd53b23fad40f5b9c06e7b19e8a8
41,41.0,41.0,stanfordnlp/CoreNLP,d54cbc4b4177d2e169fbd415edb0d01497e95dc3,refactor KBP benchmark,https://github.com/stanfordnlp/CoreNLP/commit/d54cbc4b4177d2e169fbd415edb0d01497e95dc3
42,42.0,42.0,stanfordnlp/CoreNLP,a486eccd87cfbfb435c18c512727bc93ac246222,coref refactor,https://github.com/stanfordnlp/CoreNLP/commit/a486eccd87cfbfb435c18c512727bc93ac246222
43,43.0,43.0,stanfordnlp/CoreNLP,18bef5178a38404164957974eb6ee841eb10ca6b,new coreference refactor,https://github.com/stanfordnlp/CoreNLP/commit/18bef5178a38404164957974eb6ee841eb10ca6b
44,44.0,44.0,stanfordnlp/CoreNLP,6583ea66c46750002f71992443bcbea2d37d1e33,"fix possible null pointer in xml, refactor run utils in quote land",https://github.com/stanfordnlp/CoreNLP/commit/6583ea66c46750002f71992443bcbea2d37d1e33
45,45.0,45.0,stanfordnlp/CoreNLP,fa5d8384d6eb6f0613c130c0a7578820ab695fca,Refactor the KBP relation extractor pipeline a bit,https://github.com/stanfordnlp/CoreNLP/commit/fa5d8384d6eb6f0613c130c0a7578820ab695fca
46,46.0,46.0,stanfordnlp/CoreNLP,4519d5a7723e190387423aeebba89c1078ac2458,Refactored SlotFiller out of KBPEvaluator. Introduced Props.KBP_TRACK,https://github.com/stanfordnlp/CoreNLP/commit/4519d5a7723e190387423aeebba89c1078ac2458
47,47.0,47.0,stanfordnlp/CoreNLP,b2dcbd32a0ea333e196cd0849f1eeac4b6223032,refactored collapsed dependencies and updated them to the new standard,https://github.com/stanfordnlp/CoreNLP/commit/b2dcbd32a0ea333e196cd0849f1eeac4b6223032
48,48.0,48.0,stanfordnlp/CoreNLP,29e8c720fbea45a39641846a62d21da699080ba9,Refactored UniversalEnglishGrammaticalStructureTest,https://github.com/stanfordnlp/CoreNLP/commit/29e8c720fbea45a39641846a62d21da699080ba9
49,49.0,49.0,stanfordnlp/CoreNLP,25a6414bc4b656f478349e3568a22614e5f5f6b4,Update the commented out readObject to reflect the refactored srparser,https://github.com/stanfordnlp/CoreNLP/commit/25a6414bc4b656f478349e3568a22614e5f5f6b4
50,50.0,50.0,stanfordnlp/CoreNLP,1ba55fcadda1feaf44f8a9e6f4c45abd980004cb,Treebank loading is now refactored,https://github.com/stanfordnlp/CoreNLP/commit/1ba55fcadda1feaf44f8a9e6f4c45abd980004cb
51,51.0,51.0,stanfordnlp/CoreNLP,a01361cff93dd36f05c584a9a6678b9c4b5a86ce,Refactor another method,https://github.com/stanfordnlp/CoreNLP/commit/a01361cff93dd36f05c584a9a6678b9c4b5a86ce
52,52.0,52.0,stanfordnlp/CoreNLP,664a179e84a1818fd766333c6555453565104562,Begin refactoring training method in ShiftReduceParser,https://github.com/stanfordnlp/CoreNLP/commit/664a179e84a1818fd766333c6555453565104562
53,53.0,53.0,stanfordnlp/CoreNLP,13327445fb40bacdfa1ce4d452a07314eb5883de,Refactor AnCoraProcessor to use MulticoreWrapper,https://github.com/stanfordnlp/CoreNLP/commit/13327445fb40bacdfa1ce4d452a07314eb5883de
54,54.0,54.0,stanfordnlp/CoreNLP,dd8a56669a44ee24ea5e182bb1fec8e51e32d7b6,Fix some bugs in the refactoring of the training method,https://github.com/stanfordnlp/CoreNLP/commit/dd8a56669a44ee24ea5e182bb1fec8e51e32d7b6
55,55.0,55.0,stanfordnlp/CoreNLP,b3b0effcdebb1a0d0df2e7eca99a4154ff5d522e,Make the code easy to refactor...,https://github.com/stanfordnlp/CoreNLP/commit/b3b0effcdebb1a0d0df2e7eca99a4154ff5d522e
56,56.0,56.0,stanfordnlp/CoreNLP,de9a1dbf54edac51f406ae7d7bf6627d923e6d7d,"Refactor FlatPhraseTable for faster query, lower memory usage; support multiple phrase tables and reordering models",https://github.com/stanfordnlp/CoreNLP/commit/de9a1dbf54edac51f406ae7d7bf6627d923e6d7d
57,57.0,57.0,stanfordnlp/CoreNLP,5713d2ac15680fa5713d2919fbee7426eae31778,inference bug fixes + refactoring,https://github.com/stanfordnlp/CoreNLP/commit/5713d2ac15680fa5713d2919fbee7426eae31778
58,58.0,58.0,stanfordnlp/CoreNLP,2ece89668fa8aee9a89a9af38b7e34fabf64eeea,Refactored output generation for inference,https://github.com/stanfordnlp/CoreNLP/commit/2ece89668fa8aee9a89a9af38b7e34fabf64eeea
59,59.0,59.0,stanfordnlp/CoreNLP,66a69431be32b4c8724eb5758f515c6425492c09,Refactor old entity linking classes in packages.,https://github.com/stanfordnlp/CoreNLP/commit/66a69431be32b4c8724eb5758f515c6425492c09
60,60.0,60.0,stanfordnlp/CoreNLP,5d3ab65835c285b92405480ce819cf9b4a1cc592,Refactor code a little bit,https://github.com/stanfordnlp/CoreNLP/commit/5d3ab65835c285b92405480ce819cf9b4a1cc592
61,61.0,61.0,stanfordnlp/CoreNLP,2f0731a54f74b864a6260b5660c643db91884dfc,Refactor some,https://github.com/stanfordnlp/CoreNLP/commit/2f0731a54f74b864a6260b5660c643db91884dfc
62,62.0,62.0,stanfordnlp/CoreNLP,1cf92b92248323ed26416cf154b1c3fc8cad94e8,Refactor the loading code similar to what LexicalizedParser has. Add a flag to allow continued training from a given starting point,https://github.com/stanfordnlp/CoreNLP/commit/1cf92b92248323ed26416cf154b1c3fc8cad94e8
63,63.0,63.0,stanfordnlp/CoreNLP,19cf1845e2e639dd52632b517a91323cbddb9829,Refactor just a little bit,https://github.com/stanfordnlp/CoreNLP/commit/19cf1845e2e639dd52632b517a91323cbddb9829
64,64.0,64.0,stanfordnlp/CoreNLP,1d6b2e8663196515eb9fa48ef5262df611a5f247,"Refactor code, make individual classes for scoring patterns",https://github.com/stanfordnlp/CoreNLP/commit/1d6b2e8663196515eb9fa48ef5262df611a5f247
65,65.0,65.0,stanfordnlp/CoreNLP,994c60f09833dd2bdc0c64913da56c01950c118b,Refactoring for speed,https://github.com/stanfordnlp/CoreNLP/commit/994c60f09833dd2bdc0c64913da56c01950c118b
66,66.0,66.0,stanfordnlp/CoreNLP,7299f6ab5f6e2f25299ebed9361de7baf3aa63ee,Large scale refactoring - make train() a member function,https://github.com/stanfordnlp/CoreNLP/commit/7299f6ab5f6e2f25299ebed9361de7baf3aa63ee
67,67.0,67.0,stanfordnlp/CoreNLP,9b6477fb10e18f2d6ccd1e34cb7df182a43cb56a,Refactoring for the WMT paper,https://github.com/stanfordnlp/CoreNLP/commit/9b6477fb10e18f2d6ccd1e34cb7df182a43cb56a
68,68.0,68.0,stanfordnlp/CoreNLP,26cf17369d7e2fe840c93e7cc6059d9790bdc31a,"Refactor some more, keep the transitions instead of rebuilding them each time",https://github.com/stanfordnlp/CoreNLP/commit/26cf17369d7e2fe840c93e7cc6059d9790bdc31a
69,69.0,69.0,stanfordnlp/CoreNLP,cd828aee8341320a18ed216db2abcb8dd13dd8c4,Begin refactoring the training program,https://github.com/stanfordnlp/CoreNLP/commit/cd828aee8341320a18ed216db2abcb8dd13dd8c4
70,70.0,70.0,stanfordnlp/CoreNLP,f866d59a365ef63d3c54595bfe8365f3e86b3090,"Make the FeatureFactory an option, get the parser's objects from the parser rather than telling the parser what its objects are. Should refactor the training code, though",https://github.com/stanfordnlp/CoreNLP/commit/f866d59a365ef63d3c54595bfe8365f3e86b3090
71,71.0,71.0,stanfordnlp/CoreNLP,770fac204e19d89f560a4e84f7fa9072642397d7,Code refactoring,https://github.com/stanfordnlp/CoreNLP/commit/770fac204e19d89f560a4e84f7fa9072642397d7
72,72.0,72.0,stanfordnlp/CoreNLP,23ed3e9e8158ab9c641a1cb703da88152af68ce3,Update srparser to reflect the parser refactoring in master,https://github.com/stanfordnlp/CoreNLP/commit/23ed3e9e8158ab9c641a1cb703da88152af68ce3
73,73.0,73.0,stanfordnlp/CoreNLP,fa7f745153b9ca8b63e507181eb5ca7ee0b3a805,Update srparser to reflect the parser refactoring in master,https://github.com/stanfordnlp/CoreNLP/commit/fa7f745153b9ca8b63e507181eb5ca7ee0b3a805
74,74.0,74.0,stanfordnlp/CoreNLP,a668dc333f1286dc6973bf4068ee1aabbad30166,More refactoring,https://github.com/stanfordnlp/CoreNLP/commit/a668dc333f1286dc6973bf4068ee1aabbad30166
75,75.0,75.0,stanfordnlp/CoreNLP,8cd5642a444717b7fc932195d2d57acb5217edd2,Refactor some code into parser/common,https://github.com/stanfordnlp/CoreNLP/commit/8cd5642a444717b7fc932195d2d57acb5217edd2
76,76.0,76.0,stanfordnlp/CoreNLP,87cfaad8e0abc481f91aae783f5fed5f06c101f7,more refactoring,https://github.com/stanfordnlp/CoreNLP/commit/87cfaad8e0abc481f91aae783f5fed5f06c101f7
77,77.0,77.0,stanfordnlp/CoreNLP,50423ae41fa0776b3a6277deae73a40321cb071d,more refactoring,https://github.com/stanfordnlp/CoreNLP/commit/50423ae41fa0776b3a6277deae73a40321cb071d
78,78.0,78.0,stanfordnlp/CoreNLP,81d6d9360b58aa898219422a7b54ae4a6009802f,refactoring of code - move around,https://github.com/stanfordnlp/CoreNLP/commit/81d6d9360b58aa898219422a7b54ae4a6009802f
79,79.0,79.0,stanfordnlp/CoreNLP,e3b618c058e1bd1b6c53ff390ec6b8ada0362362,Minor refactoring,https://github.com/stanfordnlp/CoreNLP/commit/e3b618c058e1bd1b6c53ff390ec6b8ada0362362
80,80.0,80.0,stanfordnlp/CoreNLP,38bd1e76eca6997a70e99f79275d7ff5f742e00b,Refactored sentence level metrics,https://github.com/stanfordnlp/CoreNLP/commit/38bd1e76eca6997a70e99f79275d7ff5f742e00b
81,81.0,81.0,stanfordnlp/CoreNLP,47bd3e4b39d22b2c23b0d0695abbdeb8846c2b1d,Get rid of some duplicate code which should be refactored differently,https://github.com/stanfordnlp/CoreNLP/commit/47bd3e4b39d22b2c23b0d0695abbdeb8846c2b1d
82,82.0,82.0,stanfordnlp/CoreNLP,cfc4cd0abbda9057e8a5effe5f1f7b8889ef112f,Refactored AnnotationSerializer,https://github.com/stanfordnlp/CoreNLP/commit/cfc4cd0abbda9057e8a5effe5f1f7b8889ef112f
83,83.0,83.0,stanfordnlp/CoreNLP,9c947ed032602e0a25c9975d3ae2b4bb9b77d6d6,javadocs and refactoring,https://github.com/stanfordnlp/CoreNLP/commit/9c947ed032602e0a25c9975d3ae2b4bb9b77d6d6
84,84.0,84.0,stanfordnlp/CoreNLP,bfeab43e85b26199a104259ad65aa722b964dd1b,javadocs and refactoring,https://github.com/stanfordnlp/CoreNLP/commit/bfeab43e85b26199a104259ad65aa722b964dd1b
85,85.0,85.0,stanfordnlp/CoreNLP,4f19a3beddc420c88e618ffd291e47718e8bf0c5,Cleanup and refactoring,https://github.com/stanfordnlp/CoreNLP/commit/4f19a3beddc420c88e618ffd291e47718e8bf0c5
86,86.0,86.0,stanfordnlp/CoreNLP,3254689092bdea2f9c954e7dcf1af3fc46706c06,"merged remote branch crf_stochastic_fix, refactored CRFClassifier",https://github.com/stanfordnlp/CoreNLP/commit/3254689092bdea2f9c954e7dcf1af3fc46706c06
87,87.0,87.0,stanfordnlp/CoreNLP,625620da8f5e97e09e57e2ca516484749733f1a2,Add force decoding to CubePruningDecoder; other refactoring,https://github.com/stanfordnlp/CoreNLP/commit/625620da8f5e97e09e57e2ca516484749733f1a2
88,88.0,88.0,stanfordnlp/CoreNLP,9f99fa95938d0e0afc0f5e33054907c2b0604924,Move punctuation methods to Characters class; refactor ArabicFeatureFactory for speed; extract n-gram features for all characters,https://github.com/stanfordnlp/CoreNLP/commit/9f99fa95938d0e0afc0f5e33054907c2b0604924
89,89.0,89.0,stanfordnlp/CoreNLP,b277f230e87f4f34f302a33bae873ee453b25a08,KBPEntity refactor,https://github.com/stanfordnlp/CoreNLP/commit/b277f230e87f4f34f302a33bae873ee453b25a08
90,90.0,90.0,stanfordnlp/CoreNLP,0d02cef3d80b9c1c9f1410f9718dfb4207df07e7,merged remote branch refactor_dropout,https://github.com/stanfordnlp/CoreNLP/commit/0d02cef3d80b9c1c9f1410f9718dfb4207df07e7
91,91.0,91.0,stanfordnlp/CoreNLP,5df7618f38367c90578f19c87e19be813c646a0a,Refactor AnnotationSource interface from class and start organizing readers into data directory.,https://github.com/stanfordnlp/CoreNLP/commit/5df7618f38367c90578f19c87e19be813c646a0a
92,92.0,92.0,stanfordnlp/CoreNLP,c1674f938b8ca5f909ee6aa7690a2d893c8908c0,Reasonably significant Redwood refactoring.,https://github.com/stanfordnlp/CoreNLP/commit/c1674f938b8ca5f909ee6aa7690a2d893c8908c0
93,93.0,93.0,stanfordnlp/CoreNLP,779c7099cc1ae7ead188645ecb06811ca9e496ea,Minor refactoring.,https://github.com/stanfordnlp/CoreNLP/commit/779c7099cc1ae7ead188645ecb06811ca9e496ea
94,94.0,94.0,stanfordnlp/CoreNLP,b801911b529107e78db88ce2f31f46248d1b685a,Refactor IRFerformanceSlowITest.,https://github.com/stanfordnlp/CoreNLP/commit/b801911b529107e78db88ce2f31f46248d1b685a
95,95.0,95.0,stanfordnlp/CoreNLP,f6f2d3297f08aa238db4d28f9ee6f787d4643f25,Refactor SolrIndexer into generic part and solr specific part.,https://github.com/stanfordnlp/CoreNLP/commit/f6f2d3297f08aa238db4d28f9ee6f787d4643f25
96,96.0,96.0,stanfordnlp/CoreNLP,fe9b4e98a0b238ad925191e44a699030eb91b168,Minor refactoring.,https://github.com/stanfordnlp/CoreNLP/commit/fe9b4e98a0b238ad925191e44a699030eb91b168
97,97.0,97.0,stanfordnlp/CoreNLP,589f2fa0f57fcd7abcea7e957ee75c2b4e743cbf,"FixedActiveLearningSlowITest and added support to TrainingStatistics for weighted sampling, plus minor refactoring.",https://github.com/stanfordnlp/CoreNLP/commit/589f2fa0f57fcd7abcea7e957ee75c2b4e743cbf
98,98.0,98.0,stanfordnlp/CoreNLP,0541a30477a49a27211759ada09a1b385cb5df5a,Mark CorefGraphAnnotation as deprecated and have refactor is speaker same rule logic.,https://github.com/stanfordnlp/CoreNLP/commit/0541a30477a49a27211759ada09a1b385cb5df5a
99,99.0,99.0,stanfordnlp/CoreNLP,fc0932b7b4376430f2692ca0ac33190ae476484c,Update json-simple. Refactoring of static methods used to access lucene out of IndexExtractor and LucenePipelineCacher into KBPLuceneIndex.,https://github.com/stanfordnlp/CoreNLP/commit/fc0932b7b4376430f2692ca0ac33190ae476484c
100,100.0,100.0,stanfordnlp/CoreNLP,d908daa8994b4bd7240148e9a9e94e8ad28aca27,Hack CleanXmlAnnotator.java to store utterance/speaker information from XML. Hack dcoref to use stored utterance information. Minor refactoring and spelling corrections.,https://github.com/stanfordnlp/CoreNLP/commit/d908daa8994b4bd7240148e9a9e94e8ad28aca27
101,101.0,101.0,stanfordnlp/CoreNLP,df5439d693ae438e4c4f15da4ed6d56deb4df6b2,Mostly fixed OneVsAllRelationExtractor (it was broken sometime during refactoring).,https://github.com/stanfordnlp/CoreNLP/commit/df5439d693ae438e4c4f15da4ed6d56deb4df6b2
102,102.0,102.0,stanfordnlp/CoreNLP,13b580bacf3b50c7468ee2f90873816370c41e2c,"Add concept of unambiguous auxiliaries, so do better with nonstandard and misspelled auxiliaries in informal treebanks; also refactor a little, extracting common code to new method.",https://github.com/stanfordnlp/CoreNLP/commit/13b580bacf3b50c7468ee2f90873816370c41e2c
103,103.0,103.0,stanfordnlp/CoreNLP,ff04a2acbfe8fc84217ff804f57c3bce4fe264af,Fixed small bug in JointBayesRelationExtractor and refactored serialization code to make it possible to save ensemble models.,https://github.com/stanfordnlp/CoreNLP/commit/ff04a2acbfe8fc84217ff804f57c3bce4fe264af
104,104.0,104.0,stanfordnlp/CoreNLP,0f896c65acb6aef49d7a94409c19ec34cb1981d5,Added support for a robust logistic regression model based on shift parameters. Also refactored code for robust LR with flipping probabilities.,https://github.com/stanfordnlp/CoreNLP/commit/0f896c65acb6aef49d7a94409c19ec34cb1981d5
105,105.0,105.0,stanfordnlp/CoreNLP,da0820de4ca3558b433a4ff804bbf53f8867d43f,Refactored test infrastructure a bit,https://github.com/stanfordnlp/CoreNLP/commit/da0820de4ca3558b433a4ff804bbf53f8867d43f
106,106.0,106.0,stanfordnlp/CoreNLP,d9c1596c24a8443510501e9c94bea26603b6b8d7,Reverted a nasty refactoring mistake (sorry!),https://github.com/stanfordnlp/CoreNLP/commit/d9c1596c24a8443510501e9c94bea26603b6b8d7
107,107.0,107.0,stanfordnlp/CoreNLP,9adb790ffcf2fcb44217d5353dd690ddda854a5a,Begin refactoring of properties into static fields,https://github.com/stanfordnlp/CoreNLP/commit/9adb790ffcf2fcb44217d5353dd690ddda854a5a
108,108.0,108.0,stanfordnlp/CoreNLP,d54763ac0fc33b75eddce26850ce55332781113b,Large refactoring,https://github.com/stanfordnlp/CoreNLP/commit/d54763ac0fc33b75eddce26850ce55332781113b
109,109.0,109.0,stanfordnlp/CoreNLP,80934814dd7a724eb5578f3634e2792b05b38d73,Refactor some,https://github.com/stanfordnlp/CoreNLP/commit/80934814dd7a724eb5578f3634e2792b05b38d73
110,110.0,110.0,stanfordnlp/CoreNLP,4de941280d1086660ffdee2656909b833551a4ec,Refactor the loading code similar to what LexicalizedParser has. Add a flag to allow continued training from a given starting point,https://github.com/stanfordnlp/CoreNLP/commit/4de941280d1086660ffdee2656909b833551a4ec
111,111.0,111.0,stanfordnlp/CoreNLP,afeb45d5f3113335e94eefb461cc518275236936,Refactor just a little bit,https://github.com/stanfordnlp/CoreNLP/commit/afeb45d5f3113335e94eefb461cc518275236936
112,112.0,112.0,stanfordnlp/CoreNLP,bbf4da8afe4337c81f5b8c208109f784a21099ef,Large scale refactoring - make train() a member function,https://github.com/stanfordnlp/CoreNLP/commit/bbf4da8afe4337c81f5b8c208109f784a21099ef
113,113.0,113.0,stanfordnlp/CoreNLP,b3c59a8400779958dd915fa0b945f64e6d490c40,"Refactor some more, keep the transitions instead of rebuilding them each time",https://github.com/stanfordnlp/CoreNLP/commit/b3c59a8400779958dd915fa0b945f64e6d490c40
114,114.0,114.0,stanfordnlp/CoreNLP,1d71dd17baa47b07e279d0ad4774f6a02be77de1,Begin refactoring the training program,https://github.com/stanfordnlp/CoreNLP/commit/1d71dd17baa47b07e279d0ad4774f6a02be77de1
115,115.0,115.0,stanfordnlp/CoreNLP,616d524434973425463c740e8f2da32961d890b1,"Make the FeatureFactory an option, get the parser's objects from the parser rather than telling the parser what its objects are. Should refactor the training code, though",https://github.com/stanfordnlp/CoreNLP/commit/616d524434973425463c740e8f2da32961d890b1
116,116.0,116.0,stanfordnlp/CoreNLP,b3ed32d4b884adff5319f60d11b7dbf4367e6ff6,Code refactoring,https://github.com/stanfordnlp/CoreNLP/commit/b3ed32d4b884adff5319f60d11b7dbf4367e6ff6
117,117.0,117.0,stanfordnlp/CoreNLP,da4982a9b8a74d183a7e2c14a005cda186ac601d,Update srparser to reflect the parser refactoring in master,https://github.com/stanfordnlp/CoreNLP/commit/da4982a9b8a74d183a7e2c14a005cda186ac601d
118,118.0,118.0,stanfordnlp/CoreNLP,935d6681e721586aa6535e9a15bc9295a7278411,Update srparser to reflect the parser refactoring in master,https://github.com/stanfordnlp/CoreNLP/commit/935d6681e721586aa6535e9a15bc9295a7278411
119,119.0,119.0,stanfordnlp/CoreNLP,fb164b4c3035c0107f617d21d6483abe79440402,"Refactor code, make individual classes for scoring patterns",https://github.com/stanfordnlp/CoreNLP/commit/fb164b4c3035c0107f617d21d6483abe79440402
120,120.0,120.0,stanfordnlp/CoreNLP,e3ea20b11ac8805f1b9743089232de8f54a26174,Refactoring for speed,https://github.com/stanfordnlp/CoreNLP/commit/e3ea20b11ac8805f1b9743089232de8f54a26174
121,121.0,121.0,stanfordnlp/CoreNLP,8f8a77c3aea2aa2322df7b48454cbe696522b8a0,More refactoring,https://github.com/stanfordnlp/CoreNLP/commit/8f8a77c3aea2aa2322df7b48454cbe696522b8a0
122,122.0,122.0,stanfordnlp/CoreNLP,ce450527c303cdee945db8bf344798b9e5b42d4b,Refactor some code into parser/common,https://github.com/stanfordnlp/CoreNLP/commit/ce450527c303cdee945db8bf344798b9e5b42d4b
123,123.0,123.0,stanfordnlp/CoreNLP,121bc3cc2e38b8617ff9ac8211e183c0d0403994,Refactor old entity linking classes in packages.,https://github.com/stanfordnlp/CoreNLP/commit/121bc3cc2e38b8617ff9ac8211e183c0d0403994
124,124.0,124.0,stanfordnlp/CoreNLP,936d17b73841077576fa5b55ebda1a30dece1c3d,Get rid of some duplicate code which should be refactored differently,https://github.com/stanfordnlp/CoreNLP/commit/936d17b73841077576fa5b55ebda1a30dece1c3d
125,125.0,125.0,stanfordnlp/CoreNLP,0029f42c17bba0716f50ab862043e5a099e19bdf,Get rid of some duplicate code which should be refactored differently,https://github.com/stanfordnlp/CoreNLP/commit/0029f42c17bba0716f50ab862043e5a099e19bdf
126,126.0,126.0,stanfordnlp/CoreNLP,38b469901d79353c6c1d20fbf7e63fa541e1c6e0,Refactored AnnotationSerializer,https://github.com/stanfordnlp/CoreNLP/commit/38b469901d79353c6c1d20fbf7e63fa541e1c6e0
127,127.0,127.0,stanfordnlp/CoreNLP,8acf999a5c407bdaefb57baa16b4da94c6f013d4,Refactored AnnotationSerializer,https://github.com/stanfordnlp/CoreNLP/commit/8acf999a5c407bdaefb57baa16b4da94c6f013d4
128,128.0,128.0,stanfordnlp/CoreNLP,bf321e42837e7486c636dab99eb11ba51238b1cf,javadocs and refactoring,https://github.com/stanfordnlp/CoreNLP/commit/bf321e42837e7486c636dab99eb11ba51238b1cf
129,129.0,129.0,stanfordnlp/CoreNLP,9a516f213407aba115235b1b2d6ae0fb6bb81167,javadocs and refactoring,https://github.com/stanfordnlp/CoreNLP/commit/9a516f213407aba115235b1b2d6ae0fb6bb81167
130,130.0,130.0,stanfordnlp/CoreNLP,30c1a3042d734d460b78e5891e69c03dd8fd0472,"merged remote branch crf_stochastic_fix, refactored CRFClassifier",https://github.com/stanfordnlp/CoreNLP/commit/30c1a3042d734d460b78e5891e69c03dd8fd0472
131,131.0,131.0,stanfordnlp/CoreNLP,d1879846e52a6f4013244d2b0690c58aef6759b2,"merged remote branch crf_stochastic_fix, refactored CRFClassifier",https://github.com/stanfordnlp/CoreNLP/commit/d1879846e52a6f4013244d2b0690c58aef6759b2
132,132.0,132.0,stanfordnlp/CoreNLP,97dc3273dc4e8c06cfe873104a3b5d123fa4f908,Move punctuation methods to Characters class; refactor ArabicFeatureFactory for speed; extract n-gram features for all characters,https://github.com/stanfordnlp/CoreNLP/commit/97dc3273dc4e8c06cfe873104a3b5d123fa4f908
133,133.0,133.0,stanfordnlp/CoreNLP,38505fd1942865ce71d76e02864f18a6648f08a2,Move punctuation methods to Characters class; refactor ArabicFeatureFactory for speed; extract n-gram features for all characters,https://github.com/stanfordnlp/CoreNLP/commit/38505fd1942865ce71d76e02864f18a6648f08a2
134,134.0,134.0,stanfordnlp/CoreNLP,b930f5ef7eb2327b18b8cd67ecaeff7192bf3587,merged remote branch refactor_dropout,https://github.com/stanfordnlp/CoreNLP/commit/b930f5ef7eb2327b18b8cd67ecaeff7192bf3587
135,135.0,135.0,stanfordnlp/CoreNLP,6a06203e29e3796306bd6e9c677e2156d40109ec,merged remote branch refactor_dropout,https://github.com/stanfordnlp/CoreNLP/commit/6a06203e29e3796306bd6e9c677e2156d40109ec
136,136.0,136.0,stanfordnlp/CoreNLP,61f601a277f2d51073f1b354d10091c5a0c26f07,Refactor AnnotationSource interface from class and start organizing readers into data directory.,https://github.com/stanfordnlp/CoreNLP/commit/61f601a277f2d51073f1b354d10091c5a0c26f07
137,137.0,137.0,stanfordnlp/CoreNLP,a2fdbf513ab2aa43bf826bad5119f8aec18e64fc,Refactor AnnotationSource interface from class and start organizing readers into data directory.,https://github.com/stanfordnlp/CoreNLP/commit/a2fdbf513ab2aa43bf826bad5119f8aec18e64fc
138,138.0,138.0,stanfordnlp/CoreNLP,3f23ad98ef0ebf5bb051b69b0d1da853b8a67209,Reasonably significant Redwood refactoring.,https://github.com/stanfordnlp/CoreNLP/commit/3f23ad98ef0ebf5bb051b69b0d1da853b8a67209
139,139.0,139.0,stanfordnlp/CoreNLP,5612d12382bfff0af6eb2d5f2d8dfab4fb9d86fd,Reasonably significant Redwood refactoring.,https://github.com/stanfordnlp/CoreNLP/commit/5612d12382bfff0af6eb2d5f2d8dfab4fb9d86fd
140,140.0,140.0,stanfordnlp/CoreNLP,50caa7395470bde6bd738cff7a6b87ecc09609f1,Refactor SolrIndexer into generic part and solr specific part.,https://github.com/stanfordnlp/CoreNLP/commit/50caa7395470bde6bd738cff7a6b87ecc09609f1
141,141.0,141.0,stanfordnlp/CoreNLP,0543fc1cfa53fc8b02569c388344e8d67c1c30ab,Refactor SolrIndexer into generic part and solr specific part.,https://github.com/stanfordnlp/CoreNLP/commit/0543fc1cfa53fc8b02569c388344e8d67c1c30ab
142,142.0,142.0,stanfordnlp/CoreNLP,49e771aa64f4bd05f7b9f74ab000a7bddd47e8e1,Mark CorefGraphAnnotation as deprecated and have refactor is speaker same rule logic.,https://github.com/stanfordnlp/CoreNLP/commit/49e771aa64f4bd05f7b9f74ab000a7bddd47e8e1
143,143.0,143.0,stanfordnlp/CoreNLP,d5b259cf4622fdb6b8663b0ceba5808d603ce122,Mark CorefGraphAnnotation as deprecated and have refactor is speaker same rule logic.,https://github.com/stanfordnlp/CoreNLP/commit/d5b259cf4622fdb6b8663b0ceba5808d603ce122
144,144.0,144.0,stanfordnlp/CoreNLP,c3ef5f8ad3e30768eb80299238f91a71fcfa5621,Update json-simple. Refactoring of static methods used to access lucene out of IndexExtractor and LucenePipelineCacher into KBPLuceneIndex.,https://github.com/stanfordnlp/CoreNLP/commit/c3ef5f8ad3e30768eb80299238f91a71fcfa5621
145,145.0,145.0,stanfordnlp/CoreNLP,0d2457e639b5bb992144e62c5e9cd6b0da13a9e0,Update json-simple. Refactoring of static methods used to access lucene out of IndexExtractor and LucenePipelineCacher into KBPLuceneIndex.,https://github.com/stanfordnlp/CoreNLP/commit/0d2457e639b5bb992144e62c5e9cd6b0da13a9e0
146,146.0,146.0,stanfordnlp/CoreNLP,ff4e102ed8cc5bdf29414533d528961057bf579f,Hack CleanXmlAnnotator.java to store utterance/speaker information from XML. Hack dcoref to use stored utterance information. Minor refactoring and spelling corrections.,https://github.com/stanfordnlp/CoreNLP/commit/ff4e102ed8cc5bdf29414533d528961057bf579f
147,147.0,147.0,stanfordnlp/CoreNLP,a4c7005c7635595961169e410a7d0e6d86d082a3,Hack CleanXmlAnnotator.java to store utterance/speaker information from XML. Hack dcoref to use stored utterance information. Minor refactoring and spelling corrections.,https://github.com/stanfordnlp/CoreNLP/commit/a4c7005c7635595961169e410a7d0e6d86d082a3
148,148.0,148.0,stanfordnlp/CoreNLP,e222d905be72ae231c88c3e63f711d61782a950c,Refactored test infrastructure a bit,https://github.com/stanfordnlp/CoreNLP/commit/e222d905be72ae231c88c3e63f711d61782a950c
149,149.0,149.0,stanfordnlp/CoreNLP,b91850ff904bb99f8ab2b4761390c1c93844080b,Refactored test infrastructure a bit,https://github.com/stanfordnlp/CoreNLP/commit/b91850ff904bb99f8ab2b4761390c1c93844080b
150,150.0,150.0,stanfordnlp/CoreNLP,e7a8a4b7d2ec6ba784d1661e43cfa8c8bd3c0eb6,Merge branch 'master' into service-refactor,https://github.com/stanfordnlp/CoreNLP/commit/e7a8a4b7d2ec6ba784d1661e43cfa8c8bd3c0eb6
151,151.0,151.0,stanfordnlp/CoreNLP,19705e112f75b80711989fb7afe0f0aab72c20e2,Merge branch 'master' into service-refactor,https://github.com/stanfordnlp/CoreNLP/commit/19705e112f75b80711989fb7afe0f0aab72c20e2
152,152.0,152.0,datacleaner/DataCleaner,59f39c7b95306a982a09cb8e24d27c134a16b84a,"Refactored components to have a ""Training analyzer"" per algorithm.

This allows us to have much more specific hyper parameters which apply
to the particular algorithm instead of trying to make a
one-size-fits-all parameter selection.",https://github.com/datacleaner/DataCleaner/commit/59f39c7b95306a982a09cb8e24d27c134a16b84a
153,153.0,153.0,datacleaner/DataCleaner,f4576dbbc10278509ad1a36dfee6e495a8313155,"#1684 PlainSearchReplaceTransformer case-insensitive mode (#1685)

* #1684 PlainSearchReplaceTransformer can work in case-insensitive mode.

* Property ignoreCaseSensitivity was renamed to caseSensitive (and proper refactoring).",https://github.com/datacleaner/DataCleaner/commit/f4576dbbc10278509ad1a36dfee6e495a8313155
154,154.0,154.0,datacleaner/DataCleaner,794a699cb854a507f3173e6577a819c7094cc678,"Feature/1674 column meaning (#1675)

Refactored ColumnMeaning feature(s) for input columns mapping so that every wizard can provide its own HasColumnMeaning (interface) implementation.

This should make combo-box content more usable leaving unneeded general items out. The combo-box content was also made group-aware.",https://github.com/datacleaner/DataCleaner/commit/794a699cb854a507f3173e6577a819c7094cc678
155,155.0,155.0,datacleaner/DataCleaner,7dbee06d0cdf7fd783bf3e1c72464c8b1ff26d8d,"Feature/1631 hashing transformer (#1632)

* #1631 Hash transformer.

* CRC32.

* Icons.

* Refactoring.

* Code style.

* CheckStyle fix.

* New icon.",https://github.com/datacleaner/DataCleaner/commit/7dbee06d0cdf7fd783bf3e1c72464c8b1ff26d8d
156,156.0,156.0,datacleaner/DataCleaner,53c2328efc1634d04396e6a6283643dcf42489ea,"Integration tests for sample jobs (#1594)

* Added integration test which test the sampe ""Copy employees to customer table"" job and changed configuration so integration tests are actually run by Maven during integration-test phase.

* - Refactored running of test so it runs the job in a separate process.
- Refactored checking of results to be able to validate multiple results which are in a random order.
- Added Customer age analysis job.

* Added test for ""Customeer filter"" job and made test for ""Customer age analysis"" less strict.

* Added ""Customer profiling"" sample job test.

* Added ""Denormalize order totals and present as stacked area chart"" sample job test.

* Added ""Export of Orders data mart"" sample job test.

* Added ""Job title analytics"" sample job test and refactored the manner in which the result is fetched when running of job in separate process to avoid deadlock when the job itself also reads from an InputStream.

* Added ""OrderDB Customers and Employees union"" sample job test and refactored code a bit to remove some more unstable output from being validated.

* Add ""US Customer STATE check"" sample job test.

* Made check a little less strict because of https://github.com/datacleaner/DataCleaner/issues/1596.

* Extracted helper class containing methods which are reusable by other modules/projects.",https://github.com/datacleaner/DataCleaner/commit/53c2328efc1634d04396e6a6283643dcf42489ea
157,157.0,157.0,datacleaner/DataCleaner,d8d509342b30568a303d2b93d50eb07bc6b47933,"Add docker integration test (#1553)

* Added a profile with the docker-maven-plugin to build, start and stop docker image using a Dockerfile, a basic integration test which just checks if a 200 status is returned when executing a GET on the base datacleaner monitor URL and extended .travis.yml so it uses the docker service and runs the added profile.

* Removed docker service to see if that has an impact on memory usage related failures of build.

* Reinstated docker service and changed maven memory settings (adding maxpermsize setting to see a message is logged that it is not used, which indicates the MAVEN_OPTS are actually used).

* Test what happens when skipping test phase.

* Skipping tests in another manner.

* Instead of skipping test phase, removed failing test.

* Revert ""Instead of skipping test phase, removed failing test.""

This reverts commit 05dd1395fc85319ec844cddfdafd877e0b9aca4d.

* Revert ""Skipping tests in another manner.""

This reverts commit c8cdcae9b929fa51fa310f0c5c9f53f85922a9f2.

* Revert ""Test what happens when skipping test phase.""

This reverts commit 9bfe76369770cc4508f2f41423ed0bebd2e0e194.

* See what happens if I remove the docker service.

* Revert ""See what happens if I remove the docker service.""

This reverts commit b92139c84e7b8978c825cac2a56f47168f8332b7.

* Added debug info.

* Moved debugging info to other class.

* Added some more logging.

* And even more logging.

* Removed some overabundant logging and the docker service, to see its effect.

* Reninstated Docker service and added some more logging.

* Added even more logging.

* Added more logging.

* And yet again more logging.

* Clear the static _lastKnownConfiguration field on the HdfsHelper after running the SparkConfigurationReaderInterceptorTest to make sure no other unit tests are affected by it having been setup in the test.

* Revert ""And yet again more logging.""

This reverts commit e01a81ca0f77134c786d48ca4488dd19f12c9252.

* Revert ""Added more logging.""

This reverts commit 4413d62d7ca7b5f9905555b86709355209a7997a.

* Revert ""Added even more logging.""

This reverts commit 5fd76861f0f999bc03533f9451624336ab24bd4d.

* Revert ""Reninstated Docker service and added some more logging.""

This reverts commit f3e17ad377f343a43afa56b8ce82493a1ac1d12f.

* Revert ""Removed some overabundant logging and the docker service, to see its effect.""

This reverts commit ca70a266a7efdea9e3a40730bec6225ae8891035.

* Revert ""And even more logging.""

This reverts commit 94f1017c3ef322d962a600beb5d3bcbaf14a8e3a.

* Revert ""Added some more logging.""

This reverts commit 230742c07f3860493d860f04ac8988a019496bc2.

* Revert ""Moved debugging info to other class.""

This reverts commit 03bb29b639687d42e37ec53a424ff2bd4b00a2ff.

* Revert ""Added debug info.""

This reverts commit 78c42176d0229f7fcf1ab387080089fd965edc50.

* Refactored based on experiences and added some real stuff to the tests.

* Refactored spaces to tabs in xml files.
Removed DOCKER_HOST_NAME environment variable.
Refactored unit test so they no longer extend a base class, but use a junit Rule instead.

* Added header

* Show full stack trace of the errors in maven build.

* Revert ""Show full stack trace of the errors in maven build.""

This reverts commit d3e358cbe2876e669bd59c22407cb081d19657c9.

* For some reason, we don't get a value for the DOCKER_HOST environment variable on Travis. ""localhost"" seems the logical default to fallback to, as it is the default for Travis, Jenkins, Linux and Windows 10 Docker containers.",https://github.com/datacleaner/DataCleaner/commit/d8d509342b30568a303d2b93d50eb07bc6b47933
158,158.0,158.0,datacleaner/DataCleaner,4da4490306c2e0193572450810cb9f185a72cf13,"Monitor reference data dialogs (#1479)

* 1352 Reference data in Monitor, conf.xml upload.

* #1352 Reference data wizards (GUI).

* #1352 Reference data wizards: FileDictionary and FileSynonymCatalog.

* #1352 Reference data wizards: DatastoreDictionary.

* #1352 Reference data wizards: DatastoreDictionary element in xml.

* #1352 Reference data wizards: datastore types shared code, correction of configuration update.

* #1352 Reference data wizards: correction of reference data removal.

* #1352 Reference data wizards: correction of datastore synonym catalog; code sharing refactoring.

* #1352 Reference data wizards: DatastoreHelper refactoring.

* #1352 Reference data wizards: removing 'p' from Regexp* names.

* #1352 Reference data in monitor: XML support in configuration for RegexSwapStringPattern.

* #1352 Reference data in monitor: correction of creating and removing regex-swap-string-pattern.

* #1352 Reference data in monitor: user input checking.

* #1352 Reference data in monitor: separate button for each reference data sub-type (new dictionary, new synonym catalog, new string pattern).

* #1352 Reference data in monitor: basic junit tests.

* #1352 Reference data wizards in monitor: css styling of input fields (max width); checking unique name; ""Reference data"" item in main menu; Regex swap string pattern wizard -- correction of page indexes.

* #1352 Reference data dialogs in Monitor: new lines at the end of the files; refactoring;

* #1352 Reference data dialogs in Monitor: Tests correction.

* #1352 Reference data at Monitor: renaming of Page<Number> classes (no numbers anymore).",https://github.com/datacleaner/DataCleaner/commit/4da4490306c2e0193572450810cb9f185a72cf13
159,159.0,159.0,datacleaner/DataCleaner,12eb373a73ffb152619a985bbdae53ea91cdb42b,"Bug/1470 removing linked component breaks job (#1482)

* Register a TransformerChangeListener when an input column is configured to use a on output column's value of a transformer. This TransformerChangeListener synchronizes the values of the input columns of its ComponentBuilder when the transformer fires a configuration changed, removed or output changed event.

* Implementation didn't work with analyzers with input columns which escalate to multiple jobs, mainly because the AnalyzerComponentBuilder implemented its own addInputColumn in removeInputColumn methods which were aimed at setting the _escalatingInputColumns values, but which didn't regiser the newly introduced listener. Therefore removed these so the setConfiguredProperties method is now also invoked for these cases. This was better then registering the listener from the now removed methods, because these also failed to update the underlying bean correctly.

Also did a small change to the AbstractComponentBuilder to make sure properties are always removed correctly (now non array properties could cause problems because of the removal algorithm.)

* Refactored a bit so that when you have a ComponentBuilder which uses output columns produces by different transformers in it input columns, listeners are registered for all of them.

* Make sure the no duplicate listeners are registered.

* Added a method to make sure properties which depend on a property (through the @MappedProperty annotation) are synchronized when a property is updated.

* Putting values in map under hashcode of objects to make sure we can get them back even when the real objects are different, which can occur but shouldn't be a problem when synchronizing.

* Refactored handling of ""escalating input columns"" in analyzers, so that these trigger the registering of the necessary listener themselves. Also reinstated the addInputColumn and removeInputColumn methods on the AnalyzerComponentBuilder in the process. And added some newlines add the end of the Mock java test classes.

* Refactored based on feedback. Mainly added some ""final"" modifiers and a hashCode() method.",https://github.com/datacleaner/DataCleaner/commit/12eb373a73ffb152619a985bbdae53ea91cdb42b
160,160.0,160.0,datacleaner/DataCleaner,a7eccf860fb4ac9afd62fab3cc798ff8eee20142,"#1372 OpenAnalysisJobAsTemplateDialog: refactoring, junit test.",https://github.com/datacleaner/DataCleaner/commit/a7eccf860fb4ac9afd62fab3cc798ff8eee20142
161,161.0,161.0,datacleaner/DataCleaner,c8986188b8a4bd6cc2b6bfc1901c522f3d6d326e,"Extended Csv datastore functionality so you can now override the column names of the Csv datastore in the configuration of the datastore.

Note that this doesn't actually work yet with the current metamodel release (4.5.4)

Also refactored the CustomColumnNamesWidget so we can add listeners to components within the widget.",https://github.com/datacleaner/DataCleaner/commit/c8986188b8a4bd6cc2b6bfc1901c522f3d6d326e
162,162.0,162.0,datacleaner/DataCleaner,0a7288dbfe9fac28365e8bb0242258ec75972bf2,"Merge pull request #1412 from datacleaner/feature/1411-right-panel-refactor

Feature/1411 right panel refactor",https://github.com/datacleaner/DataCleaner/commit/0a7288dbfe9fac28365e8bb0242258ec75972bf2
163,163.0,163.0,datacleaner/DataCleaner,3387253d016291cb1e52aa2c67569cf7c0c030ab,first step of refactoring right information panel,https://github.com/datacleaner/DataCleaner/commit/3387253d016291cb1e52aa2c67569cf7c0c030ab
164,164.0,164.0,datacleaner/DataCleaner,fdcadf4d8a9042517e83b3128e90211d15384a73,"Specify replacement properties in job invocation web service call. (#1358)

* Made it possible to pass a reference to a properties file when posting to the trigger service. This properties file is applied to the configuration used when executing the job in the same manner as you can applies a properties file when running a job from the command line.

* Refactored job triggering web service to consume multipart/form-data so you no longer post a path to a properties file, but you actually post a file (a properties file that is). As a result of this, instead of passing the path of the file through in different method calls, now we pass a Map of the properties in the properties file. I choose to convert the Properties object to a Map in the JobTriggeringController to avoid problems with google.gwt.

Also removed the overloaded getAnalyzerBeansConfiguration method from ConfigurationCache, as it doesn't cache the DataCleanerConfiguration it produces (and it had no reason to based its arguments). Added a package protected readConfiguration method instead, which is only called from the TenantContextImpl. Because the ConfigurationCache has an InjectionManagerFactory as a field member it seemed more logic to create an overloaded method on the ConfigurationCache, then to create something similar on the TenantContextImpl.

* Removed JobTriggerConfiguration class which is no longer needed after previous refactoring commit.

* Added a unit test to test if the override properties are applied as expected when invoking TenantContextImpl#getConfiguration(Map<String, String) and an integration test to test if they are applied as expected when invoking the JobTriggeringController with a post method.

* Refactored JobTriggeringController, so you now can not only post using the multipart/form-data content-type, but also using the text/plain and application/json content-types.",https://github.com/datacleaner/DataCleaner/commit/fdcadf4d8a9042517e83b3128e90211d15384a73
165,165.0,165.0,datacleaner/DataCleaner,fe4cf2f854fe25fb81c8be7a5734c773e1f16f7e,Scheduled tasks. There will be one thread to run scheduled tasks. And also refactor of get method for remote server status.,https://github.com/datacleaner/DataCleaner/commit/fe4cf2f854fe25fb81c8be7a5734c773e1f16f7e
166,166.0,166.0,datacleaner/DataCleaner,827ede5045a225ac6ee5a4abbe85a82f3d5ea4c4,Issue #1263: Refactor and test fix,https://github.com/datacleaner/DataCleaner/commit/827ede5045a225ac6ee5a4abbe85a82f3d5ea4c4
167,167.0,167.0,datacleaner/DataCleaner,67418eaa9f4afceebe7c0fedf655b82d50c36431,"Changed the max number of retries for trying to connect with an HDFS to 1 (where the default is 45) when selecting a File from an HDFS and refactored the code a bit, so no more attempts to retrieve files from the HDFS are done if the scanning of the Hadoop config files isn't successful.",https://github.com/datacleaner/DataCleaner/commit/67418eaa9f4afceebe7c0fedf655b82d50c36431
168,168.0,168.0,datacleaner/DataCleaner,2d402440862bc693bfd43c0bd6d1d8297d7d96a4,Refactor for all annotation in transformer class,https://github.com/datacleaner/DataCleaner/commit/2d402440862bc693bfd43c0bd6d1d8297d7d96a4
169,169.0,169.0,datacleaner/DataCleaner,c54fdbaf0552a59f4c97680313e3ab358bddb6e1,Issue #1219: Fixed be refactoring AnalyzerComponentBuilder,https://github.com/datacleaner/DataCleaner/commit/c54fdbaf0552a59f4c97680313e3ab358bddb6e1
170,170.0,170.0,datacleaner/DataCleaner,27ed3abf0f69c25c0f7165061949c64608c29ec4,* IconUtils: refactoring of getDescriptorIcon.,https://github.com/datacleaner/DataCleaner/commit/27ed3abf0f69c25c0f7165061949c64608c29ec4
171,171.0,171.0,datacleaner/DataCleaner,66560afa6ca34fd9216dc776df2101223b7c8c23,"Refactoring for the contract change on the Batched UpdateData MDM REST
service.",https://github.com/datacleaner/DataCleaner/commit/66560afa6ca34fd9216dc776df2101223b7c8c23
172,172.0,172.0,datacleaner/DataCleaner,944ab69453897b30acc6a8d5b3875747d8dea2a6,Refactored DeleteBuilder and added some additional checks.,https://github.com/datacleaner/DataCleaner/commit/944ab69453897b30acc6a8d5b3875747d8dea2a6
173,173.0,173.0,datacleaner/DataCleaner,5a4aa90261354577aa5538b1a80b6025c99c72ae,Refactor CasHttpMonitorClient,https://github.com/datacleaner/DataCleaner/commit/5a4aa90261354577aa5538b1a80b6025c99c72ae
174,174.0,174.0,datacleaner/DataCleaner,84a470b5bae6c799db326792573a5754e5f0e0f5,Using default value on client side (RemoteTransformer). Also refactored property descriptors to avoid code duplicates,https://github.com/datacleaner/DataCleaner/commit/84a470b5bae6c799db326792573a5754e5f0e0f5
175,175.0,175.0,datacleaner/DataCleaner,cedd4cafab8708edcee6ae5facfdf20e21385d25,"Merge pull request #665 from datacleaner/feature/row-processing-publisher-refactor

Refactor of RowProcessingPublisher and related classes",https://github.com/datacleaner/DataCleaner/commit/cedd4cafab8708edcee6ae5facfdf20e21385d25
176,176.0,176.0,datacleaner/DataCleaner,f84d7cf6d7a93365704fd3aaa00371a34ba0cf94,Handled PR review feedback. Refactor of runRowProcessing(..),https://github.com/datacleaner/DataCleaner/commit/f84d7cf6d7a93365704fd3aaa00371a34ba0cf94
177,177.0,177.0,datacleaner/DataCleaner,596e22db8392347904826fc8e4b4b50581352cf8,"Refactor of RowProcessingPublisher and related classes

RowProcessingPublisher was made into an interface. Two implementations
(and an abstract class) are there now: SourceTableRowProcessingPublisher
and OutputDataStreamRowProcessingPublisher.",https://github.com/datacleaner/DataCleaner/commit/596e22db8392347904826fc8e4b4b50581352cf8
178,178.0,178.0,datacleaner/DataCleaner,35c6a5af546d129b6dc4246886778cb54b672717,Some refactoring of DataHub connection code. Needs more work.,https://github.com/datacleaner/DataCleaner/commit/35c6a5af546d129b6dc4246886778cb54b672717
179,179.0,179.0,datacleaner/DataCleaner,33ac0456692dad39a296213e8b70df103ca1380a,"DATACLEANER-MONITOR-SERVICES
* ComponentCacheMapImpl: refactoring.
* TenantContextFactory: iterator for contexts of active tenants was added.",https://github.com/datacleaner/DataCleaner/commit/33ac0456692dad39a296213e8b70df103ca1380a
180,180.0,180.0,datacleaner/DataCleaner,34ee02495c5bcfc808bb8d2bcafbbc8cda13208d,Refactored initialization of String list,https://github.com/datacleaner/DataCleaner/commit/34ee02495c5bcfc808bb8d2bcafbbc8cda13208d
181,181.0,181.0,datacleaner/DataCleaner,1746039609035b3269bf84319166d46347d1e6ad,Minor refactoring,https://github.com/datacleaner/DataCleaner/commit/1746039609035b3269bf84319166d46347d1e6ad
182,182.0,182.0,datacleaner/DataCleaner,f6733b023a09200bfc024681949ebd02e608e107,"DATACLEANER-MONITOR-API
DATACLEANER-MONITOR-SERVICES
* Refactoring, renaming: componentId or configurationId are now combined to instanceId.",https://github.com/datacleaner/DataCleaner/commit/f6733b023a09200bfc024681949ebd02e608e107
183,183.0,183.0,datacleaner/DataCleaner,80b2fcbb5999708f8902e0ec197a79a26b237abc,Refactored,https://github.com/datacleaner/DataCleaner/commit/80b2fcbb5999708f8902e0ec197a79a26b237abc
184,184.0,184.0,datacleaner/DataCleaner,8978d12ebcbe139798476f1557e55c7410c22ccd,"Merge pull request #589 from datacleaner/feature/571-dc-spark-improvements

Various refactorings to DC spark module",https://github.com/datacleaner/DataCleaner/commit/8978d12ebcbe139798476f1557e55c7410c22ccd
185,185.0,185.0,datacleaner/DataCleaner,949711354f10794b1df724e9162c850749bc4e0e,"Various refactorings to Spark module

Renamed a few classes.
Made launcher (now runner) implement AnalysisRunner.
Used pair-based mapping and reduction to keep component state between
stream steps.
Consolidated file-loading to a single file: SparkJobContext.
Moved main method to separate class to allow composition of job runs.",https://github.com/datacleaner/DataCleaner/commit/949711354f10794b1df724e9162c850749bc4e0e
186,186.0,186.0,datacleaner/DataCleaner,905a906e21b12f57647970ec5264eafcaee9818d,DCDQ-153 - providing info about components properties - refactored the returned format and added type info.,https://github.com/datacleaner/DataCleaner/commit/905a906e21b12f57647970ec5264eafcaee9818d
187,187.0,187.0,datacleaner/DataCleaner,d83d50f21bc5a17845e7b974ce16103dcadaaa65,DCDQ-156 - corrected previous error in manual refactor - checking annotation for forbidden properties.,https://github.com/datacleaner/DataCleaner/commit/d83d50f21bc5a17845e7b974ce16103dcadaaa65
188,188.0,188.0,datacleaner/DataCleaner,3c094ddce5a65d1e861b36283e55de575b2b18ca,"DATACLEANER-MONITOR-SERVICES
* ComponentHandler: refactoring revert.",https://github.com/datacleaner/DataCleaner/commit/3c094ddce5a65d1e861b36283e55de575b2b18ca
189,189.0,189.0,datacleaner/DataCleaner,8f4804b114e8573c4d54b3f24eb1bfd66467a6dc,"Merge pull request #545 from datacleaner/feature/543-refactor-registering-new-datastores

Feature/543 refactor registering new datastores",https://github.com/datacleaner/DataCleaner/commit/8f4804b114e8573c4d54b3f24eb1bfd66467a6dc
190,190.0,190.0,datacleaner/DataCleaner,495d8b4a910bf85b3c7cf7da586c3db8bd174ceb,Merge branch 'master' into feature/543-refactor-registering-new-datastores,https://github.com/datacleaner/DataCleaner/commit/495d8b4a910bf85b3c7cf7da586c3db8bd174ceb
191,191.0,191.0,datacleaner/DataCleaner,9718cc8ab31212c1328dcf73e97b00ded0937ec9,"Merge branch 'master' into
feature/543-refactor-registering-new-datastores

Conflicts:
	engine/core/src/main/java/org/datacleaner/database/DatabaseDriverCatalog.java",https://github.com/datacleaner/DataCleaner/commit/9718cc8ab31212c1328dcf73e97b00ded0937ec9
192,192.0,192.0,datacleaner/DataCleaner,525988f214cdc8247093dd01c86e2f760ece1d86,"Refactored the getSchema, getTable and getColumn methods into one
getSchemas method which now returns the complete schema, table and
column hierarchy as one json",https://github.com/datacleaner/DataCleaner/commit/525988f214cdc8247093dd01c86e2f760ece1d86
193,193.0,193.0,datacleaner/DataCleaner,559cdb6f9c6edb3fc5736045350dcf2e7a51be57,"Refactoring ""Database"" and ""Cloud service"" buttons under the dropzone.",https://github.com/datacleaner/DataCleaner/commit/559cdb6f9c6edb3fc5736045350dcf2e7a51be57
194,194.0,194.0,datacleaner/DataCleaner,5c356ebf07dfa8267abbe084141acb34701c8ba9,"Manual definition of available datastores centralized in
AbstractDatastoreCatalog (does not include driver-based datastores and
the ones from ""more datastores"" button).

Refactored DatastoreManagementPanel and SingleDatastorePropertyWidget to
use getAvailableDatastoreDescriptors() instead of manual enumeration.",https://github.com/datacleaner/DataCleaner/commit/5c356ebf07dfa8267abbe084141acb34701c8ba9
195,195.0,195.0,datacleaner/DataCleaner,c99f220e719b8b39a97bd5e43046dfcf36f7d762,"Adding driver-dependent datastores.

Refactoring ActionListener to be a method instead of a private class.",https://github.com/datacleaner/DataCleaner/commit/c99f220e719b8b39a97bd5e43046dfcf36f7d762
196,196.0,196.0,datacleaner/DataCleaner,5f161aa09213d3893cb600286309c620f4e364b6,"Issue #506: Big refactor of RowAnnotationFactor implementations to get
memory footprint under control. Introducing ""max sets"" flag.",https://github.com/datacleaner/DataCleaner/commit/5f161aa09213d3893cb600286309c620f4e364b6
197,197.0,197.0,datacleaner/DataCleaner,3f403a73f3772eb89a4d9a332e14cee3f7e4a182,"Made ""create table"" functionality not apply to CSV datastores.
Refactored SchemaMouseListener to avoid too long method.",https://github.com/datacleaner/DataCleaner/commit/3f403a73f3772eb89a4d9a332e14cee3f7e4a182
198,198.0,198.0,datacleaner/DataCleaner,88e1a3183696688193f67f34f393e159e3947081,Refactored TableMouseListener to avoid single long method,https://github.com/datacleaner/DataCleaner/commit/88e1a3183696688193f67f34f393e159e3947081
199,199.0,199.0,datacleaner/DataCleaner,7cf9f26b329f94c64764ec16d4fed4818e4bfb29,"Merge pull request #455 from datacleaner/feature/sanitize-jaxb-job-reader-methods

JaxbJobReader refactor",https://github.com/datacleaner/DataCleaner/commit/7cf9f26b329f94c64764ec16d4fed4818e4bfb29
200,200.0,200.0,datacleaner/DataCleaner,17de2637e77f93543726e787dc40b74504dd8ac8,"Refactored the JaxbJobReader to have more isolated methods and to reuse
methods for component initialization",https://github.com/datacleaner/DataCleaner/commit/17de2637e77f93543726e787dc40b74504dd8ac8
201,201.0,201.0,datacleaner/DataCleaner,e4798855872a5dc005ee40e6e06aab7cf38f02fe,"Refactor: putting the test files in target folder instead of working
dir.",https://github.com/datacleaner/DataCleaner/commit/e4798855872a5dc005ee40e6e06aab7cf38f02fe
202,202.0,202.0,datacleaner/DataCleaner,7387baf67ba42bb9dc60bb1100ffeb9bd8c7ab74,"Refactoring the test to remove the test file even if the test fails
(tearDown method).",https://github.com/datacleaner/DataCleaner/commit/7387baf67ba42bb9dc60bb1100ffeb9bd8c7ab74
203,203.0,203.0,datacleaner/DataCleaner,b907e804a9765dbdd77488e0cd7d1c6ca6557993,Minor refactor to have removeUnnecesaryEdges incapsulate the for-loop,https://github.com/datacleaner/DataCleaner/commit/b907e804a9765dbdd77488e0cd7d1c6ca6557993
204,204.0,204.0,datacleaner/DataCleaner,0f83c05c733f498f8515abab1d6e85b98a8a6f8f,Refactor CategorizationResultSwingRenderer to allow easy reuse.,https://github.com/datacleaner/DataCleaner/commit/0f83c05c733f498f8515abab1d6e85b98a8a6f8f
205,205.0,205.0,datacleaner/DataCleaner,e5835f2f0fe5222c316b7ec0695acc9f527bf287,Minor refactorings to searchbox instantiation,https://github.com/datacleaner/DataCleaner/commit/e5835f2f0fe5222c316b7ec0695acc9f527bf287
206,206.0,206.0,datacleaner/DataCleaner,34ee38b7473653befe36148ebc0638b5d06c9b83,Refactoring DataCleanerHome.,https://github.com/datacleaner/DataCleaner/commit/34ee38b7473653befe36148ebc0638b5d06c9b83
207,207.0,207.0,datacleaner/DataCleaner,ccabe966ea58d9ad841a4bfdb3abd4b8c0593fde,Refactored various components to make them easier for reuse,https://github.com/datacleaner/DataCleaner/commit/ccabe966ea58d9ad841a4bfdb3abd4b8c0593fde
208,208.0,208.0,datacleaner/DataCleaner,1258b7133db03469a2c0f83b1374efb465a12626,"Refactored AnalysisJobBuilderWindowImpl to have ""classic view"" in
separate class - JobClassicView",https://github.com/datacleaner/DataCleaner/commit/1258b7133db03469a2c0f83b1374efb465a12626
209,209.0,209.0,datacleaner/DataCleaner,1477597e996d4627599dfbd2dc08198c25518ffe,Refactor and clean up code.,https://github.com/datacleaner/DataCleaner/commit/1477597e996d4627599dfbd2dc08198c25518ffe
210,210.0,210.0,datacleaner/DataCleaner,a30f3f9bb6c709453776112367b17a410a672a4d,"refactoring , created separate class for different operation on job",https://github.com/datacleaner/DataCleaner/commit/a30f3f9bb6c709453776112367b17a410a672a4d
211,211.0,211.0,datacleaner/DataCleaner,0e1b5919df8c2a48a3a7e1f8e54887750dddd59d,"Refactored button constructors and repeated style-setters into factory
methods",https://github.com/datacleaner/DataCleaner/commit/0e1b5919df8c2a48a3a7e1f8e54887750dddd59d
212,212.0,212.0,datacleaner/DataCleaner,6c1f52de134903780352a0775e9b7fff73e011a0,"Refactored result-modification code: Moved from controller layer to DAO
layer.",https://github.com/datacleaner/DataCleaner/commit/6c1f52de134903780352a0775e9b7fff73e011a0
213,213.0,213.0,datacleaner/DataCleaner,a2c0d7f5d07113ab603b1aaf590f66be0e93b533,Minor refactorings,https://github.com/datacleaner/DataCleaner/commit/a2c0d7f5d07113ab603b1aaf590f66be0e93b533
214,214.0,214.0,datacleaner/DataCleaner,7f1f96438d939db7c05d305d8ea1b547aea9f875,"Refactoring of wizard framework to better distinguish responsibility
between wizard controllers and views (WizardPanel)",https://github.com/datacleaner/DataCleaner/commit/7f1f96438d939db7c05d305d8ea1b547aea9f875
215,215.0,215.0,datacleaner/DataCleaner,c4ddcc940f45b3b5ee5678603a1dde145f3e50de,Refactored code to allow a job to be scheduled after it is created through the JobWizardPanel,https://github.com/datacleaner/DataCleaner/commit/c4ddcc940f45b3b5ee5678603a1dde145f3e50de
216,216.0,216.0,datacleaner/DataCleaner,51a26245095a7cc495ff8625bad5b08f07687452,Changed package structure to move files into the widgets project. Also refactored code to allow a job to be run after it is created through the JobWizardPanel,https://github.com/datacleaner/DataCleaner/commit/51a26245095a7cc495ff8625bad5b08f07687452
217,217.0,217.0,datacleaner/DataCleaner,b8aa9db533e61f914b0a39e344cb38f60987ba4a,Ticket #1096: Refactored value distribution analyzer to place <unique> (and other groups) value counts in composite ValueFrequency objects. This makes charting a lot easier. Charting also applied in Swing renderer.,https://github.com/datacleaner/DataCleaner/commit/b8aa9db533e61f914b0a39e344cb38f60987ba4a
218,218.0,218.0,datacleaner/DataCleaner,0fc7103400888663fc23b0efe488746ca400653e,Refactor some code for better performance,https://github.com/datacleaner/DataCleaner/commit/0fc7103400888663fc23b0efe488746ca400653e
219,219.0,219.0,datacleaner/DataCleaner,d3a8093df4fcc30c85979d92b270b7e03763c6bd,Ticket #877: Small refactoring for the quick analysis wizard.,https://github.com/datacleaner/DataCleaner/commit/d3a8093df4fcc30c85979d92b270b7e03763c6bd
220,220.0,220.0,datacleaner/DataCleaner,427917826f9cec970496cb68b60c9e917eb6c84e,"Ticket #747: Added solution, large refactoring AnalysisListener",https://github.com/datacleaner/DataCleaner/commit/427917826f9cec970496cb68b60c9e917eb6c84e
221,221.0,221.0,datacleaner/DataCleaner,40c592fd83bbd8a473df4623549e17c366e0df87,Ticket #717: Refactorings in PropertyWidget hierarchy. Improved second draft of table lookup panel.,https://github.com/datacleaner/DataCleaner/commit/40c592fd83bbd8a473df4623549e17c366e0df87
222,222.0,222.0,datacleaner/DataCleaner,d3bcc7ebcf7f80865f77a8d7925d4316aae1ac4c,Ticket #717: Refactorings in PropertyWidget hierarchy. Improved second draft of table lookup panel.,https://github.com/datacleaner/DataCleaner/commit/d3bcc7ebcf7f80865f77a8d7925d4316aae1ac4c
223,223.0,223.0,datacleaner/DataCleaner,fff1f434c1e74786e79fe70102e5ab1578c27d83,Ticket #717: Refactorings in PropertyWidget hierarchy. Improved second draft of table lookup panel.,https://github.com/datacleaner/DataCleaner/commit/fff1f434c1e74786e79fe70102e5ab1578c27d83
224,224.0,224.0,datacleaner/DataCleaner,6aa7935498bb75294582ad02dac5b35bef11564f,Ticket #704: Updated DC to comply with refactorings,https://github.com/datacleaner/DataCleaner/commit/6aa7935498bb75294582ad02dac5b35bef11564f
225,225.0,225.0,datacleaner/DataCleaner,3b09094359787ee4e15966ff2639b4f853fc437c,Ticket #688: Fixed refactoring in DataCleaner-core,https://github.com/datacleaner/DataCleaner/commit/3b09094359787ee4e15966ff2639b4f853fc437c
226,226.0,226.0,datacleaner/DataCleaner,4b621ed10c049e7517329ae2ab7e3e1999f1b58c,Ticket #688: Fixed refactoring in DataCleaner-core,https://github.com/datacleaner/DataCleaner/commit/4b621ed10c049e7517329ae2ab7e3e1999f1b58c
227,227.0,227.0,datacleaner/DataCleaner,0f17fd7aee01e0074f585d6f06144ebb69e9c826,Ticket #674: Major refactoring to allow Guice based injections in property widgets,https://github.com/datacleaner/DataCleaner/commit/0f17fd7aee01e0074f585d6f06144ebb69e9c826
228,228.0,228.0,datacleaner/DataCleaner,9035ab04f8329ecc0bbf80b7f7455a4c211b01a2,Preparing release: Minor fixes and refactorings in poms.,https://github.com/datacleaner/DataCleaner/commit/9035ab04f8329ecc0bbf80b7f7455a4c211b01a2
229,229.0,229.0,datacleaner/DataCleaner,238b1e203e8c49e67cfb952c143af65c22fc08e0,Ticket #543: Added window menubar to workbench window. Refactored exit actions and file menu.,https://github.com/datacleaner/DataCleaner/commit/238b1e203e8c49e67cfb952c143af65c22fc08e0
230,230.0,230.0,datacleaner/DataCleaner,1e9e0d5c5f2b61deb3140a0ab184caecfd6f0a98,Minor refactoring to make eager loading behaviour simpler,https://github.com/datacleaner/DataCleaner/commit/1e9e0d5c5f2b61deb3140a0ab184caecfd6f0a98
231,231.0,231.0,datacleaner/DataCleaner,24957195ec10713f736f398dd7f96cbd42552c6c,Ticket #502: Refactored use of name in equals and hashcode in various job classes. Improved display of merged outcome name.,https://github.com/datacleaner/DataCleaner/commit/24957195ec10713f736f398dd7f96cbd42552c6c
232,232.0,232.0,datacleaner/DataCleaner,de07fdf495f38b000983c5bde409beb48811cd03,Ticket #466: Added dialogs for text-based dictionaries and simple dictionaries. Refactored file choosers.,https://github.com/datacleaner/DataCleaner/commit/de07fdf495f38b000983c5bde409beb48811cd03
233,233.0,233.0,datacleaner/DataCleaner,6b1e896146f6972aaff3cb8c00411e4717fec05d,Refactored WidgetFactory and removed WidgetBuilder.,https://github.com/datacleaner/DataCleaner/commit/6b1e896146f6972aaff3cb8c00411e4717fec05d
234,234.0,234.0,datacleaner/DataCleaner,6a500ee8e2d28af0dc06cf2c9648321b346b0200,"Refactored WidgetFactory and removed WidgetBuilder.
Ticket #431: Added first draft for a login screen.",https://github.com/datacleaner/DataCleaner/commit/6a500ee8e2d28af0dc06cf2c9648321b346b0200
235,235.0,235.0,datacleaner/DataCleaner,d53095b892198abcda5edd17586390bb1e6f77d7,"Ticket #450: Fixed in a 'quick n dirty' way, so it should probably be refactored once someone has the time to do so.",https://github.com/datacleaner/DataCleaner/commit/d53095b892198abcda5edd17586390bb1e6f77d7
236,236.0,236.0,datacleaner/DataCleaner,53fc25789b4cf6c420037bf06fdd1e39853c7137,"Ticket #267: Multithreaded executor implemented. Major refactorings to ResultWindow, ExecutionConfigurationDialog and IProgressObserver instances.",https://github.com/datacleaner/DataCleaner/commit/53fc25789b4cf6c420037bf06fdd1e39853c7137
237,237.0,237.0,datacleaner/DataCleaner,6e3fd395edeb4f7b5c6698f76e7f3aabafa52d4b,"Ticket #262: Major refactorings to result window and log/status tab.
Removed DataCleaner-webmonitor from parent POM (not included in regular builds)",https://github.com/datacleaner/DataCleaner/commit/6e3fd395edeb4f7b5c6698f76e7f3aabafa52d4b
238,238.0,238.0,deeplearning4j/deeplearning4j,01f340ea13c4713e00f8dde23a64af75f092d283,"Misc 2d grad fixes, Spark test fixes test refactoring (#9735)

* Fix up create_view tests, assign operation for views

* Misc shape related fixes for gradients and tests related to old 2d assumption with vectors

* Ignore missing op

* Fix updater get with 1d standardization

* Fix up another 1d test case

* Update TestRegressionTest080.java

* Update SlicingTests.java

* Fix up booleanindexing backtracklinesearch test cases

* Fix up test assertion

* Remove old tensor array logic for tensorarray remove, fix test

* Address nits, remove noninplacevalidation listener

* Remove tests with old assumptions, migrate arrowserde test to platform-tests

* Add testresources profile to nd4j-presets-common

* More test collapsing

* Collapse tests

* Remove old profiles

* Delete old aurora backend, misc pom clean up

* Delete old test resources profiles

* Update datavec-api test locations

* More test migrations

* More tests

* Migrate tests for spark

* Collapse spark parameter server tests

* Remove old tests

* Collapse omnihub

* Rename tests for compilation errors

* Graph package moving

* Add missing dep

* nlp test adjustments

* Update names in platform-tests datavec local modules

* Add missing nlp imports

* Remove hard coded test, add deepwalk import

* Update pom.xml

* Update pom.xml

* Update pom.xml

* Add mockito dep

* Update TestGraphLoading.java

* Update pom.xml

* Remove deprecated tests, add missing dep

* Clean up intellij accidental refactoring

* Update AeronUdpTransportTest.java

* Update EndingPreProcessorTest.java

* More test updates

* More test refactoring

* More assertion clean up, remove deprecated test

* More test clean up

* Remove more deprecated tests

* More test updates

* More test updates

* More tests

* Update WeightedWalkerTest.java

* Update spark versions, dependencies

* Handle spark upgrade, add a set closeable false to prevent spark from closing arrays early",https://github.com/deeplearning4j/deeplearning4j/commit/01f340ea13c4713e00f8dde23a64af75f092d283
239,239.0,239.0,deeplearning4j/deeplearning4j,af01b85651e9bc88e3b62fdef1246a2cbab097ec,"Fixed buffer overflow for the cases where data buffer and length do not match. Veda can be only set using InteropDataBuffer. Therefore we changed tests for it. And Other small fixes (#9713)

* make Vednn Ve library as cpu platform acceleration helper using Veda

* veda vednn works

* vednn device library loading using javacpp

* fixed some errors, veda is more stable now

* fix presets

* corrections

* corrections

* remove unnecessary comments

* inital logic to mixed veda+cpu usage

* make DeclarableOp sync when helper op is not invoked

* Fix contrib.  fix veda memory issue

* new veda version

* veda concat copycase 1 support

* the default veda is the old one

* disable concat veda for now

* Nec Veda documentation change

* build script and contrib fixes

* typo fix

* fix test build

* add CMakePresets.json, for now it has veda vednn (hard coded path)

* ctest sections based on gtest entries

* fix specialBuffer being buffer when its nullptr

* bugfixes #1

* bugfixe#2. refactoring

* aurora related fixes

* veda new ops coverage

* New helper for legacy ops. Veda: added some transform strict ops (exp, log, tanh, sigmoid) , scalar op (leakyRELU)

* exclude veda specific code for normal builds

* typo

* pad

* concat + vednn concat fix

* Veda can be only set using InteropDataBuffer. Therefore we changed tests for it",https://github.com/deeplearning4j/deeplearning4j/commit/af01b85651e9bc88e3b62fdef1246a2cbab097ec
240,240.0,240.0,deeplearning4j/deeplearning4j,066f90105826d1576b20d4174ac6ae42402e926f,"typo (#9708)

* make Vednn Ve library as cpu platform acceleration helper using Veda

* veda vednn works

* vednn device library loading using javacpp

* fixed some errors, veda is more stable now

* fix presets

* corrections

* corrections

* remove unnecessary comments

* inital logic to mixed veda+cpu usage

* make DeclarableOp sync when helper op is not invoked

* Fix contrib.  fix veda memory issue

* new veda version

* veda concat copycase 1 support

* the default veda is the old one

* disable concat veda for now

* Nec Veda documentation change

* build script and contrib fixes

* typo fix

* fix test build

* add CMakePresets.json, for now it has veda vednn (hard coded path)

* ctest sections based on gtest entries

* fix specialBuffer being buffer when its nullptr

* bugfixes #1

* bugfixe#2. refactoring

* aurora related fixes

* veda new ops coverage

* New helper for legacy ops. Veda: added some transform strict ops (exp, log, tanh, sigmoid) , scalar op (leakyRELU)

* exclude veda specific code for normal builds

* typo",https://github.com/deeplearning4j/deeplearning4j/commit/066f90105826d1576b20d4174ac6ae42402e926f
241,241.0,241.0,deeplearning4j/deeplearning4j,5397414911dd02e8e7b7edc90122a50157da5000,"exclude veda for normal builds (#9707)

* make Vednn Ve library as cpu platform acceleration helper using Veda

* veda vednn works

* vednn device library loading using javacpp

* fixed some errors, veda is more stable now

* fix presets

* corrections

* corrections

* remove unnecessary comments

* inital logic to mixed veda+cpu usage

* make DeclarableOp sync when helper op is not invoked

* Fix contrib.  fix veda memory issue

* new veda version

* veda concat copycase 1 support

* the default veda is the old one

* disable concat veda for now

* Nec Veda documentation change

* build script and contrib fixes

* typo fix

* fix test build

* add CMakePresets.json, for now it has veda vednn (hard coded path)

* ctest sections based on gtest entries

* fix specialBuffer being buffer when its nullptr

* bugfixes #1

* bugfixe#2. refactoring

* aurora related fixes

* veda new ops coverage

* New helper for legacy ops. Veda: added some transform strict ops (exp, log, tanh, sigmoid) , scalar op (leakyRELU)

* exclude veda specific code for normal builds",https://github.com/deeplearning4j/deeplearning4j/commit/5397414911dd02e8e7b7edc90122a50157da5000
242,242.0,242.0,deeplearning4j/deeplearning4j,5025b3e0b3c4e62e9cfc9ecb03b181f3c108004c,"veda related performance improvements for yolo (#9705)

* make Vednn Ve library as cpu platform acceleration helper using Veda

* veda vednn works

* vednn device library loading using javacpp

* fixed some errors, veda is more stable now

* fix presets

* corrections

* corrections

* remove unnecessary comments

* inital logic to mixed veda+cpu usage

* make DeclarableOp sync when helper op is not invoked

* Fix contrib.  fix veda memory issue

* new veda version

* veda concat copycase 1 support

* the default veda is the old one

* disable concat veda for now

* Nec Veda documentation change

* build script and contrib fixes

* typo fix

* fix test build

* add CMakePresets.json, for now it has veda vednn (hard coded path)

* ctest sections based on gtest entries

* fix specialBuffer being buffer when its nullptr

* bugfixes #1

* bugfixe#2. refactoring

* aurora related fixes

* veda new ops coverage

* New helper for legacy ops. Veda: added some transform strict ops (exp, log, tanh, sigmoid) , scalar op (leakyRELU)",https://github.com/deeplearning4j/deeplearning4j/commit/5025b3e0b3c4e62e9cfc9ecb03b181f3c108004c
243,243.0,243.0,deeplearning4j/deeplearning4j,610d26b54750743d501e4c648873447bfd3a7a32,"async veda + some other fixes (#9678)

* make Vednn Ve library as cpu platform acceleration helper using Veda

* veda vednn works

* vednn device library loading using javacpp

* fixed some errors, veda is more stable now

* fix presets

* corrections

* corrections

* remove unnecessary comments

* inital logic to mixed veda+cpu usage

* make DeclarableOp sync when helper op is not invoked

* Fix contrib.  fix veda memory issue

* new veda version

* veda concat copycase 1 support

* the default veda is the old one

* disable concat veda for now

* Nec Veda documentation change

* build script and contrib fixes

* typo fix

* fix test build

* add CMakePresets.json, for now it has veda vednn (hard coded path)

* ctest sections based on gtest entries

* fix specialBuffer being buffer when its nullptr

* bugfixes #1

* bugfixe#2. refactoring

* aurora related fixes",https://github.com/deeplearning4j/deeplearning4j/commit/610d26b54750743d501e4c648873447bfd3a7a32
244,244.0,244.0,deeplearning4j/deeplearning4j,e86e90e047fb6f5ed6a0b506e8f480bc3fad3660,"Update DiffFunction getNumber methods to be more flexible (#9616)

* Update sonatype URL

* Test refactoring, retatagging, indexing fixes

* Add python to platform-tests, fix fill triang (affects SVD etc)

* Refactor mnist fetchers to allow top level directory specification

* Remove unused datafetecher

* Make getProperty on DIfferentFunction more flexible",https://github.com/deeplearning4j/deeplearning4j/commit/e86e90e047fb6f5ed6a0b506e8f480bc3fad3660
245,245.0,245.0,deeplearning4j/deeplearning4j,eca78b3f3feefc58078154a7cb2df1d6a1377d7e,"Test refactoring for surefire (#9615)

* Update sonatype URL

* Test refactoring, retatagging, indexing fixes

* Add python to platform-tests, fix fill triang (affects SVD etc)

* Refactor mnist fetchers to allow top level directory specification

* Remove unused datafetecher

* Update pom.xml

* Update pom.xml

* Update TestOnnxIR.kt

* Update pom.xml

* Disable failing tests

* Update pom.xml

* Update pom.xml

* Update pom.xml

* Update TFGraphTestAllSameDiff.java

* Add other junit deps

* Update pom.xml

* Update pom.xml

* Update TF test names to follow standard

* Update TFGraphTestAllLibnd4j.java

* More renaming",https://github.com/deeplearning4j/deeplearning4j/commit/eca78b3f3feefc58078154a7cb2df1d6a1377d7e
246,246.0,246.0,deeplearning4j/deeplearning4j,b48afa5a4f52681412a7d8f21fa130fa030751b8,"Removes unused word2vec datafetcher (#9614)

* Update sonatype URL

* Test refactoring, retatagging, indexing fixes

* Add python to platform-tests, fix fill triang (affects SVD etc)

* Refactor mnist fetchers to allow top level directory specification

* Remove unused datafetecher",https://github.com/deeplearning4j/deeplearning4j/commit/b48afa5a4f52681412a7d8f21fa130fa030751b8
247,247.0,247.0,deeplearning4j/deeplearning4j,43725c07037bab500dd08ef6ca5d873699dc4d47,"Mnist refactoring (#9612)

* Update sonatype URL

* Test refactoring, retatagging, indexing fixes

* Add python to platform-tests, fix fill triang (affects SVD etc)

* Refactor mnist fetchers to allow top level directory specification",https://github.com/deeplearning4j/deeplearning4j/commit/43725c07037bab500dd08ef6ca5d873699dc4d47
248,248.0,248.0,deeplearning4j/deeplearning4j,b67072c5b86eed5ce33f6f95c1f71e6ba7c93e3a,"Fixes up fill triang and adds python-numpy to platform tests (#9611)

* Update sonatype URL

* Test refactoring, retatagging, indexing fixes

* Add python to platform-tests, fix fill triang (affects SVD etc)

* Remove extra license clauses, extra comments, clean up imports

* Fix up licenses",https://github.com/deeplearning4j/deeplearning4j/commit/b67072c5b86eed5ce33f6f95c1f71e6ba7c93e3a
249,249.0,249.0,deeplearning4j/deeplearning4j,15cbb3133c967681a831819630bd6f07e0dbeba2,"Tests refactoring/minor fixes (#9609)

* Update sonatype URL

* Test refactoring, retatagging, indexing fixes

* Update pom.xml",https://github.com/deeplearning4j/deeplearning4j/commit/15cbb3133c967681a831819630bd6f07e0dbeba2
250,250.0,250.0,deeplearning4j/deeplearning4j,b77a0625e6110bd16c168865e6f6bd573942a930,"Fixes for model import, test refactoring (#9608)

* Update sonatype URL

* Remove old deeplearning4j-common dep

* Update pom.xml

* Migrate keras pre processors back, remove cycle in deps

* Refactor dependencies to move utils and properties/configurations around to avoid cycles

* Change nd4j-native to api and add standard test setup to omnihub

* Migrate to temurin

* Update pom.xml

* Fix up test declarations, empty string array test

* fix mnist downloads

* TF import fixes, disable tests with long download times

* Add select as control flow omission

* Test fixes: condition op type, dataset validation, remove invalid tests

* Handle nit

* Add dynamic type to match  match_cond usage

* typo fix and fix dup mnist manager",https://github.com/deeplearning4j/deeplearning4j/commit/b77a0625e6110bd16c168865e6f6bd573942a930
251,251.0,251.0,deeplearning4j/deeplearning4j,25d0aab0aaeec0d80ed8901fe8c240ed5601f1d6,"Update sonatype URL to allow publishing to snapshots/release (#9605)

* Update sonatype URL

* Remove old deeplearning4j-common dep

* Update pom.xml

* Migrate keras pre processors back, remove cycle in deps

* Refactor dependencies to move utils and properties/configurations around to avoid cycles

* Change nd4j-native to api and add standard test setup to omnihub

* Migrate to temurin

* Update pom.xml

* Fix up test declarations, empty string array test

* fix mnist downloads",https://github.com/deeplearning4j/deeplearning4j/commit/25d0aab0aaeec0d80ed8901fe8c240ed5601f1d6
252,252.0,252.0,deeplearning4j/deeplearning4j,851f4e2282782fc5a8777293ab97e3ae90d13603,"Update sonatype URL to allow publishing to snapshots/release (#9605)

* Update sonatype URL

* Remove old deeplearning4j-common dep

* Update pom.xml

* Migrate keras pre processors back, remove cycle in deps

* Refactor dependencies to move utils and properties/configurations around to avoid cycles

* Change nd4j-native to api and add standard test setup to omnihub

* Migrate to temurin

* Update pom.xml

* Fix up test declarations, empty string array test

* fix mnist downloads",https://github.com/deeplearning4j/deeplearning4j/commit/851f4e2282782fc5a8777293ab97e3ae90d13603
253,253.0,253.0,deeplearning4j/deeplearning4j,89ee745f6a84c00ba01cad97723b311afe03f0d1,"WIP: Add new unified resource management (#9603)

* ADR: Add new unified resource management

* Address ADR grammar, minor nit for downloader logic

* Restore file exists check, redo tense

* Update BERTGraphTest.java

* will -> is

* Update 0015 - Unified Resource Manager.md

* Update inconsistent deletion check

* Add delete if necessary

* Update BootstrapFromLocal.java

* Refactoring

1. Removes deeplearning4j-common: merges with resources module
2. Removes accidental keras import refactoring
3. Updates old datasetiterators to use new resources api
4. Collapse downloader related clases (strumpf, resource file,..) from nd4j-common in to resources

* Handle nit, deprecated old model zoo interface

* Update deprecated link, deleteIfCorrupted usgae",https://github.com/deeplearning4j/deeplearning4j/commit/89ee745f6a84c00ba01cad97723b311afe03f0d1
254,254.0,254.0,deeplearning4j/deeplearning4j,ec45d215acd4fbd851cfa24ea73eac5700975d55,refactor template instantiations,https://github.com/deeplearning4j/deeplearning4j/commit/ec45d215acd4fbd851cfa24ea73eac5700975d55
255,255.0,255.0,deeplearning4j/deeplearning4j,2f8487eaf3e1e5e679b6bd1787ad5946ea9eaf1f,"Merge pull request #9513 from quickwritereader/master2

Refactor + Format:",https://github.com/deeplearning4j/deeplearning4j/commit/2f8487eaf3e1e5e679b6bd1787ad5946ea9eaf1f
256,256.0,256.0,deeplearning4j/deeplearning4j,d77597bae3253e13a3384a168fda789f68309c1a,"Refactor + Format:
- introduce system/common.h
- prefix with sd_ and SD_
- status is enum
- changes Nd4jLong and sisters into sd::LongType style
- clang-format formatting google style with column limit being 120
- adding missing new line endings

on-behalf-of: @org <deeplearning4j@konduit.ai>",https://github.com/deeplearning4j/deeplearning4j/commit/d77597bae3253e13a3384a168fda789f68309c1a
257,257.0,257.0,deeplearning4j/deeplearning4j,e5d0e115e6ca7a840add73bb1e2f9af688bef6b0,"- ImageResize methods can accept strided input NdArray
- Use instance fields instead of ordinals for ImageResizeMethod
- v1 version of the bicubic Method now supports CoordinateTransformationMode and exlude_outside. Note: as only v1 method was updated it is not supported when antialias is True
- nearestNeigbor now supports nearestMode and CoordinateTransformationMode
- fix Cuda/Cpu potential race condition in the usage of CachedInterpolationCalculator Advance
- test coverage for new additions
- refactor/fixes

Signed-off-by: AbdelRauf <rauf@konduit.ai>",https://github.com/deeplearning4j/deeplearning4j/commit/e5d0e115e6ca7a840add73bb1e2f9af688bef6b0
258,258.0,258.0,deeplearning4j/deeplearning4j,fa2059859689393fa3530945d3b9d17ee8ae6343,"Merge pull request #9466 from eclipse/ag_onnx_resize

Refactors onnx import adding better support for image functions",https://github.com/deeplearning4j/deeplearning4j/commit/fa2059859689393fa3530945d3b9d17ee8ae6343
259,259.0,259.0,deeplearning4j/deeplearning4j,b8fb66bf52e75abecc54dd041dc26c152bf5ff0b,Refactors onnx import adding better support for image functions,https://github.com/deeplearning4j/deeplearning4j/commit/b8fb66bf52e75abecc54dd041dc26c152bf5ff0b
260,260.0,260.0,deeplearning4j/deeplearning4j,2ced983c45cfdbc2cabdb01505af1a6c5ffe324a,"Merge pull request #9434 from quickwritereader/master

 use aligned_alloc if possible (32byte). refactored/fixed OneDnn files and cmake. using newly introduced RequirementsHelper in OneDnn platform checks. Fixed segfaults in Debug and Verbose.",https://github.com/deeplearning4j/deeplearning4j/commit/2ced983c45cfdbc2cabdb01505af1a6c5ffe324a
261,261.0,261.0,deeplearning4j/deeplearning4j,58b63a1c6dccbfa481e8d5890ded7bd89d87fb4d,"Refactor OneDnn. Onednn Platform checks were re-written with newly added Requirements helper.

Signed-off-by: AbdelRauf <rauf@konduit.ai>",https://github.com/deeplearning4j/deeplearning4j/commit/58b63a1c6dccbfa481e8d5890ded7bd89d87fb4d
262,262.0,262.0,deeplearning4j/deeplearning4j,72a51359ef4746031caa7dc7c08105c12cfe71e8,"Merge pull request #9392 from quickwritereader/qwr_cudnn_refactor

cudnn: refactor introducing thin cudnn descriptors to fix descriptor leaks",https://github.com/deeplearning4j/deeplearning4j/commit/72a51359ef4746031caa7dc7c08105c12cfe71e8
263,263.0,263.0,deeplearning4j/deeplearning4j,892b6e5e26d72c0fd6d8900941556053e54b7793,Refactor constants and system properties usage in to 1 class,https://github.com/deeplearning4j/deeplearning4j/commit/892b6e5e26d72c0fd6d8900941556053e54b7793
264,264.0,264.0,deeplearning4j/deeplearning4j,0a12956c5fb47a06bffedf3820e3963b53bb75d6,"cudnn: refactor introducing thin cudnn descriptors to fix obvious descriptor leaks and also possible memory leaks when error is thrown

Signed-off-by: AbdelRauf <rauf@konduit.ai>",https://github.com/deeplearning4j/deeplearning4j/commit/0a12956c5fb47a06bffedf3820e3963b53bb75d6
265,265.0,265.0,deeplearning4j/deeplearning4j,82edf877dbe7c71dfec78ef60e006706fbb6de76,"minor refactoring

Signed-off-by: AbdelRauf <rauf@konduit.ai>",https://github.com/deeplearning4j/deeplearning4j/commit/82edf877dbe7c71dfec78ef60e006706fbb6de76
266,266.0,266.0,deeplearning4j/deeplearning4j,10fb49fa6f4a1476d5aac83e303514a3453d5e3b,"ctcLoss: refactored to use new scoped Descriptors in cudnn call

Signed-off-by: AbdelRauf <rauf@konduit.ai>",https://github.com/deeplearning4j/deeplearning4j/commit/10fb49fa6f4a1476d5aac83e303514a3453d5e3b
267,267.0,267.0,deeplearning4j/deeplearning4j,d370b23c1167c65d24873350a5d582d44b2d265d,"minor refactoring

Signed-off-by: AbdelRauf <rauf@konduit.ai>",https://github.com/deeplearning4j/deeplearning4j/commit/d370b23c1167c65d24873350a5d582d44b2d265d
268,268.0,268.0,deeplearning4j/deeplearning4j,603e33e92338c1d2f7825e3747d3a0ad0c320b8b,"ctcLoss: refactored to use new scoped Descriptors in cudnn call

Signed-off-by: AbdelRauf <rauf@konduit.ai>",https://github.com/deeplearning4j/deeplearning4j/commit/603e33e92338c1d2f7825e3747d3a0ad0c320b8b
269,269.0,269.0,deeplearning4j/deeplearning4j,75fc5edc94ef056540b54c3945eaa8c15cd3da6d,More benchmark refactoring,https://github.com/deeplearning4j/deeplearning4j/commit/75fc5edc94ef056540b54c3945eaa8c15cd3da6d
270,270.0,270.0,deeplearning4j/deeplearning4j,79a808cf9c7431b0a7c4bf4e8fee39222539ce8f,Minor concat refactor based on comments,https://github.com/deeplearning4j/deeplearning4j/commit/79a808cf9c7431b0a7c4bf4e8fee39222539ce8f
271,271.0,271.0,deeplearning4j/deeplearning4j,422b5e2ea85fa4a3e3dc18452bb7c37fb744095d,Refactor based on comments,https://github.com/deeplearning4j/deeplearning4j/commit/422b5e2ea85fa4a3e3dc18452bb7c37fb744095d
272,272.0,272.0,deeplearning4j/deeplearning4j,23c8f3331a9044a45634535d65f37c39cbf935c0,"Merge pull request #9284 from eclipse/ag_cudnn_helpers_refactor

Update cudnn/onednn helpers, minor refactoring changes for imports",https://github.com/deeplearning4j/deeplearning4j/commit/23c8f3331a9044a45634535d65f37c39cbf935c0
273,273.0,273.0,deeplearning4j/deeplearning4j,759885ffb9e53f7728e6147d03bd6346eaf0f0ca,"Update cudnn helpers, minor refactoring changes for imports",https://github.com/deeplearning4j/deeplearning4j/commit/759885ffb9e53f7728e6147d03bd6346eaf0f0ca
274,274.0,274.0,deeplearning4j/deeplearning4j,a17a579b1f81b156e59e3a53ea8bda32fae641f6,"Small refactor (#9047)

Signed-off-by: Dariusz Zbyrad <dariusz.zbyrad@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/a17a579b1f81b156e59e3a53ea8bda32fae641f6
275,275.0,275.0,deeplearning4j/deeplearning4j,3a3c952e755744457fa1b02c4c3772a60297006f,"Added dtype formulation for poisson and gamma distributions. (#442)

* Added dtype formulation for poisson and gamma distributions.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored gamma distribution generator and tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added generator for gamma distribution when alpha (shape) between 0 and 1

Signed-off-by: shugeo <sgazeos@gmail.com>

* Implemented gamma distribution for shape param less than 1 and tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Implemented gamma distributed randoms for shape (alpha) parameter greater then 1.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added cuda implementation for gamma distribution.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored cuda and cpu implementation of gamma distribution.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed crash with default beta param with gamma distribution.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed  pow for arm arch.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Gamma test fixed

* Cosmetic changes only.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed random value retrieving

* Eliminated overflow attemptions.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Modified random retrieving.

Signed-off-by: shugeo <sgazeos@gmail.com>

* enlighted density of tests for Gamma distribution.

Signed-off-by: shugeo <sgazeos@gmail.com>

Co-authored-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>
Co-authored-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/3a3c952e755744457fa1b02c4c3772a60297006f
276,276.0,276.0,deeplearning4j/deeplearning4j,966642c1c9b0fd60ef98b8d7a0f6804ca45d7794,"Rng tweaks (#479)

* initial commit

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Java Random.getFloat()/getDouble() methods mapped to C++

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Refactored relativeT for float and double data types.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored float relativeT method.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored relativeT

Signed-off-by: shugeo <sgazeos@gmail.com>

* - additional rng tests
- float/double uniform generation methos slightly changed

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* use bitset instead of manual conversion

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* rollback valueBits changes

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* remove unused shapelist

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* update KMeans ground truth test

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* dedicated union to make MSVC happy

Signed-off-by: raver119 <raver119@gmail.com>

* minor tweaks

Signed-off-by: raver119 <raver119@gmail.com>

* .seh_savexmm workaround?

Signed-off-by: raver119 <raver119@gmail.com>

* don't use march=native in tests on windows

Signed-off-by: raver119 <raver119@gmail.com>

Co-authored-by: shugeo <sgazeos@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/966642c1c9b0fd60ef98b8d7a0f6804ca45d7794
277,277.0,277.0,deeplearning4j/deeplearning4j,2aed216c2a880174266ef52df9ff7edac5337886,"Eliminated error with resize implementation. (#418)

* Eliminated error with resize implementation.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored resize caller implementation.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored image.resize op helper.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added dumb implementations for missed resize methods.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added resize_images op. Refactored image_resize op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored matrix_band_part op and test.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored resize_images op to comply with preserve_aspect_ratio flag properly.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored resize_images and tests for resizeArea method.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored resize methods and test.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added new methods for TF2 resize op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Portion of resize algorithms from TF2

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added routine to process resize with given algorithm.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added new image resize via scale and translate process helper.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Cpu implementation for V2 image resize operation helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added implementation for lancos5 algorithm of resize and test.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added prints for span computing.

Signed-off-by: shugeo <sgazeos@gmail.com>

* The first working implementation and tests for lancos5 resize.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Eliminated waste prints.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored image_resize op and tests.""

Signed-off-by: shugeo <sgazeos@gmail.com>

* Lanczos3 resize implementation and tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Implemented bicubic resize algorithm and tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added a couple of tests and cosmetic changes with image resize helper.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added bilinear implementation for image resize.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored bicubic algorithm and also implement area and neighbor algoritms for image resize on cpu arch.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added a couple of tests for nearest neighbor and area resize.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Cosmetic changes for cpu implementation and added cuda implementation for resize methods.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Separated cuda implementation of v2 image resize.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added kernels for span calculation and span gathering with new image resize cuda implementation.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored cuda implementation of image resize kernels.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Finished the first working implementation of image resize op and tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed resize_images and image_resize ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored shape construction and output validation.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed test to properly initalized with float.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added 3D input opotunity for resize ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed test for resize_images op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed test and call for resize_images op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored image_resize op output data type handling for nearest neighbors method and tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed issue with wrong resize method.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added checkup for wrong resize methods for resize ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored resize methods and test.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added output data type validation for given resize method.

Signed-off-by: shugeo <sgazeos@gmail.com>

* - ResizeMethod rearranged in order to match C++ side
- minor test fix

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Refactored resize_images op.

Signed-off-by: shugeo <sgazeos@gmail.com>

Co-authored-by: raver119@gmail.com <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/2aed216c2a880174266ef52df9ff7edac5337886
278,278.0,278.0,deeplearning4j/deeplearning4j,753ce28a924053228d0d5a1df33c24e4ff22d459,"Shyrma sqrtm (#429)

* - start working on implementation of sqrtm op

Signed-off-by: Yurii <iuriish@yahoo.com>

* - improving householder procedure

Signed-off-by: Yurii <iuriish@yahoo.com>

* - further polishing householder stuff

Signed-off-by: Yurii <iuriish@yahoo.com>

* - polishing hh pivoting qr procedure

Signed-off-by: Yurii <iuriish@yahoo.com>

* - polishing BiDiagonalUp procedure

Signed-off-by: Yurii <iuriish@yahoo.com>

* - polishing householder sequence class

Signed-off-by: Yurii <iuriish@yahoo.com>

* - polishing jacobi svd class

Signed-off-by: Yurii <iuriish@yahoo.com>

* - polishing svd stuff 1

Signed-off-by: Yurii <iuriish@yahoo.com>

* - polishing svd stuff 2

Signed-off-by: Yurii <iuriish@yahoo.com>

* - implementation and testing class which performs Hessenberg decomposition of square matrix

Signed-off-by: Yurii <iuriish@yahoo.com>

* - add static method to JacobiSVD class which makes the continuous Givens rotation generation algorithm

Signed-off-by: Yurii <iuriish@yahoo.com>

* - implementation and testing auxiliary methods of Schur decomp class

Signed-off-by: Yurii <iuriish@yahoo.com>

* some references here and there

Signed-off-by: raver119 <raver119@gmail.com>

* - trying figure out difference between eigen and our Schur alg

Signed-off-by: Yurii <iuriish@yahoo.com>

* - testing fixing bugs in Schur decomposition op

Signed-off-by: Yurii <iuriish@yahoo.com>

* - start to implement class which performs calculation of eigen values and vectors

Signed-off-by: Yurii <iuriish@yahoo.com>

* - add to EigenValsAndVecs method which calculates complex eigen vectors

Signed-off-by: Yurii <iuriish@yahoo.com>

* - testing and fixing bugs in EigenValsAndVecs class

Signed-off-by: Yurii <iuriish@yahoo.com>

* - implementation and testing triangularSolver class

Signed-off-by: Yurii <iuriish@yahoo.com>

* Added a 2D routine for triangular systems solve.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored triangularSolve2D routine and tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored another test for triangularSolve2D.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored test for triangularSolve for vector-bar case.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored triangularSolve2D routine and tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* - implementation of FullPivLU class

Signed-off-by: Yurii <iuriish@yahoo.com>

* - fix bugs in FullPivLU::solve method

Signed-off-by: Yurii <iuriish@yahoo.com>

* - correct permutation vector in FullPivLU::solve

Signed-off-by: Yurii <iuriish@yahoo.com>

* - correct include headers

Signed-off-by: Yurii <iuriish@yahoo.com>

* - implementation of Sqrtm class

Signed-off-by: Yurii <iuriish@yahoo.com>

* - testing and fixing bugs in Sqrtm class

Signed-off-by: Yurii <iuriish@yahoo.com>

* - include sqrtm classes to cuda folder, investigate in what places synchronization doesn't work

Signed-off-by: Yurii <iuriish@yahoo.com>

* Added implementation for cuda triangularSolve2D and also refactored triangularSolve2D for cpu.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Eliminated waste implementations.

Signed-off-by: shugeo <sgazeos@gmail.com>

* - make offset calculation faster in t<> methods

Signed-off-by: Yurii <iuriish@yahoo.com>

* - rename refference T& NDArray::t<> method

Signed-off-by: Yurii <iuriish@yahoo.com>

* - further work on cuda sqrtm

Signed-off-by: Yurii <iuriish@yahoo.com>

* - provide correct synchronization to device in Sqrtm class

Signed-off-by: Yurii <iuriish@yahoo.com>

* - add tests for sqrtm op

Signed-off-by: Yurii <iuriish@yahoo.com>

* - correct fails which appeared while testing on jenkins

Signed-off-by: Yurii <iuriish@yahoo.com>

* - trying to find out mistake in svd::deflation method

Signed-off-by: Yurii <iuriish@yahoo.com>

* Revert ""- trying to find out mistake in svd::deflation method""

This reverts commit 19d37baddbc509028e4bc67bc932fe7449becdb6.

* Revert ""- trying to find out mistake in svd::deflation method""

This reverts commit 19d37baddbc509028e4bc67bc932fe7449becdb6.

Signed-off-by: Yurii <iuriish@yahoo.com>

* - change call semantic of r<> and t<> methods

Signed-off-by: Yurii <iuriish@yahoo.com>

* - ged rid of ambiguity in * operator overloads for windows buikd

Signed-off-by: Yurii <iuriish@yahoo.com>

* - get rid of ambiguity in * operator overloads for windows build 2

Signed-off-by: Yurii <iuriish@yahoo.com>

* - get rid of ambiguity in * operator overloads for windows build 3

Signed-off-by: Yurii <iuriish@yahoo.com>

* - resolve conflicts with master

Signed-off-by: Yurii <iuriish@yahoo.com>

* cmakelists updated

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* - minor fix in merge cpu helper - make use of reference getter

Signed-off-by: Yurii <iuriish@yahoo.com>

Co-authored-by: raver119 <raver119@gmail.com>
Co-authored-by: shugeo <sgazeos@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/753ce28a924053228d0d5a1df33c24e4ff22d459
279,279.0,279.0,deeplearning4j/deeplearning4j,69d91e272a5df21b763d80b5e11fe9f10d178fac,"- new implementations for Index Reductions (#421)

* - new implementations for Index Reductions
- small fix in the legacy reduction
- disabled index reduction bench tests inside Playground

Signed-off-by: Abdelrauf <rauf@konduit.ai>

* Allow LIBND4J_TYPES

Signed-off-by: Abdelrauf <rauf@konduit.ai>

* index reduction stuff split into bunch of units

* meh

* IMax switched to new impl

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* minor fix + test

* minor fix

* index range fix

Signed-off-by: Abdelrauf <rauf@konduit.ai>

* noop on empty outputs

* minor fix

* minor fix

Signed-off-by: Abdelrauf <rauf@konduit.ai>

* ArgMax replaces IMax

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* argmax/argmin/argamax/argamin shape functions updated

* ArgAmax/ArgAmin/ArgMin replaces IAMax/IAMin/IMin

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* argmax/argmin/argamax/argamin CUDA

* IMax replaced in dl4j

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Codegen output

* imports fixed

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* fix compilation issue

Signed-off-by: Abdelrauf <rauf@konduit.ai>

* Auto-generate compilation units

Signed-off-by: Abdelrauf <rauf@konduit.ai>

* Should fix NDArray refactored function calls in indexReductions.cu

Signed-off-by: Abdelrauf <rauf@konduit.ai>

Co-authored-by: raver119@gmail.com <raver119@gmail.com>
Co-authored-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/69d91e272a5df21b763d80b5e11fe9f10d178fac
280,280.0,280.0,deeplearning4j/deeplearning4j,ea56ce747138e413d8fdd953b9994b92f973fbfd,"Import fix given recent refactoring

Signed-off-by: Alex Black <blacka101@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/ea56ce747138e413d8fdd953b9994b92f973fbfd
281,281.0,281.0,deeplearning4j/deeplearning4j,320924278d79df5ce7be62504423901f7509e818,"Legacy API changes (#441)

* initial commit

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* another initial commit

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* another initial commit

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* one more initial commit

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* next step

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* next step

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* next step

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* next step

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Refactored buffer() and shapeInfo() methods usage with NDArray class.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt Graph class methods to use const shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt choose op to use constant shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt where op shape method to use constant shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt lstsq op to use constant empty shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt matrix_diag_part op shape routine to use constant shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt determinant ops to use constant shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt mean_pairwssqerr_loss ops to use constant shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt ops shape methods.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt shape methods for loss ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt log_loss op shape method.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt shape methods for ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt dilation2d ops shape methods.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopted deconv2d ops shape methods.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopted dynamicRNN op shape method.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopted shape methods for ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopted shape methods for lstm layer ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* few updates

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* first cuda tweak

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Adopt constant shapes for sconv2d ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt constant shapes for gru ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt constant shapes with shape methods for segment ops and so on.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopted constant shapes with unsorted_segment_* ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopted constant shapes with gamma op shape method.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopted shape methods of reduce_stddev ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopted shape methods for reduce_* ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt shape method for squeeze op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt strided_slice shape method.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored concat op shape method to adopt constant shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopted shape method for mirror_pad op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopted split op shape method.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopted tile ops shape methods.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added const cast for mkldnn routines handles.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored logSoftMaxForVector_ routine to conform with proper data and shape pointer casts.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Cosmetic changes to proper usage of constant pointers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored a couple shape comparators for strides and addBias helpers to proper use data pointers with inplace option.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored depthToSpace helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored histogram helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored im2col helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored gather and gatherND helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed buffer usage on percentile helper.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed gather shape with helpers and range buffer usage.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed buffer usage with space to depth helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed buffer usage and constant shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed buffer usage with LUP decomposition>

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored onehot_ helper.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored pad and prefix to use constant shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactoed softmax helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed space to batch helpers to use buffers properly.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed stack and split helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed buffer usage with sparse to dense helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed buffer usage with mindistance_ helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed buffer usage with tile helper.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed constant shape usage.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed constant shape usage with legacy pairwise bool ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored a couple of methods to adopt constant shape usage.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed broadcasting with constant shape.""

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed const usage with inplace reverse and constant shapes with legacy reduction.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored legacy ops with const shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored sort to adopt constant shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Corrected sort for constant shape usage.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed constant shape usage with special methods.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored Context to conform with constant shape usage.

Signed-off-by: shugeo <sgazeos@gmail.com>

* CUDA broadcasting headers

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* pairwise/indexreduce/random headers

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Refactored native ops to adopt constant shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* legacy reduce3/scalar headers

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Corrected pullRow signature and tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Corrected routines to proper use of constant shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored tests to use constant shapes properly.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored legacy ops tests to use constant shapes properly.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored buffer usage with NDArray tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed native ops tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed special concat routine.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed buffer usage with test.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed buffer usage with a test.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored TAD.h and tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored calcStrides* routines to use constant shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed miscelaneous errors with constant shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* NativeOps const changes

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Corrected definitions for declared functions.

Signed-off-by: shugeo <sgazeos@gmail.com>

* NativeOps const changes

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* few more const changes

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Fixed const shapes with shape routines.

Signed-off-by: shugeo <sgazeos@gmail.com>

* few more const changes

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Fixed shape method for broadcastable case.

Signed-off-by: shugeo <sgazeos@gmail.com>

* few more const changes

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* xw_plus_b BP shape fn restored

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Fixed signatures with broadcasting.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Repaired backprops shape methods for a set of operations.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored broadcast bool for cuda.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored methods for 3 args with const qualifier.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed a couple of kernel signatures for broadcasting.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed kernels signatures for const buffers and shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored pairwise methods to persistent buffers and shapes usage.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt const to buffers and shapes with kernels.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopt const to buffers and shapes with scalar kernels.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored indexreduce kernels signatures to use const buffers and shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored pairwise kernels to adopt cons shapes and buffers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored pairwise bool kernels to adopt cons shapes and buffers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored random special ops to conform with const shapes and buffers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored native ops to conform with const shapes and buffers under cuda platform.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Cosmetical changes only.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed const shapes and buffers error.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Corrected start pos routine.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored methods to conform with const shapes and buffers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored helpers to use proper methods instead.

Signed-off-by: shugeo <sgazeos@gmail.com>

* bunch of changes

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* next bunch of changes

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* next bunch of changes

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Fixed execScalar declaration.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed execScalar declaration.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Corrected const shape cases with sort and so on.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed const shapes for sort.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored kernel declarations to adopt const shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed kernels declarations to adopt const shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Corrected kernel declarations to adopt const shapes and buffers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed kernels declarations to adopt const shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed segment helpers kernels declarations and so on to adopt const shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed const shape usage with segment and solve helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed kernel declaration with adjustWeight helper.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed cuda implementations for constant shape helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopted const shape usage with kernels.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adopted top_k kernels to use const shapes and buffers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Corrected kernels declarations to adopt const shapes with helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored NDArray definitions to adopt const shapes and buffers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed const shapes with image suppression helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Slight improvement with buffers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored buffer usage.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored buffer usage with tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed const shape usage with definitions.

Signed-off-by: shugeo <sgazeos@gmail.com>

* minor updates on cpu side

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Refactored const shape usage with ConstantDescritor and native ops with cuda platform.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored tear and tile kernels to adopt with const shapes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* softmax_loop fix

Signed-off-by: raver119 <raver119@gmail.com>

* update missing signature

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* softmax again

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* few more missing consts

Signed-off-by: raver119 <raver119@gmail.com>

* new methods updated

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

Co-authored-by: shugeo <sgazeos@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/320924278d79df5ce7be62504423901f7509e818
282,282.0,282.0,deeplearning4j/deeplearning4j,061348565406154cdb584c50170633047aa11d57,"compression ops (#436)

* Added declarations for decode/encode_bitmap ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added implementation for bitmap encoding/decoding ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added helpers for encode/decode bitmap ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored encodingBitmap helper.

Signed-off-by: shugeo <sgazeos@gmail.com>

* threshold encode/decode skeleton

* helper skeleton

* minor import fix

* encoder shape fn & op impl

* thresholdEncode cpu impl

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* thresholdDecode cpu impl

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Only cosmetical changes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* placeholder

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Added cuda implementation for bitmap decode helper.

Signed-off-by: shugeo <sgazeos@gmail.com>

* cuda thresholdEstimate

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* cuda thresholdDecode

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* next step

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* - nano cmakelist update (get rid of Clion section)
- fixed forgotten throw in AtomicTests

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* thesholdEncode cuda impl

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Added tests for bitmap encoding/decoding ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed tests for encode/decode bitmaps.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored decode/encode helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed crashes with bitmap decode/encode helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* bitmap encode/decode CPU

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* bitmap encode/decode CUDA

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* C API removed for threshold/bitmap encode

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* EncodeBitmap/DecodeBitmap Java side

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* EncodeThreshold/DecodeThreshold Java side

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* EncodeThreshold/DecodeThreshold Java side

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* few more tests for threshold encoding

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* minor test tweak

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* two special tests

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* encodeBitmap CPU fix

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* parallel_long/parallel_double proper spans fix

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* encodeThreshold CUDA fix

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* nano fix

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* grid tweaks

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* RTX adaptation for thresholdEncode

Signed-off-by: raver119 <raver119@gmail.com>

* don't allow threshold encoding for length < 2

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* get rid of NDArrayCompressor in EncodingHandler

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* one more minor update of EncodingHandler

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* one more minor tweak of EncodingHandler

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* - matmul allows integer data types use
- EncodingHandler boundary default value
- few tests for integer matmul

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* minor fix of CUDA bitmap encode

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* boundary changed to integer everywhere

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* boundary changed to integer everywhere

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* re-enable CUDA deallocator

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* threshold encoder fix for systems without omp

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* - encode_threshold now requires non-negative boundary
- minor tweak in EncodingHandler

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* restore parallelism in decode_bitmap

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* fall back to omp for encode_bitmap cpu

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* single time casts

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* - additional test for encode_threshold
- sync buffers to device before calling for shape function

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

Co-authored-by: shugeo <sgazeos@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/061348565406154cdb584c50170633047aa11d57
283,283.0,283.0,deeplearning4j/deeplearning4j,88d3c4867fb87ec760b445c6b9459ecf353cec47,"Refactor packages to fix split package issues (#411)

* Refactor nd4j-common: org.nd4j.* -> org.nd4j.common.*

Signed-off-by: Alex Black <blacka101@gmail.com>

* Fix CUDA (missed nd4j-common package refactoring changes)

Signed-off-by: Alex Black <blacka101@gmail.com>

* nd4j-kryo: org.nd4j -> org.nd4j.kryo

Signed-off-by: Alex Black <blacka101@gmail.com>

* Fix nd4j-common for deeplearning4j-cuda

Signed-off-by: Alex Black <blacka101@gmail.com>

* nd4j-grppc-client: org.nd4j.graph -> org.nd4j.remote.grpc

Signed-off-by: Alex Black <blacka101@gmail.com>

* deeplearning4j-common: org.deeplearning4.* -> org.deeplearning4j.common.*

Signed-off-by: Alex Black <blacka101@gmail.com>

* deeplearning4j-core: org.deeplearning4j.* -> org.deeplearning.core.*

Signed-off-by: Alex Black <blacka101@gmail.com>

* deeplearning4j-cuda: org.deeplearning4j.nn.layers.* -> org.deeplearning4j.cuda.*

Signed-off-by: Alex Black <blacka101@gmail.com>

* Import fixes

Signed-off-by: Alex Black <blacka101@gmail.com>

* deeplearning4j-nlp-*: org.deeplearning4.text.* -> org.deeplearning4j.nlp.(language).*

Signed-off-by: Alex Black <blacka101@gmail.com>

* deeplearning4j-ui-model: org.deeplearning4j.ui -> org.deeplearning4j.ui.model

Signed-off-by: Alex Black <blacka101@gmail.com>

* datavec-spark-inference-{server/model/client}: org.datavec.spark.transform -> org.datavec.spark.inference.{server/model/client}

Signed-off-by: Alex Black <blacka101@gmail.com>

* datavec-jdbc: org.datavec.api -> org.datavec.jdbc

Signed-off-by: Alex Black <blacka101@gmail.com>

* Delete org.deeplearning4j.datasets.iterator.impl.MultiDataSetIteratorAdapter in favor of (essentially identical) org.nd4j.linalg.dataset.adapter.MultiDataSetIteratorAdapter

Signed-off-by: Alex Black <blacka101@gmail.com>

* ND4S fixes

Signed-off-by: Alex Black <blacka101@gmail.com>

* Fixes

Signed-off-by: Alex Black <blacka101@gmail.com>

* nd4j-common-tests: org.nd4j.* -> org.nd4j.common.tests

Signed-off-by: Alex Black <blacka101@gmail.com>

* Trigger CI

Signed-off-by: Alex Black <blacka101@gmail.com>

* Fixes

Signed-off-by: Alex Black <blacka101@gmail.com>

* #8878 Ignore CUDA tests on modules with 'nd4j-native under cuda' issue

Signed-off-by: Alex Black <blacka101@gmail.com>

* Fix bad imports in tests

Signed-off-by: Alex Black <blacka101@gmail.com>

* Add ignore on test (already failing) due to #8882

Signed-off-by: Alex Black <blacka101@gmail.com>

* Import fixes

Signed-off-by: Alex Black <blacka101@gmail.com>

* Additional import fixes

Signed-off-by: Alex Black <blacka101@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/88d3c4867fb87ec760b445c6b9459ecf353cec47
284,284.0,284.0,deeplearning4j/deeplearning4j,74420bca316fd3f8dd6065b64b4e14535e3c961b,"RL4J: Sanitize async learner (#327)

* refactoring global async to use a much simpler update procedure with a single global lock

Signed-off-by: Bam4d <chrisbam4d@gmail.com>

* simplification of async learning algorithms, stabilization + better hyperparameters

Signed-off-by: Bam4d <chrisbam4d@gmail.com>

* started to play with using mockito for tests

Signed-off-by: Bam4d <chrisbam4d@gmail.com>

* Working on refactoring tests for async classes and trying to make async simpler

Signed-off-by: Bam4d <chrisbam4d@gmail.com>

* more work on mockito tests and making some tests much less complex and more explicit in what they are testing

Signed-off-by: Bam4d <chrisbam4d@gmail.com>

* some fixes from merging

* do not allow copying of the current network to worker threads, fixing debug line

Signed-off-by: Bam4d <chrisbam4d@gmail.com>

* adding some more tests around PR review

Signed-off-by: Bam4d <chrisbam4d@gmail.com>

* Adding more tests after review comments

Signed-off-by: Bam4d <chrisbam4d@gmail.com>

* few more tests and fixes from PR review

* remove rename of maxEpochStep to maxStepsPerEpisode as we agreed to review this in a seperate PR

* 2019 instead of 2018 on copyright header

* adding konduit copyright to files

* some more copyright headers

Signed-off-by: Bam4d <chrisbam4d@gmail.com>

Co-authored-by: Alexandre Boulanger <aboulang2002@yahoo.com>",https://github.com/deeplearning4j/deeplearning4j/commit/74420bca316fd3f8dd6065b64b4e14535e3c961b
285,285.0,285.0,deeplearning4j/deeplearning4j,455a5d112d2189f08f038752cf15b47ab8001f84,"Fixes for codegen generated classes and build improvements (#367)

* Input format extended

* Deleted redundant code

* Added weights format to conv2d config

* Refactoring

* dl4j base test functionality

* Different tests base class per module

* Check base class for dl4j-graph subproject tests

* Check if test classes extend BaseDL4JTest

* Use nd4j-common-tests as transient dependency

* Enums and tests added

* Added codegenerated methods

* Use namespace methods

* Replace DifferentialFunctionFactory  with codegenerated classes

* Fixed linspace

* Namespaces regenerated

* Namespaces used instead of factory

* Regenerated base classes

* Input format extended

* Added weights format to conv2d config

* Refactoring

* dl4j base test functionality

* Different tests base class per module

* Check base class for dl4j-graph subproject tests

* Check if test classes extend BaseDL4JTest

* Use nd4j-common-tests as transient dependency

* Enums and tests added

* Added codegenerated methods

* Use namespace methods

* Replace DifferentialFunctionFactory  with codegenerated classes

* Fixed linspace

* Namespaces regenerated

* Regenerated base classes

* Regenerated namespaces

* Generate nd4j namespaces

* INDArrays accepting constructors

* Generated some ops

* Some fixes

* SameDiff ops regenerated

* Regenerated nd4j ops

* externalErrors moved

* Compilation fixes

* SquaredDifference - strict number of args

* Deprecated code cleanup. Proper base class for tests.

* Extend test classes with BaseND4JTest

* Extend test classes with BaseDL4JTest

* Legacy code

* DL4J cleanup

* Exclude test utils from base class check

* Tests fixed

* Arbiter tests fix

* Test dependency scope fix + pom.xml formatting

Signed-off-by: Alex Black <blacka101@gmail.com>

* Significant number of fixes

Signed-off-by: Alex Black <blacka101@gmail.com>

* Another round of fixes

Signed-off-by: Alex Black <blacka101@gmail.com>

* Another round of fixes

Signed-off-by: Alex Black <blacka101@gmail.com>

* Few additional fixes

Signed-off-by: Alex Black <blacka101@gmail.com>

* DataVec missing test scope dependencies

Signed-off-by: Alex Black <blacka101@gmail.com>

Co-authored-by: Alex Black <blacka101@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/455a5d112d2189f08f038752cf15b47ab8001f84
286,286.0,286.0,deeplearning4j/deeplearning4j,0eca33ad94030d5bbc6779e03107a60910125a0f,"Shugeo cuda solver fix (#383)

* Refactored cuSolver handle usage to handle LaunchContext instance properly.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored svd solver usage with LaunchContext instance singleton.

Signed-off-by: shugeo <sgazeos@gmail.com>

* add device locks for cuSolver uses

Signed-off-by: raver119 <raver119@gmail.com>

Co-authored-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/0eca33ad94030d5bbc6779e03107a60910125a0f
287,287.0,287.0,deeplearning4j/deeplearning4j,1a35ebec2ed7209e7e732246dd505c94d482a136,"RL4J: Add Backwardly Compatible Builder patterns (#326)

* Starting to switch configs of RL algorithms to use more fluent builder patterns. Many parameter choices in different algorithms default to SOTA and only be changed in specific cases

Signed-off-by: Bam4d <chris.bam4d@gmail.com>

* remove personal gpu-build file

Signed-off-by: Bam4d <chrisbam4d@gmail.com>

* refactored out configurations so they are heirarchical and re-usable, this is a step towards having a plug-and-play framework for different algorithms

* backwardly compatible configurations

* adding documentation to new configuration classes

Signed-off-by: Bam4d <chrisbam4d@gmail.com>

* private access modifiers are better suited here

Signed-off-by: Bam4d <chrisbam4d@gmail.com>

* RL4j does not compile without java 8 due to previous updates

fixing null pointers when listener arrays are empty

Signed-off-by: Bam4d <chrisbam4d@gmail.com>

* fixing copyright headers

Signed-off-by: Bam4d <chrisbam4d@gmail.com>

* uncomment logging line

Signed-off-by: Bam4d <chrisbam4d@gmail.com>

* fixing default value for learningUpdateFrequency

fixing test failure due to #352

Signed-off-by: Bam4d <chrisbam4d@gmail.com>

Co-authored-by: Bam4d <chris.bam4d@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/1a35ebec2ed7209e7e732246dd505c94d482a136
288,288.0,288.0,deeplearning4j/deeplearning4j,69c92ca5ae517bcab4f0aad0eec92b128b01644d,"Learning updaters for gradient (#335)

* libnd4j raw implementation of sgd upader

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j some corrections and simple test added

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j some corrections after discussion

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j integrate applyScalar

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j raw implementation of rmsPropUpdater on cpu

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j fix operations declaration

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j rmsPropUpdater added, test cases for sgd, etc

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j fixed several typos

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j some fixes and improvements for rmsPropUpdater based on Java tests

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j fixed cuda implementation, update tests and corrected behavior according java tests

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j adaGrad updater added

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j one minor fix for ada grad

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j several more fixes for ada_grad

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j nesterovs updater added

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j fixed nesterovs updater behavior, several typos and rename file

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j one minor typo

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j ada max updater added

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j fixed several typos in adaMax updater

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j fixed several typos in adaMaxUpdater

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j several fixes for adaMax, added Adam Updater

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j adaDeltaUpdater added, minor fixes for adamUpdater

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j several fixes for adaDeltaUpdater

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j nadamUpdater added

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j one more correction for nadam updater

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j several fixes for nadam updater and added amsGradUpdater

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j several typos fixed in amsGradUpdater

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j some corrections and added f order support rmsProp updater

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j added support of f order for all updaters and modify tests for testing in place

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j fixed issues for updates when not in place mode used, added tests for f order

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j added input shape checks

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j some corrections for different cases handling

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j some code clean up and optimize per request

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j updaters refactoring after review

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* SgdUpdater wrapper

Signed-off-by: raver119 <raver119@gmail.com>

* first test

Signed-off-by: raver119 <raver119@gmail.com>

* RmsPropUpdater added

Signed-off-by: raver119 <raver119@gmail.com>

* NadamUpdater + NesterovsUpdater

Signed-off-by: raver119 <raver119@gmail.com>

* AmsGradUpdater

Signed-off-by: raver119 <raver119@gmail.com>

* AdamUpdater added

Signed-off-by: raver119 <raver119@gmail.com>

* AdaGradUpdater + AdaDeltaUpdater + AdaMaxUpdater

Signed-off-by: raver119 <raver119@gmail.com>

* AdaGradUpdater test added

Signed-off-by: raver119 <raver119@gmail.com>

* libnd4j remove input parameters parsing through NDArray, split implementation of helpers to separate files, added some rename, etc

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j next step to split operations implementation into separate files

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j merge master and minor corrections

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j revert some changes of split implementation

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j forgot to add header file

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* public default constructors

Signed-off-by: raver119 <raver119@gmail.com>

* ImportClassMapping updated

Signed-off-by: raver119 <raver119@gmail.com>

Co-authored-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/69c92ca5ae517bcab4f0aad0eec92b128b01644d
289,289.0,289.0,deeplearning4j/deeplearning4j,f79207033b06322ab35bd6000e43a00d472fb9e8,"SameDiff multi-threaded inference (#263)

* #8682 Don't log openmp BLAS threads for CUDA

Signed-off-by: Alex Black <blacka101@gmail.com>

* #8654 Add SameDiff multi-threaded tests

Signed-off-by: Alex Black <blacka101@gmail.com>

* Switching to op context for SameDiff exec

Signed-off-by: Alex Black <blacka101@gmail.com>

* Next steps

Signed-off-by: Alex Black <blacka101@gmail.com>

* Most back to passing

Signed-off-by: Alex Black <blacka101@gmail.com>

* Fixes

Signed-off-by: Alex Black <blacka101@gmail.com>

* Better tests, test refactoring

Signed-off-by: Alex Black <blacka101@gmail.com>

* Small tweak

Signed-off-by: Alex Black <blacka101@gmail.com>

* Code duplication reduction

Signed-off-by: Alex Black <blacka101@gmail.com>

* More code deduplication

Signed-off-by: Alex Black <blacka101@gmail.com>

* CUDA fixes

Signed-off-by: Alex Black <blacka101@gmail.com>

* More CUDA fixes

Signed-off-by: Alex Black <blacka101@gmail.com>

* More fixes

Signed-off-by: Alex Black <blacka101@gmail.com>

* Small fix

Signed-off-by: Alex Black <blacka101@gmail.com>

* ND4S small fixes

Signed-off-by: Alex Black <blacka101@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/f79207033b06322ab35bd6000e43a00d472fb9e8
290,290.0,290.0,deeplearning4j/deeplearning4j,5dae4069cf788a9ea1c34bc675548d2aed5ad517,"Shugeo random expo fix2 (#295)

* Refactored exponential distribution implementation.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored exponential distribution and tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored test to new result sets.

Signed-off-by: shugeo <sgazeos@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/5dae4069cf788a9ea1c34bc675548d2aed5ad517
291,291.0,291.0,deeplearning4j/deeplearning4j,41bde8f885a7af57b2893e583f1d047896fd06e2,"Softmax BP mkldnn implementation (#301)

* libnd4j mkldnn softmax_bp operation implementation and integration, 2 tests added, need some refactoring and code clean up and more testing with different input shapes

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j softmax_bp update, code refactoring, etc

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j merge master, fixed typos, minor tweaks, code clean up

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j  integrate mkldnnUtils helpers in other mkldnn operations

Signed-off-by: Oleg <oleg.semeniv@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/41bde8f885a7af57b2893e583f1d047896fd06e2
292,292.0,292.0,deeplearning4j/deeplearning4j,330a69d4e2eb1224fdf2440ca84a6b242f50314f,"Shugeo solve ls (#203)

* lstsq op. Initial commit.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Least squares linear problem solve op (lstsq). Cpu draft implementation.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed shape routine and tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added test for lstsq op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Rectification for lstsq op implementation.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Corrected test to avoid numerical inconsistensy.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added prints for check computing.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Corrected tests to use evalueate facility instead.

Signed-off-by: shugeo <sgazeos@gmail.com>

* CPU implementation of MatrixSolveLs op and tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added cuda implementation for helpers with lstsq op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored tests for lstsq op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added processing for empty inputs.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Merged tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored lstsq op for fast case.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed test.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored lstsq op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed some issues with solve.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed lstsq op to avoid erros.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added kernel for giagonal factor

Signed-off-by: shugeo <sgazeos@gmail.com>

* lstsq wrapper and triangular_solve fixed

* Added proper processing empty inputs and test.

Signed-off-by: shugeo <sgazeos@gmail.com>

* SequenceMask test

* Build fixed

* Added proper processing of empty inputs with solve op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Mapping added

* Added check of input shapes with solve op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added a couple of tests for lstsq op and minor changes with cuda helper for one.'

Signed-off-by: shugeo <sgazeos@gmail.com>

* Tests on

* Refactored test for lstsq op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed test

* Added another approach for lstsq op aka solve_ls.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Finished cpu part for solve_ls op helpers.

* Added helper for low triangular matrix inversion.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored alternate solve_ls cpu implementation.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Removed alternate approach for solve_ls op. Added multithreading with matrix inversion.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Assert fixed

* Refactored multithreading for inverse matricies.

Signed-off-by: shugeo <sgazeos@gmail.com>

Co-authored-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/330a69d4e2eb1224fdf2440ca84a6b242f50314f
293,293.0,293.0,deeplearning4j/deeplearning4j,b686368b82027a756572799182b14c97f8892b44,"Refactoring split operation (#266)

* libnd4j moved split operation implementation to helpers before special case adding

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j minor fixes for general split operation move, merge master

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libndj4 split cpu implementation

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* - provide cuda helper for split op

Signed-off-by: Yurii <iuriish@yahoo.com>

* - minor correction

Signed-off-by: Yurii <iuriish@yahoo.com>

* - minor correction 2

Signed-off-by: Yurii <iuriish@yahoo.com>

* libnd4j moved split implementation from specials to split.cpp

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j update loopkind selections for 3D, 4D and 5D cases

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j removed unnecessary BUILD_SINGLE_TEMPLATE

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

Co-authored-by: Yurii Shyrma <iuriish@yahoo.com>",https://github.com/deeplearning4j/deeplearning4j/commit/b686368b82027a756572799182b14c97f8892b44
294,294.0,294.0,deeplearning4j/deeplearning4j,1bb3ae4b033b38674e7378c08384bde29a66f4af,"Shugeo unordered map (#256)

* Refactored usage of std::map to std::unordered_map instead.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Eliminated crash with wrong ShapeDescriptor hash.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Eliminated crash with TadDescriptor hash.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored Stash hash.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored hashes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored TadDescriptor hash and top_k mapping.

* Refactored hashes for ShapeDescriptor and TadDescriptor classes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored hash for ConstantDescriptor and ShapeDescriptor classes.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed map using with cuda platform.

Signed-off-by: shugeo <sgazeos@gmail.com>

* - few rearrangements for hash functions
- shared openblas allowed

Signed-off-by: raver119 <raver119@gmail.com>

* exports

Signed-off-by: raver119 <raver119@gmail.com>

* exports

Signed-off-by: raver119 <raver119@gmail.com>

* Stash reverted to std::map

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* Added additional test.

Signed-off-by: shugeo <sgazeos@gmail.com>

* different maps for different compilers

Signed-off-by: raver119 <raver119@gmail.com>

* missing include

Signed-off-by: raver119 <raver119@gmail.com>

* fix the leak

Signed-off-by: raver119 <raver119@gmail.com>

Co-authored-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/1bb3ae4b033b38674e7378c08384bde29a66f4af
295,295.0,295.0,deeplearning4j/deeplearning4j,fe47f52896a3138beeb94361ab40e5510f83f7c1,"Oleh tenzor mmul (#231)

* Libnd4j: TensorMMul backprop op #8174, raw implementation

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: TensorMMul backprop op #8174 merge master and some corrections

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: TensorMMul backprop op #8174 algorithm update, need testing, sync with  master

* Libnd4j: TensorMMul backprop op #8174 fixed incorrect B axes calculation

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: TensorMMul backprop op #8174 optimize axes identification and fix bug of indeces overlapping, added first test. need testing with different shapes

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: TensorMMul backprop op #8174 some fixes and improvements need more testing

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: TensorMMul backprop op #8174 fixed order of matrix multiply

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: TensorMMul backprop op #8174 fixed issue of incorrect axes definition, add tests based on TF, need additional testing for case dLdC not equal 1

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: TensorMMul backprop op #8174 fixed scalar case add test

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: TensorMMul backprop op #8174 fixed bp algorithm, axes definition, need some mode testing with different orders combination f,c; c,f f,f and add some checks for inputs

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: TensorMMul backprop op #8174 some checks and corrections added tests, exists the problem with different input orders support A-f B-c and A-f B-f

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: TensorMMul backprop op #8174 sync master

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* - correct bug in MmulHelper::tensorDot(a, b, c, axes_a, axes_b,permutForC)

Signed-off-by: Yurii <iuriish@yahoo.com>

* Libnd4j: TensorMMul backprop op #8174 code clean up and refactoring

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* - add check for linspase ordered permutations in ShapeUtils::evalShapeForTensorDot

Signed-off-by: Yurii <iuriish@yahoo.com>

* - provide additional code in shape::reshape stuff in order to reduce amount of allocation/copy operations during reshaping procedure

Signed-off-by: Yurii <iuriish@yahoo.com>

* - further work on problem of wrong shape evaluation during permute/reshape procedures

Signed-off-by: Yurii <iuriish@yahoo.com>

* - still looking for bug reason in reshape/permute stuff

Signed-off-by: Yurii <iuriish@yahoo.com>

* - correct bug in transform cuda native ops

Signed-off-by: Yurii <iuriish@yahoo.com>

* - correct bug in NDArray::assign

Signed-off-by: Yurii <iuriish@yahoo.com>

* - remove old shape::reshape stuff

Signed-off-by: Yurii <iuriish@yahoo.com>

* - add possibility to disable copy of old buffer to new buffer during reshape operation in NDArray class

Signed-off-by: Yurii <iuriish@yahoo.com>

* - correct bug in tensorDot which had to do with wrong pointers assigments

Signed-off-by: Yurii <iuriish@yahoo.com>

Co-authored-by: Oleh <oleg.semeniv@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/fe47f52896a3138beeb94361ab40e5510f83f7c1
296,296.0,296.0,deeplearning4j/deeplearning4j,41ff907bc628f86db2bde6034ec809921280cfe1,"Shugeo solve linear (#191)

* linear equations systems solve op. Initial commit.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed compiling issues.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Linear equations systems solve. The next stage commit.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added test for linear equations systems solve operation.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added additional test and fixed lower matrix retrievance.

* Implementation for solve of the systems of linear equations.""

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored permutation generation.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added restore for permutations batched with cuda helper for solve op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Finished cuda implementation for solve op helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored cpu helpers for solve op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fix gtest output on Windows

* Fixed issue with permutation matrix for cuda implementation.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed issue with permutation matrix for cpu implementation.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Eliminated waste comments.

Signed-off-by: shugeo <sgazeos@gmail.com>

* LinearSolve added

* Mapping added

* Javadoc added

* Refactored implementation of triangular_solve helpers and tests for solve matrix equations generally.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added a test for solve op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Solve test added

* Fix for TF import

Co-authored-by: Serhii Shepel <9946053+sshepel@users.noreply.github.com>
Co-authored-by: raver119 <raver119@gmail.com>
Co-authored-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/41ff907bc628f86db2bde6034ec809921280cfe1
297,297.0,297.0,deeplearning4j/deeplearning4j,d52e67209e3de6af2d67867836eba9456a901dfc,"Oleh convert (#200)

* StringUtils for utf convertor raw implementation of all possible combinations, need to be add counter of bytes per symbol for any type and add api to call convertors and store data

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor more corrections to support convertors

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor some corrections and bug fixes, need review to discuss how to add multi-threading

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 some corrections to move to multi-threading, add one test need discussion data inputs/outputs array presentation, need discussion the way of multi-threading

* StringUtils for utf convertor #8613 tests added some corrections to optimize build

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 some corrections and code clean up

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 code clean up and optimize usage, need update ndarray factory before replace std usage

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 some staff to integrate converters into NDArrayFactory, update tests and add some functionality

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 minor corrections and bug fix before discussion

* StringUtils for utf convertor #8613 some fixes and tets

* StringUtils for utf convertor #8613 some more staff to support different unicode

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 fix linking bug

* StringUtils for utf convertor #8613 corrected several tests as defaults for string ndarray changed

* StringUtils for utf convertor #8613 replace some incorrect implementation, revert some test changes, need sync before testing

* StringUtils for utf convertor #8613 fixed several thing that were badly implemented yesterday, need optimization, testing (before testing have to be add support of u32 and u16 buffer visualization)

* StringUtils for utf convertor #8613 fixed to support u16 and u32, and convertor in ndarray, fix buffer print, etc

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 merge master and sync with server

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 some correction for string cast, need print check only asci support

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 merge master, remove copies and add cast, need test, refactoring according review and clean up

* StringUtils for utf convertor #8613 fixed cast and copy issues

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 fixed cuda and update tests

* StringUtils for utf convertor #8613 integration into NdArray, fix several tests for build pass, refactoring, etc

* - avoid ambiguity of NDArray ctrs overloading in some tests

Signed-off-by: Yurii <iuriish@yahoo.com>

* StringUtils for utf convertor #8613 NDArray string constructors added, updated NDArrayFactory, refactoring unicode and tests, etc

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 fixed cuda build and test, refactoring and void* added to some functions

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613  void* integration, removed copy operation, refactoring, added tests for NDArray string constructors, etc

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 several more fixes, improvements and updates

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 master merge, code clean up and optimization before review

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 minor fixes string element size define

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 revert last changes as mistake

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 fixed NDArray constructor build problem, remove order from string factory, fixed order use for factory via project, added catch of incorrect sync in cast of arrays to data types, fixed e method for strings, etc

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 added javacpp hack, added multi-threading, minor corrections in license agreement

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* StringUtils for utf convertor #8613 windows builds fix, as ""sting"" is not treated as utf8

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

Co-authored-by: Yurii Shyrma <iuriish@yahoo.com>",https://github.com/deeplearning4j/deeplearning4j/commit/d52e67209e3de6af2d67867836eba9456a901dfc
298,298.0,298.0,deeplearning4j/deeplearning4j,99a54829c20f109e858075632736dabaa5945104,"Shugeo resize area fix2 (#181)

* Added test for issue with resize_area op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added a pair of tests for resize_are op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored resize_area kernel to avoid shared memory overflow.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Eliminated prints with tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* ignore bad test

Signed-off-by: raver119 <raver119@gmail.com>

* Fixed test with resize_area.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed test for float constants.

Signed-off-by: shugeo <sgazeos@gmail.com>

Co-authored-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/99a54829c20f109e858075632736dabaa5945104
299,299.0,299.0,deeplearning4j/deeplearning4j,2717b2593145c0b870b38b4132e157d5926badc0,"Shugeo qr (#153)

* Added qr op implementation. Initial version.

* Fixed doc for qr op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Implementation of QR decomposition. CPU platform version.

* Added a pair of tests for qr op testing.

Signed-off-by: shugeo <sgazeos@gmail.com>

* QR implementation.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Corrected norm using.

* Properly calculated intermediate results with QR decomposition.

* Another step to implement QR algorithm by householder.

* Cpu implementatio for QR decomposition. The first working edition.

* Corrected test to QR decomposition.

* Added tad multithreading with QR implementation.

* Finished cpu implementation for QR decomposition helpers.

* Refactored tests and improved multithreading.

* Refactored QR cpu implementation and update cuda implementation helpers.

* Cuda QR helper implementation. The first working edition.

* Eliminated waste prints.

* Restore multithreading with cuda implementation.

* Ops names corrected

* Refactored qr op helpers to optimize.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Eliminated waste manual ticking.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored memory allocation to avoid waste memory usage.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored matrixMinor method both for cuda and cpu platforms.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored method of vmul to use raw buffers instead type conversion.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored temporary array of matricies.

Signed-off-by: shugeo <sgazeos@gmail.com>

Co-authored-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>
Co-authored-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/2717b2593145c0b870b38b4132e157d5926badc0
300,300.0,300.0,deeplearning4j/deeplearning4j,815a2908af18eca4692bb8bdc928e1f46ce8aef4,"Shugeo solve triangular (#173)

* Added implementation of the triangular_solve op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed compilation issues.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added verification of input data and helpers facilities for triangular_solve op.'

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added cpu implementation for triangular_solve helpers.

* Added tests and implementation for upper triangular equations.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added a pair of cases to tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added multithreading with cpu helpers for triangular_solve op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added cuda implementation of triangular_solve op helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Finished cuda implementation of triangular_solve helpers and tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed copyright marks.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Corrected grammar errors with doc and error messages.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored matricies processing with triangular_solve cuda helper implementation.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added triangular_solve wrapper

* Fixed mapping

* Added processing for adjoint with cpu helpers of triangular_solve op implementation.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added implementation for adjoint routine with cuda platform.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added multithreading with adjoint routine for cpu platform.

Signed-off-by: shugeo <sgazeos@gmail.com>

Co-authored-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/815a2908af18eca4692bb8bdc928e1f46ce8aef4
301,301.0,301.0,deeplearning4j/deeplearning4j,e50b285c2c572a2e361da15ce9a45ccaa75dede5,"Shugeo resize area (#162)

* Added implementation for resize_area op. Initial commit.

* Added implementation of resize_area op. Initial revision.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Corrected resizeArea functor call.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Implementation of resize_area. Cpu platform helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Implementation for resize_area helpers. The first part revision.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added a set of tests for resize_area op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Cuda implementation for resize_area. Initial approach.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Adding multithreading for resize_area algorithm.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Cuda implementation of resize_area helpers. Shared memory approach.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored resizeAreaKernel with cuda implementation.

* Eliminated compilation errors.

* ResizeArea helpers for cuda platform. The first working revision.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added test for batched resize_area op testing.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Implementation of resize_are for cuda platform and tests.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed multithreading with resize_area op helper.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Corrected copyright marks with sources.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Corrected copyright mark for resize_area op implementation.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Corrected copyright mark for parity ops header.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Corrected typo in strings and so on with image resize ops.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored resize_area helpers and multithreading.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added ResizeArea wrapper

* Added test with align_corners and fixed shape processing with only int args given for output size.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Added test

* TF mapping for ResizeArea

* Fixed implementation issues with resize_area op for both platforms.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored image resizer struct to use flexible types for ints and floats.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Improved multithreading with resizeAreaKernel launch.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Use asynchronical memory copying with cuda platform image resize allocations.

Signed-off-by: shugeo <sgazeos@gmail.com>

Co-authored-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/e50b285c2c572a2e361da15ce9a45ccaa75dede5
302,302.0,302.0,deeplearning4j/deeplearning4j,8fc0e63ce7c765ec646db424e817acf927ba5194,"Oleh powderev (#171)

* Libnd4j: Add broadcastable elementwise power derivative #7461 first step of Pow_bp operation implementation

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: Add broadcastable elementwise power derivative #7461 some corrections of calculation steps

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: Add broadcastable elementwise power derivative #7461 some bug fixes, the PowDerevative op made broadcastable, add the raw tests for op, need refactoring to use broadcast ops

* Libnd4j: Add broadcastable elementwise power derivative #7461 fixed several bugs add broadcast support and tests, need to fix scalar+array and array+scalar

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: Add broadcastable elementwise power derivative #7461 fixed bugs for scalar inputs, fixed multinomial tests, added tests

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: Add broadcastable elementwise power derivative #7461 fised bugs for different shapes support, tests updated

* Libnd4j: Add broadcastable elementwise power derivative #7461 applied all possible variants via tiled arrays, add support of broadcast for Pow and PowDerivative ops, covered by tests, before review have to be replaced tiled implementation by applyTrueBroadcast

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: Add broadcastable elementwise power derivative #7461 replaced tile by broadcast implementation, fixed issue with negative x input, corrected tests, need additional testing

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: Add broadcastable elementwise power derivative #7461 added and corrected test cases, corrected implementation need review

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: Add broadcastable elementwise power derivative #7461 code clean up

* Libnd4j: Add broadcastable elementwise power derivative #7461 code clean up, removed some tests, add tests with scalar

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: Add broadcastable elementwise power derivative #7461 code improvement and clean up, split tests

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: Add broadcastable elementwise power derivative #7461 some code clean up

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* Libnd4j: Add broadcastable elementwise power derivative replace __isnanf by internal realization

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* pow_bp wrapper

* Fixed PowBp wrapper

* Tests added

* Test fixed

* Fix return type

* Disable powBp usage

* Pow backprop changed

Co-authored-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/8fc0e63ce7c765ec646db424e817acf927ba5194
303,303.0,303.0,deeplearning4j/deeplearning4j,6943a5f57aa6d4229ba9445a85e9dd296e848fff,"Shugeo lgamma (#170)

* lgamma op. Initial version.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored lgamma op and test.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Lgamma wrapper

* Added TF mapping

Co-authored-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/6943a5f57aa6d4229ba9445a85e9dd296e848fff
304,304.0,304.0,deeplearning4j/deeplearning4j,211c0df76f734028ebd1bf0a72825b6ba9fa9da6,"Oleh rgb to gray scale (#138)

* libnd4j: RgbToGrayscale op #8536 - raw implementation in user branch, need checks for integration and adding other orders

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j: RgbToGrayscale op #8536 next step of merging images

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j: RgbToGrayscale op #8536, Revert merge of hsv_to_rgb and rgb_to_hsv as cause conflicts in naming need refactoring before merge, implementation of rbg_to_grs added

* libnd4j: RgbToGrayscale op #8536 imlementation and conflict resolve

* libnd4j: RgbToGrayscale op #8536 merged operations with images into image, renamed methods and files

* libnd4j: RgbToGrayscale op #8536 added test for rgbToGrayScale, need clarification and fixed tests case run

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* libnd4j: RgbToGrayscale op #8536 bug fixing and need review

* libnd4j: RgbToGrayscale op #8536 some additional corrections after review

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* - minor corrections in rgbToGrs test1

Signed-off-by: Yurii <iuriish@yahoo.com>

* libnd4j: RgbToGrayscale op #8536, corrected tests and rbf_to_grs, fixed problems, refactoring, need review

* libnd4j: RgbToGrayscale op #8536 fix for 'f' order in rgbToGrs

* libnd4j: RgbToGrayscale op #8536 fixed several bugs with dimC, test case refactoring and improve

Signed-off-by: Oleg <oleg.semeniv@gmail.com>

* - add cuda kernel for rgbToGrs op

Signed-off-by: Yurii <iuriish@yahoo.com>

* - fix linkage errors

Signed-off-by: Yurii <iuriish@yahoo.com>

Co-authored-by: Yurii Shyrma <iuriish@yahoo.com>",https://github.com/deeplearning4j/deeplearning4j/commit/211c0df76f734028ebd1bf0a72825b6ba9fa9da6
305,305.0,305.0,deeplearning4j/deeplearning4j,67d8199165cb96d08bdcc94ef41f4860b5825cdd,"[WIP] Shugeo lup (#126)

* Added infrastructure for implementation op lu for both cuda and cpu platforms.

* Added implementation of helpers with lu op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored LU decomposition to use vector of permutations instead.

* Refactored helpers for lu op.

* Fixed crash with determinant op.

* Refactored cpu LU op heleper.

* Added implementation for lu op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed issue with argmax on column.

* Added multithreaded behaviour for lu op helper.

* Fixed multithreaded cpu implementation helpers for lu op.

* Added cuda implementation for lu op helper.

* Finished lu helper implementation for cuda platform.

* Eliminated waste prints and comments.

* Fixed race condition and multithreading issues.

* Fixed memory leak with shape construction.

* Corrected test for lu op to avoid near zero elements on the main diagonal.""

Signed-off-by: shugeo <sgazeos@gmail.com>

* Improved test for adjust_constast op.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed issues with cuda implementation of resize_bicubic helpers.

Signed-off-by: shugeo <sgazeos@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/67d8199165cb96d08bdcc94ef41f4860b5825cdd
306,306.0,306.0,deeplearning4j/deeplearning4j,b32dd1bf92ca2aa5160cb9f64f351510d6baaa36,"[WIP] resize_bicubic types (#116)

* resize_bicubic: allow more dtypes

Signed-off-by: raver119 <raver119@gmail.com>

* resize_bicubic: allow less dtypes

Signed-off-by: raver119 <raver119@gmail.com>

* Refactored resize_bicubic op to full conform with TF1.5 and tests.

* Corrected test to proper data type output.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Corrected double input test to float constant outputs.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Finished with correction of tests for bicubic interpolated resizes expected.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Fixed adjust_contrast ops to allow non-RGB inputs.

Signed-off-by: shugeo <sgazeos@gmail.com>

* Refactored adjust_contrast_v2 to conform with TF one.

Signed-off-by: shugeo <sgazeos@gmail.com>

* AdjustContrast tests activated

* two typos fixed

Signed-off-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/b32dd1bf92ca2aa5160cb9f64f351510d6baaa36
307,307.0,307.0,deeplearning4j/deeplearning4j,972fae60dc3afb39c08fcf05cb80ce2f170c1365,"Update master (#8511)

* cleaned up bert iterator tests (#110)

Signed-off-by: eraly <susan.eraly@gmail.com>

* Various pre-release fixes (#111)

* Various fixes

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Fix default dtypes for MaxPoolWithArgmax

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Small pre-release tweak (#112)

* Log UI address on launch as in previous Play-based UI

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Logging level tweak for UI

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* http not https

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* datavec python ensure host (#113)

* ensure host

* one more host ensure

* info->debug

* [WIP] reverse improvements (#115)

* initial commit

Signed-off-by: raver119 <raver119@gmail.com>

* reverse draft

Signed-off-by: raver119 <raver119@gmail.com>

* reverse kernel

Signed-off-by: raver119 <raver119@gmail.com>

* reverse kernel

Signed-off-by: raver119 <raver119@gmail.com>

* 2 micro fixes

Signed-off-by: raver119 <raver119@gmail.com>

* Shugeo resize fix5 (#102)

* Refactored resize images ops to use TF-like bool args as input.

* Refactored helpers for cpu implementation of resize_bilinear and resize_nearest_neighbor ops.

* Refactored cuda implementation for image.resize_bilinear and image.resize_nearest_neighbor ops helpers.

* Refactored nearest_neighbor resize op.

* Added a pair of tests for special case of resize_bilinear algorithm.

* Fixed issue with resize_bilinear op.

* Refactored cpu implementation for helpers with resize_nearest_neighbor op.

* Final fixed for resize ops to conform TF v.1.5

* Refactored cuda helpers for resize_neares_neighbor op.

* Fixed resize_bilinear to accept proper data.

* Fixed issue with non-float input for resize_bilinear op.

* Refactored cuda helper for resize_bilinear to proper process non-float inputs.

* Added tests for resize_bilinear to int inputs.

* Fixed ResizeBilinear wrapper

* Tests fixed

* Fixed float and bool constant to avoid overflow for some kind of compilers.

* Corrected float constants with float data type.

* Added f suffix for float constants.

* Corrected float constant to avoid overflow with initializing lists.

* Corrected float initializing list with float input.

* Corrected bool constant with initalizing list.

* Corrected float and bool values with initializing lists.

* Fixed wrong constant.

* Fixed issue with 1x1 input picture for resize.

* ResizeBilinear default values on import fix

Signed-off-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/972fae60dc3afb39c08fcf05cb80ce2f170c1365
308,308.0,308.0,deeplearning4j/deeplearning4j,e7730eded4a290904a7bb1390a8ea1c3b362e93b,"delete unused and refactor. (#8262)

Signed-off-by: Robert Altena <Rob@Ra-ai.com>",https://github.com/deeplearning4j/deeplearning4j/commit/e7730eded4a290904a7bb1390a8ea1c3b362e93b
309,309.0,309.0,deeplearning4j/deeplearning4j,e09a78523277e8c37c052415091ad9266c2ffee8,"Shugeo resize fix5 (#102)

* Refactored resize images ops to use TF-like bool args as input.

* Refactored helpers for cpu implementation of resize_bilinear and resize_nearest_neighbor ops.

* Refactored cuda implementation for image.resize_bilinear and image.resize_nearest_neighbor ops helpers.

* Refactored nearest_neighbor resize op.

* Added a pair of tests for special case of resize_bilinear algorithm.

* Fixed issue with resize_bilinear op.

* Refactored cpu implementation for helpers with resize_nearest_neighbor op.

* Final fixed for resize ops to conform TF v.1.5

* Refactored cuda helpers for resize_neares_neighbor op.

* Fixed resize_bilinear to accept proper data.

* Fixed issue with non-float input for resize_bilinear op.

* Refactored cuda helper for resize_bilinear to proper process non-float inputs.

* Added tests for resize_bilinear to int inputs.

* Fixed ResizeBilinear wrapper

* Tests fixed

* Fixed float and bool constant to avoid overflow for some kind of compilers.

* Corrected float constants with float data type.

* Added f suffix for float constants.

* Corrected float constant to avoid overflow with initializing lists.

* Corrected float initializing list with float input.

* Corrected bool constant with initalizing list.

* Corrected float and bool values with initializing lists.

* Fixed wrong constant.

* Fixed issue with 1x1 input picture for resize.

* ResizeBilinear default values on import fix

Signed-off-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/e09a78523277e8c37c052415091ad9266c2ffee8
310,310.0,310.0,deeplearning4j/deeplearning4j,190575196cfe900d117d142068bbee66b406b42c,Refactored pad and mirror_pad ops to conform with TF. (#100),https://github.com/deeplearning4j/deeplearning4j/commit/190575196cfe900d117d142068bbee66b406b42c
311,311.0,311.0,deeplearning4j/deeplearning4j,1e9ff114aa7d51617478a21a36d66074a74426d1,"Shugeo atomic tests (#97)

* Added atomic tests for atomicAdd, atomicSub and atomicDiv.

* Fixed atomicAdd for 16bit ints.

* Fixed atomicMul for 16 floats.

* Eliminated waste prints.

* Fixed problems with double type on matrix inverse helepers.

* Eliminated commented wrong code.

* Refactored atomicMul for 16bit types.

* few more minor tweaks

Signed-off-by: raver119 <raver119@gmail.com>

* Fixed fake_quant_with_min_max_vars_per_channel args processing.",https://github.com/deeplearning4j/deeplearning4j/commit/1e9ff114aa7d51617478a21a36d66074a74426d1
312,312.0,312.0,deeplearning4j/deeplearning4j,dc66a52bc7c6fcda7d37cd9fa1b9f85abaa673db,"[WIP] Shugeo release fixes4 (#91)

* Fixed fake_quant_with_min_max_vars op.

* Refactored bitcast op.

* bad linspace removed

Signed-off-by: raver119 <raver119@gmail.com>

* Corrected tests for bitcast op.

* Eliminated debug prints.

* one fix

Signed-off-by: raver119 <raver119@gmail.com>

* one fix

Signed-off-by: raver119 <raver119@gmail.com>

* Added a pair of comments.",https://github.com/deeplearning4j/deeplearning4j/commit/dc66a52bc7c6fcda7d37cd9fa1b9f85abaa673db
313,313.0,313.0,deeplearning4j/deeplearning4j,009007120becd6644ad302fc096624681958b9c2,"Shugeo_release_fixes3 (#81)

* Implementation for non_max_suppression_v3 was added. Initial version

* Added check for overcome threshold.

* Added definition for V3 method.

* java remapping for NonMaxSuppressionV3

Signed-off-by: raver119 <raver119@gmail.com>

* Fixed proporly processing of an empty output and test.

* Refactored op to less threshold data to float.

* Implemented cuda-based helper for non_max_suppression_v3 op.

* Fixed fake_quant_with_min_max_vars op.

* Fixed tests with float numbers.

* - assert now stops execution
- sortByKey/sortByValue now have input validation

Signed-off-by: raver119 <raver119@gmail.com>

* missing var

Signed-off-by: raver119 <raver119@gmail.com>

* Fixed proper processing for zero max_size inputs.

* Refactored kernel callers.

* Fixed return statement for logdet op helper.

* Refactored unsorted segment SqrtN op.

* get back 8 tail bytes on CUDA

Signed-off-by: raver119 <raver119@gmail.com>

* Refactored segment prod ops and helpers for cuda and tests.

* Additional test.

* CudaWorkspace tests updated for 8 tail bytes

Signed-off-by: raver119 <raver119@gmail.com>

* special atomic test

Signed-off-by: raver119 <raver119@gmail.com>

* atomicMul/atomicDiv fix for 16bit values

Signed-off-by: raver119 <raver119@gmail.com>

* Eliminated waste prints.",https://github.com/deeplearning4j/deeplearning4j/commit/009007120becd6644ad302fc096624681958b9c2
314,314.0,314.0,deeplearning4j/deeplearning4j,4187190609fa7df2b9de995a848fdf66d373e83e,"Shugeo release fix2 (#70)

* Corrected input checking and tests for bitcast op.

* Fixed an issue with non_max_suppression form generation and processing with score threshold given.

* Fixed bilinear resize kernel and tests.

* push for Serhii

Signed-off-by: raver119 <raver119@gmail.com>

* Added test for nearest_neighbor resize with int input.

* Added data type check for input/output match.

* Eliminate error in macros.

* Improved output message for type checking.

* Fixed input/output types for op.

* Eliminated waste logging.

* Refactored resize_bilinear helper for multithreading for cpu platform.

* Cosmetic changes only.

* Fixed error for string substitution.

* Skip test for cbow_batch with cuda.

* fix for resizeNearestNeighbor output dtype

Signed-off-by: raver119 <raver119@gmail.com>

* Refactored non_max_suppression helper.

* Refactored shape generation and input handling.

* Added additional test.",https://github.com/deeplearning4j/deeplearning4j/commit/4187190609fa7df2b9de995a848fdf66d373e83e
315,315.0,315.0,deeplearning4j/deeplearning4j,dc0036f2c601b686e80beacd01d7fcf6146b7284,"Shugeo image resize bicubic (#56)

* Added implementation files for image_resize and resize_bicubic ops.

* Image resize and image.resize_bicubic ops implementation. Initial revision.

* Finished with infrastructure development for image.resize_bilinear op and image_resizo op implementation.

* Refactored resize methods.

* Added processing for Mitchelcubic algorithm.

* Added check for input/output sizes.

* Added int and float types for crop_and_resize op.

* Refactored crop_and_resize output type check.

* Added helper for bicubic interpolation as TF v.1 does.

* Added TF v.1 bicubic helper for cuda platform.

* Added cached class for bicubic algorithm.

* Refactored cuda implementation for crop_and_resize helper to use proper output type.

* Added facilities for bicubic interpolation.

* Portion bicubic interpolation from TF.

* Added tests for resize_bilinear testing.

* Working implementation of bicubic interpolation and tests.

* Refactored routines with image_resize bicubic op helper.

* Refactored code with coding standards.

* Refactored cpu helpers for resize_bicubic op.

* Refactored bicubic helpers.

* Added bicubic resize facilities.

* Implementing cuda kernels for bicubic interpolation. Implementation step.

* Cuda implementation of resize_bicubic op helper.

* Refactor image.resize_bicubic op helpers.

* Refactored helpers for resize_bicubic. Added error checking with cuda implementation.

* Refactored cuda implementation of resize_bicubic op helper. The first working revision.

* Cuda arch implementation for resize_bicubic op helper. Full working single-threaded revision.

* Intermediate bicubic interpolation helper for cuda.

* Refactored cpu helper for resize_bicubic.

* Multithreaded cuda implementation for resize_bicubic.

* Fixed merge issues.

* Refactored nlp helpers.

* Replicated resize_bicubic for 3D also.

* Eliminated waste comments of unused code.

* Eliminated waste comments with unused code.

* Eliminated waste template definitions.

* Eliminated waste debug code.

* Eliminated waste comments.

* Fixed multithreading with helpers.

* Fixed test suites for float and double in float point input lists.

* Fixed usage of reshape with 3D/4D on resizes.

* Final fixes.

* Fixed resize_neighbor op problem.",https://github.com/deeplearning4j/deeplearning4j/commit/dc0036f2c601b686e80beacd01d7fcf6146b7284
316,316.0,316.0,deeplearning4j/deeplearning4j,13e5c0a2801a81d23c19060ce10e3c9105b5f642,"Shugeo release fix1 (#61)

* Added a pair of tests for failed ops.

* Fixed cpu helper for draw_bounding_boxes op.

* Refactored implementation of draw_bounding_boxes op to full conform with TF.

* Improved multithreading with draw_bounding_boxes op cuda helper.

* Eliminated log messages.

* Changed logging with draw_bounding_boxes op helper and tests.

* Resize_biliear with 3D input allowed.

* Refactored 3D input acception with resize_bilinear op.

* And another improvement.

* Refactored reshape of input/output for resize_bilinear.

* Improvements final.

* Finished with 3D replication for image.resize_bilinear/_nearest_neighbor.

* Added copyrights for TF code.

* Using new form of multithreading for cpu implementation.

* Fixed shape error.

* Added multithreaded with batches on crop_and_resize functor.

* Refactored multithreading with crop_and_resize and draw_bounding_boxes.",https://github.com/deeplearning4j/deeplearning4j/commit/13e5c0a2801a81d23c19060ce10e3c9105b5f642
317,317.0,317.0,deeplearning4j/deeplearning4j,da1944e8e1c9eae4a372dd013470da8f9517cace,"SameDiff TF import (#49)

* Added implementation files for image_resize and resize_bicubic ops.

* Image resize and image.resize_bicubic ops implementation. Initial revision.

* Minor fix

* Some TF imports disabled.

* Finished with infrastructure development for image.resize_bilinear op and image_resizo op implementation.

* Refactored resize methods.

* Added processing for Mitchelcubic algorithm.

* adjust_contrast

* Small fix for TF import expected value loading when variable name starts with the test name

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Tests

* Tests added.

* Removed tf names absent in mapping.

* Some fixes.

* Small fixes

* Minor change

* Some failing tests.

* Disable failed test

* Ignore some tests

* Fix import class mapping

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Fix float property mapping (flatbuffers)

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Override equality function for model 'dropout'

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Fail tests

* Failed tests ignored temporarily.

* Minor fixes

* Small fix

* Conflict resolved

* Default implementations of tensorflowName and onnxName",https://github.com/deeplearning4j/deeplearning4j/commit/da1944e8e1c9eae4a372dd013470da8f9517cace
318,318.0,318.0,deeplearning4j/deeplearning4j,08853c782985ffe56764bc7285965421bbeb7c4d,"Shugeo random uniform int (#30)

* Corrected randomuniform declaration.

* Refactored uniform distribution for both cuda and cpu platforms.

* Refactored uniform distribution and tests.

* Fixed type usage with indices.

* Refactored uniform distribution implementation and tests to full conform with TF implementation.

* Refactored gamma function to use type util method.

* Copyright changes and fixes with ConstantHelper.

* Added error checking on allocate cuda device memory and operations.",https://github.com/deeplearning4j/deeplearning4j/commit/08853c782985ffe56764bc7285965421bbeb7c4d
319,319.0,319.0,deeplearning4j/deeplearning4j,7b14a9f6032025456ab54345137eb24b35d6f530,"Gamma and Poisson distributions (#27)

* Added implementation for random_gamma op.

* Added implementation for random_poisson op and support classes.

* Added helpers for random_poisson and random_gamma ops.

* Implementation of random_poisson. The first working edition.

* Implementation of random_poisson. Parallelized working edition.

* Implementation of random_gamma. Parallelized working edition with alpha only.

* Added cuda implementation for helper of poisson distribution.

* Corrected shape calculation with random_gamma and tests.

* Finished cpu implementation for gamma distribution.

* Finished cuda implementation for random_gamma op.

* Refactored cpu helpers for random_gamma and random_poisson ops.

* Refactored cuda helpers for gamma and poisson distribution.

* Refactored cuda helper for gamma distribution.

* Refactored cpu helper for random_poisson op.

* Refactored cpu helper for random_gamma op.",https://github.com/deeplearning4j/deeplearning4j/commit/7b14a9f6032025456ab54345137eb24b35d6f530
320,320.0,320.0,deeplearning4j/deeplearning4j,95f7ad7b94df422cd3fe47937817d08dc5a4d72c,"Shugeo suppression overlaps (#9)

* Added non_max_suppression_overlaps op and tests.

* Refactored implementation of non_max_suppression_overlaps.

* Refactoring of implementation of non_max_suppression_overlaps op.

* Refactoring of implementation of non_max_suppression op.

* Fixed portion error.

* Added cuda frontends for image suppression ops.

* Eliminated crash with cuda arch on image.non_max_suppression_overlaps op.

* Improved implementation of image_suppression helper for cpu platform.

* The generic approach of non_max_suppression_overlaps op helper with cuda platform.

* Working cuda implementation of helper non_max_suppression_overlaps op.

* Eliminated waste comments.

* Improved implementations for both platforms

* Refactored cuda implementation of image.non_max_suppression_overlaps op helper.

* Improved cuda implementation of non_max_suppression op helper.

* Refactored cuda implementation of image.non_max_suppression_overlaps op helper.

* Improved cuda implementation of image.non_max_suppression_overlaps op helper.

* Added modifications into cuda implementation for image suppression overlaps op.

* Correct queue emulation with cuda implementation of non_max_suppression_overlaps op.

* Prefinal stage of cuda implementation of non_max_suppression_overlaps.

* Worked cuda implementation of non_max_suppresion_overlaps helper.

* Fixed return to proper thread.

* Improvements for cuda implementation of image.non_max_suppression_overlaps op helper.

* Fixed implementation issues with non_max_suppression_overlaps on cuda platform.

* Fixed skip for non_max_suppression_overlaps on cuda platform.

* Finalize implementation of image_suppression helper and tests.

* Cosmetic changes only.",https://github.com/deeplearning4j/deeplearning4j/commit/95f7ad7b94df422cd3fe47937817d08dc5a4d72c
321,321.0,321.0,deeplearning4j/deeplearning4j,c3f755d975d884a123ca25ecfb9bbc5b30be5e8d,Refactored helpers both for cuda and cpu platforms.,https://github.com/deeplearning4j/deeplearning4j/commit/c3f755d975d884a123ca25ecfb9bbc5b30be5e8d
322,322.0,322.0,deeplearning4j/deeplearning4j,753565145c7c4d1cdbfe3380a26e003083c29821,Refactored fake_quant_with_min_max_vars op cuda implementation.,https://github.com/deeplearning4j/deeplearning4j/commit/753565145c7c4d1cdbfe3380a26e003083c29821
323,323.0,323.0,deeplearning4j/deeplearning4j,3c0c59ab889875bd0d0d6f542569490c4e1d5ddb,Refactored fake_quant_with_min_max_vars op.,https://github.com/deeplearning4j/deeplearning4j/commit/3c0c59ab889875bd0d0d6f542569490c4e1d5ddb
324,324.0,324.0,deeplearning4j/deeplearning4j,6cf3a8fa9c760e0644a4e98b7bd128c26d46990d,Refactored cpu implementatio and added cuda aproach.,https://github.com/deeplearning4j/deeplearning4j/commit/6cf3a8fa9c760e0644a4e98b7bd128c26d46990d
325,325.0,325.0,deeplearning4j/deeplearning4j,1f4ad083056a194401e640303544bb22be06ece1,"refactoring activations. (#8261)

Signed-off-by: Robert Altena <Rob@Ra-ai.com>",https://github.com/deeplearning4j/deeplearning4j/commit/1f4ad083056a194401e640303544bb22be06ece1
326,326.0,326.0,deeplearning4j/deeplearning4j,f3e42173ef731d67453041a8ea50ba8416928921,Refactored buffer copying to avoid wrong usage of buffers.,https://github.com/deeplearning4j/deeplearning4j/commit/f3e42173ef731d67453041a8ea50ba8416928921
327,327.0,327.0,deeplearning4j/deeplearning4j,afeb524238f40a475d980baf72200a5b12277144,Refactored implementation for adjust_contrast ops.,https://github.com/deeplearning4j/deeplearning4j/commit/afeb524238f40a475d980baf72200a5b12277144
328,328.0,328.0,deeplearning4j/deeplearning4j,83d958d53638550df2a98384d609ef0cb1178ecd,"Sparse matrix refactoring. (#8238)

* remove sparse method from INDArray.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* remove gemm

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* remove useage of n4j.sparseFactory

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* Nd4j.sparseFactory removed.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* sparseNDArray deleted.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* iremove more sparse calls and constants.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* remove SparseBlasWrapper.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* delete BaseSparseBlaswrapper.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* remove 3 sparse factory classes.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* delete SparseCPULevel.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* deletes JcusparseLevel, CUDASparselevel.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* delete nativeCPU sparse classes.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* removes sparse methods from NDArrayFactory.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* more deletes.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* delete (ignored) tests. BaseSparseNDArray.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* deletes ISparseNDArray.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* remove sparse methods from indArray.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* deletes sparse classes.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>",https://github.com/deeplearning4j/deeplearning4j/commit/83d958d53638550df2a98384d609ef0cb1178ecd
329,329.0,329.0,deeplearning4j/deeplearning4j,98e28148798d91387409d0fe19c23d0b83518217,"Platform helpers (#8216)

* platform helpers draft

Signed-off-by: raver119 <raver119@gmail.com>

* typo

Signed-off-by: raver119 <raver119@gmail.com>

* disable platform cmake

Signed-off-by: raver119 <raver119@gmail.com>

* another draft

Signed-off-by: raver119 <raver119@gmail.com>

* mkldnn convolution refactored

Signed-off-by: raver119 <raver119@gmail.com>

* minor tweaks

Signed-off-by: raver119 <raver119@gmail.com>

* one more safety check

Signed-off-by: raver119 <raver119@gmail.com>

* prototype works

Signed-off-by: raver119 <raver119@gmail.com>

* meh

Signed-off-by: raver119 <raver119@gmail.com>

* force static library mode for mkldnn

Signed-off-by: raver119 <raver119@gmail.com>

* - ismax fix
- experimental arg fix
- don't enforce openblas on Apple hardware

Signed-off-by: raver119 <raver119@gmail.com>

* bunch of small fixes

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* declare concurrent

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* - MKLDNN version upgrade to 1.0.2
- avgpool2d/maxpool2d APIs update

Signed-off-by: raver119 <raver119@gmail.com>

* - avgpool2d_bp/maxpool2d_bp APIs update

Signed-off-by: raver119 <raver119@gmail.com>

* - conv2d/batchnorm APIs update

Signed-off-by: raver119 <raver119@gmail.com>

* - lrn/conv2d_bp/conv3d/conv3d_bp APIs update

Signed-off-by: raver119 <raver119@gmail.com>

* all ops converted to MKLDNN 1.x

Signed-off-by: raver119 <raver119@gmail.com>

* bunch of tweaks

Signed-off-by: raver119 <raver119@gmail.com>

* namespace for platform helpers

Signed-off-by: raver119 <raver119@gmail.com>

* make sure platform helpers aren't opimized out

Signed-off-by: raver119 <raver119@gmail.com>

* build cpu_features on x86 systems

Signed-off-by: raver119 <raver119@gmail.com>

* build cpu_features on x86 systems

Signed-off-by: raver119 <raver119@gmail.com>

* more of cpu_features

Signed-off-by: raver119 <raver119@gmail.com>

* - mkldnn removed from java
- cpu_features checks in CpuNDArrayFactory

Signed-off-by: raver119 <raver119@gmail.com>

* F16C definition renamed

Signed-off-by: raver119 <raver119@gmail.com>

* some mkldnn rearrangements

Signed-off-by: raver119 <raver119@gmail.com>

* check supported instructions before doing anything

Signed-off-by: raver119 <raver119@gmail.com>

* typo

Signed-off-by: raver119 <raver119@gmail.com>

* missied impl

Signed-off-by: raver119 <raver119@gmail.com>

* BUILD_PIC option

Signed-off-by: raver119 <raver119@gmail.com>

* conv2d fix

Signed-off-by: raver119 <raver119@gmail.com>

* avgpool3d fix

Signed-off-by: raver119 <raver119@gmail.com>

* avgpool3d_bp fix

Signed-off-by: raver119 <raver119@gmail.com>

* avgpool2d_bp leak fix

Signed-off-by: raver119 <raver119@gmail.com>

* avgpool3d_bp leak fix

Signed-off-by: raver119 <raver119@gmail.com>

* maxpool bp leaks fixed

Signed-off-by: raver119 <raver119@gmail.com>

* printf removed

Signed-off-by: raver119 <raver119@gmail.com>

* batchnorm fix

Signed-off-by: raver119 <raver119@gmail.com>

* AVX warning/error polishing

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* More polish

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Polish

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* remove previous MKL-DNN support layer

Signed-off-by: raver119 <raver119@gmail.com>

* avx2 tweak

Signed-off-by: raver119 <raver119@gmail.com>

* allow static for apple

Signed-off-by: raver119@gmail.com <raver119@gmail.com>

* exclude mkldnn in one more place

Signed-off-by: raver119 <raver119@gmail.com>

* exclude mkldnn in one more place

Signed-off-by: raver119 <raver119@gmail.com>

* restore OPENBLAS_PATH use

Signed-off-by: raver119 <raver119@gmail.com>

* add runtime check for avx/avx2 support

Signed-off-by: raver119 <raver119@gmail.com>

* convolution_auto

Signed-off-by: raver119 <raver119@gmail.com>

* Add logic for helper argument

* minor test fix

Signed-off-by: raver119 <raver119@gmail.com>

* few tweaks

Signed-off-by: raver119 <raver119@gmail.com>

* few tweaks

Signed-off-by: raver119 <raver119@gmail.com>

* skip OpTracker props for non-x86 builds

Signed-off-by: raver119 <raver119@gmail.com>

* linux arm isn't x86 :)

Signed-off-by: raver119 <raver119@gmail.com>

* avx-512

Signed-off-by: raver119 <raver119@gmail.com>

* CUDA presets fix

Signed-off-by: raver119 <raver119@gmail.com>

* BUILD_PIC

Signed-off-by: raver119 <raver119@gmail.com>

* prefetchw for avx2

Signed-off-by: raver119 <raver119@gmail.com>

* BUILD_PIC again

Signed-off-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/98e28148798d91387409d0fe19c23d0b83518217
330,330.0,330.0,deeplearning4j/deeplearning4j,e1a7460f8ebf654522425ad9c4df54c3b2a80104,"Shugeo cuda doc2 (#255)

* Added comments to tileKernel routine.

* Refactored kernel and added doc to it.

* Refactored setDiagonal kernel and added doc for it.

* Added doc for tnse cuda helpers.

* Added doc for diag kernels.

* Added doc for kernel.

* Refactored code with fake quantization.

* Added docs for image resize and crop kernels.

* Added docs for image suppression helpers.

* Added docs to matrix_band helpers.

* Added docs for matrix_diag_part and nth_element helpers.

* Fixed syntax error and refactored getIndexOffset usage.",https://github.com/deeplearning4j/deeplearning4j/commit/e1a7460f8ebf654522425ad9c4df54c3b2a80104
331,331.0,331.0,deeplearning4j/deeplearning4j,7abc574eeb92627a20213e47e63dbce05bf05fda,"Snapshot update (#8194)

* fix double consumption of rng on cpu

Signed-off-by: raver119 <raver119@gmail.com>

* Shyrma docs (#222)

* - documenting and profiling matrix_set_diag cuda kernel

Signed-off-by: Yurii <yurii@skymind.io>

* - correct formula of pnorm pooling in cuda 2d/3d kernels
- remove helper matrix_diag which duplicates work of helper matrix_set_diag

Signed-off-by: Yurii <yurii@skymind.io>

* cublasHandle sharing + lock

Signed-off-by: raver119 <raver119@gmail.com>

* cublasHandle sharing + lock

Signed-off-by: raver119 <raver119@gmail.com>

* Documentation from serialization/deserialization in NLP (#221)

* refactoring

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Javadocs

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Javadoc fixed

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Cleanup

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* dedicated lock for getCudaCublasHandle

Signed-off-by: raver119 <raver119@gmail.com>

* Small fixes (#223)

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* ELU DL4J fixes (#224)

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* javadoc (#225)

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* Small test compilation fix (#226)

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8182 remove spark version suffix (#227)

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* [WIP] Thread safety (#229)

* sync after cublas*gemm

Signed-off-by: raver119 <raver119@gmail.com>

* mutex for CublasHelper

Signed-off-by: raver119 <raver119@gmail.com>

* don't store cublasHandle in LaunchContext, it's per-device anyway

Signed-off-by: raver119 <raver119@gmail.com>

* some printout

Signed-off-by: raver119 <raver119@gmail.com>

* check for field instead

Signed-off-by: raver119 <raver119@gmail.com>

* pew-pew

Signed-off-by: raver119 <raver119@gmail.com>

* don't release ContextBuffers until device changed

Signed-off-by: raver119 <raver119@gmail.com>

* small tweak

Signed-off-by: raver119 <raver119@gmail.com>

* some logging in sgemm

Signed-off-by: raver119 <raver119@gmail.com>

* stream sync

Signed-off-by: raver119 <raver119@gmail.com>

* some more logging

Signed-off-by: raver119 <raver119@gmail.com>

* some more error checks

Signed-off-by: raver119 <raver119@gmail.com>

* one fancy test

Signed-off-by: raver119 <raver119@gmail.com>

* one fancy test

Signed-off-by: raver119 <raver119@gmail.com>

* minor AffinityManager fix

Signed-off-by: raver119 <raver119@gmail.com>

* cudaEvent error logging improvement

Signed-off-by: raver119 <raver119@gmail.com>

* ConstantHelper thread safety

Signed-off-by: raver119 <raver119@gmail.com>

* - minor corrections in ConstantTadHelper

Signed-off-by: Yurii <yurii@skymind.io>

* ConstantShapeHelper thread safety

Signed-off-by: raver119 <raver119@gmail.com>

* ConstantTadHelper.cu updated

Signed-off-by: raver119 <raver119@gmail.com>

* logging off

Signed-off-by: raver119 <raver119@gmail.com>

* logging off

Signed-off-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/7abc574eeb92627a20213e47e63dbce05bf05fda
332,332.0,332.0,deeplearning4j/deeplearning4j,90b62c457917e20480ef3e3ec0d21c6819239650,"Documentation from serialization/deserialization in NLP (#221)

* refactoring

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Javadocs

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Javadoc fixed

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Cleanup

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/90b62c457917e20480ef3e3ec0d21c6819239650
333,333.0,333.0,deeplearning4j/deeplearning4j,f4860574d7bab01f1f59c3973828b757efa9c84d,"[WIP] More fixes (#190)

* Refactored kernels for segment_max/min/sum ops.

* Refactored segment_prod kernels.

* Refactored segment_prod kernels.

* DynamicPartition test

Signed-off-by: raver119 <raver119@gmail.com>

* Addede linear test for dynamic_partition op.

* Refactored test with int datatype.

* some logging

Signed-off-by: raver119 <raver119@gmail.com>

* some logging

Signed-off-by: raver119 <raver119@gmail.com>

* some logging

Signed-off-by: raver119 <raver119@gmail.com>

* dynamicPartition fix

Signed-off-by: raver119 <raver119@gmail.com>

* get rid of some logging

Signed-off-by: raver119 <raver119@gmail.com>

* one more test for dynamic_stitch

Signed-off-by: raver119 <raver119@gmail.com>

* one more test for dynamic_stitch

Signed-off-by: raver119 <raver119@gmail.com>

* empty check for stitch

Signed-off-by: raver119 <raver119@gmail.com>

* minor print changes

Signed-off-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/f4860574d7bab01f1f59c3973828b757efa9c84d
334,334.0,334.0,deeplearning4j/deeplearning4j,59a6e4e3ae5e2a7cf1cf5dbe0b709bd511c887f9,"INDArray refactoring (#170)

* javadoc

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* remove javaTensorAlongDimension

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* wip

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* javadoc",https://github.com/deeplearning4j/deeplearning4j/commit/59a6e4e3ae5e2a7cf1cf5dbe0b709bd511c887f9
335,335.0,335.0,deeplearning4j/deeplearning4j,b472d7d8c839be57577e966a7f5595ccc90c39f0,"[WIP] few more fixes (#182)

* one noop test

Signed-off-by: raver119 <raver119@gmail.com>

* skip input validation for no-input ops

Signed-off-by: raver119 <raver119@gmail.com>

* - one more noop empty test
- one more validation before sync

Signed-off-by: raver119 <raver119@gmail.com>

* typo

Signed-off-by: raver119 <raver119@gmail.com>

* one more validation fix

Signed-off-by: raver119 <raver119@gmail.com>

* CUDA empty reductions java side

Signed-off-by: raver119 <raver119@gmail.com>

* one svd test

Signed-off-by: raver119 <raver119@gmail.com>

* Corrected segment_mean helpers and added another test.

* Refactored segment_mean kernels to avoid race_condition.",https://github.com/deeplearning4j/deeplearning4j/commit/b472d7d8c839be57577e966a7f5595ccc90c39f0
336,336.0,336.0,deeplearning4j/deeplearning4j,f03b0ee78f220c7cd1b0b9f80dceaf04b3d16308,"[WIP] more fixes (#159)

* Added test for MatrixInverse with double input. Fixed matrixDeterminantKernel.

* Fixed kernels to avoid waste templating.

* Fixed logDeterminant kernel.

* Refactored type check for lup'

* - decrease blockDim value for zeta op

Signed-off-by: Yurii <yurii@skymind.io>

* Added print for compound matrix with CUDA.

* Refactored upper matrix invertion kernels.

* - provide move constructor and move assignment operator for OpArgsHoder class

Signed-off-by: Yurii <yurii@skymind.io>

* Refactored usage of launch context.

* - add test for mergemax

Signed-off-by: Yurii <yurii@skymind.io>

* get rid of AveragingArrayProxy

Signed-off-by: raver119 <raver119@gmail.com>

* Refactoring of LUP inversion.

* Added prints for invertion.

* - add OpArgsHolder copy constructor and assignment operator

Signed-off-by: Yurii <yurii@skymind.io>

* Added test for lower inversion

* - fix bug in upsampling2d/3d_bp op

Signed-off-by: Yurii <yurii@skymind.io>

* Added expensive printfs to kernel.

* Refactored expensive kernel prints.

* Refactored expensive printfs

* - remove nullify

Signed-off-by: Yurii <yurii@skymind.io>

* Eliminated waste prints with tests.

* upsampling2d_bp test

Signed-off-by: raver119 <raver119@gmail.com>

* test updated

Signed-off-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/f03b0ee78f220c7cd1b0b9f80dceaf04b3d16308
337,337.0,337.0,deeplearning4j/deeplearning4j,10d676e0b8465b7e9c0e6bf7106b2dc50aaf04a8,"[WIP] nd4s - Scala operators for SameDiff  (#113)

* Jar packaging for maven

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Typo fixed

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* minimal viable prototype for SD

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Tests corrected

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* few fixes for bfloat16 in java and cpp (#114)

Signed-off-by: raver119 <raver119@gmail.com>

* Nd4j refactoring (#112)

* refactoring

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* wip

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* wip

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* wip

* fix: make test public.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* make test public.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* fixes read refactoring.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* Enabled test

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Test copied from nd4j

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* [WIP] bitwise ops (#115)

* - cyclic_shift_bits + test
- shift_bits + test

Signed-off-by: raver119 <raver119@gmail.com>

* OMP_IF replacement

Signed-off-by: raver119 <raver119@gmail.com>

* Thin wrapper added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Cleanup

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Shugeo cuda tests (#116)

* Added tests for get_seed/set_seed ops.

* Added missed tests for scatter_sub/mul/div ops.

* Added tests for hardsigmoid and hardsigmoid_bp.

* Added tests for hardtanh and hardtanh_bp ops.

* Added test for histogram op.

* Added tests for identity op.

* Refactored mergemaxindex op. Added tests for log1p,mergemaxindex, mod and mod_bp ops.

* Fixed tests for FloorDiv.

* Added test for rank op.

* Added tests for rationaltanh/rationaltanh_bp ops.

* Added tests for realdiv/realdiv_bp.

* Added tests for rectifiedtanh/_bp ops.

* Added tests for shapes_of op.

* Added tests for shapes_of op.

* Added tests for size op.

* Added tests for softplus/_bp ops.

* Added tests for softsign/_bp ops.

* Added tests for toggle_bits op. Fixed processing of OP_IMPL and so on defititions.

* Added test for truncatediv op.

* Added another test for truncatediv op.

* Added another test for histogram.

* Added tests for unstack_list op.

* Refactored to_int32/uint32/float16/float32/double/int64/uint64 ops and tests.

* Refactored mergemaxindex op helper for cuda platform and tests.

* Fixed cuda kernel for histogram op helper.

* Refactor skipgram to avoid early buffers shift.

* Fixed check up with non_max_suppression op cuda helper. Added cuda kernel implementation for skipgram op helpers.

* Added implementation of skipgram op helper for cuda platform. Working revision

* Fixed mergeMaxIndex kernel and move it to separate source file.

* Adding arithmetic

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Eliminated memory leaks and dropped waste prints with tests. (#117)

* Added tests

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* fix test

Signed-off-by: raver119 <raver119@gmail.com>

* no openmp for ClipByGlobalNorm

Signed-off-by: raver119 <raver119@gmail.com>

* Stubs for ops

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* [WIP] right shift ops (#118)

* right shift ops

Signed-off-by: raver119 <raver119@gmail.com>

* typo

Signed-off-by: raver119 <raver119@gmail.com>

* rotr test

Signed-off-by: raver119 <raver119@gmail.com>

* fix: IOException no longer thrown by read(). (#120)

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* Small fix in TensorflowConversion class (#121)

Signed-off-by: Alex Black <blacka101@gmail.com>

* Shyrma concat2 (#119)

* - rewrite/improve concat

Signed-off-by: Yurii <yurii@skymind.io>

* - ged rid of unnecessary argument in concat kernel

Signed-off-by: Yurii <yurii@skymind.io>

* InferenceSession additional validation for shape calc (#122)

Signed-off-by: Alex Black <blacka101@gmail.com>

* [WIP] build fix (#124)

* AffinityManager changes

Signed-off-by: raver119 <raver119@gmail.com>

* build fixes

Signed-off-by: raver119 <raver119@gmail.com>

* OP/CONFIGURABLE_OP shapefn fix (#125)

Signed-off-by: raver119 <raver119@gmail.com>

* Some ops added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Nd4j refactoring (last one!) (#123)

* fix: IOException no longer thrown by read().

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* refactoring

* last refactorings

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* Advanced tests

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* [WIP] Java wrappers (#126)

* shift/rshift/rotl/rotr java/sd wrappers

Signed-off-by: raver119 <raver119@gmail.com>

* few additional wrappers

Signed-off-by: raver119 <raver119@gmail.com>

* minor naming tweak

Signed-off-by: raver119 <raver119@gmail.com>

* Test added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* one more build fix

Signed-off-by: raver119 <raver119@gmail.com>

* Jar packaging for maven

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Typo fixed

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* minimal viable prototype for SD

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Tests corrected

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Enabled test

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Test copied from nd4j

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Thin wrapper added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Cleanup

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Adding arithmetic

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Added tests

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Stubs for ops

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Some ops added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Advanced tests

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Test added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Ops added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Small build fixes (#127)

* Small build fixes

Signed-off-by: Alex Black <blacka101@gmail.com>

* Fix RL4J

Signed-off-by: Alex Black <blacka101@gmail.com>

* Test fixes

Signed-off-by: Alex Black <blacka101@gmail.com>

* Another fix

Signed-off-by: Alex Black <blacka101@gmail.com>

* parent module name fix

Signed-off-by: raver119 <raver119@gmail.com>

* [WIP] Roll rewritten (#128)

* Process correct input vector.

* Added tests for roll.

* Refactored roll to conform with TF. Eliminated memory leaks with Roll op tests.

* no thread_local for cpu

Signed-off-by: raver119 <raver119@gmail.com>

* Jar packaging for maven

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Typo fixed

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* minimal viable prototype for SD

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Tests corrected

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Enabled test

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Test copied from nd4j

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Thin wrapper added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Cleanup

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Adding arithmetic

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Added tests

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Stubs for ops

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Some ops added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Advanced tests

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Test added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Ops added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Tests added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Boolen logic ops

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Test added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Shift operations

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/10d676e0b8465b7e9c0e6bf7106b2dc50aaf04a8
338,338.0,338.0,deeplearning4j/deeplearning4j,e22880fd7649a874d2e6be453a6a946efb27d16b,"[WIP] Roll rewritten (#128)

* Process correct input vector.

* Added tests for roll.

* Refactored roll to conform with TF. Eliminated memory leaks with Roll op tests.",https://github.com/deeplearning4j/deeplearning4j/commit/e22880fd7649a874d2e6be453a6a946efb27d16b
339,339.0,339.0,deeplearning4j/deeplearning4j,7fbc4b09336ba5803b444d29808f9c75e5aa265a,"Nd4j refactoring (last one!) (#123)

* fix: IOException no longer thrown by read().

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* refactoring

* last refactorings

Signed-off-by: Robert Altena <Rob@Ra-ai.com>",https://github.com/deeplearning4j/deeplearning4j/commit/7fbc4b09336ba5803b444d29808f9c75e5aa265a
340,340.0,340.0,deeplearning4j/deeplearning4j,f083b96c74566dc4ed87d8f5fc56ef74fa87bb5e,"Shugeo cuda tests (#116)

* Added tests for get_seed/set_seed ops.

* Added missed tests for scatter_sub/mul/div ops.

* Added tests for hardsigmoid and hardsigmoid_bp.

* Added tests for hardtanh and hardtanh_bp ops.

* Added test for histogram op.

* Added tests for identity op.

* Refactored mergemaxindex op. Added tests for log1p,mergemaxindex, mod and mod_bp ops.

* Fixed tests for FloorDiv.

* Added test for rank op.

* Added tests for rationaltanh/rationaltanh_bp ops.

* Added tests for realdiv/realdiv_bp.

* Added tests for rectifiedtanh/_bp ops.

* Added tests for shapes_of op.

* Added tests for shapes_of op.

* Added tests for size op.

* Added tests for softplus/_bp ops.

* Added tests for softsign/_bp ops.

* Added tests for toggle_bits op. Fixed processing of OP_IMPL and so on defititions.

* Added test for truncatediv op.

* Added another test for truncatediv op.

* Added another test for histogram.

* Added tests for unstack_list op.

* Refactored to_int32/uint32/float16/float32/double/int64/uint64 ops and tests.

* Refactored mergemaxindex op helper for cuda platform and tests.

* Fixed cuda kernel for histogram op helper.

* Refactor skipgram to avoid early buffers shift.

* Fixed check up with non_max_suppression op cuda helper. Added cuda kernel implementation for skipgram op helpers.

* Added implementation of skipgram op helper for cuda platform. Working revision

* Fixed mergeMaxIndex kernel and move it to separate source file.",https://github.com/deeplearning4j/deeplearning4j/commit/f083b96c74566dc4ed87d8f5fc56ef74fa87bb5e
341,341.0,341.0,deeplearning4j/deeplearning4j,59cba587f4d99507c2019cef5eb6c477b9b0a8c4,"Nd4j refactoring (#112)

* refactoring

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* wip

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* wip

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* wip

* fix: make test public.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* make test public.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* fixes read refactoring.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>",https://github.com/deeplearning4j/deeplearning4j/commit/59cba587f4d99507c2019cef5eb6c477b9b0a8c4
342,342.0,342.0,deeplearning4j/deeplearning4j,53ca9a76e83a1a80cff0363f7b30017ccfdf2ad3,"[WIP] multi-device support (#80)

* fix pad javadoc and @see links. (#72)

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* [WIP] More fixes (#73)

* special tests for ConstantTadHelper/ConstantShapeHelper

Signed-off-by: raver119 <raver119@gmail.com>

* release methods for data buffers

Signed-off-by: raver119 <raver119@gmail.com>

* delete temporary buffer Java side

Signed-off-by: raver119 <raver119@gmail.com>

* delete temporary buffer Java side

Signed-off-by: raver119 <raver119@gmail.com>

* delete temporary TadPack C++/Java side (#74)

Signed-off-by: raver119 <raver119@gmail.com>

* Zoo model TF import test updates (#75)

* argLine fix, update compression_gru comment

* updated comment for xception

* undid but commented argLine change

* updated xlnet comment

* copyright headers

* - new NDArray methods like()/ulike() (#77)

- fix for depthwise_conv2d_bp + special test

Signed-off-by: raver119 <raver119@gmail.com>

* upsampling2d fix CUDA

Signed-off-by: raver119 <raver119@gmail.com>

* DL4J trace logging (#79)

* MLN/CG trace logging for debugging

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Tiny tweak

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* strided_slice_bp shape fn leak fix

Signed-off-by: raver119 <raver119@gmail.com>

* SameDiff fixes and naming (#78)

* remove SDVariable inplace methods

* import methods

* npe fix in OpVal

* removed SameDiff inplace ops from tests

* Naming updates, moved to centralized methods in SameDiff, should use op_#:# for everything

* quick fixes

* javadoc

* SDVariable eval with placeholders

* use regex match

* better matching

* initial commit

Signed-off-by: raver119 <raver119@gmail.com>

* initial commit

Signed-off-by: raver119 <raver119@gmail.com>

* fix javadoc. (#76)

* fix javadoc.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* replace most @see with @link s.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* 4 additional tests

Signed-off-by: raver119 <raver119@gmail.com>

* launch context reorganization

Signed-off-by: raver119 <raver119@gmail.com>

* LaunchContext reorganization

Signed-off-by: raver119 <raver119@gmail.com>

* per-device LaunchContext

Signed-off-by: raver119 <raver119@gmail.com>

* Various DL4J/ND4J fixes (#81)

* #7954 Force refresh of UI when switching tabs on overview page

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8017 Concurrent modification exception (synchronize) fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8033 Don't initialize updater in middle of writing memory crash dump

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8208 Fix shape checks for ND4J int[] creator methods

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #6385 #7992 Keras import naming fixes + cleanup

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8016 Upsampling3D - add NDHWC format support

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* ContextBuffers as separate entity

Signed-off-by: raver119 <raver119@gmail.com>

* Refactor NativeOps.h to export C functions

* Actually export functions from NativeOps.h

* Adapt the Java wrappers in ND4J generated with JavaCPP

* Create C wrappers for some of the C++ classes currently used by ND4J

* ContextBuffers as separate entity

Signed-off-by: raver119 <raver119@gmail.com>

* remove duplicate code in createBufferDetached. (#83)

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* Keras model import - updater lr fix (#84)

* Keras model import - updater lr fix

Signed-off-by: eraly <susan.eraly@gmail.com>

* Keras model import - updater lr fix, cleanup

Signed-off-by: eraly <susan.eraly@gmail.com>

* ContextBuffers as separate entity

Signed-off-by: raver119 <raver119@gmail.com>

* ContextBuffers as separate entity

Signed-off-by: raver119 <raver119@gmail.com>

* Fix functions of OpaqueVariablesSet

* thread-local buffers/affinity

Signed-off-by: raver119 <raver119@gmail.com>

* thread safety for LaunchContext

Signed-off-by: raver119 <raver119@gmail.com>

* more of thread safety

Signed-off-by: raver119 <raver119@gmail.com>

* one more multi threaded test

Signed-off-by: raver119 <raver119@gmail.com>

* SameDiff Convolution Config validation, better output methods (#82)

* Conv Config validation & tests

Signed-off-by: Ryan Nett <rnett@skymind.io>

* stackOutputs utility method

Signed-off-by: Ryan Nett <rnett@skymind.io>

* use constructor for validation, support negative kernel sizes (infered from weights)

Signed-off-by: Ryan Nett <rnett@skymind.io>

* better output methods

Signed-off-by: Ryan Nett <rnett@skymind.io>

* move output to be with fit and evaluate

Signed-off-by: Ryan Nett <rnett@skymind.io>

* fixes

Signed-off-by: Ryan Nett <rnett@skymind.io>

* more fixes

Signed-off-by: Ryan Nett <rnett@skymind.io>

* refactor duplicate code from pad methods. (#86)

* refactor duplicate code from pad methods.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* replace switch with if.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* Various ND4J/DL4J fixes and improvements (#87)

* Reshape and reallocate - small fixes

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Reshape and reallocate - small fixes

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #6488 ElementWiseVertex broadcast support

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Constructors and broadcast supported it Transforms.max/min

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8054 ElementWiseVertex now supports broadcast inputs

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8057 Nd4j.create overload dtype fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #7551 ND4J Shape validation fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* [WIP] Numpy boolean import (#91)

* numpy bool type

Signed-off-by: raver119 <raver119@gmail.com>

* numpy bool java side

Signed-off-by: raver119 <raver119@gmail.com>

* remove create method with unused parameter. (#89)

* remove create method with unused parameter.

* removed more unused methods.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* removing more unused code.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* last removal of unused code.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* remove createSparse methods. (#92)

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* Various ND4J/DL4J fixes (#90)

* Deprecate Old*Op instances

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8063 #8054 Broadcast exceptions + cleanup inplace ops

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Small fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Remove bad test condition

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #7993 Fix shape function issue in crop_and_resize op

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* DL4J SameDiff lambda layer fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8029 Fix for pnorm backprop math

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8038 Fix Op profiler NaN/Inf triggering + add tests (#93)

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* createUninitializedDetached refactoring. (#94)

* wip

* update interface, add null implementations.

* Breaking one test in a weird way.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* createUninitializedDetached refactored.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* cuda build fix for issues introduced by recent refactoring

Signed-off-by: raver119 <raver119@gmail.com>

* [WIP] More of CUDA (#95)

* initial commit

Signed-off-by: raver119 <raver119@gmail.com>

* Implementation of hashcode cuda helper. Working edition.

* Fixed parallel test input arangements.

* Fixed tests for hashcode op.

* Fixed shape calculation for image:crop_and_resize op and test.

* NativeOps tests. Initial test suite.

* Added tests for indexReduce methods.

* Added test on execBroadcast with NDArray as dimensions.

* Added test on execBroadcastBool with NDArray as dimensions.

* Added tests on execPairwiseTransform and execPairwiseTransofrmBool.

* Added tests for execReduce with scalar results.

* Added reduce tests for non-empty dims array.

* Added tests for reduce3.

* Added tests for execScalar.

* Added tests for execSummaryStats.

* - provide cpu/cuda code for batch_to_space
- testing it

Signed-off-by: Yurii <yurii@skymind.io>

* - remove old test for batch_to_space (had wrong format and numbers were not checked)

Signed-off-by: Yurii <yurii@skymind.io>

* Fixed complilation errors with test.

* Added test for execTransformFloat.

* Added test for execTransformSame.

* Added test for execTransformBool.

* Added test for execTransformStrict.

* Added tests for execScalar/execScalarBool with TADs.

* Added test for flatten.

* - provide cpu/cuda code for space_to_Batch operaion

Signed-off-by: Yurii <yurii@skymind.io>

* Added test for concat.

* comment unnecessary stuff in s_t_b

Signed-off-by: Yurii <yurii@skymind.io>

* Added test for specialConcat.

* Added tests for memcpy/set routines.

* Fixed pullRow cuda test.

* Added pullRow test.

* Added average test.

* - correct typo in NDArray::applyPairwiseTransform(nd4j::pairwise::BoolOps op...)

Signed-off-by: Yurii <yurii@skymind.io>

* - debugging and fixing cuda tests in JavaInteropTests file

Signed-off-by: Yurii <yurii@skymind.io>

* - correct some tests

Signed-off-by: Yurii <yurii@skymind.io>

* Added test for shuffle.

* Fixed ops declarations.

* Restored omp and added shuffle test.

* Added convertTypes test.

* Added tests for execRandom. Eliminated usage of RandomBuffer with NativeOps.

* Added sort tests.

* Added tests for execCustomOp.

* - further debuging and fixing tests terminated with crash

Signed-off-by: Yurii <yurii@skymind.io>

* Added tests for calculateOutputShapes.

* Addded Benchmarks test.

* Commented benchmark tests.

* change assertion

Signed-off-by: raver119 <raver119@gmail.com>

* Added tests for apply_sgd op. Added cpu helper for that op.

* Implement cuda helper for aplly_sgd op. Fixed tests for NativeOps.

* Added test for assign broadcastable.

* Added tests for assign_bp op.

* Added tests for axpy op.

* - assign/execScalar/execTransformAny signature change
- minor test fix

Signed-off-by: raver119 <raver119@gmail.com>

* Fixed axpy op.

* meh

Signed-off-by: raver119 <raver119@gmail.com>

* - fix tests for nativeOps::concat

Signed-off-by: Yurii <yurii@skymind.io>

* sequential transform/scalar

Signed-off-by: raver119 <raver119@gmail.com>

* allow nested parallelism

Signed-off-by: raver119 <raver119@gmail.com>

* assign_bp leak fix

Signed-off-by: raver119 <raver119@gmail.com>

* block setRNG fix

Signed-off-by: raver119 <raver119@gmail.com>

* enable parallelism by default

Signed-off-by: raver119 <raver119@gmail.com>

* enable nested parallelism by default

Signed-off-by: raver119 <raver119@gmail.com>

* Added cuda implementation for row_count helper.

* Added implementation for tnse gains op helper.

* - take into account possible situations when input arrays are empty in reduce_ cuda stuff

Signed-off-by: Yurii <yurii@skymind.io>

* Implemented tsne/edge_forces op cuda-based helper. Parallelized cpu-based helper for edge_forces.

* Added kernel for tsne/symmetrized op heleper.

* Implementation of tsne/symmetrized op cuda helper. Working edition.

* Eliminated waste printfs.

* Added test for broadcastgradientargs op.

* host-only fallback for empty reduce float

Signed-off-by: raver119 <raver119@gmail.com>

* - some tests fixes

Signed-off-by: Yurii <yurii@skymind.io>

* - correct the rest of reduce_ stuff

Signed-off-by: Yurii <yurii@skymind.io>

* - further correction of reduce_ stuff

Signed-off-by: Yurii <yurii@skymind.io>

* Added test for Cbow op. Also added cuda implementation for cbow helpers.

* - improve code of stack operation for scalar case

Signed-off-by: Yurii <yurii@skymind.io>

* - provide cuda kernel for gatherND operation

Signed-off-by: Yurii <yurii@skymind.io>

* Implementation of cbow helpers with cuda kernels.

* minor tests tweaks

Signed-off-by: raver119 <raver119@gmail.com>

* minor tests tweaks

Signed-off-by: raver119 <raver119@gmail.com>

* - further correction of cuda stuff

Signed-off-by: Yurii <yurii@skymind.io>

* Implementatation of cbow op helper with cuda kernels. Working edition.

* Skip random testing for cudablas case.

* lstmBlockCell context fix

Signed-off-by: raver119 <raver119@gmail.com>

* Added tests for ELU and ELU_BP ops.

* Added tests for eq_scalar, gt_scalar, gte_scalar and lte_scalar ops.

* Added tests for neq_scalar.

* Added test for noop.

* - further work on clipbynorm_bp

Signed-off-by: Yurii <yurii@skymind.io>

* - get rid of concat op call, use instead direct concat helper call

Signed-off-by: Yurii <yurii@skymind.io>

* lstmBlockCell context fix

Signed-off-by: raver119 <raver119@gmail.com>

* Added tests for lrelu and lrelu_bp.

* Added tests for selu and selu_bp.

* Fixed lrelu derivative helpers.

* - some corrections in lstm

Signed-off-by: Yurii <yurii@skymind.io>

* operator * result shape fix

Signed-off-by: raver119 <raver119@gmail.com>

* - correct typo in lstmCell

Signed-off-by: Yurii <yurii@skymind.io>

* few tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* CUDA inverse broadcast bool fix

Signed-off-by: raver119 <raver119@gmail.com>

* disable MMAP test for CUDA

Signed-off-by: raver119 <raver119@gmail.com>

* BooleanOp syncToDevice

Signed-off-by: raver119 <raver119@gmail.com>

* meh

Signed-off-by: raver119 <raver119@gmail.com>

* additional data types for im2col/col2im

Signed-off-by: raver119 <raver119@gmail.com>

* Added test for firas_sparse op.

* one more RandomBuffer test excluded

Signed-off-by: raver119 <raver119@gmail.com>

* Added tests for flatten op.

* Added test for Floor op.

* bunch of tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* mmulDot tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* more tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* Implemented floordiv_bp op and tests.

* Fixed scalar case with cuda implementation for bds.

* - work on cuda kernel for clip_by_norm backprop op is completed

Signed-off-by: Yurii <yurii@skymind.io>

* Eliminate cbow crach.

* more tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* more tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* Eliminated abortion with batched nlp test.

* more tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* Fixed shared flag initializing.

* disabled bunch of cpu workspaces tests

Signed-off-by: raver119 <raver119@gmail.com>

* scalar operators fix: missing registerSpecialUse call

Signed-off-by: raver119 <raver119@gmail.com>

* Fixed logdet for cuda and tests.

* - correct clipBynorm_bp

Signed-off-by: Yurii <yurii@skymind.io>

* Fixed crop_and_resize shape datatype.

* - correct some mmul tests

Signed-off-by: Yurii <yurii@skymind.io>

* build fix

Signed-off-by: raver119 <raver119@gmail.com>

* exclude two methods for JNI

Signed-off-by: raver119 <raver119@gmail.com>

* exclude two methods for JNI

Signed-off-by: raver119 <raver119@gmail.com>

* exclude two methods for JNI (#97)

Signed-off-by: raver119 <raver119@gmail.com>

* temporary stack fix

Signed-off-by: raver119 <raver119@gmail.com>

* round robin affinity test

Signed-off-by: raver119 <raver119@gmail.com>

* get rid of legacy CudaContext methods

Signed-off-by: raver119 <raver119@gmail.com>

* get rid of legacy ContextPool classes/methods

Signed-off-by: raver119 <raver119@gmail.com>

* one legacy test removed

Signed-off-by: raver119 <raver119@gmail.com>

* few more fields rearranged

Signed-off-by: raver119 <raver119@gmail.com>

* OpaqueLaunchContext

Signed-off-by: raver119 <raver119@gmail.com>

* OpaqueLaunchContext++

Signed-off-by: raver119 <raver119@gmail.com>

* more of OpaqueLaunchContext methods

Signed-off-by: raver119 <raver119@gmail.com>

* LaunchContext -> CudaContext

Signed-off-by: raver119 <raver119@gmail.com>

* AffinityManger changes

Signed-off-by: raver119 <raver119@gmail.com>

* AffinityManger changes

Signed-off-by: raver119 <raver119@gmail.com>

* cusolver handles

Signed-off-by: raver119 <raver119@gmail.com>

* typo

Signed-off-by: raver119 <raver119@gmail.com>

* cusolver method

Signed-off-by: raver119 <raver119@gmail.com>

* cusolver handle propagated

Signed-off-by: raver119 <raver119@gmail.com>

* blas/solver handles

Signed-off-by: raver119 <raver119@gmail.com>

* one more test

Signed-off-by: raver119 <raver119@gmail.com>

* legacy concat implementations replaced with new CustomOp

Signed-off-by: raver119 <raver119@gmail.com>

* one more test

Signed-off-by: raver119 <raver119@gmail.com>

* concat now uses way more blocks

Signed-off-by: raver119 <raver119@gmail.com>

* print

Signed-off-by: raver119 <raver119@gmail.com>

* no more triple template mmul

Signed-off-by: raver119 <raver119@gmail.com>

* bunch of kernels have dtypes reconsidered

Signed-off-by: raver119 <raver119@gmail.com>

* bunch of kernels have dtypes reconsidered

Signed-off-by: raver119 <raver119@gmail.com>

* bitonic sort reorganized

Signed-off-by: raver119 <raver119@gmail.com>

* bunch of cpu stuff removed from cuda scope

Signed-off-by: raver119 <raver119@gmail.com>

* bunch of cpu stuff removed from cuda scope

Signed-off-by: raver119 <raver119@gmail.com>

* type conversions moved to generic impl

Signed-off-by: raver119 <raver119@gmail.com>

* cpu data types pass

Signed-off-by: raver119 <raver119@gmail.com>

* non_max_suppression

Signed-off-by: raver119 <raver119@gmail.com>

* sortByValue fix

Signed-off-by: raver119 <raver119@gmail.com>

* ignore all mixed datatype tests for mmul

Signed-off-by: raver119 <raver119@gmail.com>

* special handling of OpProfiler exceptions

Signed-off-by: raver119 <raver119@gmail.com>

* - one failing concat test in cpp
- Nd4j.tile now uses op internally

Signed-off-by: raver119 <raver119@gmail.com>

* get back dtype exception for legacy arrays deserialization

Signed-off-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/53ca9a76e83a1a80cff0363f7b30017ccfdf2ad3
343,343.0,343.0,deeplearning4j/deeplearning4j,ec847e034b337640d0dab76ab4ef71c46eb36009,"[WIP] Remote inference (#96)

* fix pad javadoc and @see links. (#72)

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* [WIP] More fixes (#73)

* special tests for ConstantTadHelper/ConstantShapeHelper

Signed-off-by: raver119 <raver119@gmail.com>

* release methods for data buffers

Signed-off-by: raver119 <raver119@gmail.com>

* delete temporary buffer Java side

Signed-off-by: raver119 <raver119@gmail.com>

* delete temporary buffer Java side

Signed-off-by: raver119 <raver119@gmail.com>

* delete temporary TadPack C++/Java side (#74)

Signed-off-by: raver119 <raver119@gmail.com>

* Zoo model TF import test updates (#75)

* argLine fix, update compression_gru comment

* updated comment for xception

* undid but commented argLine change

* updated xlnet comment

* copyright headers

* - new NDArray methods like()/ulike() (#77)

- fix for depthwise_conv2d_bp + special test

Signed-off-by: raver119 <raver119@gmail.com>

* upsampling2d fix CUDA

Signed-off-by: raver119 <raver119@gmail.com>

* DL4J trace logging (#79)

* MLN/CG trace logging for debugging

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Tiny tweak

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* strided_slice_bp shape fn leak fix

Signed-off-by: raver119 <raver119@gmail.com>

* SameDiff fixes and naming (#78)

* remove SDVariable inplace methods

* import methods

* npe fix in OpVal

* removed SameDiff inplace ops from tests

* Naming updates, moved to centralized methods in SameDiff, should use op_#:# for everything

* quick fixes

* javadoc

* SDVariable eval with placeholders

* use regex match

* better matching

* fix javadoc. (#76)

* fix javadoc.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* replace most @see with @link s.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* 4 additional tests

Signed-off-by: raver119 <raver119@gmail.com>

* Various DL4J/ND4J fixes (#81)

* #7954 Force refresh of UI when switching tabs on overview page

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8017 Concurrent modification exception (synchronize) fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8033 Don't initialize updater in middle of writing memory crash dump

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8208 Fix shape checks for ND4J int[] creator methods

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #6385 #7992 Keras import naming fixes + cleanup

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8016 Upsampling3D - add NDHWC format support

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Refactor NativeOps.h to export C functions

* Actually export functions from NativeOps.h

* Adapt the Java wrappers in ND4J generated with JavaCPP

* Create C wrappers for some of the C++ classes currently used by ND4J

* remove duplicate code in createBufferDetached. (#83)

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* Keras model import - updater lr fix (#84)

* Keras model import - updater lr fix

Signed-off-by: eraly <susan.eraly@gmail.com>

* Keras model import - updater lr fix, cleanup

Signed-off-by: eraly <susan.eraly@gmail.com>

* Fix functions of OpaqueVariablesSet

* SameDiff Convolution Config validation, better output methods (#82)

* Conv Config validation & tests

Signed-off-by: Ryan Nett <rnett@skymind.io>

* stackOutputs utility method

Signed-off-by: Ryan Nett <rnett@skymind.io>

* use constructor for validation, support negative kernel sizes (infered from weights)

Signed-off-by: Ryan Nett <rnett@skymind.io>

* better output methods

Signed-off-by: Ryan Nett <rnett@skymind.io>

* move output to be with fit and evaluate

Signed-off-by: Ryan Nett <rnett@skymind.io>

* fixes

Signed-off-by: Ryan Nett <rnett@skymind.io>

* more fixes

Signed-off-by: Ryan Nett <rnett@skymind.io>

* refactor duplicate code from pad methods. (#86)

* refactor duplicate code from pad methods.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* replace switch with if.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* Various ND4J/DL4J fixes and improvements (#87)

* Reshape and reallocate - small fixes

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Reshape and reallocate - small fixes

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #6488 ElementWiseVertex broadcast support

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Constructors and broadcast supported it Transforms.max/min

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8054 ElementWiseVertex now supports broadcast inputs

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8057 Nd4j.create overload dtype fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #7551 ND4J Shape validation fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* [WIP] Numpy boolean import (#91)

* numpy bool type

Signed-off-by: raver119 <raver119@gmail.com>

* numpy bool java side

Signed-off-by: raver119 <raver119@gmail.com>

* remove create method with unused parameter. (#89)

* remove create method with unused parameter.

* removed more unused methods.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* removing more unused code.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* last removal of unused code.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* remove createSparse methods. (#92)

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* Various ND4J/DL4J fixes (#90)

* Deprecate Old*Op instances

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8063 #8054 Broadcast exceptions + cleanup inplace ops

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Small fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Remove bad test condition

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #7993 Fix shape function issue in crop_and_resize op

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* DL4J SameDiff lambda layer fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8029 Fix for pnorm backprop math

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8038 Fix Op profiler NaN/Inf triggering + add tests (#93)

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* createUninitializedDetached refactoring. (#94)

* wip

* update interface, add null implementations.

* Breaking one test in a weird way.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* createUninitializedDetached refactored.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* cuda build fix for issues introduced by recent refactoring

Signed-off-by: raver119 <raver119@gmail.com>

* initial commit

Signed-off-by: raver119 <raver119@gmail.com>

* deps tweaks

Signed-off-by: raver119 <raver119@gmail.com>

* initial prototype

Signed-off-by: raver119 <raver119@gmail.com>

* modules reorganized

Signed-off-by: raver119 <raver119@gmail.com>

* gprc module moved to nd4j-remote as well

Signed-off-by: raver119 <raver119@gmail.com>

* gprc module moved to nd4j-remote as well

Signed-off-by: raver119 <raver119@gmail.com>

* serving prototype

Signed-off-by: raver119 <raver119@gmail.com>

* serving prototype

Signed-off-by: raver119 <raver119@gmail.com>

* serving prototype

Signed-off-by: raver119 <raver119@gmail.com>

* serving prototype

Signed-off-by: raver119 <raver119@gmail.com>

* [WIP] More of CUDA (#95)

* initial commit

Signed-off-by: raver119 <raver119@gmail.com>

* Implementation of hashcode cuda helper. Working edition.

* Fixed parallel test input arangements.

* Fixed tests for hashcode op.

* Fixed shape calculation for image:crop_and_resize op and test.

* NativeOps tests. Initial test suite.

* Added tests for indexReduce methods.

* Added test on execBroadcast with NDArray as dimensions.

* Added test on execBroadcastBool with NDArray as dimensions.

* Added tests on execPairwiseTransform and execPairwiseTransofrmBool.

* Added tests for execReduce with scalar results.

* Added reduce tests for non-empty dims array.

* Added tests for reduce3.

* Added tests for execScalar.

* Added tests for execSummaryStats.

* - provide cpu/cuda code for batch_to_space
- testing it

Signed-off-by: Yurii <yurii@skymind.io>

* - remove old test for batch_to_space (had wrong format and numbers were not checked)

Signed-off-by: Yurii <yurii@skymind.io>

* Fixed complilation errors with test.

* Added test for execTransformFloat.

* Added test for execTransformSame.

* Added test for execTransformBool.

* Added test for execTransformStrict.

* Added tests for execScalar/execScalarBool with TADs.

* Added test for flatten.

* - provide cpu/cuda code for space_to_Batch operaion

Signed-off-by: Yurii <yurii@skymind.io>

* Added test for concat.

* comment unnecessary stuff in s_t_b

Signed-off-by: Yurii <yurii@skymind.io>

* Added test for specialConcat.

* Added tests for memcpy/set routines.

* Fixed pullRow cuda test.

* Added pullRow test.

* Added average test.

* - correct typo in NDArray::applyPairwiseTransform(nd4j::pairwise::BoolOps op...)

Signed-off-by: Yurii <yurii@skymind.io>

* - debugging and fixing cuda tests in JavaInteropTests file

Signed-off-by: Yurii <yurii@skymind.io>

* - correct some tests

Signed-off-by: Yurii <yurii@skymind.io>

* Added test for shuffle.

* Fixed ops declarations.

* Restored omp and added shuffle test.

* Added convertTypes test.

* Added tests for execRandom. Eliminated usage of RandomBuffer with NativeOps.

* Added sort tests.

* Added tests for execCustomOp.

* - further debuging and fixing tests terminated with crash

Signed-off-by: Yurii <yurii@skymind.io>

* Added tests for calculateOutputShapes.

* Addded Benchmarks test.

* Commented benchmark tests.

* change assertion

Signed-off-by: raver119 <raver119@gmail.com>

* Added tests for apply_sgd op. Added cpu helper for that op.

* Implement cuda helper for aplly_sgd op. Fixed tests for NativeOps.

* Added test for assign broadcastable.

* Added tests for assign_bp op.

* Added tests for axpy op.

* - assign/execScalar/execTransformAny signature change
- minor test fix

Signed-off-by: raver119 <raver119@gmail.com>

* Fixed axpy op.

* meh

Signed-off-by: raver119 <raver119@gmail.com>

* - fix tests for nativeOps::concat

Signed-off-by: Yurii <yurii@skymind.io>

* sequential transform/scalar

Signed-off-by: raver119 <raver119@gmail.com>

* allow nested parallelism

Signed-off-by: raver119 <raver119@gmail.com>

* assign_bp leak fix

Signed-off-by: raver119 <raver119@gmail.com>

* block setRNG fix

Signed-off-by: raver119 <raver119@gmail.com>

* enable parallelism by default

Signed-off-by: raver119 <raver119@gmail.com>

* enable nested parallelism by default

Signed-off-by: raver119 <raver119@gmail.com>

* Added cuda implementation for row_count helper.

* Added implementation for tnse gains op helper.

* - take into account possible situations when input arrays are empty in reduce_ cuda stuff

Signed-off-by: Yurii <yurii@skymind.io>

* Implemented tsne/edge_forces op cuda-based helper. Parallelized cpu-based helper for edge_forces.

* Added kernel for tsne/symmetrized op heleper.

* Implementation of tsne/symmetrized op cuda helper. Working edition.

* Eliminated waste printfs.

* Added test for broadcastgradientargs op.

* host-only fallback for empty reduce float

Signed-off-by: raver119 <raver119@gmail.com>

* - some tests fixes

Signed-off-by: Yurii <yurii@skymind.io>

* - correct the rest of reduce_ stuff

Signed-off-by: Yurii <yurii@skymind.io>

* - further correction of reduce_ stuff

Signed-off-by: Yurii <yurii@skymind.io>

* Added test for Cbow op. Also added cuda implementation for cbow helpers.

* - improve code of stack operation for scalar case

Signed-off-by: Yurii <yurii@skymind.io>

* - provide cuda kernel for gatherND operation

Signed-off-by: Yurii <yurii@skymind.io>

* Implementation of cbow helpers with cuda kernels.

* minor tests tweaks

Signed-off-by: raver119 <raver119@gmail.com>

* minor tests tweaks

Signed-off-by: raver119 <raver119@gmail.com>

* - further correction of cuda stuff

Signed-off-by: Yurii <yurii@skymind.io>

* Implementatation of cbow op helper with cuda kernels. Working edition.

* Skip random testing for cudablas case.

* lstmBlockCell context fix

Signed-off-by: raver119 <raver119@gmail.com>

* Added tests for ELU and ELU_BP ops.

* Added tests for eq_scalar, gt_scalar, gte_scalar and lte_scalar ops.

* Added tests for neq_scalar.

* Added test for noop.

* - further work on clipbynorm_bp

Signed-off-by: Yurii <yurii@skymind.io>

* - get rid of concat op call, use instead direct concat helper call

Signed-off-by: Yurii <yurii@skymind.io>

* lstmBlockCell context fix

Signed-off-by: raver119 <raver119@gmail.com>

* Added tests for lrelu and lrelu_bp.

* Added tests for selu and selu_bp.

* Fixed lrelu derivative helpers.

* - some corrections in lstm

Signed-off-by: Yurii <yurii@skymind.io>

* operator * result shape fix

Signed-off-by: raver119 <raver119@gmail.com>

* - correct typo in lstmCell

Signed-off-by: Yurii <yurii@skymind.io>

* few tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* CUDA inverse broadcast bool fix

Signed-off-by: raver119 <raver119@gmail.com>

* disable MMAP test for CUDA

Signed-off-by: raver119 <raver119@gmail.com>

* BooleanOp syncToDevice

Signed-off-by: raver119 <raver119@gmail.com>

* meh

Signed-off-by: raver119 <raver119@gmail.com>

* additional data types for im2col/col2im

Signed-off-by: raver119 <raver119@gmail.com>

* Added test for firas_sparse op.

* one more RandomBuffer test excluded

Signed-off-by: raver119 <raver119@gmail.com>

* Added tests for flatten op.

* Added test for Floor op.

* bunch of tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* mmulDot tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* more tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* Implemented floordiv_bp op and tests.

* Fixed scalar case with cuda implementation for bds.

* - work on cuda kernel for clip_by_norm backprop op is completed

Signed-off-by: Yurii <yurii@skymind.io>

* Eliminate cbow crach.

* more tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* more tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* Eliminated abortion with batched nlp test.

* more tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* Fixed shared flag initializing.

* disabled bunch of cpu workspaces tests

Signed-off-by: raver119 <raver119@gmail.com>

* scalar operators fix: missing registerSpecialUse call

Signed-off-by: raver119 <raver119@gmail.com>

* Fixed logdet for cuda and tests.

* - correct clipBynorm_bp

Signed-off-by: Yurii <yurii@skymind.io>

* Fixed crop_and_resize shape datatype.

* - correct some mmul tests

Signed-off-by: Yurii <yurii@skymind.io>

* build fix

Signed-off-by: raver119 <raver119@gmail.com>

* exclude two methods for JNI

Signed-off-by: raver119 <raver119@gmail.com>

* exclude two methods for JNI

Signed-off-by: raver119 <raver119@gmail.com>

* exclude two methods for JNI (#97)

Signed-off-by: raver119 <raver119@gmail.com>

* temporary stack fix

Signed-off-by: raver119 <raver119@gmail.com>

* downgrade jetty to latest stable version

Signed-off-by: raver119 <raver119@gmail.com>

* test and profiles

Signed-off-by: raver119 <raver119@gmail.com>

* Servlet skeleton

* one test case

Signed-off-by: raver119 <raver119@gmail.com>

* one test case

Signed-off-by: raver119 <raver119@gmail.com>

* compilation fix

Signed-off-by: raver119 <raver119@gmail.com>

* draft improvements

Signed-off-by: raver119 <raver119@gmail.com>

* draft improvements

Signed-off-by: raver119 <raver119@gmail.com>

* proof of concept works

Signed-off-by: raver119 <raver119@gmail.com>

* proof of concept works

Signed-off-by: raver119 <raver119@gmail.com>

* Servlet

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* logging + simple timing

Signed-off-by: raver119 <raver119@gmail.com>

* Content type fixed

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Profile required

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Servlet tests

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Post test

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Tests added:

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Minor tweaks

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Constants used

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Check content type

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Some tests

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Errors checking

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Constraints and tests

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Minor tweaks

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Dl4j servlet skeleton

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Moving class to dl4j

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Builder extended

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* initial dl4j commit

Signed-off-by: raver119 <raver119@gmail.com>

* unirest version change

Signed-off-by: raver119 <raver119@gmail.com>

* temp fallback

Signed-off-by: raver119 <raver119@gmail.com>

* Reverted unirest version

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Reverted unirest version

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* revert back unirest version change

Signed-off-by: raver119 <raver119@gmail.com>

* revert unirest change

Signed-off-by: raver119 <raver119@gmail.com>

* some additional checks in builder

Signed-off-by: raver119 <raver119@gmail.com>

* few more fields

Signed-off-by: raver119 <raver119@gmail.com>

* Test added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* lombok

Signed-off-by: raver119 <raver119@gmail.com>

* Tests added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* deps

Signed-off-by: raver119 <raver119@gmail.com>

* profiles re-introduced

Signed-off-by: raver119 <raver119@gmail.com>

* Added tests

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Model servlet

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* builders

Signed-off-by: raver119 <raver119@gmail.com>

* builders

Signed-off-by: raver119 <raver119@gmail.com>

* Servlet skeleton

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Servlet tests

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* builders

Signed-off-by: raver119 <raver119@gmail.com>

* get rid of old class

Signed-off-by: raver119 <raver119@gmail.com>

* use PI for inference

Signed-off-by: raver119 <raver119@gmail.com>

* superbuilder

Signed-off-by: raver119 <raver119@gmail.com>

* get back builder

Signed-off-by: raver119 <raver119@gmail.com>

* Servlet builder

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* PI setup

Signed-off-by: raver119 <raver119@gmail.com>

* get rid of superbuilder

Signed-off-by: raver119 <raver119@gmail.com>

* SameDiffServlet inheritance constructor

Signed-off-by: raver119 <raver119@gmail.com>

* dl4jservlet attached to samediffservlet

Signed-off-by: raver119 <raver119@gmail.com>

* builder types fix

Signed-off-by: raver119 <raver119@gmail.com>

* dummy model

Signed-off-by: raver119 <raver119@gmail.com>

* single out

Signed-off-by: raver119 <raver119@gmail.com>

* loss

Signed-off-by: raver119 <raver119@gmail.com>

* Tests added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* missed builder type

Signed-off-by: raver119 <raver119@gmail.com>

* working serving example

Signed-off-by: raver119 <raver119@gmail.com>

* sd model fix

Signed-off-by: raver119 <raver119@gmail.com>

* fix unirest version

Signed-off-by: raver119 <raver119@gmail.com>

* More tests

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Tests added:

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Minor tests fixes

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Tests fixed

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Build fixed

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Test added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Tests fixed

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Ser/deser added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* one more unirest fix

Signed-off-by: raver119 <raver119@gmail.com>

* Custom serializers

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Tests disabled

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* revert back unirest version change

Signed-off-by: raver119 <raver119@gmail.com>

* update

Signed-off-by: raver119 <raver119@gmail.com>

* some default fields values

Signed-off-by: raver119 <raver119@gmail.com>

* some comments/javadoc

Signed-off-by: raver119 <raver119@gmail.com>

* - move serde impls to client module
- get rid of INDArray serde for now

Signed-off-by: raver119 <raver119@gmail.com>

* jackson-based serde for float[], double[] and String

Signed-off-by: raver119 <raver119@gmail.com>

* more of basic ser/de + tests

Signed-off-by: raver119 <raver119@gmail.com>

* minor api changes

Signed-off-by: raver119 <raver119@gmail.com>

* change imports/signatures

Signed-off-by: raver119 <raver119@gmail.com>

* Optional parralel inference

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Insert pause between tests as workaround for unavailable port issue

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* few unused imports removed

Signed-off-by: raver119 <raver119@gmail.com>

* Models usage

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Models usage

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* - InputAdapter + OutputAdapter = InferenceAdapter
- JsonModelServer now allows separate configuration of InputAdapter and OutputAdapter

Signed-off-by: raver119 <raver119@gmail.com>

* unused import

Signed-off-by: raver119 <raver119@gmail.com>

* input adapter..

Signed-off-by: raver119 <raver119@gmail.com>

* minor signature change

Signed-off-by: raver119 <raver119@gmail.com>

* few more signatures updated

Signed-off-by: raver119 <raver119@gmail.com>

* input/output adapter

Signed-off-by: raver119 <raver119@gmail.com>

* Tests added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* javadocs added

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* Test fixed

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* minor polishing

Signed-off-by: raver119 <raver119@gmail.com>

* more of javadoc

Signed-off-by: raver119 <raver119@gmail.com>

* signature change

Signed-off-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/ec847e034b337640d0dab76ab4ef71c46eb36009
344,344.0,344.0,deeplearning4j/deeplearning4j,b10ab239c0e2561458fd679f99605f5a7ba4bcbd,"Nd4j refactoring (#111)

* refactoring

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* wip

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* wip

Signed-off-by: Robert Altena <Rob@Ra-ai.com>",https://github.com/deeplearning4j/deeplearning4j/commit/b10ab239c0e2561458fd679f99605f5a7ba4bcbd
345,345.0,345.0,deeplearning4j/deeplearning4j,c29c011d1a74f9c0c6f67759a991b5734eb08790,"Nd4j refactoring (#109)

* refactoring.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* wip

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* wip

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* wip

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* review feedback

Signed-off-by: Robert Altena <Rob@Ra-ai.com>",https://github.com/deeplearning4j/deeplearning4j/commit/c29c011d1a74f9c0c6f67759a991b5734eb08790
346,346.0,346.0,deeplearning4j/deeplearning4j,24e43e985620b104697c45052638e4470048ba68,"[WIP] build time improvements (#106)

* fix pad javadoc and @see links. (#72)

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* [WIP] More fixes (#73)

* special tests for ConstantTadHelper/ConstantShapeHelper

Signed-off-by: raver119 <raver119@gmail.com>

* release methods for data buffers

Signed-off-by: raver119 <raver119@gmail.com>

* delete temporary buffer Java side

Signed-off-by: raver119 <raver119@gmail.com>

* delete temporary buffer Java side

Signed-off-by: raver119 <raver119@gmail.com>

* delete temporary TadPack C++/Java side (#74)

Signed-off-by: raver119 <raver119@gmail.com>

* Zoo model TF import test updates (#75)

* argLine fix, update compression_gru comment

* updated comment for xception

* undid but commented argLine change

* updated xlnet comment

* copyright headers

* - new NDArray methods like()/ulike() (#77)

- fix for depthwise_conv2d_bp + special test

Signed-off-by: raver119 <raver119@gmail.com>

* upsampling2d fix CUDA

Signed-off-by: raver119 <raver119@gmail.com>

* DL4J trace logging (#79)

* MLN/CG trace logging for debugging

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Tiny tweak

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* strided_slice_bp shape fn leak fix

Signed-off-by: raver119 <raver119@gmail.com>

* SameDiff fixes and naming (#78)

* remove SDVariable inplace methods

* import methods

* npe fix in OpVal

* removed SameDiff inplace ops from tests

* Naming updates, moved to centralized methods in SameDiff, should use op_#:# for everything

* quick fixes

* javadoc

* SDVariable eval with placeholders

* use regex match

* better matching

* fix javadoc. (#76)

* fix javadoc.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* replace most @see with @link s.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* 4 additional tests

Signed-off-by: raver119 <raver119@gmail.com>

* Various DL4J/ND4J fixes (#81)

* #7954 Force refresh of UI when switching tabs on overview page

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8017 Concurrent modification exception (synchronize) fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8033 Don't initialize updater in middle of writing memory crash dump

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8208 Fix shape checks for ND4J int[] creator methods

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #6385 #7992 Keras import naming fixes + cleanup

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8016 Upsampling3D - add NDHWC format support

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Refactor NativeOps.h to export C functions

* Actually export functions from NativeOps.h

* Adapt the Java wrappers in ND4J generated with JavaCPP

* Create C wrappers for some of the C++ classes currently used by ND4J

* remove duplicate code in createBufferDetached. (#83)

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* Keras model import - updater lr fix (#84)

* Keras model import - updater lr fix

Signed-off-by: eraly <susan.eraly@gmail.com>

* Keras model import - updater lr fix, cleanup

Signed-off-by: eraly <susan.eraly@gmail.com>

* Fix functions of OpaqueVariablesSet

* SameDiff Convolution Config validation, better output methods (#82)

* Conv Config validation & tests

Signed-off-by: Ryan Nett <rnett@skymind.io>

* stackOutputs utility method

Signed-off-by: Ryan Nett <rnett@skymind.io>

* use constructor for validation, support negative kernel sizes (infered from weights)

Signed-off-by: Ryan Nett <rnett@skymind.io>

* better output methods

Signed-off-by: Ryan Nett <rnett@skymind.io>

* move output to be with fit and evaluate

Signed-off-by: Ryan Nett <rnett@skymind.io>

* fixes

Signed-off-by: Ryan Nett <rnett@skymind.io>

* more fixes

Signed-off-by: Ryan Nett <rnett@skymind.io>

* refactor duplicate code from pad methods. (#86)

* refactor duplicate code from pad methods.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* replace switch with if.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* Various ND4J/DL4J fixes and improvements (#87)

* Reshape and reallocate - small fixes

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Reshape and reallocate - small fixes

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #6488 ElementWiseVertex broadcast support

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Constructors and broadcast supported it Transforms.max/min

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8054 ElementWiseVertex now supports broadcast inputs

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8057 Nd4j.create overload dtype fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #7551 ND4J Shape validation fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* [WIP] Numpy boolean import (#91)

* numpy bool type

Signed-off-by: raver119 <raver119@gmail.com>

* numpy bool java side

Signed-off-by: raver119 <raver119@gmail.com>

* remove create method with unused parameter. (#89)

* remove create method with unused parameter.

* removed more unused methods.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* removing more unused code.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* last removal of unused code.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* remove createSparse methods. (#92)

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* Various ND4J/DL4J fixes (#90)

* Deprecate Old*Op instances

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8063 #8054 Broadcast exceptions + cleanup inplace ops

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Small fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Remove bad test condition

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #7993 Fix shape function issue in crop_and_resize op

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* DL4J SameDiff lambda layer fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8029 Fix for pnorm backprop math

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #8038 Fix Op profiler NaN/Inf triggering + add tests (#93)

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* createUninitializedDetached refactoring. (#94)

* wip

* update interface, add null implementations.

* Breaking one test in a weird way.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* createUninitializedDetached refactored.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* cuda build fix for issues introduced by recent refactoring

Signed-off-by: raver119 <raver119@gmail.com>

* [WIP] More of CUDA (#95)

* initial commit

Signed-off-by: raver119 <raver119@gmail.com>

* Implementation of hashcode cuda helper. Working edition.

* Fixed parallel test input arangements.

* Fixed tests for hashcode op.

* Fixed shape calculation for image:crop_and_resize op and test.

* NativeOps tests. Initial test suite.

* Added tests for indexReduce methods.

* Added test on execBroadcast with NDArray as dimensions.

* Added test on execBroadcastBool with NDArray as dimensions.

* Added tests on execPairwiseTransform and execPairwiseTransofrmBool.

* Added tests for execReduce with scalar results.

* Added reduce tests for non-empty dims array.

* Added tests for reduce3.

* Added tests for execScalar.

* Added tests for execSummaryStats.

* - provide cpu/cuda code for batch_to_space
- testing it

Signed-off-by: Yurii <yurii@skymind.io>

* - remove old test for batch_to_space (had wrong format and numbers were not checked)

Signed-off-by: Yurii <yurii@skymind.io>

* Fixed complilation errors with test.

* Added test for execTransformFloat.

* Added test for execTransformSame.

* Added test for execTransformBool.

* Added test for execTransformStrict.

* Added tests for execScalar/execScalarBool with TADs.

* Added test for flatten.

* - provide cpu/cuda code for space_to_Batch operaion

Signed-off-by: Yurii <yurii@skymind.io>

* Added test for concat.

* comment unnecessary stuff in s_t_b

Signed-off-by: Yurii <yurii@skymind.io>

* Added test for specialConcat.

* Added tests for memcpy/set routines.

* Fixed pullRow cuda test.

* Added pullRow test.

* Added average test.

* - correct typo in NDArray::applyPairwiseTransform(nd4j::pairwise::BoolOps op...)

Signed-off-by: Yurii <yurii@skymind.io>

* - debugging and fixing cuda tests in JavaInteropTests file

Signed-off-by: Yurii <yurii@skymind.io>

* - correct some tests

Signed-off-by: Yurii <yurii@skymind.io>

* Added test for shuffle.

* Fixed ops declarations.

* Restored omp and added shuffle test.

* Added convertTypes test.

* Added tests for execRandom. Eliminated usage of RandomBuffer with NativeOps.

* Added sort tests.

* Added tests for execCustomOp.

* - further debuging and fixing tests terminated with crash

Signed-off-by: Yurii <yurii@skymind.io>

* Added tests for calculateOutputShapes.

* Addded Benchmarks test.

* Commented benchmark tests.

* change assertion

Signed-off-by: raver119 <raver119@gmail.com>

* Added tests for apply_sgd op. Added cpu helper for that op.

* Implement cuda helper for aplly_sgd op. Fixed tests for NativeOps.

* Added test for assign broadcastable.

* Added tests for assign_bp op.

* Added tests for axpy op.

* - assign/execScalar/execTransformAny signature change
- minor test fix

Signed-off-by: raver119 <raver119@gmail.com>

* Fixed axpy op.

* meh

Signed-off-by: raver119 <raver119@gmail.com>

* - fix tests for nativeOps::concat

Signed-off-by: Yurii <yurii@skymind.io>

* sequential transform/scalar

Signed-off-by: raver119 <raver119@gmail.com>

* allow nested parallelism

Signed-off-by: raver119 <raver119@gmail.com>

* assign_bp leak fix

Signed-off-by: raver119 <raver119@gmail.com>

* block setRNG fix

Signed-off-by: raver119 <raver119@gmail.com>

* enable parallelism by default

Signed-off-by: raver119 <raver119@gmail.com>

* enable nested parallelism by default

Signed-off-by: raver119 <raver119@gmail.com>

* Added cuda implementation for row_count helper.

* Added implementation for tnse gains op helper.

* - take into account possible situations when input arrays are empty in reduce_ cuda stuff

Signed-off-by: Yurii <yurii@skymind.io>

* Implemented tsne/edge_forces op cuda-based helper. Parallelized cpu-based helper for edge_forces.

* Added kernel for tsne/symmetrized op heleper.

* Implementation of tsne/symmetrized op cuda helper. Working edition.

* Eliminated waste printfs.

* Added test for broadcastgradientargs op.

* host-only fallback for empty reduce float

Signed-off-by: raver119 <raver119@gmail.com>

* - some tests fixes

Signed-off-by: Yurii <yurii@skymind.io>

* - correct the rest of reduce_ stuff

Signed-off-by: Yurii <yurii@skymind.io>

* - further correction of reduce_ stuff

Signed-off-by: Yurii <yurii@skymind.io>

* Added test for Cbow op. Also added cuda implementation for cbow helpers.

* - improve code of stack operation for scalar case

Signed-off-by: Yurii <yurii@skymind.io>

* - provide cuda kernel for gatherND operation

Signed-off-by: Yurii <yurii@skymind.io>

* Implementation of cbow helpers with cuda kernels.

* minor tests tweaks

Signed-off-by: raver119 <raver119@gmail.com>

* minor tests tweaks

Signed-off-by: raver119 <raver119@gmail.com>

* - further correction of cuda stuff

Signed-off-by: Yurii <yurii@skymind.io>

* Implementatation of cbow op helper with cuda kernels. Working edition.

* Skip random testing for cudablas case.

* lstmBlockCell context fix

Signed-off-by: raver119 <raver119@gmail.com>

* Added tests for ELU and ELU_BP ops.

* Added tests for eq_scalar, gt_scalar, gte_scalar and lte_scalar ops.

* Added tests for neq_scalar.

* Added test for noop.

* - further work on clipbynorm_bp

Signed-off-by: Yurii <yurii@skymind.io>

* - get rid of concat op call, use instead direct concat helper call

Signed-off-by: Yurii <yurii@skymind.io>

* lstmBlockCell context fix

Signed-off-by: raver119 <raver119@gmail.com>

* Added tests for lrelu and lrelu_bp.

* Added tests for selu and selu_bp.

* Fixed lrelu derivative helpers.

* - some corrections in lstm

Signed-off-by: Yurii <yurii@skymind.io>

* operator * result shape fix

Signed-off-by: raver119 <raver119@gmail.com>

* - correct typo in lstmCell

Signed-off-by: Yurii <yurii@skymind.io>

* few tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* CUDA inverse broadcast bool fix

Signed-off-by: raver119 <raver119@gmail.com>

* disable MMAP test for CUDA

Signed-off-by: raver119 <raver119@gmail.com>

* BooleanOp syncToDevice

Signed-off-by: raver119 <raver119@gmail.com>

* meh

Signed-off-by: raver119 <raver119@gmail.com>

* additional data types for im2col/col2im

Signed-off-by: raver119 <raver119@gmail.com>

* Added test for firas_sparse op.

* one more RandomBuffer test excluded

Signed-off-by: raver119 <raver119@gmail.com>

* Added tests for flatten op.

* Added test for Floor op.

* bunch of tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* mmulDot tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* more tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* Implemented floordiv_bp op and tests.

* Fixed scalar case with cuda implementation for bds.

* - work on cuda kernel for clip_by_norm backprop op is completed

Signed-off-by: Yurii <yurii@skymind.io>

* Eliminate cbow crach.

* more tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* more tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* Eliminated abortion with batched nlp test.

* more tests fixed

Signed-off-by: raver119 <raver119@gmail.com>

* Fixed shared flag initializing.

* disabled bunch of cpu workspaces tests

Signed-off-by: raver119 <raver119@gmail.com>

* scalar operators fix: missing registerSpecialUse call

Signed-off-by: raver119 <raver119@gmail.com>

* Fixed logdet for cuda and tests.

* - correct clipBynorm_bp

Signed-off-by: Yurii <yurii@skymind.io>

* Fixed crop_and_resize shape datatype.

* - correct some mmul tests

Signed-off-by: Yurii <yurii@skymind.io>

* build fix

Signed-off-by: raver119 <raver119@gmail.com>

* exclude two methods for JNI

Signed-off-by: raver119 <raver119@gmail.com>

* exclude two methods for JNI

Signed-off-by: raver119 <raver119@gmail.com>

* exclude two methods for JNI (#97)

Signed-off-by: raver119 <raver119@gmail.com>

* temporary stack fix

Signed-off-by: raver119 <raver119@gmail.com>

* couple of legacy groups reorganized into separate compialtion units

Signed-off-by: raver119 <raver119@gmail.com>

* wrong include

Signed-off-by: raver119 <raver119@gmail.com>

* wrong include

Signed-off-by: raver119 <raver119@gmail.com>

* ReductionLoops_float split

Signed-off-by: raver119 <raver119@gmail.com>

* maximum

Signed-off-by: raver119 <raver119@gmail.com>

* some more rearrangements

Signed-off-by: raver119 <raver119@gmail.com>

* spare ifdef

Signed-off-by: raver119 <raver119@gmail.com>

* mirror pad

Signed-off-by: raver119 <raver119@gmail.com>

* - reduce_float split
- mcmodel

Signed-off-by: raver119 <raver119@gmail.com>

* bad include fix

Signed-off-by: raver119 <raver119@gmail.com>

* norelax

Signed-off-by: raver119 <raver119@gmail.com>

* norelax

Signed-off-by: raver119 <raver119@gmail.com>

* norelax

Signed-off-by: raver119 <raver119@gmail.com>

* norelax

Signed-off-by: raver119 <raver119@gmail.com>

* norelax

Signed-off-by: raver119 <raver119@gmail.com>

* norelax gone

Signed-off-by: raver119 <raver119@gmail.com>

* get back sm

Signed-off-by: raver119 <raver119@gmail.com>

* fix couple of tests for msvc

Signed-off-by: raver119 <raver119@gmail.com>

* fix couple of tests for msvc

Signed-off-by: raver119 <raver119@gmail.com>

* compress-all

Signed-off-by: raver119 <raver119@gmail.com>

* reduced arch list

Signed-off-by: raver119 <raver119@gmail.com>

* compress-all

Signed-off-by: raver119 <raver119@gmail.com>

* reduced arch list

Signed-off-by: raver119 <raver119@gmail.com>

* all compute capabilities option for tests

Signed-off-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/24e43e985620b104697c45052638e4470048ba68
347,347.0,347.0,deeplearning4j/deeplearning4j,c78f5a8225d6a883b58e529577d22773fe7e310f,"Shugeo cuda cuda (#105)

* Refactored extract_image_patches op helpers.

* Eliminated compliler errors with helper implementation.

* Finished implementation for extract_image_patches both cpu and cuda helpers.

* Improved cpu implementation.

* Improved cuda implementation for extract_image_patches helper.

* Added omp to ClipByGlobalNorm helpers implementation.

* Added implementation for thresholedrelu_bp op.

* Fixed cuda kernel with F order.

* Fixed tests for subarray.

* Refactored tests for Gaussian_3 and Truncated_22.

* Added tests for GaussianDistribution with native ops.

* Modified tests for Gaussian distribution.

* Fixed random tests.

* Fixed atomicMin/atomicMax for 64bit cases.

* Fixed tests for execReduce3TAD tests.

* Eliminated waste comments.",https://github.com/deeplearning4j/deeplearning4j/commit/c78f5a8225d6a883b58e529577d22773fe7e310f
348,348.0,348.0,deeplearning4j/deeplearning4j,f8615e0ef0c71c2a9493c20cc1dea925ef39951c,"nd4j refactoring. (#103)

Restored writeTxt per slack DM.",https://github.com/deeplearning4j/deeplearning4j/commit/f8615e0ef0c71c2a9493c20cc1dea925ef39951c
349,349.0,349.0,deeplearning4j/deeplearning4j,a438434b1f939a11f947d7726157afb7a7a1ffa3,"Nd4j refactoring (#101)

* cleanup

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* wip

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* wip

Signed-off-by: Robert Altena <Rob@Ra-ai.com>",https://github.com/deeplearning4j/deeplearning4j/commit/a438434b1f939a11f947d7726157afb7a7a1ffa3
350,350.0,350.0,deeplearning4j/deeplearning4j,e565788329b5bdebe2136d366442d4a8e35f1bf6,"cuda build fix for issues introduced by recent refactoring

Signed-off-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/e565788329b5bdebe2136d366442d4a8e35f1bf6
351,351.0,351.0,deeplearning4j/deeplearning4j,dfec54242dcffe29e669838da13bc9578756e5de,"createUninitializedDetached refactoring. (#94)

* wip

* update interface, add null implementations.

* Breaking one test in a weird way.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* createUninitializedDetached refactored.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>",https://github.com/deeplearning4j/deeplearning4j/commit/dfec54242dcffe29e669838da13bc9578756e5de
352,352.0,352.0,deeplearning4j/deeplearning4j,aa4af2c36d5fbcc15e99250a1dc718b8c8e88a98,"refactor duplicate code from pad methods. (#86)

* refactor duplicate code from pad methods.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>

* replace switch with if.

Signed-off-by: Robert Altena <Rob@Ra-ai.com>",https://github.com/deeplearning4j/deeplearning4j/commit/aa4af2c36d5fbcc15e99250a1dc718b8c8e88a98
353,353.0,353.0,deeplearning4j/deeplearning4j,dcc72e23b274c6b636765fe3c0871f45f8a3b2b1,Refactor NativeOps.h to export C functions,https://github.com/deeplearning4j/deeplearning4j/commit/dcc72e23b274c6b636765fe3c0871f45f8a3b2b1
354,354.0,354.0,deeplearning4j/deeplearning4j,763a225c6a069e2f88f5f069c5fa7d5116874b6a,"[WIP] More of CUDA operations (#69)

* initial commit

Signed-off-by: raver119 <raver119@gmail.com>

* - gruCell_bp further

Signed-off-by: Yurii <yurii@skymind.io>

* - further work on gruCell_bp

Signed-off-by: Yurii <yurii@skymind.io>

* Inverse matrix cublas implementation. Partial working revision.

* Separation of segment ops helpers. Max separation.

* Separated segment_min ops.

* Separation of segment_mean/sum/prod/sqrtN ops heleprs.

* Fixed diagonal processing with LUP decomposition.

* Modified inversion approach using current state of LU decomposition.

* Implementation of matrix_inverse op with cuda kernels. Working revision.

* Implemented sequence_mask cuda helper. Eliminated waste printf with matrix_inverse implementation. Added proper tests.

* - further work on gruCell_bp (ff/cuda)

Signed-off-by: Yurii <yurii@skymind.io>

* comment one test for gruCell_bp

Signed-off-by: Yurii <yurii@skymind.io>

* - provide cuda static_rnn

Signed-off-by: Yurii <yurii@skymind.io>

* Refactored random_shuffle op to use new random generator.

* Refactored random_shuffle op helper.

* Fixed debug tests with random ops tests.

* Implement random_shuffle op cuda kernel helper and tests.

* - provide cuda scatter_update

Signed-off-by: Yurii <yurii@skymind.io>

* Implementation of random_shuffle for linear case with cuda kernels and tests.

* Implemented random_shuffle with cuda kernels. Final revision.

* - finally gruCell_bp is completed

Signed-off-by: Yurii <yurii@skymind.io>

* Dropout op cuda helper implementation.

* Implemented dropout_bp cuda helper.

* Implemented alpha_dropout_bp with cuda kernel helpers.

* Refactored helper.

* Implementation of suppresion helper with cuda kernels.

* - provide cpu code fot hsvToRgb, rgbToHsv, adjustHue

Signed-off-by: Yurii <yurii@skymind.io>

* Using sort by value method.

* Implementation of image.non_max_suppression op cuda-based helper.

* - correcting and testing adjust_hue, adjust_saturation cpu/cuda code

Signed-off-by: Yurii <yurii@skymind.io>

* Added cuda device prefixes to declarations.

* Implementation of hashcode op with cuda helper. Initital revision.

* rnn cu impl removed

Signed-off-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/763a225c6a069e2f88f5f069c5fa7d5116874b6a
355,355.0,355.0,deeplearning4j/deeplearning4j,c969b724bbd1b2f684c94b675c164976b71fb1b8,"[WIP] more CUDA stuff (#57)

* initial commit

Signed-off-by: raver119 <raver119@gmail.com>

* Added gradcheck test for dynamic_partition_bp op.

* - implementation of dilation op (cpu and cuda)

Signed-off-by: Yurii <yurii@skymind.io>

* Fixed broadcast_dynamic_shape 1D case and tests.

* Fixed usage of default integer arguments.

* Fixed dynamic_partition_bp op and tests.

* Eliminated test with grad check for dynamic_partition_bp op.

* start working on cuda svd - porting available corresponding api from cuSOLVER library

Signed-off-by: Yurii <yurii@skymind.io>

* provide prelu_bp

Signed-off-by: Yurii <yurii@skymind.io>

* - provide gruCell_bp (old version ??)

Signed-off-by: Yurii <yurii@skymind.io>

* - polishing cumsum_bp and cumprod_bp tests

Signed-off-by: Yurii <yurii@skymind.io>

* provide sparseSoftmaxCrossEntropyWithLogits and sparseSoftmaxCrossEntropyWithLogits_grad

Signed-off-by: Yurii <yurii@skymind.io>

* Fixed atomicMul with float input/output

* implementation of cuda kernel for triu_bp operation

Signed-off-by: Yurii <yurii@skymind.io>

* Refactored lup helper to add parrallel computing.

* cusolver libraries

Signed-off-by: raver119 <raver119@gmail.com>

* uncomment cuSolver APIs in svd.cu

Signed-off-by: Yurii <yurii@skymind.io>

* cusolver var

Signed-off-by: raver119 <raver119@gmail.com>

* - further work on cuSolver svd

Signed-off-by: Yurii <yurii@skymind.io>

* Implement usage of cuda solver to LUP decomposition.

* - correct naames in lup functions

Signed-off-by: Yurii <yurii@skymind.io>

* correct svdQR cuda

Signed-off-by: Yurii <yurii@skymind.io>

* - provide transpositions of input matrices in case of c order in svdCudaQR

Signed-off-by: Yurii <yurii@skymind.io>

* Fixed implementation issues with LUP usign cuda solver.

* Implementation of matrix_determinant helper with cuda kernels. Working revision.

* Implemented log_matrix_determinant helper with cuda kernels.

* - implementation of batched cuda svd

Signed-off-by: Yurii <yurii@skymind.io>

* Refactored cholesky helper and implementation of cuda solver cholesky batch.

* - implementation of cuda kernel for tile bp

Signed-off-by: Yurii <yurii@skymind.io>

* Implementation of cholesky and logdet with cuda kernels.

* - implementation of cuda kernel for sru_bidirectional

Signed-off-by: Yurii <yurii@skymind.io>

* Fixed cholesky helper.

* Cholesky op helper implementation. Working double-based cublas implementation.

* bad import excluded

Signed-off-by: raver119 <raver119@gmail.com>

* Finished with cuda implementation of cholesky helper and tests.

* - implementation of cuda kernel for sru_bidirectional_backprop operation

Signed-off-by: Yurii <yurii@skymind.io>

* Implementation of matrix_inverse op helper with cuda kernels. The first revision.

* - start working on gruCell_bp

Signed-off-by: Yurii <yurii@skymind.io>

* Implementation of matrix_inverse helper.

* - further work on new gruCell_bp

Signed-off-by: Yurii <yurii@skymind.io>

* cuBLAS related fixes

Signed-off-by: raver119 <raver119@gmail.com>

* calculateOutputShapes() now passes device buffers as well

Signed-off-by: raver119 <raver119@gmail.com>

* special concat/average/accumulate init host pointers now

Signed-off-by: raver119 <raver119@gmail.com>

* few more tweaks

Signed-off-by: raver119 <raver119@gmail.com>

* additional CudaDataBufferFactory signatures certain for data types

Signed-off-by: raver119 <raver119@gmail.com>

* cuSolver host buffer

Signed-off-by: raver119 <raver119@gmail.com>

* buffer to buffer memcpy host ptr allocation

Signed-off-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/c969b724bbd1b2f684c94b675c164976b71fb1b8
356,356.0,356.0,deeplearning4j/deeplearning4j,1170827c18005aa9dc7e6f0550964a4e4a6afcf2,"Merge master to upstream (#7945)

* Shugeo strided slice zeros (#14)

* Modified strided_slice op to properly work with empty-like shapes.

* Fixed test for reduce_mean with empty-like input.

* [WIP] Last merge (#15)

* correct logsoftmax looss (#2)

* Small SameDiff listener fix (#4)

* Various fixes (#6)

* #7839 Fix for asXMatrix and tests

* #7866 EmbeddingSequenceLayer dtype fix + test

* #7856 SameDiff save/load stream methods

* #7859 RegressionEvaluation rank 4 fix + tests + axis configuration

* EvaluationBinary 3d/4d

* More evaluation 3d/4d tests

* #7847 Evaluation empty checks

* Small test ifx

* #7848 Fix median edge case

* Improve DL4J samediff layer tests

* [WIP] FastText wrapper implemented (#8)

* FastText implemented

* Some fixes

* Fix shapes for wordsNearest

* Validation of input vectors

* Fixes

* Fixed test

* Thread tagged

* Some tweaks

* setContextClassLoader for DeallocatorServiceThread

* Numpy format tests (#1)

* Various fixes (#11)

* #7852 SameDiff gather fix

* #7892 SameDiff placeholder to constant conversion

* #7890 validate input rank for MLN/CG init methods

* Fix broken permute shape calculation

* Permute and gather fixes

* Tests

* #7850 LogSumExp fix + test

* Handful of test fixes

* Empty arrays with non-scalar shapes (#10)

* minor rearrangements for lambdas

* empty tensors with non-scalar shapes

* numpy empty tensors with non-scalar shapes

* few more empty tweaks

* Small fixes

* conv3d signature update

* micro fix in batchnorm mkldnn

* Import fixes

* Fix

* MKL-DNN update

* Small fill fix

* fill with empty input + test

* Fixes

* Small error improvement

* Fix

* one special test

* couple of fixes for lstm

* Rewrite TFGraphMapper.getNDArrayFromTensor to be maintainable and less error prone

* Fixes

* FP16

* Unsigned

* BFloat16

* Fill op - empty tweaks

* - couple of fixes for empty arrays construction
- stack updated

* strided slice fix

* one transform test

* provide method for reducing shapeInfo in case of input array is empty

* Fixed reduceAlongDimensions to use empty input properly.

* couple of broadcast tests

* couple of tests broadcast tests + tweak to make them pass

* add check of non-empty to methods producing sub-arrays

* Fixed reshapeC with zeros in shape.

* complete empty check in reduce_... legacy ops

* Concat and cumsum/prod

* Tweak to empty shape inference on import

* add empty check to the rest of reduce legacy ops

* one more test

* correct typo in evalReduceShapeInfoEmpty

* Added tests for reduce_* ops to tests with zero shapes.

* few more tests for empty reductions

* Fixed strided_slice op with empty case and tests.

* one more empty reduction test

* Fixed strided_slice test.

* add empty check to NDArray::reshapei

* infOrMax

* empty min/max with infinity tests

* made unstack working correctly with empty arrays

* few IndexReduce tests + tweaks for empty shapes

* add test for empty concat

* few tests fixed

* Validation fix for reductions on empty shapes

* Reverse fix

* Reduction shape calc fixes

* SameDiff.generateOutputVariable: don't use shape function to determine number of outputs

* Range fix

* - NDArray constructor updated for scalars/empty arrays
- few tests fixed

* More fixes

* Empty creator fixes

* concat fix

* concat fix

* TF import tests: allow 'both all NaN' and 'both all inf' to pass

* Slice, zero fraction, and reshape fixes

* transpose, gather

* Zero fraction

* scalar cast fix

* Empty reduction axis support

* few more tests fixed

* Fixed input checks conforming with TF for concat op and tests.

* few tests fixed

* matmul scalar shape fix

* Fixed checkout for data type and scalarity with concat to allow non-empty scalars with vector concats.

* broadcast bool fix

* few more tests

* few more tests

* correct evalReduceShapeInfoEmpty

* argmax/argmin + tests

* one more empty edge case + one more test

* argmax/argmin/realdiv_bp tweaks

* empty reshape test + fix

* Helper fixes

* Small fixes

* Gather test fix

* Gather test fix

* Small fixes

* reduce scalar zero values

* scalar mean workaround

* Remove debug code

* along dim mean workaround

* one more test

* - equalsTo() tweak for empty arrays
- one more test

* broadcast tweaks

* [WIP] Fixing outstanding issues for NLP (#9)

* Avoid using not-inited objects

* Test fixed.

* Redundant method avoided for models like FastText

* KMeans++ implementation

* KMeans++ implementation

* Disable parallel execution

* KMeans++

* Tests

* Dev branch merge (#16)

* SameDiff: convertDataType and gradient check util improvements (#12)

* GradCheck util improvements

* StopGradient constructor + test

* SameDiff: Add datatype conversion

* Javadoc and add DataType.isNumerical()

* Small fix

* Fix SameDiff TF import test cases intermediate naming (workaround for bad default)

* TFGraphTestAllHelper: check intermediates in execution order

* Add missing debug listener

* [WIP] lstmBlock fix + other changes (#13)

- fixes lstmBlock issue
- changes NDArray method reshape(), permute(), transpose() by making them return instance instead of pointer
- CheckNumerics op
- fixes for ReduceBool IsInfOrNan & IsFinite

* Small test fix

* CheckNumerics op wrapper

* Fix some issues on master (#17)

* Fix DataVec test issue

* Fix issue with dl4j SameDiff output layer

* Dtype fix for lambda layers

* #7912 BertIterator dtype fix (use float32 not global default)

* [WIP] Next set of CUDA stuff (#7)

New CUDA implementations and improvements

* bad file

* Dev branch master merge (#23)

* SameDiff: convertDataType and gradient check util improvements (#12)

* GradCheck util improvements

* StopGradient constructor + test

* SameDiff: Add datatype conversion

* Javadoc and add DataType.isNumerical()

* Small fix

* Fix SameDiff TF import test cases intermediate naming (workaround for bad default)

* TFGraphTestAllHelper: check intermediates in execution order

* Add missing debug listener

* [WIP] lstmBlock fix + other changes (#13)

- fixes lstmBlock issue
- changes NDArray method reshape(), permute(), transpose() by making them return instance instead of pointer
- CheckNumerics op
- fixes for ReduceBool IsInfOrNan & IsFinite

* Small test fix

* CheckNumerics op wrapper

* Compatibility of deserialization (#18)

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* SameDiff: add activation gradient checking support for debugging (#19)

* SameDiff gradient checker: first pass on activation gradient checks

* Fixes + tests for activation gradient checking

* Javadoc

* [WIP] Some nd4j data type corrections (#20)

* Adjust data type

* Set correct Data type.

* Size of proper data type.

* fix averaged cpu load (#22)

* SameDiff ops, TF import and fixes (#24)

* CheckNumerics tests + fixes + misc fixes

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Fake quant

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Fixes

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* FakeQuantWithMinMaxArgs

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* CheckNumerics fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Fix libnd4j ALL_INTS and ALL_FLOATS declaration (uint and bfloat types)

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Small fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Javadoc

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Exception tweak

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Fix for out of scope stack allocated var use

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Ignores

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Ignore for known failing test (already logged issue)

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Merge upstream to fork (#25)

* Add thousand-separator commas to TotalParams (#7915)

* Add thousand-separator commas to TotalParams

The number of parameters can be quite large, and it would help the reading of the summary printout to have the TotalParams column & values at the bottom have thousand-separator-commas in them.

* Add thousand-separator commas to MultiLayerNetwork

Corresponding change to MultiLayerNetwork

Signed-off-by: Jxtps Jxtps <jxtps435@gmail.com>

* Update contributing and issue/PR templates (#7934)

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Fix link to AdaDelta paper (#7942)

Fix link to AdaDelta paper hosted on matthewzeiler.com

Signed-off-by: Jxtps

* Fixes, and ignores for known/logged failing issues (#7943)

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* SameDiff + DL4J/SameDiff: Multiple fixes (#28)

* #7919 HDF5 attribute buffer length fix

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #7909 Arbiter constructor exception ux improvements

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #7925 RNN output layer length checks

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #7939 Add listener for validating inputs are not incorrectly modified

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* #7939 Integrate NonInplaceValidationListener into tests

* #7844 DL4J SameDiff fixes for variable minibatch size

* DL4J SameDiff fixes - ensure gradient for input placeholder is available

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* Tweaks to ExternalErrorsFunction - use placeholders, make more robust

* Another fix

* More fixes

* More SameDiff/DL4J fixes

* Scope out scalar array creation in BaseScalarOp

* Remove debug code

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* [WIP] Final dev branch merge (#29)

* SameDiff: convertDataType and gradient check util improvements (#12)

* GradCheck util improvements

* StopGradient constructor + test

* SameDiff: Add datatype conversion

* Javadoc and add DataType.isNumerical()

* Small fix

* Fix SameDiff TF import test cases intermediate naming (workaround for bad default)

* TFGraphTestAllHelper: check intermediates in execution order

* Add missing debug listener

* [WIP] lstmBlock fix + other changes (#13)

- fixes lstmBlock issue
- changes NDArray method reshape(), permute(), transpose() by making them return instance instead of pointer
- CheckNumerics op
- fixes for ReduceBool IsInfOrNan & IsFinite

* Small test fix

* CheckNumerics op wrapper

* Compatibility of deserialization (#18)

Signed-off-by: Alexander Stoyakin <alexander.stoyakin@gmail.com>

* SameDiff: add activation gradient checking support for debugging (#19)

* SameDiff gradient checker: first pass on activation gradient checks

* Fixes + tests for activation gradient checking

* Javadoc

* [WIP] Some nd4j data type corrections (#20)

* Adjust data type

* Set correct Data type.

* Size of proper data type.

* fix averaged cpu load (#22)

* [WIP] Multiple dataset iterators (#27)

* Splitting dataset into arbitrary number

* Fixes

* Multiple split of iterator

* Test

* Test

* Some fixes

* signature change

* one more tweak

Signed-off-by: raver119 <raver119@gmail.com>

* one more test for sequential use of DataSetIteratorSplitter

Signed-off-by: raver119 <raver119@gmail.com>

* Fixes

* Fixes

* one more test for Alexander

Signed-off-by: raver119 <raver119@gmail.com>

* Some fixes

* Some fixes

* one more test for Alexander

Signed-off-by: raver119 <raver119@gmail.com>

* minor test fix

Signed-off-by: raver119 <raver119@gmail.com>

* Some fixes

* Some fixes

* couple of assertions tweaked

Signed-off-by: raver119 <raver119@gmail.com>

* MDS splitter test :/

Signed-off-by: raver119 <raver119@gmail.com>

* Minor refactoring

* Multi dataset

* Some fixes

* More tests

* Small number of test fixes/improvements (failures on CI) (#31)

Signed-off-by: AlexDBlack <blacka101@gmail.com>

* [WIP] More CUDA stuff (#26)

* initial commit

Signed-off-by: raver119 <raver119@gmail.com>

* LRN BP CUDA

Signed-off-by: raver119 <raver119@gmail.com>

* less memory

Signed-off-by: raver119 <raver119@gmail.com>

* Fixed bug with crop_and_resize op helper.

* get rid of unnecessary index-calculation dunction

Signed-off-by: Yurii <yurii@skymind.io>

* Fixed sort with nth_element cuda-based helper.

* Refactored nth_element.

* Refactored nth_element op and tests.

* Modified usage of dim array with sortTad routine.

* Refactored main routine of helper for non_max_image_suppression op.

* non_max_image_suppression op helper with cuda kernel implementation. Initial revision.

* fix vol2col cuda kernel

* meh

Signed-off-by: raver119 <raver119@gmail.com>

* topK concept

Signed-off-by: raver119 <raver119@gmail.com>

* unsorted topK with scanWitdh of 1

Signed-off-by: raver119 <raver119@gmail.com>

* correct vol2col tests

* sorted/unsorted topK

Signed-off-by: raver119 <raver119@gmail.com>

* implementation and fixing col2im/col2vol

* Corrected usage flags with input/output with reverse op.

* dup is const now

Signed-off-by: raver119 <raver119@gmail.com>

* percentile op

Signed-off-by: raver119 <raver119@gmail.com>

* group tests for mapool2d

Signed-off-by: Yurii <yurii@skymind.io>

* special test for george

Signed-off-by: raver119 <raver119@gmail.com>

* less threads for sortTad

Signed-off-by: raver119 <raver119@gmail.com>

* provide conv2d for cuda

Signed-off-by: Yurii <yurii@skymind.io>

* remove auther in sort tad kernel code

Signed-off-by: Yurii <yurii@skymind.io>

* provide depthwise_conv2d for cuda

Signed-off-by: Yurii <yurii@skymind.io>

* - max_pooling_with_argmax
- null check for special use

Signed-off-by: raver119 <raver119@gmail.com>

* dts cuda

Signed-off-by: raver119 <raver119@gmail.com>

* provide sconv2d for cuda

Signed-off-by: Yurii <yurii@skymind.io>

* std cuda

Signed-off-by: raver119 <raver119@gmail.com>

* Refactored non_max_suppression op to conform TF implementation.

* Improved suppression helper.

* provide pooling3d for cuda

Signed-off-by: Yurii <yurii@skymind.io>

* minor lstm rearrangements

Signed-off-by: raver119 <raver119@gmail.com>

* more of minor lstm rearrangements

Signed-off-by: raver119 <raver119@gmail.com>

* (bi)dynamic_rnn

Signed-off-by: raver119 <raver119@gmail.com>

* templates init order

Signed-off-by: raver119 <raver119@gmail.com>

* Refactored non_max_suppression op.

* Added cuda kernel for non_max_suppression.

* CPU sort by key/value

Signed-off-by: raver119 <raver119@gmail.com>

* CPU sort TAD by key/value

Signed-off-by: raver119 <raver119@gmail.com>

* CPU sort TAD by key/value tests

Signed-off-by: raver119 <raver119@gmail.com>

* Eliminate compiler error with cuda implementation.

* - repaired gradCheck in cuda
- provide conv2d_bp for cuda

Signed-off-by: Yurii <yurii@skymind.io>

* missed signature

Signed-off-by: raver119 <raver119@gmail.com>

* provide depthwise_conv2d_bp for cuda

Signed-off-by: Yurii <yurii@skymind.io>

* Implementation of lup helper with cuda kernel. Initial commit.

* further work on backprops for convolutions

Signed-off-by: Yurii <yurii@skymind.io>

* CUDA linear sort by key/val

Signed-off-by: raver119 <raver119@gmail.com>

* CUDA tad sort by key/val

Signed-off-by: raver119 <raver119@gmail.com>

* start providing of backprop for pooling2d/3d

Signed-off-by: Yurii <yurii@skymind.io>

* Added atomicAdd for bool datatype.

* dynamic partition concept

Signed-off-by: raver119 <raver119@gmail.com>

* dynamic partition concept

Signed-off-by: raver119 <raver119@gmail.com>

* dynamic partition scalar CUDA

Signed-off-by: raver119 <raver119@gmail.com>

* important comment

Signed-off-by: raver119 <raver119@gmail.com>

* fix pooling2d/3d backprop helpers

Signed-off-by: Yurii <yurii@skymind.io>

* Added non-linear test with dynamic_partition.

* Improved test for dynamic_partition.

* dynamic_partition TAD concept

Signed-off-by: raver119 <raver119@gmail.com>

* - dynamic_partition TAD CUDA impl
- dynamic_partition TAD CPU fix

Signed-off-by: raver119 <raver119@gmail.com>

* - rewrite cpu code for usampling2d/3d
- write cuda code for usampling2d/3d

Signed-off-by: Yurii <yurii@skymind.io>

* dynamic_stitch CUDA vector case

Signed-off-by: raver119 <raver119@gmail.com>

* dynamic_stitch CUDA TAD case concept

Signed-off-by: raver119 <raver119@gmail.com>

* dynamic_stitch CUDA TAD case impl

Signed-off-by: raver119 <raver119@gmail.com>

* Added tests for dynamic_stitch 3D-4D cases.

* minor tests tweaks

Signed-off-by: raver119 <raver119@gmail.com>

* Fixed type check for dynamic stitch.

* min/max bp

Signed-off-by: raver119 <raver119@gmail.com>

* rewrite code for upsampling2d/3d cpu

Signed-off-by: Yurii <yurii@skymind.io>

* reduce min/max/norm_max bp

Signed-off-by: raver119 <raver119@gmail.com>

* lup implementation. Additional enhancements.

* provide code for upsamling2d/3d backprop

Signed-off-by: Yurii <yurii@skymind.io>

* weightedCrossEntropyWithLogits

Signed-off-by: raver119 <raver119@gmail.com>

* Fixed template math atomicMul for 64bit ints.

* Refactored dynamic_partition_bp op.

* inverseBroadcast fix

Signed-off-by: raver119 <raver119@gmail.com>

* DynamicPartitionBP test datatype fixed.

* - nd4j_atomicMul Windows fix
- cpu/NDArrayLambda.hpp excluded from CUDA

Signed-off-by: raver119 <raver119@gmail.com>",https://github.com/deeplearning4j/deeplearning4j/commit/1170827c18005aa9dc7e6f0550964a4e4a6afcf2
357,357.0,357.0,elki-project/elki,a60e18c6cef484396d77fb6cec0493123caf72d6,Minor bug fix in refactored Betula code,https://github.com/elki-project/elki/commit/a60e18c6cef484396d77fb6cec0493123caf72d6
358,358.0,358.0,elki-project/elki,e45386dc4aaae07bdb2599ed6e549e6a076e6a1c,refactoring of betula-kmeans initialization,https://github.com/elki-project/elki/commit/e45386dc4aaae07bdb2599ed6e549e6a076e6a1c
359,359.0,359.0,elki-project/elki,bf7a7fb7c5c78e4dccaa52e2d1aa4ff70fac2ec8,"rm bad, unnecessary cast in CFtree refactoring.",https://github.com/elki-project/elki/commit/bf7a7fb7c5c78e4dccaa52e2d1aa4ff70fac2ec8
360,360.0,360.0,elki-project/elki,c2b12897287908a549eda09777ac62bc06aeccc2,More refactoring of BETULA,https://github.com/elki-project/elki/commit/c2b12897287908a549eda09777ac62bc06aeccc2
361,361.0,361.0,elki-project/elki,13191062d15e87bd8ee60f2798639dcb94febdb3,Further refactor VP Tree.,https://github.com/elki-project/elki/commit/13191062d15e87bd8ee60f2798639dcb94febdb3
362,362.0,362.0,elki-project/elki,9b1e8db7d27d5353f7273eec3516b89051879591,Refactoring work in progress.,https://github.com/elki-project/elki/commit/9b1e8db7d27d5353f7273eec3516b89051879591
363,363.0,363.0,elki-project/elki,2a75c99c725ce21d29fe85b4d0c97eb08bfe6283,"completed mvptree, added mvptreetest some refactoring and fixes in vptree",https://github.com/elki-project/elki/commit/2a75c99c725ce21d29fe85b4d0c97eb08bfe6283
364,364.0,364.0,elki-project/elki,6fc5a6bad67ee83192e74a15c8ad223751168be0,"Refactoring, cleanups, but still pretty slow. :-(",https://github.com/elki-project/elki/commit/6fc5a6bad67ee83192e74a15c8ad223751168be0
365,365.0,365.0,elki-project/elki,97b609827c6bf554d710f7a9cc48eda84ec7144b,comments and refactoring,https://github.com/elki-project/elki/commit/97b609827c6bf554d710f7a9cc48eda84ec7144b
366,366.0,366.0,elki-project/elki,3ae04d69785740219722827c69b2a877e0bc254b,"added checks for degenerating clusters, removed loglike check in pruning, fixed bug that unnecessary clusterdata was incremented in each leaf, refactoring",https://github.com/elki-project/elki/commit/3ae04d69785740219722827c69b2a877e0bc254b
367,367.0,367.0,elki-project/elki,b8a691da4c459a162b94d4ea800eaf20b1216625,refactoring and comments,https://github.com/elki-project/elki/commit/b8a691da4c459a162b94d4ea800eaf20b1216625
368,368.0,368.0,elki-project/elki,b86032c4eed8302a5d93d68a08c627792c694de2,refactoring and comments,https://github.com/elki-project/elki/commit/b86032c4eed8302a5d93d68a08c627792c694de2
369,369.0,369.0,elki-project/elki,47bf1bd9051e997c52bc24ccedcd87bd1780750b,"big refactoring, tau for models and loglikelihood now adjustable, pruning now also checks loglikelihood deviation",https://github.com/elki-project/elki/commit/47bf1bd9051e997c52bc24ccedcd87bd1780750b
370,370.0,370.0,elki-project/elki,06ed6e55deb3642b0d2b8ea0026e86d268f97acc,Merge my refactored libSVM code.,https://github.com/elki-project/elki/commit/06ed6e55deb3642b0d2b8ea0026e86d268f97acc
371,371.0,371.0,elki-project/elki,bf47014ad2563defff9ab45884ec33dfacc55a4b,"Fix batch evaluation of outlier scores (recent refactoring)

Old results are unaffected; and this bug completely screws
the results, making evaluations -inf etc.",https://github.com/elki-project/elki/commit/bf47014ad2563defff9ab45884ec33dfacc55a4b
372,372.0,372.0,elki-project/elki,efc3f5400cb43488b2f3e59d89e75c2dd89192b1,Refactoring and enhancements of k-medoids clustering.,https://github.com/elki-project/elki/commit/efc3f5400cb43488b2f3e59d89e75c2dd89192b1
373,373.0,373.0,elki-project/elki,5dd0745b54451362ba762c509bb2b43da0cf04ef,Refactor KMeans++ code,https://github.com/elki-project/elki/commit/5dd0745b54451362ba762c509bb2b43da0cf04ef
374,374.0,374.0,elki-project/elki,a0b8c4fe5d0131388f30da5af7a72cd500607dc5,"refactoring in all classes, added function in entropy to fill the long arrays",https://github.com/elki-project/elki/commit/a0b8c4fe5d0131388f30da5af7a72cd500607dc5
375,375.0,375.0,elki-project/elki,f2f13d67b5dd963e4ae9e87b1e4f2096f221853d,JavaDoc fixes where Eclipse refactored non-code to eagerly,https://github.com/elki-project/elki/commit/f2f13d67b5dd963e4ae9e87b1e4f2096f221853d
376,376.0,376.0,elki-project/elki,ebc956b059e36a64caec023e6b442da89db7484b,"BIG: QueryBuilder, refactoring, to later allow auto-indexing.",https://github.com/elki-project/elki/commit/ebc956b059e36a64caec023e6b442da89db7484b
377,377.0,377.0,elki-project/elki,541a08398ea0bc0f5e722dede5236c3877f99c95,Refactor and improve OPTICS Xi extraction.,https://github.com/elki-project/elki/commit/541a08398ea0bc0f5e722dede5236c3877f99c95
378,378.0,378.0,elki-project/elki,9dac90d3da371bd5bfc7d612f10e86e584c237ae,"Code refactoring, small optimizations.",https://github.com/elki-project/elki/commit/9dac90d3da371bd5bfc7d612f10e86e584c237ae
379,379.0,379.0,elki-project/elki,efc6a52d2d85a909f32629c312c317ca8bc4aedf,Big refactoring of k-means variants to use inner Instance classes.,https://github.com/elki-project/elki/commit/efc6a52d2d85a909f32629c312c317ca8bc4aedf
380,380.0,380.0,elki-project/elki,15d28c8998568f766a8799dc3da18cbd97211e50,"More refactoring of k-means, to reduce redundancies.",https://github.com/elki-project/elki/commit/15d28c8998568f766a8799dc3da18cbd97211e50
381,381.0,381.0,elki-project/elki,a3992cc4b09077d3a46644b51ed145bab6021f0b,Refactor html+markdown generation.,https://github.com/elki-project/elki/commit/a3992cc4b09077d3a46644b51ed145bab6021f0b
382,382.0,382.0,elki-project/elki,607ad31c8c92010ca1c99243e26ef121882857d7,"Refactoring of M-Tree split, part 1",https://github.com/elki-project/elki/commit/607ad31c8c92010ca1c99243e26ef121882857d7
383,383.0,383.0,elki-project/elki,dc838b648e7ecb55a2dd3e77199cc498e9a1fe6b,Refactor theshold criterions into classes. Clean up distances.,https://github.com/elki-project/elki/commit/dc838b648e7ecb55a2dd3e77199cc498e9a1fe6b
384,384.0,384.0,elki-project/elki,9f151e8a01d5d3341964201b2ff0349b1e34809c,Refactoring and code cleanup of PAM.,https://github.com/elki-project/elki/commit/9f151e8a01d5d3341964201b2ff0349b1e34809c
385,385.0,385.0,elki-project/elki,dae0c658c58299f6010bd0875366f42400a695f6,"Log EM objective, minor refactoring.",https://github.com/elki-project/elki/commit/dae0c658c58299f6010bd0875366f42400a695f6
386,386.0,386.0,elki-project/elki,df216f5a0deb1aea51d7dde526d530f42b6e7d8b,"Eliminate formal global parameter constraints, for future refactoring.

As we do not have an UI right now that makes use of them, and also
currently do not even show them on the command line help anymore.",https://github.com/elki-project/elki/commit/df216f5a0deb1aea51d7dde526d530f42b6e7d8b
387,387.0,387.0,elki-project/elki,48c92d1c12fa0ad0391dbedcc7637ccc96d81778,Refactor code to auto-create a distance matrix (for PAM + MiniMax),https://github.com/elki-project/elki/commit/48c92d1c12fa0ad0391dbedcc7637ccc96d81778
388,388.0,388.0,elki-project/elki,bf81cabad71099753b761938a4687ec9dd7711e0,"Refactor, clean up, and optimize HAC code.",https://github.com/elki-project/elki/commit/bf81cabad71099753b761938a4687ec9dd7711e0
389,389.0,389.0,elki-project/elki,2636843f421975fe93f24a558b4e1bad05d990ab,"Add a test for QR, and fix a bug introduced in recent refactoring.",https://github.com/elki-project/elki/commit/2636843f421975fe93f24a558b4e1bad05d990ab
390,390.0,390.0,elki-project/elki,8ca0786702e7e886acdcbabeb8f37a63556361c6,Code review and refactoring of data filter unit tests.,https://github.com/elki-project/elki/commit/8ca0786702e7e886acdcbabeb8f37a63556361c6
391,391.0,391.0,elki-project/elki,10b589558cc63891774bb6602e4a3c8f62992533,Refactoring to make SOS more reusable.,https://github.com/elki-project/elki/commit/10b589558cc63891774bb6602e4a3c8f62992533
392,392.0,392.0,elki-project/elki,f13ed04c37de4119ea5de7571d2ac0049e1d5d34,"Re-enable histogram visualization, broken by refactoring.",https://github.com/elki-project/elki/commit/f13ed04c37de4119ea5de7571d2ac0049e1d5d34
393,393.0,393.0,elki-project/elki,277dadbdbc84455120968fc52f2d054b9fed3cda,Refactor iterator API as used by Hierarchy.,https://github.com/elki-project/elki/commit/277dadbdbc84455120968fc52f2d054b9fed3cda
394,394.0,394.0,elki-project/elki,b4f6cee9ab30cfe766993f1aef7adaac6b37f701,"Move non-essential type info to elki-core-data.

Refactor some rarely used into the corresponding interfaces.",https://github.com/elki-project/elki/commit/b4f6cee9ab30cfe766993f1aef7adaac6b37f701
395,395.0,395.0,elki-project/elki,e4448b4f61819555f801db0e46e38708605d5c81,More XTree cleanups and refactoring.,https://github.com/elki-project/elki/commit/e4448b4f61819555f801db0e46e38708605d5c81
396,396.0,396.0,elki-project/elki,b8e776378fd403d339193891b288d1d23686d982,Cleanups and refactoring of Xtree code.,https://github.com/elki-project/elki/commit/b8e776378fd403d339193891b288d1d23686d982
397,397.0,397.0,elki-project/elki,4114597b6b664858f54b9a798da270659ee82164,"MAJOR REFACTORING for 0.7 - removal of distance objects, removal of many generics",https://github.com/elki-project/elki/commit/4114597b6b664858f54b9a798da270659ee82164
398,398.0,398.0,elki-project/elki,6d9d345eff4130022b5f209ade244214048dd4d3,"Trivial fix, incomplete refactoring.",https://github.com/elki-project/elki/commit/6d9d345eff4130022b5f209ade244214048dd4d3
399,399.0,399.0,elki-project/elki,3595cae809125982b24d8a8919a78e9a60f70491,"Large(r) refactoring of page-based indexes, precisely: add a PageFileFactory",https://github.com/elki-project/elki/commit/3595cae809125982b24d8a8919a78e9a60f70491
400,400.0,400.0,elki-project/elki,642782ab349955c3ef2861e36105e160c0195921,"MAJOR refactoring / cleanup of parameterization API. We now have much less construtors; use addConstraint and setOptional to add constraints and set the optional flag! The resulting code, while it needs a few more lines, is much more readable, and often easier.",https://github.com/elki-project/elki/commit/642782ab349955c3ef2861e36105e160c0195921
401,401.0,401.0,elki-project/elki,d6b7988ce78e06492e7b9980d32ae948af3d193e,Refactor RTree overflow treatment,https://github.com/elki-project/elki/commit/d6b7988ce78e06492e7b9980d32ae948af3d193e
402,402.0,402.0,elki-project/elki,afca80064c2f32f5644aa5dd1aa4013ff852251b,"Refactor and restructure RTree strategies. Merge strategies from new implementation, which use a low-level API that should be slightly faster (less memory intensive).",https://github.com/elki-project/elki/commit/afca80064c2f32f5644aa5dd1aa4013ff852251b
403,403.0,403.0,elki-project/elki,d75245110b0766b0ec3172eab992d214afec96ea,"Fix stupid refactoring bug in Xtree, test is working again.",https://github.com/elki-project/elki/commit/d75245110b0766b0ec3172eab992d214afec96ea
404,404.0,404.0,elki-project/elki,9cf2b47821527e4571ec91f7a53c172024f1b89d,R*-Tree refactoring: InsertStrategy,https://github.com/elki-project/elki/commit/9cf2b47821527e4571ec91f7a53c172024f1b89d
405,405.0,405.0,elki-project/elki,2ba83207dbaab5d3982168efc93a11aa305f6dc8,"Refactor bulk loading strategies into a separate class, to allow easier extension with custom bulk loading strategies.",https://github.com/elki-project/elki/commit/2ba83207dbaab5d3982168efc93a11aa305f6dc8
406,406.0,406.0,elki-project/elki,5a43324504bb54739fbc012c06b0a3caa0106e56,Refactoring,https://github.com/elki-project/elki/commit/5a43324504bb54739fbc012c06b0a3caa0106e56
407,407.0,407.0,elki-project/elki,dafae80c376946558abc374ca6dab3a51dee2a4e,Refactoring,https://github.com/elki-project/elki/commit/dafae80c376946558abc374ca6dab3a51dee2a4e
408,408.0,408.0,elki-project/elki,f318edc3a8fc2ea1440184ca6d97a4b01597f4c0,"Refactor persistence layer, making the cache optional.",https://github.com/elki-project/elki/commit/f318edc3a8fc2ea1440184ca6d97a4b01597f4c0
409,409.0,409.0,elki-project/elki,bf46b524b2af1cdd70ff9d275e8c661ebb366351,"Mega commit, further refactoring of index trees and tree queries. The new design separates index trees from their use as database index structure.",https://github.com/elki-project/elki/commit/bf46b524b2af1cdd70ff9d275e8c661ebb366351
410,410.0,410.0,elki-project/elki,b4e47b4208a19a750ecc3f77445668d9559dc763,More query refactoring.,https://github.com/elki-project/elki/commit/b4e47b4208a19a750ecc3f77445668d9559dc763
411,411.0,411.0,elki-project/elki,61181c628be669a89812fc52c9fa5f68b84189e5,"Mega commit: multi-relation refactoring of ELKI. Sorry, does break quite some things, will work on more cleanups and documentation the next days.",https://github.com/elki-project/elki/commit/61181c628be669a89812fc52c9fa5f68b84189e5
412,412.0,412.0,elki-project/elki,e8eb16d39a79414c170fdcb7c3e9107bc98fe96f,"Refactor databases to contain a ""ObjectFactory"", which is a sample object that is accessed for a newInstance() method.",https://github.com/elki-project/elki/commit/e8eb16d39a79414c170fdcb7c3e9107bc98fe96f
413,413.0,413.0,elki-project/elki,de432274c2757ba91eb02363df62f058b475dcdf,Mega refactoring of logging. Removal of AbstractLoggable class in favor of _static_ loggers per class.,https://github.com/elki-project/elki/commit/de432274c2757ba91eb02363df62f058b475dcdf
414,414.0,414.0,elki-project/elki,f3c7ecfdbb3920db6bfcf22310b01649cd70fe5f,More refactoring going on. Factory pattern!,https://github.com/elki-project/elki/commit/f3c7ecfdbb3920db6bfcf22310b01649cd70fe5f
415,415.0,415.0,elki-project/elki,754f04995205c41d17d04ce92329f061dff04fdb,"Monster commit that marks a major refactoring of Distances and DistanceFunctions into where a Distance becomes a Factory for itself. This is to move parsing code into the distance classes, instead of the distance functions.",https://github.com/elki-project/elki/commit/754f04995205c41d17d04ce92329f061dff04fdb
416,416.0,416.0,elki-project/elki,301acf4979fda5ee4f17f88a869e0654dc2799e9,"Refactor, adding NNChain for regular linkages.",https://github.com/elki-project/elki/commit/301acf4979fda5ee4f17f88a869e0654dc2799e9
417,417.0,417.0,elki-project/elki,fd17aec9b774ed047d27f3fad4f9fc8052152ce4,Refactoring,https://github.com/elki-project/elki/commit/fd17aec9b774ed047d27f3fad4f9fc8052152ce4
418,418.0,418.0,elki-project/elki,95dea62360af22ce2f8ff12af708e6249769f2b2,Refactoring and documentation.,https://github.com/elki-project/elki/commit/95dea62360af22ce2f8ff12af708e6249769f2b2
419,419.0,419.0,elki-project/elki,30af0d3aee422f00e16825f0cddbac39e7cd8ac9,"Refactor cluster model classes for prototypes.

PrototypeModel is now an interface, SimplePrototypeModel is the basic implementation.",https://github.com/elki-project/elki/commit/30af0d3aee422f00e16825f0cddbac39e7cd8ac9
420,420.0,420.0,elki-project/elki,4ebe0e9a5570e36d8ec3589fcd0b1f257a041313,Refactoring of dendrogram cutting into separate classes.,https://github.com/elki-project/elki/commit/4ebe0e9a5570e36d8ec3589fcd0b1f257a041313
421,421.0,421.0,elki-project/elki,bba91f8aed323a9240c3a28e8349ffe4abcc24f6,"Refactoring and optimization of MiniMax, in progress.",https://github.com/elki-project/elki/commit/bba91f8aed323a9240c3a28e8349ffe4abcc24f6
422,422.0,422.0,elki-project/elki,cf6f8e232584fc90f441b3e5dad12a9d663cd995,Refactored Visualization of Prototypes for extracted Minimax clusterings.,https://github.com/elki-project/elki/commit/cf6f8e232584fc90f441b3e5dad12a9d663cd995
423,423.0,423.0,elki-project/elki,cb886c628143603cf9229441fa732d02a97835de,Refactoring of change point detection code.,https://github.com/elki-project/elki/commit/cb886c628143603cf9229441fa732d02a97835de
424,424.0,424.0,elki-project/elki,5f937726d1106eb77984e0f59cc28ccd7f579c67,Refactoring of tSNE into a modular architecture.,https://github.com/elki-project/elki/commit/5f937726d1106eb77984e0f59cc28ccd7f579c67
425,425.0,425.0,elki-project/elki,63ac3896cbf58947c33298b88886b5bfa3c2a8ea,Refactor ID code to integrate contributions by Jonathan.,https://github.com/elki-project/elki/commit/63ac3896cbf58947c33298b88886b5bfa3c2a8ea
426,426.0,426.0,elki-project/elki,e7ffbd85dfcff5ff1acf6d5b13b6568fd1e8e236,Avoid problems with non-monotone linkage. Refactor HAC.,https://github.com/elki-project/elki/commit/e7ffbd85dfcff5ff1acf6d5b13b6568fd1e8e236
427,427.0,427.0,elki-project/elki,c67f7c9df864dafe35093c8071892ad2362ad05b,Avoid problems with non-monotone linkage. Refactor HAC.,https://github.com/elki-project/elki/commit/c67f7c9df864dafe35093c8071892ad2362ad05b
428,428.0,428.0,elki-project/elki,fb7369822e0f6d7d0c90a020544546dea8e1dd49,"Refactor for subclassing, and avoid infinite loop.",https://github.com/elki-project/elki/commit/fb7369822e0f6d7d0c90a020544546dea8e1dd49
429,429.0,429.0,elki-project/elki,2ad4e599d00c16525858dd4be299be2234722d2d,"Union-find refactoring. Now with path-compression, and using less memory for DBIDRange (the usual case with static databases).",https://github.com/elki-project/elki/commit/2ad4e599d00c16525858dd4be299be2234722d2d
430,430.0,430.0,elki-project/elki,7a268746b596e7352f005f11c0d94b5b919d5146,More refactoring of HDBSCAN extraction code.,https://github.com/elki-project/elki/commit/7a268746b596e7352f005f11c0d94b5b919d5146
431,431.0,431.0,elki-project/elki,0f74061c7073574b6310f99d7ea1a3f943bd864b,"Refactor. Add more methods. Avoid k=1 for KDEOS, FastABOD.
Fix -disable (was inverted)",https://github.com/elki-project/elki/commit/0f74061c7073574b6310f99d7ea1a3f943bd864b
432,432.0,432.0,elki-project/elki,6a1dd278e3a1858f84bca6e4941dae4a2d522804,IDOS refactoring and cleanups.,https://github.com/elki-project/elki/commit/6a1dd278e3a1858f84bca6e4941dae4a2d522804
433,433.0,433.0,elki-project/elki,afdc35647887d0f350b8f99678864bc3fbab7cb7,More refactoring and cleanups.,https://github.com/elki-project/elki/commit/afdc35647887d0f350b8f99678864bc3fbab7cb7
434,434.0,434.0,elki-project/elki,f3302f89b0b20db606cd3a00e2cd3ab0105b847d,Refactoring and simplification of uncertain data generation.,https://github.com/elki-project/elki/commit/f3302f89b0b20db606cd3a00e2cd3ab0105b847d
435,435.0,435.0,elki-project/elki,f0f1a47455ac084ea5e560e286ec8d2db9fa9cc5,"Cleanups and refactoring, but not fully usable again yet.",https://github.com/elki-project/elki/commit/f0f1a47455ac084ea5e560e286ec8d2db9fa9cc5
436,436.0,436.0,elki-project/elki,01b4da4bde1c4687a91db122c1132554f5ff695a,BA-Thesis: Refactored package-structure and denormalized probability,https://github.com/elki-project/elki/commit/01b4da4bde1c4687a91db122c1132554f5ff695a
437,437.0,437.0,elki-project/elki,458ba699249e69c1e172628e15082a1541d0c00c,"BA-Thesis: Refactoring DataModell, splitted Gaussian-Cases",https://github.com/elki-project/elki/commit/458ba699249e69c1e172628e15082a1541d0c00c
438,438.0,438.0,elki-project/elki,985b053cd32214c32e836ff4a411d05dcb1b9d0b,BA-Thesis: refactored usage of Random via RandomFactory and generic usage of SpatialComparable instead of HyperBoundingBox,https://github.com/elki-project/elki/commit/985b053cd32214c32e836ff4a411d05dcb1b9d0b
439,439.0,439.0,elki-project/elki,d14f4327f23cce06a80ea1c9fc102db5334a5afe,BA-Thesis: refactored model-hierarchy,https://github.com/elki-project/elki/commit/d14f4327f23cce06a80ea1c9fc102db5334a5afe
440,440.0,440.0,elki-project/elki,bd3f72fc9bb5a4b82ea5c3c9b18a2c29753b5d71,"Refactor SLINK for extensibility, implement CLINK clustering.",https://github.com/elki-project/elki/commit/bd3f72fc9bb5a4b82ea5c3c9b18a2c29753b5d71
441,441.0,441.0,elki-project/elki,9c1d23279fcbb107cbc61ac6022405e0882d83b0,Refactor Score/Rank evaluation measures into separate classes.,https://github.com/elki-project/elki/commit/9c1d23279fcbb107cbc61ac6022405e0882d83b0
442,442.0,442.0,elki-project/elki,7fda902af5281c9bb8a2eff6d810d2e3e3ce1f26,"MAJOR REFACTORING for 0.7 - removal of distance objects, removal of many generics",https://github.com/elki-project/elki/commit/7fda902af5281c9bb8a2eff6d810d2e3e3ce1f26
443,443.0,443.0,elki-project/elki,52a2fa164f24e32d3405b0d4c628ba9f5ab3a39c,Code refactoring. Moving some more parameters to Parameterizer classes.,https://github.com/elki-project/elki/commit/52a2fa164f24e32d3405b0d4c628ba9f5ab3a39c
444,444.0,444.0,elki-project/elki,e4215dcf9b7a8faccc6b9058a491117daa0e5184,"Refactor projections code, to allow faster implementations than using a matrix multiplication.",https://github.com/elki-project/elki/commit/e4215dcf9b7a8faccc6b9058a491117daa0e5184
445,445.0,445.0,elki-project/elki,b12228dc4753377c5bca72a539b8c891ee8fccaa,Push experiment refactoring.,https://github.com/elki-project/elki/commit/b12228dc4753377c5bca72a539b8c891ee8fccaa
446,446.0,446.0,elki-project/elki,504ab04861e488dabd4af583be7f2550a40c51ba,"Large(r) refactoring of page-based indexes, precisely: add a PageFileFactory",https://github.com/elki-project/elki/commit/504ab04861e488dabd4af583be7f2550a40c51ba
447,447.0,447.0,elki-project/elki,3521a3f962fbeb498c4818e898329b2f1badce80,More reorganization/refactoring.,https://github.com/elki-project/elki/commit/3521a3f962fbeb498c4818e898329b2f1badce80
448,448.0,448.0,elki-project/elki,7af80ed61b3e85dc746ddf73d26431ff016612e7,"MAJOR refactoring / cleanup of parameterization API. We now have much less construtors; use addConstraint and setOptional to add constraints and set the optional flag! The resulting code, while it needs a few more lines, is much more readable, and often easier.",https://github.com/elki-project/elki/commit/7af80ed61b3e85dc746ddf73d26431ff016612e7
449,449.0,449.0,elki-project/elki,fcd926e75bc94d99a725718245aae30618baca8e,"Refactor KNN Heaps and Results, for further double-value optimizations.",https://github.com/elki-project/elki/commit/fcd926e75bc94d99a725718245aae30618baca8e
450,450.0,450.0,elki-project/elki,bf56c536ec6f5d2ed2eeb42465f42d2e161e5d35,Refactor curve simplification code out of ROC curves. Temporarily breaks visualization though!,https://github.com/elki-project/elki/commit/bf56c536ec6f5d2ed2eeb42465f42d2e161e5d35
451,451.0,451.0,elki-project/elki,f32851b38153e522b40c2736cf90c773e74bcd3a,Incomplete: Refactor Florians code to use the ELKI APIs where possible.,https://github.com/elki-project/elki/commit/f32851b38153e522b40c2736cf90c773e74bcd3a
452,452.0,452.0,elki-project/elki,0cc3a11b4ef1e70fe3bdd2538a9fb2a8bc6cf311,Incomplete: Refactor Florians code to use the ELKI APIs where possible.,https://github.com/elki-project/elki/commit/0cc3a11b4ef1e70fe3bdd2538a9fb2a8bc6cf311
453,453.0,453.0,elki-project/elki,1a7b15511abc80d2e11bb112a53de20f6eef6837,Incomplete: Refactor Florians code to use the ELKI APIs where possible.,https://github.com/elki-project/elki/commit/1a7b15511abc80d2e11bb112a53de20f6eef6837
454,454.0,454.0,elki-project/elki,de68397f311af389ed2ebb97a8e650b9336a9697,post-refactoring cleanups.,https://github.com/elki-project/elki/commit/de68397f311af389ed2ebb97a8e650b9336a9697
455,455.0,455.0,elki-project/elki,6fe928373599408dd83f80ebb6c338cb7b170063,More Refactoring.,https://github.com/elki-project/elki/commit/6fe928373599408dd83f80ebb6c338cb7b170063
456,456.0,456.0,elki-project/elki,9ff5c27fab609dd572e17d8414320cfac72b033d,"Mega commit: multi-relation refactoring of ELKI. Sorry, does break quite some things, will work on more cleanups and documentation the next days.",https://github.com/elki-project/elki/commit/9ff5c27fab609dd572e17d8414320cfac72b033d
457,457.0,457.0,elki-project/elki,278118b2c08098d92ee19d14e26b378a655d51ea,Larger refactoring and simplification of visualization code.,https://github.com/elki-project/elki/commit/278118b2c08098d92ee19d14e26b378a655d51ea
458,458.0,458.0,elki-project/elki,777857f27ea281fad97e55c8e6d61293ee4aa1fb,"Refactoring, to use ResultHierarchy as primary way of organizing results.",https://github.com/elki-project/elki/commit/777857f27ea281fad97e55c8e6d61293ee4aa1fb
459,459.0,459.0,elki-project/elki,017ac0d85bd3e95289fe86aa1cf0cfe6e0df4e7a,"Cleanups and refactoring, but not fully usable again yet.",https://github.com/elki-project/elki/commit/017ac0d85bd3e95289fe86aa1cf0cfe6e0df4e7a
460,460.0,460.0,elki-project/elki,2dc96516d9ea30903b9c20b15352f07fba66b4a8,Refactoring: Remove getDatabase() from Relation.,https://github.com/elki-project/elki/commit/2dc96516d9ea30903b9c20b15352f07fba66b4a8
461,461.0,461.0,elki-project/elki,aea551d3aefff16a0d49dfb9641879147925efe1,"Refactoring of database layer: manage indexes at the relation, not at
the database level.",https://github.com/elki-project/elki/commit/aea551d3aefff16a0d49dfb9641879147925efe1
462,462.0,462.0,elki-project/elki,8d72b001c5b5b1c00b1a9056dca4fad8925995e7,Refactor sampling code.,https://github.com/elki-project/elki/commit/8d72b001c5b5b1c00b1a9056dca4fad8925995e7
463,463.0,463.0,elki-project/elki,0b675696fe9843a8f3101f6323d8e7c47c3bc49f,Refactor IntegerDataStore -> DBIDs[] transformation for clustering.,https://github.com/elki-project/elki/commit/0b675696fe9843a8f3101f6323d8e7c47c3bc49f
464,464.0,464.0,elki-project/elki,773103d8b4192ec5a88cab85caca74fb5e1b3fa6,"LARGE refactoring. Remove most usage of BitSet (in favor of long[]),
and switch IntegerListParameter, DoubleListParameter to return
int[] and double[] instead of List<T>.",https://github.com/elki-project/elki/commit/773103d8b4192ec5a88cab85caca74fb5e1b3fa6
465,465.0,465.0,elki-project/elki,8905ca3845ba064f0df7e1871e1299528d0fc987,Refactor MDS slightly.,https://github.com/elki-project/elki/commit/8905ca3845ba064f0df7e1871e1299528d0fc987
466,466.0,466.0,elki-project/elki,49fe245c05c566c5983d6a43738016b962ce6974,"Refactoring/restructuring of the GDBSCAN codebase, since it could run
out of memory on large datasets with a large epsilon.",https://github.com/elki-project/elki/commit/49fe245c05c566c5983d6a43738016b962ce6974
467,467.0,467.0,elki-project/elki,b422d3ef21037da5490d4dd2cc1c3ffdfcca6577,"More refactoring of parsing layer. AbstractParser was flattened into
AbstractStreamingParser.",https://github.com/elki-project/elki/commit/b422d3ef21037da5490d4dd2cc1c3ffdfcca6577
468,468.0,468.0,elki-project/elki,3712aa8a4c99f52d460c866838c76b269aadd247,"More refactoring of input and output: split CSV format out of the
abstract parser into a separate class defining the format only.",https://github.com/elki-project/elki/commit/3712aa8a4c99f52d460c866838c76b269aadd247
469,469.0,469.0,elki-project/elki,aa2f0a3f6d363ff9bc25b7454b787b45883e70dd,More refactoring of io/tokenization/reader/parser layer.,https://github.com/elki-project/elki/commit/aa2f0a3f6d363ff9bc25b7454b787b45883e70dd
470,470.0,470.0,elki-project/elki,f0bb8838d7bb3c48b157bf2fa2452c0b67a9d65a,"Refactor parser: extract buffered reader into separate class, to allow
easier reuse in other parsers.",https://github.com/elki-project/elki/commit/f0bb8838d7bb3c48b157bf2fa2452c0b67a9d65a
471,471.0,471.0,elki-project/elki,d73d69ec6a3e8c3b13323712dcfffee6abd7c78b,Refactoring of AGNES to make it easier for the JVM to optimize.,https://github.com/elki-project/elki/commit/d73d69ec6a3e8c3b13323712dcfffee6abd7c78b
472,472.0,472.0,elki-project/elki,433d3b609baa2f63ce6c7424f70f2958b3bac413,"Refactorings, cleanups, improvements to the various indexes.",https://github.com/elki-project/elki/commit/433d3b609baa2f63ce6c7424f70f2958b3bac413
473,473.0,473.0,elki-project/elki,97d29b9704a271a5f26aa4a5dbed3bfcde3b964b,"Refactorings, cleanups, improvements to the various indexes.",https://github.com/elki-project/elki/commit/97d29b9704a271a5f26aa4a5dbed3bfcde3b964b
474,474.0,474.0,elki-project/elki,c3785a03ea43859ac55555614811319ae5aaa7c7,refactoring,https://github.com/elki-project/elki/commit/c3785a03ea43859ac55555614811319ae5aaa7c7
475,475.0,475.0,elki-project/elki,62f130b5cfd84b10fca1f8ab8e8f26e4e7d69614,refactoring,https://github.com/elki-project/elki/commit/62f130b5cfd84b10fca1f8ab8e8f26e4e7d69614
476,476.0,476.0,elki-project/elki,92a197112142deaf8aa7588d88698ff58a7b4a6f,new noise options and refactoring,https://github.com/elki-project/elki/commit/92a197112142deaf8aa7588d88698ff58a7b4a6f
477,477.0,477.0,elki-project/elki,286d1969942f8458289c48471912601e1a167d43,refactoring,https://github.com/elki-project/elki/commit/286d1969942f8458289c48471912601e1a167d43
478,478.0,478.0,elki-project/elki,85fadcb928e85562802dc638e495842cbd2d0417,added Davies-Bouldin; some refactoring,https://github.com/elki-project/elki/commit/85fadcb928e85562802dc638e495842cbd2d0417
479,479.0,479.0,elki-project/elki,98177bd6836b7e0be95dfd9bbc412b3eb8ec9022,VRC and PBM added; some refactoring on Silhouette classes.,https://github.com/elki-project/elki/commit/98177bd6836b7e0be95dfd9bbc412b3eb8ec9022
480,480.0,480.0,elki-project/elki,507df909d90909bebb931aac929a5bb64363712c,Refactor Jonathans code for ID.,https://github.com/elki-project/elki/commit/507df909d90909bebb931aac929a5bb64363712c
481,481.0,481.0,elki-project/elki,cb778ee7d9598812a269261f9ef4001ca23e6d44,"Big refactoring of OPTICS to use less memory (and hopefully be faster, too).",https://github.com/elki-project/elki/commit/cb778ee7d9598812a269261f9ef4001ca23e6d44
482,482.0,482.0,elki-project/elki,8c34604d7171bd593cec02b6f238ee9a413fbe1c,Refactoring of itemset mining classes.,https://github.com/elki-project/elki/commit/8c34604d7171bd593cec02b6f238ee9a413fbe1c
483,483.0,483.0,elki-project/elki,c22a1f45b251edf2b918779eb820ad94211b248c,Refactoring.,https://github.com/elki-project/elki/commit/c22a1f45b251edf2b918779eb820ad94211b248c
484,484.0,484.0,elki-project/elki,aae2ba3217df98ca57d3bf35d50be96f2063f5ce,Refactoring.,https://github.com/elki-project/elki/commit/aae2ba3217df98ca57d3bf35d50be96f2063f5ce
485,485.0,485.0,elki-project/elki,a644824bacbdf0fbe668e8cc90672a6d017005c5,Large refactoring.,https://github.com/elki-project/elki/commit/a644824bacbdf0fbe668e8cc90672a6d017005c5
486,486.0,486.0,elki-project/elki,837b34ac91f2b0b9237ed3a1d2511ec248e0ae47,Refactoring.,https://github.com/elki-project/elki/commit/837b34ac91f2b0b9237ed3a1d2511ec248e0ae47
487,487.0,487.0,elki-project/elki,e541faff07f238af3541408e882c3ad25f4cc022,"Remove empty package, also commit same refactoring in addon.",https://github.com/elki-project/elki/commit/e541faff07f238af3541408e882c3ad25f4cc022
488,488.0,488.0,elki-project/elki,892690cecac2e9e3c4aab39a6a8adbea9a3e5c6c,Refactor Score/Rank evaluation measures into separate classes.,https://github.com/elki-project/elki/commit/892690cecac2e9e3c4aab39a6a8adbea9a3e5c6c
489,489.0,489.0,elki-project/elki,317245f6575e7859cd6e3ebd34114d2f38d071f2,Missing refactoring commit.,https://github.com/elki-project/elki/commit/317245f6575e7859cd6e3ebd34114d2f38d071f2
490,490.0,490.0,elki-project/elki,28ed85bb4b2cc7ec3405f8835dee1d5505dc6314,"Refactoring, sorting by double scores.",https://github.com/elki-project/elki/commit/28ed85bb4b2cc7ec3405f8835dee1d5505dc6314
491,491.0,491.0,elki-project/elki,aa2872cd30f86bba3b151c34c7fe3bd36060915d,"Add CLARA implementation. TODO: reference, validate, refactor unit tests.",https://github.com/elki-project/elki/commit/aa2872cd30f86bba3b151c34c7fe3bd36060915d
492,492.0,492.0,elki-project/elki,485ceac3ef97712c84566eb12725f699b8b14da1,Refactor PAM code.,https://github.com/elki-project/elki/commit/485ceac3ef97712c84566eb12725f699b8b14da1
493,493.0,493.0,elki-project/elki,ab3985d00c385dc260fe755911a77149e1990db3,More work on refactoring dependence measures.,https://github.com/elki-project/elki/commit/ab3985d00c385dc260fe755911a77149e1990db3
494,494.0,494.0,elki-project/elki,48a5dd592b0c001816d5dbf30eb8c773589accf2,More refactoring of dependence measures.,https://github.com/elki-project/elki/commit/48a5dd592b0c001816d5dbf30eb8c773589accf2
495,495.0,495.0,elki-project/elki,d1aec46820121a3f606eaff64dc7de33c5d0ce2a,"Refactor/organize dependence measures. Needs more refactoring, as pairwise similarities are faster with the older API.",https://github.com/elki-project/elki/commit/d1aec46820121a3f606eaff64dc7de33c5d0ce2a
496,496.0,496.0,elki-project/elki,e54bcc232ca396dd8269f96ce55c784999f6eef0,Cleanup and refactor classification code.,https://github.com/elki-project/elki/commit/e54bcc232ca396dd8269f96ce55c784999f6eef0
497,497.0,497.0,elki-project/elki,3ba90d54044f9c544f0a9809d6040eada7f02a75,Cleanup and refactor classification code.,https://github.com/elki-project/elki/commit/3ba90d54044f9c544f0a9809d6040eada7f02a75
498,498.0,498.0,elki-project/elki,414dfe7372afa0b63fab1a84b7e1048c9478d62a,Refactor / restructure external distance to not need FixedDBIDsFilter anymore.,https://github.com/elki-project/elki/commit/414dfe7372afa0b63fab1a84b7e1048c9478d62a
499,499.0,499.0,elki-project/elki,2b6afd6bf46fc8aa48c32b707701b464c9f5bf8e,"Refactoring of NumberVectorDistanceFunction; a bit clumsy (AFAICT due to java limitations wrt. Contravariance!); add HammingDistance and JaccardDistance that allow Bit vectors, numerical vectors, and non-numerical feature vectors.",https://github.com/elki-project/elki/commit/2b6afd6bf46fc8aa48c32b707701b464c9f5bf8e
500,500.0,500.0,elki-project/elki,2e8735606f555a9a333dfd6b6c67feba87137f72,Add class to compute MAP and ROC for a distance query. Needs further refactoring.,https://github.com/elki-project/elki/commit/2e8735606f555a9a333dfd6b6c67feba87137f72
501,501.0,501.0,elki-project/elki,6ff52756dae0e74b8631b4795f2381ac94abd853,Bugfixes and refactoring,https://github.com/elki-project/elki/commit/6ff52756dae0e74b8631b4795f2381ac94abd853
502,502.0,502.0,elki-project/elki,9dd04e96f80b35789b6c16702664f3d2bd09796b,Streamline k-means for sync with EM refactoring.,https://github.com/elki-project/elki/commit/9dd04e96f80b35789b6c16702664f3d2bd09796b
503,503.0,503.0,elki-project/elki,7cf486c3b336d810e359f4eb318cd87b88b25015,"Large refactoring of EM code, to make it easier to add new models.",https://github.com/elki-project/elki/commit/7cf486c3b336d810e359f4eb318cd87b88b25015
504,504.0,504.0,elki-project/elki,2b685878855c584097b6e7975f64363e1791e718,More refactoring of time series distance functions.,https://github.com/elki-project/elki/commit/2b685878855c584097b6e7975f64363e1791e718
505,505.0,505.0,elki-project/elki,af6a777000a4cc8ed1b461cef522b9d243c157b6,Refactoring / API simplification of parallel mappers.,https://github.com/elki-project/elki/commit/af6a777000a4cc8ed1b461cef522b9d243c157b6
506,506.0,506.0,elki-project/elki,060339452e8dac879f66c2b6c0b1f4e8fb71faa0,Refactoring and restructuring of parallel code.,https://github.com/elki-project/elki/commit/060339452e8dac879f66c2b6c0b1f4e8fb71faa0
507,507.0,507.0,elki-project/elki,a81b662cb8bd2e03828dde26502a0e4290703884,Refactored COPAC and ERiC.,https://github.com/elki-project/elki/commit/a81b662cb8bd2e03828dde26502a0e4290703884
508,508.0,508.0,elki-project/elki,b4bf2e28a825019108a55d076bea1b8a71f8365a,"Remove some more generics (from PCA classes). Commit does not include COPAC and ERiC, which I am currently refactoring.",https://github.com/elki-project/elki/commit/b4bf2e28a825019108a55d076bea1b8a71f8365a
509,509.0,509.0,elki-project/elki,15df32632cd26820848fd611c8bebadb52d82032,"Merge changes from Tokyo: some new filters, refactoring of type requests.",https://github.com/elki-project/elki/commit/15df32632cd26820848fd611c8bebadb52d82032
510,510.0,510.0,elki-project/elki,e30f83e05720fd74129d04779a64798e987e571a,"Major cleanup, and some followup refactoring",https://github.com/elki-project/elki/commit/e30f83e05720fd74129d04779a64798e987e571a
511,511.0,511.0,elki-project/elki,644f7489544cb46b2bdefc5cd436c5fd2521f510,"MAJOR REFACTORING for 0.7 - removal of distance objects, removal of many generics",https://github.com/elki-project/elki/commit/644f7489544cb46b2bdefc5cd436c5fd2521f510
512,512.0,512.0,elki-project/elki,eabaefc768598d6a14925fc121cffe9b4cae8755,Ongoing refactoring of correlation and subspace clustering algorithms.,https://github.com/elki-project/elki/commit/eabaefc768598d6a14925fc121cffe9b4cae8755
513,513.0,513.0,elki-project/elki,bec2abe391fdc3c060b34507a1c247f269de67c5,"Remove support for binary, integer and float distances. This is a first step towards moving away from having objects for distances ever. Unfortunately, some algorithms (HiSC, DiSH, ERiC) still rely on this; this will need some careful refactoring of OPTICS, most likely.",https://github.com/elki-project/elki/commit/bec2abe391fdc3c060b34507a1c247f269de67c5
514,514.0,514.0,elki-project/elki,639d6c43d0e3222a099930a38ec724b29d32fd8c,"More itemset mining refactoring. More BitsUtil functionality, such as intersection sizes, union sizes, etc.",https://github.com/elki-project/elki/commit/639d6c43d0e3222a099930a38ec724b29d32fd8c
515,515.0,515.0,elki-project/elki,2062ead6dbe8e6ca5a2be5ff19328ce4cf86e877,Code refactoring. Moving some more parameters to Parameterizer classes.,https://github.com/elki-project/elki/commit/2062ead6dbe8e6ca5a2be5ff19328ce4cf86e877
516,516.0,516.0,elki-project/elki,599cd28344083761a45f90157f92a7ec4d89fbc3,Refactor similarity classes. Add Jaccard similarity function (also as distance function),https://github.com/elki-project/elki/commit/599cd28344083761a45f90157f92a7ec4d89fbc3
517,517.0,517.0,elki-project/elki,8b03705901e7b2103ac712c2433bac9cc904922b,"Refactoring of kNN heaps and similarity queries. However, it turned out the observed problem is a JVM issue (JDK8 is good, icedtea 2.3.12 JDK7 can be up to 7 times slower.)",https://github.com/elki-project/elki/commit/8b03705901e7b2103ac712c2433bac9cc904922b
518,518.0,518.0,elki-project/elki,f38c65094f50298cfcd95b2d4e53e02a34ee3060,More EM refactoring.,https://github.com/elki-project/elki/commit/f38c65094f50298cfcd95b2d4e53e02a34ee3060
519,519.0,519.0,elki-project/elki,b67e9511097c3e29711145f307f5e8e17a121daf,Refactor EM clustering.,https://github.com/elki-project/elki/commit/b67e9511097c3e29711145f307f5e8e17a121daf
520,520.0,520.0,elki-project/elki,add5842aec802aa4a5124eb309a1770070381170,Refactor/rewrite P3C code.,https://github.com/elki-project/elki/commit/add5842aec802aa4a5124eb309a1770070381170
521,521.0,521.0,elki-project/elki,38982d6401838f528da785b2ca6fd6f751edf61b,Refactoring of ABOD code.,https://github.com/elki-project/elki/commit/38982d6401838f528da785b2ca6fd6f751edf61b
522,522.0,522.0,elki-project/elki,b3278b8b3c28abced7f0059360607ea8ac404406,Refactor/extend kernel similarity functions.,https://github.com/elki-project/elki/commit/b3278b8b3c28abced7f0059360607ea8ac404406
523,523.0,523.0,elki-project/elki,e69e3b130de1a50b5dcf37f00cd058c39766efba,"Cleanup and refactor Cheng & Church biclustering. Not really convincing yet, unfortunately.",https://github.com/elki-project/elki/commit/e69e3b130de1a50b5dcf37f00cd058c39766efba
524,524.0,524.0,elki-project/elki,875ad4c47165e945f067ca8ec426617699f1f76f,Refactor & cleanup.,https://github.com/elki-project/elki/commit/875ad4c47165e945f067ca8ec426617699f1f76f
525,525.0,525.0,elki-project/elki,ba0a5df0d872eb189aa6939c61287320f8473ead,"Refactoring: merge DistributionWithRandom into Distribution. Either, the quantile function cannot be implemented already, or we can just use quantile(random) to obtain a uniform value.",https://github.com/elki-project/elki/commit/ba0a5df0d872eb189aa6939c61287320f8473ead
526,526.0,526.0,elki-project/elki,84eff0d849261da7b4e0420388bc5bd2aa5b0619,"Large refactoring of distribution estimators: moved to own package, instead of inner classes. Makes the available algorithms more visible.",https://github.com/elki-project/elki/commit/84eff0d849261da7b4e0420388bc5bd2aa5b0619
527,527.0,527.0,elki-project/elki,21790dd371a14830c906c85da96c3864b6231765,"Large refactoring of distribution estimators: moved to own package, instead of inner classes. Makes the available algorithms more visible.",https://github.com/elki-project/elki/commit/21790dd371a14830c906c85da96c3864b6231765
528,528.0,528.0,elki-project/elki,c572cc698291dd81f9b5ed0fe7860f345eaecce7,"Refactor projections code, to allow faster implementations than using a matrix multiplication.",https://github.com/elki-project/elki/commit/c572cc698291dd81f9b5ed0fe7860f345eaecce7
529,529.0,529.0,elki-project/elki,f5623d91298c736021a68985c2641369dec6a078,"Refactor LOF: Make ""LOF"" closer to the published version, split of a FlexibleLOF with more options as a base for OnlineLOF.
Should maybe make plain LOF even faster.",https://github.com/elki-project/elki/commit/f5623d91298c736021a68985c2641369dec6a078
530,530.0,530.0,elki-project/elki,da78d917526ad717097ea9202aea0b160bb1050e,Refactoring of hierarchical clustering: share cluster extraction across naive and SLINK algorithms.,https://github.com/elki-project/elki/commit/da78d917526ad717097ea9202aea0b160bb1050e
531,531.0,531.0,elki-project/elki,38ba47e046b8559ad5ebf42ac470e00de4125695,Refactor hierarchy classes.,https://github.com/elki-project/elki/commit/38ba47e046b8559ad5ebf42ac470e00de4125695
532,532.0,532.0,elki-project/elki,ded405452e379e4508a85bf81361c0d4999b48d8,"Refactoring of geodetics code, to allow different earth models such as WGS84 ""everywhere"".",https://github.com/elki-project/elki/commit/ded405452e379e4508a85bf81361c0d4999b48d8
533,533.0,533.0,elki-project/elki,c796e0c7cd6ab8e9d2766513143b0fb5186f5ea6,"Refactor M-tree: always use double distances internally, to simplify the code.",https://github.com/elki-project/elki/commit/c796e0c7cd6ab8e9d2766513143b0fb5186f5ea6
534,534.0,534.0,elki-project/elki,4d672955623521019e03b147066802d21df026a8,More M-tree refactoring.,https://github.com/elki-project/elki/commit/4d672955623521019e03b147066802d21df026a8
535,535.0,535.0,elki-project/elki,1684e73981baaf975215eb623d91929d4b710c85,Refactor M-Trees to use settings classes.,https://github.com/elki-project/elki/commit/1684e73981baaf975215eb623d91929d4b710c85
536,536.0,536.0,elki-project/elki,f055061aa75baa9ab10bd5e3d605bee69f1dd566,Refactor R-Tree: move tree settings into a separate tree settings class (not yet subclassed for RdkNN),https://github.com/elki-project/elki/commit/f055061aa75baa9ab10bd5e3d605bee69f1dd566
537,537.0,537.0,elki-project/elki,239bbcd71f89664f4a187f4ebdcc605b9f3f7c30,"Refactor LRU Cache into a page file factory. Also make the alternative OnDiskArrayPageFile accessible via a separate factory (NIO based, so supposedly faster).",https://github.com/elki-project/elki/commit/239bbcd71f89664f4a187f4ebdcc605b9f3f7c30
538,538.0,538.0,elki-project/elki,a11be0e9c1fc249736011e7cb0a6f6dee93a1ac3,"Large(r) refactoring of page-based indexes, precisely: add a PageFileFactory",https://github.com/elki-project/elki/commit/a11be0e9c1fc249736011e7cb0a6f6dee93a1ac3
539,539.0,539.0,elki-project/elki,f19fbd395f4f72f0cca4f30cb277146016889dfb,Refactoring M-tree: insert strategy is a new extension interface.,https://github.com/elki-project/elki/commit/f19fbd395f4f72f0cca4f30cb277146016889dfb
540,540.0,540.0,elki-project/elki,b07676eec71974b664f453ece13297bd45ef666e,Refactor M-Trees to allow parameterization of split strategy.,https://github.com/elki-project/elki/commit/b07676eec71974b664f453ece13297bd45ef666e
541,541.0,541.0,elki-project/elki,743f88e7430ab8d60c966f0e7632a406186b482c,More refactoring.,https://github.com/elki-project/elki/commit/743f88e7430ab8d60c966f0e7632a406186b482c
542,542.0,542.0,elki-project/elki,942e8cab96cb30c1c357d2e31e17746ece3384ea,More refactoring.,https://github.com/elki-project/elki/commit/942e8cab96cb30c1c357d2e31e17746ece3384ea
543,543.0,543.0,elki-project/elki,193243c7a6cf03044847dc77a5a2eb2f038673c4,More reorganization/refactoring.,https://github.com/elki-project/elki/commit/193243c7a6cf03044847dc77a5a2eb2f038673c4
544,544.0,544.0,elki-project/elki,b5cc7ab3ac2f06116ae74e5297c364d6358c59e2,Slight refactoring. Abstract DBID factory class.,https://github.com/elki-project/elki/commit/b5cc7ab3ac2f06116ae74e5297c364d6358c59e2
545,545.0,545.0,elki-project/elki,0cf0afd6c6ed5c7a1aa09de6fe1a5f01f88bf825,Add range queries to kd tree. Slight refactoring of range query abstract class.,https://github.com/elki-project/elki/commit/0cf0afd6c6ed5c7a1aa09de6fe1a5f01f88bf825
546,546.0,546.0,elki-project/elki,fb7049a90adef95df2f5406a2b60176a6457a454,Some refactoring of GUI code and a new ELKI launcher.,https://github.com/elki-project/elki/commit/fb7049a90adef95df2f5406a2b60176a6457a454
547,547.0,547.0,elki-project/elki,2e942c04bed79071e11389a9b7ac4155331ab756,Refactor string constants.,https://github.com/elki-project/elki/commit/2e942c04bed79071e11389a9b7ac4155331ab756
548,548.0,548.0,elki-project/elki,a0476c86a69499e7891682cfc31ad36909358e5e,Refactoring.,https://github.com/elki-project/elki/commit/a0476c86a69499e7891682cfc31ad36909358e5e
549,549.0,549.0,elki-project/elki,c4085be5fd7733cabab8865de3cdb7453bf6a240,More refactoring: split out camera and mouse control into separate classes.,https://github.com/elki-project/elki/commit/c4085be5fd7733cabab8865de3cdb7453bf6a240
550,550.0,550.0,elki-project/elki,f4468076d0586438f5e33d8a438727fe16be62d4,"Refactor code, to allow additional layouting strategies.",https://github.com/elki-project/elki/commit/f4468076d0586438f5e33d8a438727fe16be62d4
551,551.0,551.0,elki-project/elki,7e76fefd114c9518e543ed8284825695a6bdfb1b,Refactor to use an explicit matrix class representation.,https://github.com/elki-project/elki/commit/7e76fefd114c9518e543ed8284825695a6bdfb1b
552,552.0,552.0,elki-project/elki,3152f9a4bc2130e5e8fb10541d4d9a794091aa98,Cleaning and refactoring of Roberts code.,https://github.com/elki-project/elki/commit/3152f9a4bc2130e5e8fb10541d4d9a794091aa98
553,553.0,553.0,elki-project/elki,32b38a751180061c2cefdc4fea778483a2b06bc0,Cleaning and refactoring of Roberts code.,https://github.com/elki-project/elki/commit/32b38a751180061c2cefdc4fea778483a2b06bc0
554,554.0,554.0,elki-project/elki,4f5442aee7428c4f329ce0dee5bd5b9bf9d0c610,Start cleaning and refactoring Roberts code.,https://github.com/elki-project/elki/commit/4f5442aee7428c4f329ce0dee5bd5b9bf9d0c610
555,555.0,555.0,elki-project/elki,f6f610a9fcdca3899382e5fce2bc4b0d524ef582,Refactor style library into styleresult from visualizer context.,https://github.com/elki-project/elki/commit/f6f610a9fcdca3899382e5fce2bc4b0d524ef582
556,556.0,556.0,elki-project/elki,ee0e88e24e4f17ff3bcb3680c4755076e1353f36,"MAJOR refactoring / cleanup of parameterization API. We now have much less construtors; use addConstraint and setOptional to add constraints and set the optional flag! The resulting code, while it needs a few more lines, is much more readable, and often easier.",https://github.com/elki-project/elki/commit/ee0e88e24e4f17ff3bcb3680c4755076e1353f36
557,557.0,557.0,elki-project/elki,1d60b5fbebb9dfa35085660f1a780495dffda3ea,"Refactor KNN Heaps and Results, for further double-value optimizations.",https://github.com/elki-project/elki/commit/1d60b5fbebb9dfa35085660f1a780495dffda3ea
558,558.0,558.0,elki-project/elki,5be5ef06c581e8faf102ad809fc58fd7a627c8df,Refactor curve simplification code out of ROC curves. Temporarily breaks visualization though!,https://github.com/elki-project/elki/commit/5be5ef06c581e8faf102ad809fc58fd7a627c8df
559,559.0,559.0,elki-project/elki,8340cb7dc503385201e0f7bba0ce369aff22ddaa,Refactoring.,https://github.com/elki-project/elki/commit/8340cb7dc503385201e0f7bba0ce369aff22ddaa
560,560.0,560.0,elki-project/elki,b91d08e7c0a0a1c1fa0a072a77a63b3e54d431e8,Refactoring.,https://github.com/elki-project/elki/commit/b91d08e7c0a0a1c1fa0a072a77a63b3e54d431e8
561,561.0,561.0,elki-project/elki,f3365a047be19fc559ad82c1a2dfbae31b1929d7,More HiCS refactoring.,https://github.com/elki-project/elki/commit/f3365a047be19fc559ad82c1a2dfbae31b1929d7
562,562.0,562.0,elki-project/elki,f8d74d789ab3b6d32d2f89387506aef40689dbbe,Refactoring of tests.,https://github.com/elki-project/elki/commit/f8d74d789ab3b6d32d2f89387506aef40689dbbe
563,563.0,563.0,elki-project/elki,9449c873cbaff28a14ca8db3a0eb852b7f581d1b,Refactor. Try to have a single method responsible for mapping coordinates.,https://github.com/elki-project/elki/commit/9449c873cbaff28a14ca8db3a0eb852b7f581d1b
564,564.0,564.0,elki-project/elki,12b4eec011b8cc6b9cc74dd2689e881a588cd693,Refactor ALOCI.,https://github.com/elki-project/elki/commit/12b4eec011b8cc6b9cc74dd2689e881a588cd693
565,565.0,565.0,elki-project/elki,7e8f7b95c8775d9bbb8b6f220d8edbb16739026a,"Further refactoring of parallel coordinate stuff, getting ready for merging at some point!",https://github.com/elki-project/elki/commit/7e8f7b95c8775d9bbb8b6f220d8edbb16739026a
566,566.0,566.0,elki-project/elki,0efed65de68eef8e9716ee6d24912b669ae0233e,Some event refactoring.,https://github.com/elki-project/elki/commit/0efed65de68eef8e9716ee6d24912b669ae0233e
567,567.0,567.0,elki-project/elki,c643b17678aa17462bb9e33997d451843d3842be,More parallel coordinates layout refactoring.,https://github.com/elki-project/elki/commit/c643b17678aa17462bb9e33997d451843d3842be
568,568.0,568.0,elki-project/elki,033dbc53e668b989c00e5b63666c1dcae66e0924,"Refactoring, simplifications",https://github.com/elki-project/elki/commit/033dbc53e668b989c00e5b63666c1dcae66e0924
569,569.0,569.0,elki-project/elki,4d33045ff2525e3b6e9503f6f28454498b933c23,"Refactoring, simplifications",https://github.com/elki-project/elki/commit/4d33045ff2525e3b6e9503f6f28454498b933c23
570,570.0,570.0,elki-project/elki,ca07e4d7820316a8c6f213b6b787c01b4bcd78cf,"Refactoring, simplifications",https://github.com/elki-project/elki/commit/ca07e4d7820316a8c6f213b6b787c01b4bcd78cf
571,571.0,571.0,elki-project/elki,fa9d003d88f4c570e146738c2e7c91e621804c07,More refactoring of parallel coordinates code.,https://github.com/elki-project/elki/commit/fa9d003d88f4c570e146738c2e7c91e621804c07
572,572.0,572.0,elki-project/elki,f148b762fd5068ee68e0ec9aebbf6e92c8679876,Start refactoring parallel coordinates code,https://github.com/elki-project/elki/commit/f148b762fd5068ee68e0ec9aebbf6e92c8679876
573,573.0,573.0,elki-project/elki,df9f38f6fc31bcadc6a54ad89205927051a9651a,Refactor styling.,https://github.com/elki-project/elki/commit/df9f38f6fc31bcadc6a54ad89205927051a9651a
574,574.0,574.0,elki-project/elki,8236bed30057812ef1f43517c22d3bf4775c45b7,"Refactoring the math API, to further reduce the number of objects we create.",https://github.com/elki-project/elki/commit/8236bed30057812ef1f43517c22d3bf4775c45b7
575,575.0,575.0,elki-project/elki,d40d76aba0860202ff9268e0bbddfc390590f658,Refactor K-means to support additional initializations. TODO: kmeans++,https://github.com/elki-project/elki/commit/d40d76aba0860202ff9268e0bbddfc390590f658
576,576.0,576.0,elki-project/elki,42c16ff3c5a167bcbf45bea77270549e9635db0f,New UpdatableHeap variants. Needs refactoring to Strategy pattern.,https://github.com/elki-project/elki/commit/42c16ff3c5a167bcbf45bea77270549e9635db0f
577,577.0,577.0,elki-project/elki,50e42700aeea9586fb031a19080200105083d7f3,New UpdatableHeap variants. Needs refactoring to Strategy pattern.,https://github.com/elki-project/elki/commit/50e42700aeea9586fb031a19080200105083d7f3
578,578.0,578.0,elki-project/elki,87d87447b94e658dfaf13fade47db0ddfcc25f5b,"More refactoring, so we can at some point actually test this in ELKI.",https://github.com/elki-project/elki/commit/87d87447b94e658dfaf13fade47db0ddfcc25f5b
579,579.0,579.0,elki-project/elki,af61e53b0d19dbc4e79b16b3a9e6317789e1db76,"More refactoring, so we can at some point actually test this in ELKI.",https://github.com/elki-project/elki/commit/af61e53b0d19dbc4e79b16b3a9e6317789e1db76
580,580.0,580.0,elki-project/elki,8143aa72c59af4694850f380e818a9047f577c47,"More refactoring, so we can at some point actually test this in ELKI.",https://github.com/elki-project/elki/commit/8143aa72c59af4694850f380e818a9047f577c47
581,581.0,581.0,elki-project/elki,51f7cbe25e1d03d460576cb27dc3506e9e08a215,More refactoring.,https://github.com/elki-project/elki/commit/51f7cbe25e1d03d460576cb27dc3506e9e08a215
582,582.0,582.0,elki-project/elki,18808de5d834e5a7d035ee4725b7291de3bc45a2,Refactor subspace distance code.,https://github.com/elki-project/elki/commit/18808de5d834e5a7d035ee4725b7291de3bc45a2
583,583.0,583.0,elki-project/elki,2c8c7c799afc4e8ae2ba2a649dc4c80708cf9966,Spatial sorting - refactoring.,https://github.com/elki-project/elki/commit/2c8c7c799afc4e8ae2ba2a649dc4c80708cf9966
584,584.0,584.0,elki-project/elki,1d3c94dc675b40d36d0a269ce0c0ac294bae1ca1,Refactor data generators. Shouldn't keep a copy of the generated data anymore.,https://github.com/elki-project/elki/commit/1d3c94dc675b40d36d0a269ce0c0ac294bae1ca1
585,585.0,585.0,elki-project/elki,4ace987dbcf2863fa6c22e6878930ee3f572f519,Further refactor measures into separate (non-internal) classes.,https://github.com/elki-project/elki/commit/4ace987dbcf2863fa6c22e6878930ee3f572f519
586,586.0,586.0,elki-project/elki,b92d431f21976d2b268a418e77722c2b307f1019,"Refactor PairCountingFMeasure code, to include other pair-counting measures.",https://github.com/elki-project/elki/commit/b92d431f21976d2b268a418e77722c2b307f1019
587,587.0,587.0,elki-project/elki,3877a0898d2e8894b1cf0a2d8a8e1db363184447,Refactoring kNN result classes.,https://github.com/elki-project/elki/commit/3877a0898d2e8894b1cf0a2d8a8e1db363184447
588,588.0,588.0,elki-project/elki,30655e3dc035da466eabd33b13528481e148a01c,Refactor for filter-refinement indexes. Cleanups.,https://github.com/elki-project/elki/commit/30655e3dc035da466eabd33b13528481e148a01c
589,589.0,589.0,elki-project/elki,1282680e686971bc79dfe883f417a20a4ea861a0,Refactoring of partialVAfile.,https://github.com/elki-project/elki/commit/1282680e686971bc79dfe883f417a20a4ea861a0
590,590.0,590.0,elki-project/elki,fb9b4490ad64e220acea585743ba5f87c0842e7e,More VA file refactoring: split out distance function.,https://github.com/elki-project/elki/commit/fb9b4490ad64e220acea585743ba5f87c0842e7e
591,591.0,591.0,elki-project/elki,1c0d61eca130ad7c463f6935d9db345f419d19e1,Refactoring of VA file.,https://github.com/elki-project/elki/commit/1c0d61eca130ad7c463f6935d9db345f419d19e1
592,592.0,592.0,elki-project/elki,0690a9e430fac4cfb909f224024f15621214f401,Reorganize and refactor ArrayLike API.,https://github.com/elki-project/elki/commit/0690a9e430fac4cfb909f224024f15621214f401
593,593.0,593.0,elki-project/elki,1f0d1d51aefe8622eaa0300d89315f147060270e,Reorganize and refactor ArrayLike API.,https://github.com/elki-project/elki/commit/1f0d1d51aefe8622eaa0300d89315f147060270e
594,594.0,594.0,elki-project/elki,248dcc2fd9c83af4395b5103cf9af0c25ff452db,Refactoring for finally merging voronoi drawing.,https://github.com/elki-project/elki/commit/248dcc2fd9c83af4395b5103cf9af0c25ff452db
595,595.0,595.0,elki-project/elki,f4963e90326907eb2fe3340070a386d3078843e7,"Refactoring: move angle computations to VectorUtil (for NumberVector, SparseNumberVector) and MathUtil (for math Vector)",https://github.com/elki-project/elki/commit/f4963e90326907eb2fe3340070a386d3078843e7
596,596.0,596.0,elki-project/elki,18ba583a5dfb20b054ab595525aa9c4ef4159b76,Refactoring,https://github.com/elki-project/elki/commit/18ba583a5dfb20b054ab595525aa9c4ef4159b76
597,597.0,597.0,elki-project/elki,744205bea0df24ea045ee0ced044bd97491de133,Refactor RTree overflow treatment,https://github.com/elki-project/elki/commit/744205bea0df24ea045ee0ced044bd97491de133
598,598.0,598.0,elki-project/elki,03f161ce88cd50f488da9a9db7cc241324e81746,"Refactor / modularize overflow treatment in RStar-Tree (so we should now be able to do a classic RTree, too)",https://github.com/elki-project/elki/commit/03f161ce88cd50f488da9a9db7cc241324e81746
599,599.0,599.0,elki-project/elki,072712ce538d48696ed40beea2b7ec8dc84f2cef,More refactoring.,https://github.com/elki-project/elki/commit/072712ce538d48696ed40beea2b7ec8dc84f2cef
600,600.0,600.0,elki-project/elki,4cda6a7a4ff89a3ba8ba414ac26b64d3b0bcfeb7,Refactor for a shared Page interface with the new index layer,https://github.com/elki-project/elki/commit/4cda6a7a4ff89a3ba8ba414ac26b64d3b0bcfeb7
601,601.0,601.0,elki-project/elki,46956255502c77c89568ba6739904eb2195245a7,"Refactor pearson correlation into a helper class, that can be updated incrementally.",https://github.com/elki-project/elki/commit/46956255502c77c89568ba6739904eb2195245a7
602,602.0,602.0,elki-project/elki,63707e4f6c5cdc04ce473192ce9ed60a7827b89b,"Refactor generators, to include a model ""relation"", to pass model information to the UI.",https://github.com/elki-project/elki/commit/63707e4f6c5cdc04ce473192ce9ed60a7827b89b
603,603.0,603.0,elki-project/elki,1b056787cdbe96c425f23d3d73210c4af6bd7cbe,"Refactor distribution code into math package, largely from data generators and MathUtil",https://github.com/elki-project/elki/commit/1b056787cdbe96c425f23d3d73210c4af6bd7cbe
604,604.0,604.0,elki-project/elki,2534f10b109a12fbee4808e10a9d0f5ce4061830,"Refactor parsers to produce any type of number vector. By using the newer ArrayAdapter API, we can save duplicating them once during parsing, usually.",https://github.com/elki-project/elki/commit/2534f10b109a12fbee4808e10a9d0f5ce4061830
605,605.0,605.0,elki-project/elki,eb5300ed0b786364f0b8b2ceea34b57ac9d0f345,"Refactoring and cleanups. Undo SpatialAdapter introduction, the benefits were minimal, and it does not improve understandability of the code...",https://github.com/elki-project/elki/commit/eb5300ed0b786364f0b8b2ceea34b57ac9d0f345
606,606.0,606.0,elki-project/elki,09cf3d6a6d2c44f9355638cafd6cf4cad25859bc,"Refactor and restructure RTree strategies.
Merge strategies from new implementation, which use a low-level API that should be slightly faster (less memory intensive).",https://github.com/elki-project/elki/commit/09cf3d6a6d2c44f9355638cafd6cf4cad25859bc
607,607.0,607.0,elki-project/elki,c0e735166757c9eca7a97f82a1c70fa1556b1ffd,"Refactor and restructure RTree strategies.
Merge strategies from new implementation, which use a low-level API that should be slightly faster (less memory intensive).",https://github.com/elki-project/elki/commit/c0e735166757c9eca7a97f82a1c70fa1556b1ffd
608,608.0,608.0,elki-project/elki,70645f20eeb9b97a9237b70ff8d1f7fabbfd61e1,"Refactoring, cleanups.",https://github.com/elki-project/elki/commit/70645f20eeb9b97a9237b70ff8d1f7fabbfd61e1
609,609.0,609.0,elki-project/elki,ecc75cb263cf18316d5fc5356f211e474f0d531d,Refactor class label initialization. TODO: singletons.,https://github.com/elki-project/elki/commit/ecc75cb263cf18316d5fc5356f211e474f0d531d
610,610.0,610.0,elki-project/elki,05fdafb6c3aa2af9fd3414571f8303e01e8dec21,More refactoring.,https://github.com/elki-project/elki/commit/05fdafb6c3aa2af9fd3414571f8303e01e8dec21
611,611.0,611.0,elki-project/elki,a42cddadedab176f4de04bfc04fceaffcfa4fc61,Start refactoring generator into a regular data source.,https://github.com/elki-project/elki/commit/a42cddadedab176f4de04bfc04fceaffcfa4fc61
612,612.0,612.0,elki-project/elki,0f20447fe92a23ae67f8dae21d9f4654c4f75859,Refactoring.,https://github.com/elki-project/elki/commit/0f20447fe92a23ae67f8dae21d9f4654c4f75859
613,613.0,613.0,elki-project/elki,7adb18334225b069c92f8d0aa49f4f4d31e09d3f,"Refactor Base64 code to try two different base64 encoders in Sun Java 6, via reflection to avoid compile time warnings.",https://github.com/elki-project/elki/commit/7adb18334225b069c92f8d0aa49f4f4d31e09d3f
614,614.0,614.0,elki-project/elki,fa5093bcdec6a2dc813f07b8338e7af5166db0ea,Refactor JSON code.,https://github.com/elki-project/elki/commit/fa5093bcdec6a2dc813f07b8338e7af5166db0ea
615,615.0,615.0,elki-project/elki,bce0ea41ea2bc39dc6b74d270781a967f7cdb707,Refactored code.,https://github.com/elki-project/elki/commit/bce0ea41ea2bc39dc6b74d270781a967f7cdb707
616,616.0,616.0,elki-project/elki,b646430a78911775a9d3e60a37c1212e17de6cf6,"More refactoring, merge AnnotationFromDataStore into MaterializedRelation. Retire AssociationID from main.",https://github.com/elki-project/elki/commit/b646430a78911775a9d3e60a37c1212e17de6cf6
617,617.0,617.0,elki-project/elki,b3d8f9cc1e7db56468f429b9caaa577c37f83dd9,"More refactoring, merge AnnotationResult into Relation.",https://github.com/elki-project/elki/commit/b3d8f9cc1e7db56468f429b9caaa577c37f83dd9
618,618.0,618.0,elki-project/elki,6d6548164f427bad6ad1fd1e2fd95ad647314941,"Fix stupid refactoring bug in Xtree, test is working again.",https://github.com/elki-project/elki/commit/6d6548164f427bad6ad1fd1e2fd95ad647314941
619,619.0,619.0,elki-project/elki,df5e03068f1267c5f0d1068b92b8616f969e6a0b,R*-Tree refactoring: InsertStrategy,https://github.com/elki-project/elki/commit/df5e03068f1267c5f0d1068b92b8616f969e6a0b
620,620.0,620.0,elki-project/elki,5a53892a4dce2d31fb0388831497230a5af53636,"Refactor splitting strategy into a separate class. This way, we can at some point implement the regular R-Tree and other variants more easily.",https://github.com/elki-project/elki/commit/5a53892a4dce2d31fb0388831497230a5af53636
621,621.0,621.0,elki-project/elki,f6f4f20bc8b0d3a59d91f519d294b16dcad51e4d,"Refactor bulk loading strategies into a separate class, to allow easier extension with custom bulk loading strategies.",https://github.com/elki-project/elki/commit/f6f4f20bc8b0d3a59d91f519d294b16dcad51e4d
622,622.0,622.0,elki-project/elki,1d74d97f27255591a886815dbfa5316ef229c8eb,Refactoring,https://github.com/elki-project/elki/commit/1d74d97f27255591a886815dbfa5316ef229c8eb
623,623.0,623.0,elki-project/elki,064d0966683a54faa3a4b87001ad3841408af656,Refactoring,https://github.com/elki-project/elki/commit/064d0966683a54faa3a4b87001ad3841408af656
624,624.0,624.0,elki-project/elki,b639d71a188242bd58be482bdcf47c52f1be052b,Refactoring,https://github.com/elki-project/elki/commit/b639d71a188242bd58be482bdcf47c52f1be052b
625,625.0,625.0,elki-project/elki,8805ca0e9fd1354d6d5aee6c1dc5cd64a5d63408,"More refactoring of centroids, covariance matrixes, etc.",https://github.com/elki-project/elki/commit/8805ca0e9fd1354d6d5aee6c1dc5cd64a5d63408
626,626.0,626.0,elki-project/elki,6b5734901ca6e517520a6bfe36a21004756a0ead,"Refactor persistence layer, making the cache optional.",https://github.com/elki-project/elki/commit/6b5734901ca6e517520a6bfe36a21004756a0ead
627,627.0,627.0,elki-project/elki,9bdd06851b10cb07fa65a3d95ad39b5aa77b5f10,"Mega commit, further refactoring of index trees and tree queries.
The new design separates index trees from their use as database index structure.",https://github.com/elki-project/elki/commit/9bdd06851b10cb07fa65a3d95ad39b5aa77b5f10
628,628.0,628.0,elki-project/elki,b3f280b93577a9c64cce36fe90d7af9523e7498e,More query refactoring.,https://github.com/elki-project/elki/commit/b3f280b93577a9c64cce36fe90d7af9523e7498e
629,629.0,629.0,elki-project/elki,f7b4157a3e692d0b5842dddefd285c3be22d4613,ProxyDatabase refactoring.,https://github.com/elki-project/elki/commit/f7b4157a3e692d0b5842dddefd285c3be22d4613
630,630.0,630.0,elki-project/elki,84038a6ec8267ab8b81ca5c1f5ec892c14cceea4,Refactor database API to use a common base class. TODO: also derive proxy database from this?,https://github.com/elki-project/elki/commit/84038a6ec8267ab8b81ca5c1f5ec892c14cceea4
631,631.0,631.0,elki-project/elki,779193eba43d7a6cfa67d2d055a0d112fc4a02c4,"Refactor mtrees: move queries into own classes and package, so they can be optimized more easily.",https://github.com/elki-project/elki/commit/779193eba43d7a6cfa67d2d055a0d112fc4a02c4
632,632.0,632.0,elki-project/elki,56f9d264af64408d2587e7c61f6d170102c40c24,Refactoring of rtree query code into separate classes.,https://github.com/elki-project/elki/commit/56f9d264af64408d2587e7c61f6d170102c40c24
633,633.0,633.0,elki-project/elki,93bc164fa46c1425850045ebe844ae0f291a0219,More refactoring of index tree searches.,https://github.com/elki-project/elki/commit/93bc164fa46c1425850045ebe844ae0f291a0219
634,634.0,634.0,elki-project/elki,4ba97405839d723bfaf3d1c85e3280f31b05c930,Refactor OPTICSXi to be come a separate algorithm (that processes optics-type algorithm output),https://github.com/elki-project/elki/commit/4ba97405839d723bfaf3d1c85e3280f31b05c930
635,635.0,635.0,elki-project/elki,6002bc5fc251bc45287bf3ef732cc7abcb4726df,"More API refactoring. Move runtime logging into Workflow, removing the run->runInTime wrapping",https://github.com/elki-project/elki/commit/6002bc5fc251bc45287bf3ef732cc7abcb4726df
636,636.0,636.0,elki-project/elki,f9bbf6c3eb3e5d3be86bb4aefba68297aafe7114,post-refactoring cleanups.,https://github.com/elki-project/elki/commit/f9bbf6c3eb3e5d3be86bb4aefba68297aafe7114
637,637.0,637.0,elki-project/elki,840144c3203e9082843eebe8bfc5f798278f6549,"Some more refactoring. Use a column store layout, so we can easily add new columns, rearrange etc.",https://github.com/elki-project/elki/commit/840144c3203e9082843eebe8bfc5f798278f6549
638,638.0,638.0,elki-project/elki,efa0b7ee2cc65a4284e0df8fe7f67ff993a10e18,More Refactoring.,https://github.com/elki-project/elki/commit/efa0b7ee2cc65a4284e0df8fe7f67ff993a10e18
639,639.0,639.0,elki-project/elki,29a0ce4278d655c8d7ee9a2b75645c1d2051c608,"Mega commit: multi-relation refactoring of ELKI. Sorry, does break quite some things, will work on more cleanups and documentation the next days.",https://github.com/elki-project/elki/commit/29a0ce4278d655c8d7ee9a2b75645c1d2051c608
640,640.0,640.0,elki-project/elki,dbee948cc34ea15a0d9f30207ed8b86ae69b63b6,Refactor Katharinas Unit tests,https://github.com/elki-project/elki/commit/dbee948cc34ea15a0d9f30207ed8b86ae69b63b6
641,641.0,641.0,elki-project/elki,cf3a8ac3adb199bc7e67a620d44a0dcd009b6705,"Refactoring of object and class labels - progressing towards the new database layer: labels etc. are now pretty much ""representations"".",https://github.com/elki-project/elki/commit/cf3a8ac3adb199bc7e67a620d44a0dcd009b6705
642,642.0,642.0,elki-project/elki,f1e9c144bbb89789d4177c828bd3a280f7866fea,"Refactoring of object and class labels - progressing towards the new database layer: labels etc. are now pretty much ""representations"".",https://github.com/elki-project/elki/commit/f1e9c144bbb89789d4177c828bd3a280f7866fea
643,643.0,643.0,elki-project/elki,1e8226af9e6290ec1a7118a5287687815cac579c,"Remove unused PrimitiveResult interface (obsolete now), some JavaDoc changes. Refactor style library, by including markers and linestyles.",https://github.com/elki-project/elki/commit/1e8226af9e6290ec1a7118a5287687815cac579c
644,644.0,644.0,elki-project/elki,0b8406e37b7c92a4fc2f2fff9b4794db5b3fdb66,"Remove unused PrimitiveResult interface (obsolete now), some JavaDoc changes. Refactor style library, by including markers and linestyles.",https://github.com/elki-project/elki/commit/0b8406e37b7c92a4fc2f2fff9b4794db5b3fdb66
645,645.0,645.0,elki-project/elki,043dd8cd9cace144ad6cd75d7187b7cbfc7c524f,More Visualizer refactoring.,https://github.com/elki-project/elki/commit/043dd8cd9cace144ad6cd75d7187b7cbfc7c524f
646,646.0,646.0,elki-project/elki,9b19ac93310e3474c5ae7401e75d09e40a0b1417,Refactoring handling of DataStoreEvents,https://github.com/elki-project/elki/commit/9b19ac93310e3474c5ae7401e75d09e40a0b1417
647,647.0,647.0,elki-project/elki,95a28b54b5ff97a2ad8998563b63b5f8a939a680,Refactoring handling of DataStoreEvents,https://github.com/elki-project/elki/commit/95a28b54b5ff97a2ad8998563b63b5f8a939a680
648,648.0,648.0,elki-project/elki,b529130d9d45eb55aee7f2efb40a1373070b53ed,Refactoring DataStoreEvent,https://github.com/elki-project/elki/commit/b529130d9d45eb55aee7f2efb40a1373070b53ed
649,649.0,649.0,elki-project/elki,9b5bd5af06bfbb9bff939f03a86dc24934989be9,Refactoring,https://github.com/elki-project/elki/commit/9b5bd5af06bfbb9bff939f03a86dc24934989be9
650,650.0,650.0,elki-project/elki,9b55fb6a2c13cf2c21f254d572c21488e8385b39,"refactoring of listener notification for insertions, updates and deletions",https://github.com/elki-project/elki/commit/9b55fb6a2c13cf2c21f254d572c21488e8385b39
651,651.0,651.0,elki-project/elki,e1235321d1eed3b80f90267cd4ecbdaefa5763ee,Refactoring of AggarwalYu outlier detection,https://github.com/elki-project/elki/commit/e1235321d1eed3b80f90267cd4ecbdaefa5763ee
652,652.0,652.0,elki-project/elki,e935e65d880b8db1fbf83e07c787af51fe3bb8af,"Refactor databases to contain a ""ObjectFactory"", which is a sample object that is accessed for a newInstance() method.",https://github.com/elki-project/elki/commit/e935e65d880b8db1fbf83e07c787af51fe3bb8af
653,653.0,653.0,elki-project/elki,416fb9f3f05710a4792ed24da0c45a220ec2c33f,Mega refactoring of logging. Removal of AbstractLoggable class in favor of _static_ loggers per class.,https://github.com/elki-project/elki/commit/416fb9f3f05710a4792ed24da0c45a220ec2c33f
654,654.0,654.0,elki-project/elki,5df29d0d96cff30cea27e2bbbcad881c952e75f4,Refactoring & Cleanups,https://github.com/elki-project/elki/commit/5df29d0d96cff30cea27e2bbbcad881c952e75f4
655,655.0,655.0,elki-project/elki,c2475b44689171e5c6ab57141bd29b964b0aa85e,More refactoring,https://github.com/elki-project/elki/commit/c2475b44689171e5c6ab57141bd29b964b0aa85e
656,656.0,656.0,elki-project/elki,0d6e94883b376695f45bc668f0a9b890c71223b0,Refactor outlier detection algorithms to use factory methods for parameterization.,https://github.com/elki-project/elki/commit/0d6e94883b376695f45bc668f0a9b890c71223b0
657,657.0,657.0,elki-project/elki,50492b71f8f6ace641993df427ac0e1f7f5c0309,More refactoring going on. Factory pattern!,https://github.com/elki-project/elki/commit/50492b71f8f6ace641993df427ac0e1f7f5c0309
658,658.0,658.0,elki-project/elki,a4ddc41ced3d6019b42a33fe75fc0337b676b36d,More extreme refactoring.,https://github.com/elki-project/elki/commit/a4ddc41ced3d6019b42a33fe75fc0337b676b36d
659,659.0,659.0,elki-project/elki,a685668b03d2d37ffb300d81bbd30a2bd9b70889,Cleanups/Refactoring,https://github.com/elki-project/elki/commit/a685668b03d2d37ffb300d81bbd30a2bd9b70889
660,660.0,660.0,elki-project/elki,fa42017b05fe66d13b7223ada418005931490cf2,Refactor selection objects.,https://github.com/elki-project/elki/commit/fa42017b05fe66d13b7223ada418005931490cf2
661,661.0,661.0,elki-project/elki,8a5cb90f5fa84691067334385db5a4181995bbd2,Start refactoring Heidis code for merging.,https://github.com/elki-project/elki/commit/8a5cb90f5fa84691067334385db5a4181995bbd2
662,662.0,662.0,elki-project/elki,32226a03a93b0f5eed679f375e184eb1157253f0,Cleanups/Refactoring. Ongoing.,https://github.com/elki-project/elki/commit/32226a03a93b0f5eed679f375e184eb1157253f0
663,663.0,663.0,elki-project/elki,6a454540e66789ce38f4576e7db7c22a7e21f3fd,More visualizer refactoring.,https://github.com/elki-project/elki/commit/6a454540e66789ce38f4576e7db7c22a7e21f3fd
664,664.0,664.0,elki-project/elki,b650217e9880341f441a1bf20f0df2f659bc68e1,"Refactor Matrix and Vector code. Should help a bit with memory usage and eventually performance.
And convenience, since it adds some additional typing WRT matrix and vector mulitplications.",https://github.com/elki-project/elki/commit/b650217e9880341f441a1bf20f0df2f659bc68e1
665,665.0,665.0,elki-project/elki,d54de08e09703f516b699ae8b4e6c69277b8baae,More vis refactoring,https://github.com/elki-project/elki/commit/d54de08e09703f516b699ae8b4e6c69277b8baae
666,666.0,666.0,elki-project/elki,8ec0ba12d7b59bf2e582d918142e42e180645448,Check in interim status wrt visualization refactoring. First refreshes now work (but are slooow)!,https://github.com/elki-project/elki/commit/8ec0ba12d7b59bf2e582d918142e42e180645448
667,667.0,667.0,elki-project/elki,34571a2dbd8c05e0a63d7b8584a66be4d4172717,"Refactor knn handling of outlier methods, to allow the use of different knn computation utilities.",https://github.com/elki-project/elki/commit/34571a2dbd8c05e0a63d7b8584a66be4d4172717
668,668.0,668.0,elki-project/elki,fa792313d2a7df05b5a44b9e3f523b3c9016c06f,Refactor KDDTask into four steps.,https://github.com/elki-project/elki/commit/fa792313d2a7df05b5a44b9e3f523b3c9016c06f
669,669.0,669.0,elki-project/elki,3d3b22e6ca402968f2404b01c5ec3047af4eff86,Improve index tree visualization - refactor into svg hypercube helper,https://github.com/elki-project/elki/commit/3d3b22e6ca402968f2404b01c5ec3047af4eff86
670,670.0,670.0,elki-project/elki,e925581b205ee7ee80f6b66f3e7c178d2850dbf5,Refactor hypercube rendering.,https://github.com/elki-project/elki/commit/e925581b205ee7ee80f6b66f3e7c178d2850dbf5
671,671.0,671.0,elki-project/elki,4a57eb59650297a2d838951219141160847d1f72,Refactor evaluation classes.,https://github.com/elki-project/elki/commit/4a57eb59650297a2d838951219141160847d1f72
672,672.0,672.0,elki-project/elki,bbb6704ba5a509879dbff03a28c14a01b5392700,Refactor evaluation classes.,https://github.com/elki-project/elki/commit/bbb6704ba5a509879dbff03a28c14a01b5392700
673,673.0,673.0,elki-project/elki,592648ed50d4c91f06e6e33d2f9806ce59420abd,optics plot refactoring & bug fix.,https://github.com/elki-project/elki/commit/592648ed50d4c91f06e6e33d2f9806ce59420abd
674,674.0,674.0,elki-project/elki,fdd0b17f0cd225dc73b8627c2912d19061752f8d,refactoring kNN and RkNN queries,https://github.com/elki-project/elki/commit/fdd0b17f0cd225dc73b8627c2912d19061752f8d
675,675.0,675.0,elki-project/elki,dd6f0c35d8555a6022a45960138b038e49f09e2c,Refactoring DatabaseListener,https://github.com/elki-project/elki/commit/dd6f0c35d8555a6022a45960138b038e49f09e2c
676,676.0,676.0,elki-project/elki,12a90ce95b92cb3d3f306a2b0338b252c3d1408f,Refactoring DatabaseListener,https://github.com/elki-project/elki/commit/12a90ce95b92cb3d3f306a2b0338b252c3d1408f
677,677.0,677.0,elki-project/elki,f16aa79eef7bb4c372b965ccd28221c167f5fb8a,Refactoring SubspaceModel,https://github.com/elki-project/elki/commit/f16aa79eef7bb4c372b965ccd28221c167f5fb8a
678,678.0,678.0,elki-project/elki,5bfafafd0fe0175c20ce7dac72ce86e24a5536da,Refactoring SubspaceAndMeanModel,https://github.com/elki-project/elki/commit/5bfafafd0fe0175c20ce7dac72ce86e24a5536da
679,679.0,679.0,elki-project/elki,319f42e2ca8bc0ac0b33b31dd7725b552b8418f6,"Refactor OPTICS plotting code into its own package.
Doing so, add support for CorrelationDistance.",https://github.com/elki-project/elki/commit/319f42e2ca8bc0ac0b33b31dd7725b552b8418f6
680,680.0,680.0,elki-project/elki,3cb16981cbfeb2955a8ed6aa30da3c27df0259a5,bugfixing and refactoring,https://github.com/elki-project/elki/commit/3cb16981cbfeb2955a8ed6aa30da3c27df0259a5
681,681.0,681.0,elki-project/elki,93826d59d183c2793ad884ef2a5ff1caab1f70fd,bugfixing and refactoring,https://github.com/elki-project/elki/commit/93826d59d183c2793ad884ef2a5ff1caab1f70fd
682,682.0,682.0,elki-project/elki,9c62667e5bc800b61a59ae0152dae59b8d5f3f55,"Monster commit that marks a major refactoring of Distances and DistanceFunctions into where a Distance becomes a Factory for itself.
This is to move parsing code into the distance classes, instead of the distance functions.",https://github.com/elki-project/elki/commit/9c62667e5bc800b61a59ae0152dae59b8d5f3f55
683,683.0,683.0,elki-project/elki,17bbb4753b1e1c37115185de71bc43a35529245e,"Refactor plot scaling code, part n+1",https://github.com/elki-project/elki/commit/17bbb4753b1e1c37115185de71bc43a35529245e
684,684.0,684.0,elki-project/elki,c2d7bf1424b6a7fce5c7c7cb200b2d09701a639b,refactoring JUnitTests and adding new one,https://github.com/elki-project/elki/commit/c2d7bf1424b6a7fce5c7c7cb200b2d09701a639b
685,685.0,685.0,elki-project/elki,9e7f65432a63d085303b0744801c11da21f424b5,refactoring JUnitTest,https://github.com/elki-project/elki/commit/9e7f65432a63d085303b0744801c11da21f424b5
686,686.0,686.0,elki-project/elki,0ae4c138c04c1132cf5307f9209d4e97a13abb18,refactoring JUnitTest,https://github.com/elki-project/elki/commit/0ae4c138c04c1132cf5307f9209d4e97a13abb18
687,687.0,687.0,elki-project/elki,bee6b4562b7909f35fb40a30afee00fe98820389,refactoring JUnitTests and adding new one,https://github.com/elki-project/elki/commit/bee6b4562b7909f35fb40a30afee00fe98820389
688,688.0,688.0,elki-project/elki,605cff841f31c52d41b1c37b8cad9630dcf80bf1,refactoring,https://github.com/elki-project/elki/commit/605cff841f31c52d41b1c37b8cad9630dcf80bf1
689,689.0,689.0,elki-project/elki,85c5be008753afb9b2de0cdb168bd736ea6fa676,refactoring,https://github.com/elki-project/elki/commit/85c5be008753afb9b2de0cdb168bd736ea6fa676
690,690.0,690.0,elki-project/elki,fc38b4edcc90b1da59066ab7c466250b52f09cd1,refactoring,https://github.com/elki-project/elki/commit/fc38b4edcc90b1da59066ab7c466250b52f09cd1
691,691.0,691.0,elki-project/elki,f4d914ee7e4aa865b44fdb2dc24f82d6205cbb97,refactoring,https://github.com/elki-project/elki/commit/f4d914ee7e4aa865b44fdb2dc24f82d6205cbb97
692,692.0,692.0,elki-project/elki,8f5e681264b57d2602831ff1c761e90d71868530,refactoring JUnitTest,https://github.com/elki-project/elki/commit/8f5e681264b57d2602831ff1c761e90d71868530
693,693.0,693.0,elki-project/elki,91b80cc374a84c195ec4dbeebfa16dfae9f98560,refactoring JUnitTest,https://github.com/elki-project/elki/commit/91b80cc374a84c195ec4dbeebfa16dfae9f98560
694,694.0,694.0,elki-project/elki,e9feecf54428acba9e9b40eb8b3b55baa28e004d,refactoring JUnitTest,https://github.com/elki-project/elki/commit/e9feecf54428acba9e9b40eb8b3b55baa28e004d
695,695.0,695.0,elki-project/elki,63f8cda13728b0269e1808a3e229eaf1639b389e,refactoring JUnitTest,https://github.com/elki-project/elki/commit/63f8cda13728b0269e1808a3e229eaf1639b389e
696,696.0,696.0,elki-project/elki,4b5583fea31c058497d228be0073812a30c51762,refactoring preprocessors,https://github.com/elki-project/elki/commit/4b5583fea31c058497d228be0073812a30c51762
697,697.0,697.0,elki-project/elki,f4c0ef3bd305860ca8e41834de34ec6b7a7fcb48,refactoring preprocessors,https://github.com/elki-project/elki/commit/f4c0ef3bd305860ca8e41834de34ec6b7a7fcb48
698,698.0,698.0,elki-project/elki,43a161bc74057ffc055edf8ba9b04517134e4518,refactoring preprocessors,https://github.com/elki-project/elki/commit/43a161bc74057ffc055edf8ba9b04517134e4518
699,699.0,699.0,elki-project/elki,4588ad27fd8f69f8eb1db7f28d4dedb9262cbc44,refactoring,https://github.com/elki-project/elki/commit/4588ad27fd8f69f8eb1db7f28d4dedb9262cbc44
700,700.0,700.0,elki-project/elki,2ebe554a121d0d2aa7b857aa91d3700451f6d9c4,refactoring comments,https://github.com/elki-project/elki/commit/2ebe554a121d0d2aa7b857aa91d3700451f6d9c4
701,701.0,701.0,elki-project/elki,242e845e054ffde4c47c56cb25e6137aea8fdc87,Refactoring subspaces,https://github.com/elki-project/elki/commit/242e845e054ffde4c47c56cb25e6137aea8fdc87
702,702.0,702.0,elki-project/elki,32c1f091a4c63526cd26bb5c16c2497082cde5d7,Refactoring subspace classes,https://github.com/elki-project/elki/commit/32c1f091a4c63526cd26bb5c16c2497082cde5d7
703,703.0,703.0,elki-project/elki,a3a0f1f1672421d1cdb9d44c46ee58e91e419e72,Refactor setup of visualizations.,https://github.com/elki-project/elki/commit/a3a0f1f1672421d1cdb9d44c46ee58e91e419e72
704,704.0,704.0,elki-project/elki,023b53f9cae5b3ccfe035fcd0b87853eb1ceb72a,Refactor shared code for hourglass in-progress markers.,https://github.com/elki-project/elki/commit/023b53f9cae5b3ccfe035fcd0b87853eb1ceb72a
705,705.0,705.0,elki-project/elki,362baab99d8cbb30f023b5c77005889942cb4927,"Add a cluster-dot visualizer (using the markers, providing the VisualizeDataset functionality!), refactor code that depends on clustering information to share this via VisualizerContext.",https://github.com/elki-project/elki/commit/362baab99d8cbb30f023b5c77005889942cb4927
706,706.0,706.0,elki-project/elki,0b05ef901372b6aef1ef1b07b837858bf431d13b,"Refactoring of outlier results.
- use an OutlierResult class
- include meta information about the scores such as: minimum, maximum, expected value, type (basic, quotient, inverted)",https://github.com/elki-project/elki/commit/0b05ef901372b6aef1ef1b07b837858bf431d13b
707,707.0,707.0,elki-project/elki,cbc7cbaa1ce68b0e7638f2e0e9cef44ee03f6287,Refactor projection code out of ScatterPlot,https://github.com/elki-project/elki/commit/cbc7cbaa1ce68b0e7638f2e0e9cef44ee03f6287
708,708.0,708.0,elki-project/elki,6f979bff1cd9be37f6fd3a62a1931b619f53f3b3,"Refactor SVGPlot, UpdateRunner and JSVG/Batik integration.
Every plot now has an UpdateRunner, but it does not depend on Swing/Batik.
Instead, an ""UpdateSynchronizer"" is doing the actual synchronization.
Introduce JSVGSynchronizedCanvas which will auto-synchronize SVGPlot objects.",https://github.com/elki-project/elki/commit/6f979bff1cd9be37f6fd3a62a1931b619f53f3b3
709,709.0,709.0,elki-project/elki,c44e3fff9b0aa2048ff575b48920146dd8484ebe,More GUI refactoring,https://github.com/elki-project/elki/commit/c44e3fff9b0aa2048ff575b48920146dd8484ebe
710,710.0,710.0,elki-project/elki,f39a27e6ba85f8a2f6ed2c024f4afe2168c005f3,Refactor MiniGUI,https://github.com/elki-project/elki/commit/f39a27e6ba85f8a2f6ed2c024f4afe2168c005f3
711,711.0,711.0,elki-project/elki,82964dcb73fee53735ca29628d244144a3aebb28,Refactor creation of clusterings.,https://github.com/elki-project/elki/commit/82964dcb73fee53735ca29628d244144a3aebb28
712,712.0,712.0,elki-project/elki,28208c0f6cdbea731988670f8957259bf1aa2ba8,Add Some Documentation and fix some problems due to the Number-/FeatureVector-Refactoring.,https://github.com/elki-project/elki/commit/28208c0f6cdbea731988670f8957259bf1aa2ba8
713,713.0,713.0,elki-project/elki,a3bc41dfc77aaa5c279fe239d4672059ff91a34c,"Refactor generation of plots.
As a nice side-effect, reduce coupling with VisualizationManager.",https://github.com/elki-project/elki/commit/a3bc41dfc77aaa5c279fe239d4672059ff91a34c
714,714.0,714.0,elki-project/elki,5b2840eedd12071a9cff29a9eaa2576d02680962,Refactor even more. Remove RepresentationQuery in favor of merging this into Representation itself.,https://github.com/elki-project/elki/commit/5b2840eedd12071a9cff29a9eaa2576d02680962
715,715.0,715.0,elki-project/elki,52bac9cb6cfa4aa597d7db833db9a373ba03fa6d,Refactored the way adapter serve visualizers.,https://github.com/elki-project/elki/commit/52bac9cb6cfa4aa597d7db833db9a373ba03fa6d
716,716.0,716.0,elki-project/elki,b7681522c100b2a59b773664b751c2a50b2cdff8,"More refactoring of Pair code.
PairUtil now stores all the external comparator classes in one place.
This allows sorting e.g. Pair<F,C> objects easily when F or C or both are comparable or do have a Comparator<>.",https://github.com/elki-project/elki/commit/b7681522c100b2a59b773664b751c2a50b2cdff8
717,717.0,717.0,elki-project/elki,1cdacf8e516d51d7626ceb5f5eebfe61f566b2a5,Refactor use of UpdateRunner,https://github.com/elki-project/elki/commit/1cdacf8e516d51d7626ceb5f5eebfe61f566b2a5
718,718.0,718.0,elki-project/elki,22099e2d791df12eceacf55ece7ec3cc7efe717a,Refactor from DoubleVector to NumberVector.,https://github.com/elki-project/elki/commit/22099e2d791df12eceacf55ece7ec3cc7efe717a
719,719.0,719.0,elki-project/elki,c70877594dca68769403aed03b18aac2c09b575a,Refactor MiniGUI code. It's pretty usable already!,https://github.com/elki-project/elki/commit/c70877594dca68769403aed03b18aac2c09b575a
720,720.0,720.0,elki-project/elki,2161dd649a465fc75da9876d415e1daa817758d4,Some documentation and refactoring.,https://github.com/elki-project/elki/commit/2161dd649a465fc75da9876d415e1daa817758d4
721,721.0,721.0,elki-project/elki,2c706ffa142f18569cf97d456e9984b0850aee5a,"Some more refactoring. Using one-dimensional visualizations should be possible now, but wasn't tested.",https://github.com/elki-project/elki/commit/2c706ffa142f18569cf97d456e9984b0850aee5a
722,722.0,722.0,elki-project/elki,a2bfa2de0ca110487efa3b473243ca7359681c1c,"1. heavy refactoring
2. re-enable tooltips
3. (re-)introduce some bugs :(",https://github.com/elki-project/elki/commit/a2bfa2de0ca110487efa3b473243ca7359681c1c
723,723.0,723.0,elki-project/elki,aa3c44bfe37942f629c69f0b45e79088a309c1b4,"1. Replace CommonSVGShapes with a static ShapeLibrary.
2. Refactor PlotManager: usage is easier now.
3. Some refactoring to be able to re-enable ToolTips soon.",https://github.com/elki-project/elki/commit/aa3c44bfe37942f629c69f0b45e79088a309c1b4
724,724.0,724.0,elki-project/elki,881f3b09529942e9ffc7fa8aa5efafa4c7238fd9,Refactor Histogram classes.,https://github.com/elki-project/elki/commit/881f3b09529942e9ffc7fa8aa5efafa4c7238fd9
725,725.0,725.0,elki-project/elki,46abc9d141bb3f5e076bf34fdb789b1782bd3155,Refactor stroke format string.,https://github.com/elki-project/elki/commit/46abc9d141bb3f5e076bf34fdb789b1782bd3155
726,726.0,726.0,elki-project/elki,b1c0315698c56bc72a902a97688cfce33685a90b,More SVG refactoring,https://github.com/elki-project/elki/commit/b1c0315698c56bc72a902a97688cfce33685a90b
727,727.0,727.0,elki-project/elki,3730bd93c5130e05a2a55ec958cab47b6a63e1e1,"add svgLine, refactor code. Use SVGConstants in simons code appropriately.",https://github.com/elki-project/elki/commit/3730bd93c5130e05a2a55ec958cab47b6a63e1e1
728,728.0,728.0,elki-project/elki,21dd91a0be8117eeef351bd25f1d829586696d57,Check in refactored visualization application.,https://github.com/elki-project/elki/commit/21dd91a0be8117eeef351bd25f1d829586696d57
729,729.0,729.0,elki-project/elki,40ff48a9bd4e6a1ddc45b0d3d847d9b0ae8c7546,Refactor mahalanobis-distance (on raw double vectors) into MathUtil class.,https://github.com/elki-project/elki/commit/40ff48a9bd4e6a1ddc45b0d3d847d9b0ae8c7546
730,730.0,730.0,elki-project/elki,e13bd61e93e5a639beadc8954c8754fe4dc5d8f7,"Add configurable binning, refactor some code to make it more readable.",https://github.com/elki-project/elki/commit/e13bd61e93e5a639beadc8954c8754fe4dc5d8f7
731,731.0,731.0,elki-project/elki,d02cf463b62e42fbd446a78a34475b7ee42cc247,"Retire GeneralizedLOF in favor of refactored and renamed ""LOF"".",https://github.com/elki-project/elki/commit/d02cf463b62e42fbd446a78a34475b7ee42cc247
732,732.0,732.0,elki-project/elki,f00f103af06631dca83f2d9923234e1c4c233694,"Refactor option handling code.
Note that ERiC unit test results are too low, but they were so before this changeset, i.e. the degradation was caused by earlier changes!",https://github.com/elki-project/elki/commit/f00f103af06631dca83f2d9923234e1c4c233694
733,733.0,733.0,elki-project/elki,110cc87501cd2a7f84647cc127b5f1a7f16f6569,Refactor some options handling.,https://github.com/elki-project/elki/commit/110cc87501cd2a7f84647cc127b5f1a7f16f6569
734,734.0,734.0,elki-project/elki,4cb66d7f8394d8f7b364be280dcf0139f34edd38,mini refactoring,https://github.com/elki-project/elki/commit/4cb66d7f8394d8f7b364be280dcf0139f34edd38
735,735.0,735.0,elki-project/elki,23f3f5f2f559332f6e456f0cf6490451877642ec,"Refactor utilities.output.Format into utilites.FormatUtil (which was refactored out of utilities.Util to contain all the formatting statements.
There was some duplicated code in the utilities.output.Format class that was now merged back.",https://github.com/elki-project/elki/commit/23f3f5f2f559332f6e456f0cf6490451877642ec
736,736.0,736.0,elki-project/elki,8edd7e5803b5e374ca1df3262239d81bbd2b4788,"More logging refactorization.
Introduction of a ""Logging"" class, that wraps around the traditional java.util.logging.Logger class and offers more convenience methods.
The goal is to have efficient, configurable and convenient logging.

MORE TO COME.",https://github.com/elki-project/elki/commit/8edd7e5803b5e374ca1df3262239d81bbd2b4788
737,737.0,737.0,elki-project/elki,6dd54317a813965702abe5efe489c69c611fb5e2,"Huge Pair refactoring.
Rename 'SimplePair' to just 'Pair'. Rename 'ComparablePair' to 'CPair'.
Re-introduction of QueryResult as DistanceResultPair derived from CPair with readable accessors ""getDistance"" and ""getID"".
Java performance studies have shown no cost in making Pair non-final, hotspot-VMs will optimize that very well. Since we can get 'getDistance' and 'getID' for free, we're gonna use them to increase readability of the code.",https://github.com/elki-project/elki/commit/6dd54317a813965702abe5efe489c69c611fb5e2
738,738.0,738.0,elki-project/elki,48e107350f755d11c3398df518a28b36b4c25a28,More refactoring of Util class into multiple utility classes.,https://github.com/elki-project/elki/commit/48e107350f755d11c3398df518a28b36b4c25a28
739,739.0,739.0,elki-project/elki,5d41f6ab6668c509eae21831853289f1b4286a08,Refactor OptionHandling related utility functions into separate OptionUtil class.,https://github.com/elki-project/elki/commit/5d41f6ab6668c509eae21831853289f1b4286a08
740,740.0,740.0,elki-project/elki,0830ce92ec1b4eb27a8a85032b3718e0bab34044,Refactor number formatting code out of Util class into separate FormatUtil class.,https://github.com/elki-project/elki/commit/0830ce92ec1b4eb27a8a85032b3718e0bab34044
741,741.0,741.0,elki-project/elki,f280e9dc400510ce244a0cc65dbe597553568388,"Refactor ROC AUC code, removing duplicated code.",https://github.com/elki-project/elki/commit/f280e9dc400510ce244a0cc65dbe597553568388
742,742.0,742.0,elki-project/elki,5b8300eca9f8c8746c7c69d28b9fff3944d424d5,Refactor Axis drawing code into utility class (static method).,https://github.com/elki-project/elki/commit/5b8300eca9f8c8746c7c69d28b9fff3944d424d5
743,743.0,743.0,elki-project/elki,baf879c7880c090e20e1672cfc810544054fe5f4,Refactor support for gzip input streams.,https://github.com/elki-project/elki/commit/baf879c7880c090e20e1672cfc810544054fe5f4
744,744.0,744.0,elki-project/elki,6a50e017d2dfde65352f40b0cbd02dc5a97fab87,Refactor class parameter restrictions.,https://github.com/elki-project/elki/commit/6a50e017d2dfde65352f40b0cbd02dc5a97fab87
745,745.0,745.0,elki-project/elki,54884f7b6c03d17c9ebd78bd99beb5184cb82a2a,"Refactor BaseCluster<C, M> into Cluster<M> to simplify cluster handling.",https://github.com/elki-project/elki/commit/54884f7b6c03d17c9ebd78bd99beb5184cb82a2a
746,746.0,746.0,elki-project/elki,ef67c7c2760f135318a2f99ba70d0d0886596a70,Refactor Associations to use a generic any-container.,https://github.com/elki-project/elki/commit/ef67c7c2760f135318a2f99ba70d0d0886596a70
747,747.0,747.0,elki-project/elki,ea43ca2aeb155d44f77644b5ee913014a7160884,Refactor result handling,https://github.com/elki-project/elki/commit/ea43ca2aeb155d44f77644b5ee913014a7160884
748,748.0,748.0,elki-project/elki,9c1c49831e4c6b7c520ceb0cbebf8ef688917452,More Refactoring,https://github.com/elki-project/elki/commit/9c1c49831e4c6b7c520ceb0cbebf8ef688917452
749,749.0,749.0,elki-project/elki,3a0e37ab04243c5046293229c2333b4b8321d7ec,Refactor double vector parsing to add single-line method.,https://github.com/elki-project/elki/commit/3a0e37ab04243c5046293229c2333b4b8321d7ec
750,750.0,750.0,elki-project/elki,eb132029241bc35a470adf2efc0209c52f7133ca,"Code refactoring, to allow code reuse in other SNN functions",https://github.com/elki-project/elki/commit/eb132029241bc35a470adf2efc0209c52f7133ca
751,751.0,751.0,elki-project/elki,6442983e78b39d6a6a594c0c169653a4bbde2570,"Refactor Thumbnailer code out of the visualization app, so it can be reused.
Solve update synchronization issues (so thumbnails are shown even when the view had been hidden).",https://github.com/elki-project/elki/commit/6442983e78b39d6a6a594c0c169653a4bbde2570
752,752.0,752.0,elki-project/elki,ece1ba9c823e17ffd5736aaf246a405f62db36e3,More refactoring of visualization code.,https://github.com/elki-project/elki/commit/ece1ba9c823e17ffd5736aaf246a405f62db36e3
753,753.0,753.0,elki-project/elki,4fe6fefd87aeddca82cb1aa52f1abc04a15df752,more SVG graphics refactoring,https://github.com/elki-project/elki/commit/4fe6fefd87aeddca82cb1aa52f1abc04a15df752
754,754.0,754.0,elki-project/elki,44729b98ee408d6cc7c162964b4ca6e793f7f7d7,"Refactor ObjectAndLabels<O> class into SimplePair<O, List<String>>. This is almost only used in the parser package and maybe can be moved there altogether.
Add a FIXME to OnlineLOF because of duplicated code from the parser package.",https://github.com/elki-project/elki/commit/44729b98ee408d6cc7c162964b4ca6e793f7f7d7
755,755.0,755.0,elki-project/elki,25ac579550ae39109720058a7b93ed1a97f797e5,"Refactoring of IntegerTriple into generic ComparableTriple<Integer,Integer,Integer>",https://github.com/elki-project/elki/commit/25ac579550ae39109720058a7b93ed1a97f797e5
756,756.0,756.0,elki-project/elki,5a215bf34b4d68a28eaff27e25dbc31bdae5d1c1,More Pairs refactoring.,https://github.com/elki-project/elki/commit/5a215bf34b4d68a28eaff27e25dbc31bdae5d1c1
757,757.0,757.0,elki-project/elki,6e840b390b3f2fa317d836680e68e3a2b214d7b0,refactoring parameter / comments,https://github.com/elki-project/elki/commit/6e840b390b3f2fa317d836680e68e3a2b214d7b0
758,758.0,758.0,elki-project/elki,795a3a426eb4f3215ca65ad05aa65e1daaffda2f,refactoring parameter / comments,https://github.com/elki-project/elki/commit/795a3a426eb4f3215ca65ad05aa65e1daaffda2f
759,759.0,759.0,elki-project/elki,e97401292eeac1fa9c2dbbd01d5ad889695f65f2,"Some more refactoring of Abod.
Extract Mean and Variance computation to elki.math.MeanVariance",https://github.com/elki-project/elki/commit/e97401292eeac1fa9c2dbbd01d5ad889695f65f2
760,760.0,760.0,elki-project/elki,5a559159daff127debff270c0d8393dbd057e128,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/5a559159daff127debff270c0d8393dbd057e128
761,761.0,761.0,elki-project/elki,47a594183bc345cdbdf054c7480451486782653a,"Refactor wrapper main() methods, reducing code duplication.
Add -stack-trace option to request a stack trace on exceptions.",https://github.com/elki-project/elki/commit/47a594183bc345cdbdf054c7480451486782653a
762,762.0,762.0,elki-project/elki,ffa8f9badf59df0a59b03253b6d6c645c9f3428a,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/ffa8f9badf59df0a59b03253b6d6c645c9f3428a
763,763.0,763.0,elki-project/elki,6f4645c78d007ddcbf2d20c667b44a632f4dedd1,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/6f4645c78d007ddcbf2d20c667b44a632f4dedd1
764,764.0,764.0,elki-project/elki,a2456da989ae2a135b41bdd1e5204e2fa4868347,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/a2456da989ae2a135b41bdd1e5204e2fa4868347
765,765.0,765.0,elki-project/elki,e558a865c7f02866afb8efd0885b2e5fd9650367,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/e558a865c7f02866afb8efd0885b2e5fd9650367
766,766.0,766.0,elki-project/elki,c2d5129a676d11ea1981f4b717c12975cc962d27,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/c2d5129a676d11ea1981f4b717c12975cc962d27
767,767.0,767.0,elki-project/elki,bda193c097a43c6ed229941e9009c717a1492ba8,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/bda193c097a43c6ed229941e9009c717a1492ba8
768,768.0,768.0,elki-project/elki,d934beb719d21ad7a7a6547ce45b1c0f59015c13,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/d934beb719d21ad7a7a6547ce45b1c0f59015c13
769,769.0,769.0,elki-project/elki,c2dd94c14ae24316c528ec08e979c7f0967612f2,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/c2dd94c14ae24316c528ec08e979c7f0967612f2
770,770.0,770.0,elki-project/elki,7fed9a69d896cbe218f4a0b5fe6dc5318ea574e0,Refactoring M-Tree package,https://github.com/elki-project/elki/commit/7fed9a69d896cbe218f4a0b5fe6dc5318ea574e0
771,771.0,771.0,elki-project/elki,0af9c55d6ad55923ce4a278dc8990b5d49db0ed6,Refactoring M-Tree package,https://github.com/elki-project/elki/commit/0af9c55d6ad55923ce4a278dc8990b5d49db0ed6
772,772.0,772.0,elki-project/elki,49f93582f821c468f0af2843fdd336143e2e341c,Refactoring M-Tree package,https://github.com/elki-project/elki/commit/49f93582f821c468f0af2843fdd336143e2e341c
773,773.0,773.0,elki-project/elki,2af7c39a9784caa2a9365fd09f2fbe12c8065ddd,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/2af7c39a9784caa2a9365fd09f2fbe12c8065ddd
774,774.0,774.0,elki-project/elki,87f45204654cd46019535298e14b84cf992ac4d3,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/87f45204654cd46019535298e14b84cf992ac4d3
775,775.0,775.0,elki-project/elki,15f14a0d030496c579f3ce91dfcb6ff2bf8727d2,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/15f14a0d030496c579f3ce91dfcb6ff2bf8727d2
776,776.0,776.0,elki-project/elki,427dfb696a6387eab86c7a613687212e8563e914,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/427dfb696a6387eab86c7a613687212e8563e914
777,777.0,777.0,elki-project/elki,2c1458d82abe44201b825aa3a9e365c19064a003,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/2c1458d82abe44201b825aa3a9e365c19064a003
778,778.0,778.0,elki-project/elki,ab494aa1f5254af0a8b0bf52e431ada2b6660409,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/ab494aa1f5254af0a8b0bf52e431ada2b6660409
779,779.0,779.0,elki-project/elki,ad47ce68b6934668c7c1b16d1fb9bde241185f4f,"Commit the new PCA refactoring.
We now have separate classes for a PCA Runner and a PCA Result (since many algorithms need to set parameters for the PCA runner that apply to every run).
Global PCA is no longer needed - all PCA Runners can process whole databases,
but the PCAFilteredRunner is needed if you want to determine a subspace dimensionality. PCARunner doesn't use a filter or determine a subspace.",https://github.com/elki-project/elki/commit/ad47ce68b6934668c7c1b16d1fb9bde241185f4f
780,780.0,780.0,elki-project/elki,96de3eb32409e07a175d4965b33d58e555b876d5,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/96de3eb32409e07a175d4965b33d58e555b876d5
781,781.0,781.0,elki-project/elki,9270bf9d4bec281eec217d833c5e821e1d68787b,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/9270bf9d4bec281eec217d833c5e821e1d68787b
782,782.0,782.0,elki-project/elki,54cae7dab1883386c76c0eea7fa2c91591ddff69,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/54cae7dab1883386c76c0eea7fa2c91591ddff69
783,783.0,783.0,elki-project/elki,297b2197c082633c574d660e141bb10f4c2651d8,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/297b2197c082633c574d660e141bb10f4c2651d8
784,784.0,784.0,elki-project/elki,bacdff73fe72d27ca58ea100c9722ed0106157b3,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/bacdff73fe72d27ca58ea100c9722ed0106157b3
785,785.0,785.0,elki-project/elki,437767cbc1b53b042ffd06e55eceb4e01cdc3995,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/437767cbc1b53b042ffd06e55eceb4e01cdc3995
786,786.0,786.0,elki-project/elki,38c7a5122f24960582b6e50176874edea19a61c9,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/38c7a5122f24960582b6e50176874edea19a61c9
787,787.0,787.0,elki-project/elki,c4a03cd83bfedcb1244142f2b8f82629a95acfc9,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/c4a03cd83bfedcb1244142f2b8f82629a95acfc9
788,788.0,788.0,elki-project/elki,6374aeb25e80a59e10159f16fd218613798a60cc,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/6374aeb25e80a59e10159f16fd218613798a60cc
789,789.0,789.0,elki-project/elki,0d522454d3f7fc808fbb6d3b964e2a49c969f909,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/0d522454d3f7fc808fbb6d3b964e2a49c969f909
790,790.0,790.0,elki-project/elki,627dae37cd9b8bc9934d08f582196f4bb8043beb,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/627dae37cd9b8bc9934d08f582196f4bb8043beb
791,791.0,791.0,elki-project/elki,d0dbf0f5aa8a0bbc3354adb28484b5b9408f574d,Refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/d0dbf0f5aa8a0bbc3354adb28484b5b9408f574d
792,792.0,792.0,elki-project/elki,89d4baab9bb435dbdf90047e32f674b4a1dfb40c,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/89d4baab9bb435dbdf90047e32f674b4a1dfb40c
793,793.0,793.0,elki-project/elki,ebbe644c95bfc5b856ab40865aa08565f26d9948,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/ebbe644c95bfc5b856ab40865aa08565f26d9948
794,794.0,794.0,elki-project/elki,184515102c6c84b71fc2cd4179944c5b7b2cf96e,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/184515102c6c84b71fc2cd4179944c5b7b2cf96e
795,795.0,795.0,elki-project/elki,0354f4353e859d722b72f2a9a88cfaa388171acc,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/0354f4353e859d722b72f2a9a88cfaa388171acc
796,796.0,796.0,elki-project/elki,0958a958b4412dc5215e317522909b2d1aa5e6f1,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/0958a958b4412dc5215e317522909b2d1aa5e6f1
797,797.0,797.0,elki-project/elki,870472ca222389940bf559caa0e1f346cfdfc5ca,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/870472ca222389940bf559caa0e1f346cfdfc5ca
798,798.0,798.0,elki-project/elki,5e4e24bdbd6793e9ccc83c45ef0b4ab14d901780,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/5e4e24bdbd6793e9ccc83c45ef0b4ab14d901780
799,799.0,799.0,elki-project/elki,631d3b7facfb45a875bcd086ff4f00abd8970ba2,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/631d3b7facfb45a875bcd086ff4f00abd8970ba2
800,800.0,800.0,elki-project/elki,068a5dca495df1f1c2fa9fcf905e27b0a910b100,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/068a5dca495df1f1c2fa9fcf905e27b0a910b100
801,801.0,801.0,elki-project/elki,1ceff9351037f033a7e7d2ed0361402d19bb78c3,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/1ceff9351037f033a7e7d2ed0361402d19bb78c3
802,802.0,802.0,elki-project/elki,f138de5a0f87a2378ad2ccc002ae04f6208362bf,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/f138de5a0f87a2378ad2ccc002ae04f6208362bf
803,803.0,803.0,elki-project/elki,785818fe89389b7250730245580b8ce527c1e114,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/785818fe89389b7250730245580b8ce527c1e114
804,804.0,804.0,elki-project/elki,468d6dd3041d3e7a2407e3e478f45aa430876247,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/468d6dd3041d3e7a2407e3e478f45aa430876247
805,805.0,805.0,elki-project/elki,85880702366b60f781f16c86148b44a5a08fded8,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/85880702366b60f781f16c86148b44a5a08fded8
806,806.0,806.0,elki-project/elki,1ea15458ac4191e98bcd971f651f2b878c005d0f,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/1ea15458ac4191e98bcd971f651f2b878c005d0f
807,807.0,807.0,elki-project/elki,4ab2983793d0beb8d5487f557fda691380fe07b2,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/4ab2983793d0beb8d5487f557fda691380fe07b2
808,808.0,808.0,elki-project/elki,bfd6a02e6f6754dbf8e35bd99ddb8ab72fb42e3c,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/bfd6a02e6f6754dbf8e35bd99ddb8ab72fb42e3c
809,809.0,809.0,elki-project/elki,6bbe80138550c386bf959e3ac19716d5d7ade32e,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/6bbe80138550c386bf959e3ac19716d5d7ade32e
810,810.0,810.0,elki-project/elki,11b357c9707c78e42eb0c2d508ac17234b008fc6,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/11b357c9707c78e42eb0c2d508ac17234b008fc6
811,811.0,811.0,elki-project/elki,bb93a8ff1f6661a6ef5c2c7340a6e0030b27e03c,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/bb93a8ff1f6661a6ef5c2c7340a6e0030b27e03c
812,812.0,812.0,elki-project/elki,62e3814396df40f611b77c62e1c6d13502e23b33,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/62e3814396df40f611b77c62e1c6d13502e23b33
813,813.0,813.0,elki-project/elki,5bd1896e06b9dbde1cbddbea4b781f40ec81fdbc,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/5bd1896e06b9dbde1cbddbea4b781f40ec81fdbc
814,814.0,814.0,elki-project/elki,0bc7adf3e9b67a7e542431095347180cc146d706,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/0bc7adf3e9b67a7e542431095347180cc146d706
815,815.0,815.0,elki-project/elki,e7eb3ae37dbb7fe36e4e4aadd1d3e1f9f8d61dde,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/e7eb3ae37dbb7fe36e4e4aadd1d3e1f9f8d61dde
816,816.0,816.0,elki-project/elki,1b0839d32994751b9ac80322ac80bae36eae7a0a,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/1b0839d32994751b9ac80322ac80bae36eae7a0a
817,817.0,817.0,elki-project/elki,1c28052fdd9e36e7f68513e839df36056bba1492,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/1c28052fdd9e36e7f68513e839df36056bba1492
818,818.0,818.0,elki-project/elki,986f13e38b5e0dbbbe100bf8430dbe168b81512a,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/986f13e38b5e0dbbbe100bf8430dbe168b81512a
819,819.0,819.0,elki-project/elki,b4fd665d28a52c4fc6537c90e48c0fbb7d32e1be,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/b4fd665d28a52c4fc6537c90e48c0fbb7d32e1be
820,820.0,820.0,elki-project/elki,05e9ee4f2bddf440b4f793950db6a92ec51f0441,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/05e9ee4f2bddf440b4f793950db6a92ec51f0441
821,821.0,821.0,elki-project/elki,1310c974c71ed8e284a6f3d1b20131002e9af271,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/1310c974c71ed8e284a6f3d1b20131002e9af271
822,822.0,822.0,elki-project/elki,80d9efdbd95b5c53e68e21d589a6d10ba9214a7f,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/80d9efdbd95b5c53e68e21d589a6d10ba9214a7f
823,823.0,823.0,elki-project/elki,2c804a93b57b82ba2ab5e7f205fda332f5f5ded2,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/2c804a93b57b82ba2ab5e7f205fda332f5f5ded2
824,824.0,824.0,elki-project/elki,03272edf2bf8e300f48e1b6fb5ff4d8dd5e5c712,refactoring comments,https://github.com/elki-project/elki/commit/03272edf2bf8e300f48e1b6fb5ff4d8dd5e5c712
825,825.0,825.0,elki-project/elki,ef4c1098966e19641fba77ff869704f9155e0b9d,refactoring comments,https://github.com/elki-project/elki/commit/ef4c1098966e19641fba77ff869704f9155e0b9d
826,826.0,826.0,elki-project/elki,7f37b7aa98df18d17f922f9c6161769d64ab2571,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/7f37b7aa98df18d17f922f9c6161769d64ab2571
827,827.0,827.0,elki-project/elki,3b12dded3d528a85d16438862b9369aabddf1cd9,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/3b12dded3d528a85d16438862b9369aabddf1cd9
828,828.0,828.0,elki-project/elki,4f905ec582a9dae0788c1e9f0e7843c78ca5b292,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/4f905ec582a9dae0788c1e9f0e7843c78ca5b292
829,829.0,829.0,elki-project/elki,fc6601177147066e9caa820122f0ad447b6a0aee,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/fc6601177147066e9caa820122f0ad447b6a0aee
830,830.0,830.0,elki-project/elki,f77dd2ee51d5eef9f710e425111db37836998db3,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/f77dd2ee51d5eef9f710e425111db37836998db3
831,831.0,831.0,elki-project/elki,6ae647e3669d43b51747e5a245771a1d562da2d1,refactoring parameter handling / comments,https://github.com/elki-project/elki/commit/6ae647e3669d43b51747e5a245771a1d562da2d1
832,832.0,832.0,elki-project/elki,92b11aded6d44ef24bb7982412b0a5672bd1e375,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/92b11aded6d44ef24bb7982412b0a5672bd1e375
833,833.0,833.0,elki-project/elki,a8420b99b95265f7f427631111681dbd6a49bbf3,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/a8420b99b95265f7f427631111681dbd6a49bbf3
834,834.0,834.0,elki-project/elki,17d45dcea74a292c09f6195b91b6e271292279c2,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/17d45dcea74a292c09f6195b91b6e271292279c2
835,835.0,835.0,elki-project/elki,505a5b60fc84fa4427eeedf3948646dbd3b46c11,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/505a5b60fc84fa4427eeedf3948646dbd3b46c11
836,836.0,836.0,elki-project/elki,18c72ed8b2ff91157b01585d59d3f1b2f6381b6f,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/18c72ed8b2ff91157b01585d59d3f1b2f6381b6f
837,837.0,837.0,elki-project/elki,63ab9b6e26eb370a4262a92e6177a4363ce7f24e,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/63ab9b6e26eb370a4262a92e6177a4363ce7f24e
838,838.0,838.0,elki-project/elki,0e0a2892b40c6f5fe131ce59367ba1a579fc4188,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/0e0a2892b40c6f5fe131ce59367ba1a579fc4188
839,839.0,839.0,elki-project/elki,ed2e9870950b36e2a819ca64cdc8b2c3e3042f0d,refactoring comments,https://github.com/elki-project/elki/commit/ed2e9870950b36e2a819ca64cdc8b2c3e3042f0d
840,840.0,840.0,elki-project/elki,899a574045c5126f5731d54ee85775a63587f4e4,refactoring exception messages,https://github.com/elki-project/elki/commit/899a574045c5126f5731d54ee85775a63587f4e4
841,841.0,841.0,elki-project/elki,7fcaa7db6072495f40cc13f06303b78a9676d77b,refactoring comments,https://github.com/elki-project/elki/commit/7fcaa7db6072495f40cc13f06303b78a9676d77b
842,842.0,842.0,elki-project/elki,323f346e645764cd49f816290f2fe50f8bfedc20,refactoring toString(),https://github.com/elki-project/elki/commit/323f346e645764cd49f816290f2fe50f8bfedc20
843,843.0,843.0,elki-project/elki,520ce5476849cb47c51ab1f7b5f450214eb074c0,refactoring OptionID DESCRIPTION,https://github.com/elki-project/elki/commit/520ce5476849cb47c51ab1f7b5f450214eb074c0
844,844.0,844.0,elki-project/elki,3425300a2dd619680cc01ef22844d604e16d4647,refactoring description and comments,https://github.com/elki-project/elki/commit/3425300a2dd619680cc01ef22844d604e16d4647
845,845.0,845.0,elki-project/elki,87741c8fc07d5950388bdd4374ab5a64e29ca2ed,refactoring comments,https://github.com/elki-project/elki/commit/87741c8fc07d5950388bdd4374ab5a64e29ca2ed
846,846.0,846.0,elki-project/elki,1032673642274691b7f9b67babd7b949f9b0c5d4,refactoring Illegal argument exception when computing centroids!,https://github.com/elki-project/elki/commit/1032673642274691b7f9b67babd7b949f9b0c5d4
847,847.0,847.0,elki-project/elki,f71295509068f061af21d582d852935533027cd3,refactoring ProjectedDBSCAN in package clustering,https://github.com/elki-project/elki/commit/f71295509068f061af21d582d852935533027cd3
848,848.0,848.0,elki-project/elki,c09e3c4177eb1ed345704c34a46b9ac12bbe1b66,"package refactored: elki, algorithms with subpackages",https://github.com/elki-project/elki/commit/c09e3c4177eb1ed345704c34a46b9ac12bbe1b66
849,849.0,849.0,elki-project/elki,158ec6d71d741ff9e0cded0fbf76af4b207090c3,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/158ec6d71d741ff9e0cded0fbf76af4b207090c3
850,850.0,850.0,elki-project/elki,970f7eb9ff9c23e5dca1845ef8cec746af9fc098,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/970f7eb9ff9c23e5dca1845ef8cec746af9fc098
851,851.0,851.0,elki-project/elki,0486832d64ecbabb5cbcd15b85ac2bdd5bbf34fa,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/0486832d64ecbabb5cbcd15b85ac2bdd5bbf34fa
852,852.0,852.0,elki-project/elki,96f1985212580c79ed6f562d4a8ab3e5bce15d62,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/96f1985212580c79ed6f562d4a8ab3e5bce15d62
853,853.0,853.0,elki-project/elki,4c70fbda20aee5cf35c59dc90aa5c6cc7bc0f71a,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/4c70fbda20aee5cf35c59dc90aa5c6cc7bc0f71a
854,854.0,854.0,elki-project/elki,8190fdcd747f3cca5a7f06d1855f0ad14f18e3b9,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/8190fdcd747f3cca5a7f06d1855f0ad14f18e3b9
855,855.0,855.0,elki-project/elki,e227fc9402e1b5412b4304adece80c5cbc863c99,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/e227fc9402e1b5412b4304adece80c5cbc863c99
856,856.0,856.0,elki-project/elki,c934060c364409dba52c3e77b560a10966c9c67c,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/c934060c364409dba52c3e77b560a10966c9c67c
857,857.0,857.0,elki-project/elki,f3e3974d6253a0146d0c998deafc0cb84f83923e,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/f3e3974d6253a0146d0c998deafc0cb84f83923e
858,858.0,858.0,elki-project/elki,893328d209e7061daf7612c66908e501f16d9678,refactoring parameter handling and/or comments,https://github.com/elki-project/elki/commit/893328d209e7061daf7612c66908e501f16d9678
859,859.0,859.0,elki-project/elki,9be1057b44b293f1e453927456b157d103e8104d,refactoring parameter handling and comments,https://github.com/elki-project/elki/commit/9be1057b44b293f1e453927456b157d103e8104d
860,860.0,860.0,elki-project/elki,22131670bf277cfda59337613840a8f678cf5aa7,refactoring parameter handling and comments,https://github.com/elki-project/elki/commit/22131670bf277cfda59337613840a8f678cf5aa7
861,861.0,861.0,elki-project/elki,7fd27dff999ec29f3d8145ed652936568b9eedae,refactoring parameter handling and comments,https://github.com/elki-project/elki/commit/7fd27dff999ec29f3d8145ed652936568b9eedae
862,862.0,862.0,elki-project/elki,582b3dea9fc8a88671a3140f54a289d4b81672c0,refactoring  comments and/or parameter handling,https://github.com/elki-project/elki/commit/582b3dea9fc8a88671a3140f54a289d4b81672c0
863,863.0,863.0,elki-project/elki,de695f132ff81944360149be06f3945bf5fe90e5,refactoring  comments and/or parameter handling,https://github.com/elki-project/elki/commit/de695f132ff81944360149be06f3945bf5fe90e5
864,864.0,864.0,elki-project/elki,cf9b7011a4dd324ee45ea69c0e02451f2aade7af,refactoring  comments and/or parameter handling,https://github.com/elki-project/elki/commit/cf9b7011a4dd324ee45ea69c0e02451f2aade7af
865,865.0,865.0,elki-project/elki,42485e575ceeff891b99d22c0c593b855a4dc268,refactoring  comments and/or parameter handling,https://github.com/elki-project/elki/commit/42485e575ceeff891b99d22c0c593b855a4dc268
866,866.0,866.0,elki-project/elki,83e38bf40bc13ac27a2924a6b55dfece9373c6aa,refactoring  comments and/or parameter handling,https://github.com/elki-project/elki/commit/83e38bf40bc13ac27a2924a6b55dfece9373c6aa
867,867.0,867.0,elki-project/elki,d72c3b0e6679c6323f995028c0bb6616478b2cf0,refactoring  comments and/or parameter handling,https://github.com/elki-project/elki/commit/d72c3b0e6679c6323f995028c0bb6616478b2cf0
868,868.0,868.0,elki-project/elki,ffb48df3dee4fc14bdb22b592f32b916b390e19a,refactoring  comments and/or parameter handling,https://github.com/elki-project/elki/commit/ffb48df3dee4fc14bdb22b592f32b916b390e19a
869,869.0,869.0,elki-project/elki,363b7631080d008692cb717f0385ab7c21682f39,refactoring  comments and/or parameter handling,https://github.com/elki-project/elki/commit/363b7631080d008692cb717f0385ab7c21682f39
870,870.0,870.0,elki-project/elki,eca3e2ad27d62b193c8a379bb86d63d5adb0ea97,refactoring  comments and/or parameter handling,https://github.com/elki-project/elki/commit/eca3e2ad27d62b193c8a379bb86d63d5adb0ea97
871,871.0,871.0,elki-project/elki,012fecf7772aa42bf89dce7c999401d68045e4ad,refactoring  comments and/or parameter handling,https://github.com/elki-project/elki/commit/012fecf7772aa42bf89dce7c999401d68045e4ad
872,872.0,872.0,elki-project/elki,6a0e0d10a7fa7c0d224cec923de3d5d0d912a991,refactoring  comments and parameter handling,https://github.com/elki-project/elki/commit/6a0e0d10a7fa7c0d224cec923de3d5d0d912a991
873,873.0,873.0,elki-project/elki,e9611a98403677cf480f6aef82ee40052b365d4a,refactoring parameter handling and comments,https://github.com/elki-project/elki/commit/e9611a98403677cf480f6aef82ee40052b365d4a
874,874.0,874.0,elki-project/elki,a4d51080945e5f028eb82795bcdd7a56f091d5db,refactoring parameter handling and comments,https://github.com/elki-project/elki/commit/a4d51080945e5f028eb82795bcdd7a56f091d5db
875,875.0,875.0,elki-project/elki,2d4d1ae0d5a20b08e33f8822eecbb929cd27d3ef,refactoring parameter handling and comments,https://github.com/elki-project/elki/commit/2d4d1ae0d5a20b08e33f8822eecbb929cd27d3ef
876,876.0,876.0,elki-project/elki,ef02eda3e4ce60908703ba9956bb18916a5d5a79,refactoring parameter handling and comments,https://github.com/elki-project/elki/commit/ef02eda3e4ce60908703ba9956bb18916a5d5a79
877,877.0,877.0,elki-project/elki,4d84da884828f316b2b59fe14cb82b1199fd7890,refactoring  comments and parameter handling,https://github.com/elki-project/elki/commit/4d84da884828f316b2b59fe14cb82b1199fd7890
878,878.0,878.0,elki-project/elki,ff2375f388b4cfab7f4e650bbb9bfb9dec50f6a7,refactoring  comments and parameter handling,https://github.com/elki-project/elki/commit/ff2375f388b4cfab7f4e650bbb9bfb9dec50f6a7
879,879.0,879.0,elki-project/elki,45e4b0fa822f88d8a5937bbe0d0f13958a91ffbe,refactoring  comments and parameter handling,https://github.com/elki-project/elki/commit/45e4b0fa822f88d8a5937bbe0d0f13958a91ffbe
880,880.0,880.0,elki-project/elki,2e1bb4b609593c4626aa6e4d9f9fab3f28ff7b83,refactoring  comments and parameter handling,https://github.com/elki-project/elki/commit/2e1bb4b609593c4626aa6e4d9f9fab3f28ff7b83
881,881.0,881.0,elki-project/elki,d2904023944629193a5da54f0bab48565a466229,refactoring  comments and parameter handling,https://github.com/elki-project/elki/commit/d2904023944629193a5da54f0bab48565a466229
882,882.0,882.0,elki-project/elki,e793692f0546e5ec81fe08b0e29a82189ee5db7c,refactoring  comments and parameter handling,https://github.com/elki-project/elki/commit/e793692f0546e5ec81fe08b0e29a82189ee5db7c
883,883.0,883.0,elki-project/elki,9d69e89acbf716a797d7347038021a2bd99bc78b,refactoring parameter handling and comments,https://github.com/elki-project/elki/commit/9d69e89acbf716a797d7347038021a2bd99bc78b
884,884.0,884.0,elki-project/elki,c8b3c490e2e51ff689aaab8136e734d0c2cac2bb,refactoring parameter handling,https://github.com/elki-project/elki/commit/c8b3c490e2e51ff689aaab8136e734d0c2cac2bb
885,885.0,885.0,elki-project/elki,17b8f12c833ec04a476bb7234a0e4ebb1696cca8,refactoring  exception message,https://github.com/elki-project/elki/commit/17b8f12c833ec04a476bb7234a0e4ebb1696cca8
886,886.0,886.0,elki-project/elki,ec637088f633d795a69663f241d525a14bfb42f7,refactoring parameter handling,https://github.com/elki-project/elki/commit/ec637088f633d795a69663f241d525a14bfb42f7
887,887.0,887.0,elki-project/elki,f8718ea308da54bc811baf23cf902f96cd73b939,refactoring parameter handling,https://github.com/elki-project/elki/commit/f8718ea308da54bc811baf23cf902f96cd73b939
888,888.0,888.0,elki-project/elki,2b84994b06478e530ea780296769cff00592599d,refactoring parameter handling,https://github.com/elki-project/elki/commit/2b84994b06478e530ea780296769cff00592599d
889,889.0,889.0,elki-project/elki,bf79c2cf7ba31c8634d3f077d4e63b2b4c7ad5ed,refactoring  comments,https://github.com/elki-project/elki/commit/bf79c2cf7ba31c8634d3f077d4e63b2b4c7ad5ed
890,890.0,890.0,elki-project/elki,1b74a84aa4b3cc2c4386efed34168066ca1b53a4,refactoring  comments,https://github.com/elki-project/elki/commit/1b74a84aa4b3cc2c4386efed34168066ca1b53a4
891,891.0,891.0,elki-project/elki,2ea0f6acba4952edd7a939e24fad70ca7dde2c53,refactoring  comments,https://github.com/elki-project/elki/commit/2ea0f6acba4952edd7a939e24fad70ca7dde2c53
892,892.0,892.0,elki-project/elki,0a099a877e480e17cbf4e2de5ef18f7abbba47e6,refactoring  comments,https://github.com/elki-project/elki/commit/0a099a877e480e17cbf4e2de5ef18f7abbba47e6
893,893.0,893.0,elki-project/elki,28bec29195a10f8af2be7e5d5f18f4ba2249ab49,refactoring parameter comments,https://github.com/elki-project/elki/commit/28bec29195a10f8af2be7e5d5f18f4ba2249ab49
894,894.0,894.0,elki-project/elki,938ed01b5b438e6b10636959f9b8fbd34579c37e,refactoring parameter handling,https://github.com/elki-project/elki/commit/938ed01b5b438e6b10636959f9b8fbd34579c37e
895,895.0,895.0,elki-project/elki,045b98bdcbb29d16e06b0be73a8dee6ab9d7c819,refactoring comments,https://github.com/elki-project/elki/commit/045b98bdcbb29d16e06b0be73a8dee6ab9d7c819
896,896.0,896.0,elki-project/elki,dcd7c66f9f875bd95483e02fed19ed9b64c92909,refactoring parameter handling,https://github.com/elki-project/elki/commit/dcd7c66f9f875bd95483e02fed19ed9b64c92909
897,897.0,897.0,elki-project/elki,e5e81c2f5bd0f5c52ff5448914ee0cc2a3187afb,refactoring parameter handling,https://github.com/elki-project/elki/commit/e5e81c2f5bd0f5c52ff5448914ee0cc2a3187afb
898,898.0,898.0,elki-project/elki,9c6b4c79e386766c45a171ab585f9edfa7b27797,refactoring parameter handling,https://github.com/elki-project/elki/commit/9c6b4c79e386766c45a171ab585f9edfa7b27797
899,899.0,899.0,elki-project/elki,90a0cd2d7ec48000b47b5dab04e71f217f0ea694,refactoring parameter handling,https://github.com/elki-project/elki/commit/90a0cd2d7ec48000b47b5dab04e71f217f0ea694
900,900.0,900.0,elki-project/elki,3c3ded2c7667f03e4c502477733550322a99d00c,refactoring parameter handling,https://github.com/elki-project/elki/commit/3c3ded2c7667f03e4c502477733550322a99d00c
901,901.0,901.0,elki-project/elki,4f2cef452b263abcb288b48cc2778595c3c26a64,refactoring parameter handling,https://github.com/elki-project/elki/commit/4f2cef452b263abcb288b48cc2778595c3c26a64
902,902.0,902.0,elki-project/elki,2a1c3d29438f885aba8e47be6cc1a8102162dfae,refactoring parameter handling,https://github.com/elki-project/elki/commit/2a1c3d29438f885aba8e47be6cc1a8102162dfae
903,903.0,903.0,elki-project/elki,1b454eb62fbe2bad263da3bfa0f926f92f630a66,refactoring parameter handling,https://github.com/elki-project/elki/commit/1b454eb62fbe2bad263da3bfa0f926f92f630a66
904,904.0,904.0,elki-project/elki,894a9eda9af9938fd124e8c54738b90a7e072599,"System.out.println() and exception.printStackTrace() removed, refactoring comments",https://github.com/elki-project/elki/commit/894a9eda9af9938fd124e8c54738b90a7e072599
905,905.0,905.0,elki-project/elki,a5e341f7ff3601839bbafd674c0394104fab6ed0,"System.out.println() and exception.printStackTrace() removed, refactoring comments",https://github.com/elki-project/elki/commit/a5e341f7ff3601839bbafd674c0394104fab6ed0
906,906.0,906.0,elki-project/elki,89b2b81ed020d35a28976f67655a5a85ac3f7cfb,"System.out.println() and exception.printStackTrace() removed, refactoring comments",https://github.com/elki-project/elki/commit/89b2b81ed020d35a28976f67655a5a85ac3f7cfb
907,907.0,907.0,elki-project/elki,53f44d8f70d6f517577b86834280248e571fadf3,refactoring,https://github.com/elki-project/elki/commit/53f44d8f70d6f517577b86834280248e571fadf3
908,908.0,908.0,elki-project/elki,d94b04d5f3e798e79ed239857f59bc6b7f80f6ac,refactoring,https://github.com/elki-project/elki/commit/d94b04d5f3e798e79ed239857f59bc6b7f80f6ac
909,909.0,909.0,elki-project/elki,c4ec91c928591f10b8f96289a219b9ea67daa25e,refactoring parameter handling,https://github.com/elki-project/elki/commit/c4ec91c928591f10b8f96289a219b9ea67daa25e
910,910.0,910.0,elki-project/elki,8dce91dce31b0ddde1941785b07428915b226a87,refactoring parameter handling,https://github.com/elki-project/elki/commit/8dce91dce31b0ddde1941785b07428915b226a87
911,911.0,911.0,elki-project/elki,bc7ddfb7ece0d652021699013c1bce8c09088f3f,refactoring parameter handling,https://github.com/elki-project/elki/commit/bc7ddfb7ece0d652021699013c1bce8c09088f3f
912,912.0,912.0,elki-project/elki,1ab7ff6d977dc431292f30443fdcda5b7a86e8eb,refactoring parameter handling,https://github.com/elki-project/elki/commit/1ab7ff6d977dc431292f30443fdcda5b7a86e8eb
913,913.0,913.0,elki-project/elki,dcf8594761795c1dd2036968579321ba98c69d07,refactoring comments,https://github.com/elki-project/elki/commit/dcf8594761795c1dd2036968579321ba98c69d07
914,914.0,914.0,elki-project/elki,dac5f2ca291b4b1e6909fc769a01682eec34b9af,refactoring,https://github.com/elki-project/elki/commit/dac5f2ca291b4b1e6909fc769a01682eec34b9af
915,915.0,915.0,elki-project/elki,2f17ea3c0bb189692c333193579702303b1853af,refactoring getNumberValue(),https://github.com/elki-project/elki/commit/2f17ea3c0bb189692c333193579702303b1853af
916,916.0,916.0,elki-project/elki,49c6580e3991545d84acb1fb91be4282c4a676dd,refactoring comments,https://github.com/elki-project/elki/commit/49c6580e3991545d84acb1fb91be4282c4a676dd
917,917.0,917.0,elki-project/elki,1a6ea3fa366f5c6411970faf18e2814e55bf86ce,refactoring comments and some warnings,https://github.com/elki-project/elki/commit/1a6ea3fa366f5c6411970faf18e2814e55bf86ce
918,918.0,918.0,elki-project/elki,c1778e0b191a5be76efc64929d825e474dcd62d5,refactoring,https://github.com/elki-project/elki/commit/c1778e0b191a5be76efc64929d825e474dcd62d5
919,919.0,919.0,elki-project/elki,c4bf7bea5762e5d61c97248af0bdb93da427a71d,refactoring NumberConstraints,https://github.com/elki-project/elki/commit/c4bf7bea5762e5d61c97248af0bdb93da427a71d
920,920.0,920.0,elki-project/elki,9558d922ec3e82e54c82819127ce1efb955d6e74,refactoring,https://github.com/elki-project/elki/commit/9558d922ec3e82e54c82819127ce1efb955d6e74
921,921.0,921.0,elki-project/elki,10224cd01ff74cda37bc6450140c416ebbe6f1dc,refactoring NumberParameter,https://github.com/elki-project/elki/commit/10224cd01ff74cda37bc6450140c416ebbe6f1dc
922,922.0,922.0,elki-project/elki,06fa7360aa742a55def9a82e46f7f4a51e6d7869,refactoring,https://github.com/elki-project/elki/commit/06fa7360aa742a55def9a82e46f7f4a51e6d7869
923,923.0,923.0,elki-project/elki,fa9b4ec93afa60e734abbfea7df5c18e2c5344b9,refactoring,https://github.com/elki-project/elki/commit/fa9b4ec93afa60e734abbfea7df5c18e2c5344b9
924,924.0,924.0,elki-project/elki,1337e02ee014bb339788c189c52a73c290458349,refactoring,https://github.com/elki-project/elki/commit/1337e02ee014bb339788c189c52a73c290458349
925,925.0,925.0,elki-project/elki,d93028ec93412843f04573cc4aeac35b6969e22c,refactoring comments,https://github.com/elki-project/elki/commit/d93028ec93412843f04573cc4aeac35b6969e22c
926,926.0,926.0,elki-project/elki,83ab5db71d639c7114c5ad51e37d30758d73015d,refactoring Hough,https://github.com/elki-project/elki/commit/83ab5db71d639c7114c5ad51e37d30758d73015d
927,927.0,927.0,elki-project/elki,44786e13eae3142f4f30009f34a72889a8bb2138,refactoring Index package,https://github.com/elki-project/elki/commit/44786e13eae3142f4f30009f34a72889a8bb2138
928,928.0,928.0,elki-project/elki,244823d60854c81fb7b5c28408093ffb69a8d321,refactoring Index package,https://github.com/elki-project/elki/commit/244823d60854c81fb7b5c28408093ffb69a8d321
929,929.0,929.0,elki-project/elki,7ddd349ef9da21c1d060551c5083cc30870cd4fe,refactoring Index package,https://github.com/elki-project/elki/commit/7ddd349ef9da21c1d060551c5083cc30870cd4fe
930,930.0,930.0,elki-project/elki,3a6e74802eeee7f520296dccc0663686659f9ec9,refactoring Index package,https://github.com/elki-project/elki/commit/3a6e74802eeee7f520296dccc0663686659f9ec9
931,931.0,931.0,elki-project/elki,5dcf3441c7c2cb90fb66a316eda79c14d70c00d0,refactoring Index package,https://github.com/elki-project/elki/commit/5dcf3441c7c2cb90fb66a316eda79c14d70c00d0
932,932.0,932.0,elki-project/elki,37262418fd4abc541416c4649e56f3f730470f84,refactoring Index package,https://github.com/elki-project/elki/commit/37262418fd4abc541416c4649e56f3f730470f84
933,933.0,933.0,elki-project/elki,f3878649df248388fdbf3bf8af56b91a4098b60f,refactoring Index package,https://github.com/elki-project/elki/commit/f3878649df248388fdbf3bf8af56b91a4098b60f
934,934.0,934.0,elki-project/elki,59e15811977338666eb3ad13eeb99ca7cf346a4c,refactoring,https://github.com/elki-project/elki/commit/59e15811977338666eb3ad13eeb99ca7cf346a4c
935,935.0,935.0,elki-project/elki,f3f3d20c7ce536dd6651a037aed8de4c3e0f69cf,refactoring,https://github.com/elki-project/elki/commit/f3f3d20c7ce536dd6651a037aed8de4c3e0f69cf
936,936.0,936.0,elki-project/elki,c9be36c2fcb82af9a790705f4d6211541ce093d4,refactoring eric,https://github.com/elki-project/elki/commit/c9be36c2fcb82af9a790705f4d6211541ce093d4
937,937.0,937.0,elki-project/elki,33514eb4679454353cda1b00b09b9e260a9717c1,refactoring hough,https://github.com/elki-project/elki/commit/33514eb4679454353cda1b00b09b9e260a9717c1
938,938.0,938.0,elki-project/elki,03fed42c6114815ff0c7d45ae7796d27a67d6d1a,refactoring option handling,https://github.com/elki-project/elki/commit/03fed42c6114815ff0c7d45ae7796d27a67d6d1a
939,939.0,939.0,elki-project/elki,c28d1b87b18fad6a8539023b9649411a1c933db6,refactoring,https://github.com/elki-project/elki/commit/c28d1b87b18fad6a8539023b9649411a1c933db6
940,940.0,940.0,elki-project/elki,4470eb54e0ec9ae070fbb7ba5d6eab282e99a521,refactoring,https://github.com/elki-project/elki/commit/4470eb54e0ec9ae070fbb7ba5d6eab282e99a521
941,941.0,941.0,elki-project/elki,1a54073f10b64d86e1a40927ba8a19baae5b8f1e,refactoring for preprocessors,https://github.com/elki-project/elki/commit/1a54073f10b64d86e1a40927ba8a19baae5b8f1e
942,942.0,942.0,elki-project/elki,1c4d2a30ab080aaa4912109c9bba5c83ffa92505,refactored,https://github.com/elki-project/elki/commit/1c4d2a30ab080aaa4912109c9bba5c83ffa92505
943,943.0,943.0,elki-project/elki,b6d90acb7edeb3bc36de51815cdb8be1b88ea304,refactoring,https://github.com/elki-project/elki/commit/b6d90acb7edeb3bc36de51815cdb8be1b88ea304
944,944.0,944.0,elki-project/elki,099853587c4b15ae61efaca681f7ecce8cdbf2a8,refactoring,https://github.com/elki-project/elki/commit/099853587c4b15ae61efaca681f7ecce8cdbf2a8
945,945.0,945.0,elki-project/elki,d559e5b28a7583c27fcb5690523c11da061b5c0d,refactoring,https://github.com/elki-project/elki/commit/d559e5b28a7583c27fcb5690523c11da061b5c0d
946,946.0,946.0,elki-project/elki,f14f5867318bce39e3cffa127c21ffca960bace4,refactored,https://github.com/elki-project/elki/commit/f14f5867318bce39e3cffa127c21ffca960bace4
947,947.0,947.0,elki-project/elki,ec7a890c88118b1f1bdc2ab31c43d1d429bc86f4,refactoring,https://github.com/elki-project/elki/commit/ec7a890c88118b1f1bdc2ab31c43d1d429bc86f4
948,948.0,948.0,elki-project/elki,5155049e13816ee9f5594c8ef0cff1c759ea23d3,refactored,https://github.com/elki-project/elki/commit/5155049e13816ee9f5594c8ef0cff1c759ea23d3
949,949.0,949.0,elki-project/elki,d02adc4e4970137363331588ba2a54cd429466ca,refactoring ORCLUS / PROCLUS,https://github.com/elki-project/elki/commit/d02adc4e4970137363331588ba2a54cd429466ca
950,950.0,950.0,elki-project/elki,3eb8aa774a1f3f2b6b123447789532785245b7fb,refactoring ORCLUS / PROCLUS,https://github.com/elki-project/elki/commit/3eb8aa774a1f3f2b6b123447789532785245b7fb
951,951.0,951.0,elki-project/elki,57fa7c8163539b555547638e12549158bffbac40,refactoring hough,https://github.com/elki-project/elki/commit/57fa7c8163539b555547638e12549158bffbac40
952,952.0,952.0,elki-project/elki,5b9f355c39f300652ef27eb1c3828addbdc3bfba,refactoring hough,https://github.com/elki-project/elki/commit/5b9f355c39f300652ef27eb1c3828addbdc3bfba
953,953.0,953.0,elki-project/elki,4325154bc22d27b49cc3cbd31079d6188f3df33e,refactoring hough,https://github.com/elki-project/elki/commit/4325154bc22d27b49cc3cbd31079d6188f3df33e
954,954.0,954.0,elki-project/elki,42bd971524e4b7d146d6a514d0ef1f76b68e6024,refactoring hough,https://github.com/elki-project/elki/commit/42bd971524e4b7d146d6a514d0ef1f76b68e6024
955,955.0,955.0,elki-project/elki,6d1f796e03c76004a55426b0b46484efb1d67926,refactoring hough,https://github.com/elki-project/elki/commit/6d1f796e03c76004a55426b0b46484efb1d67926
956,956.0,956.0,elki-project/elki,33814653a7d060058853d592b64162c7eaf95128,refactoring hough algorithm,https://github.com/elki-project/elki/commit/33814653a7d060058853d592b64162c7eaf95128
957,957.0,957.0,elki-project/elki,a1ddcf29c1be87b0938f6be05d084c992443c53f,refactoring hough,https://github.com/elki-project/elki/commit/a1ddcf29c1be87b0938f6be05d084c992443c53f
958,958.0,958.0,elki-project/elki,11d55548c5f49e127773e352e84cc0d989ac497a,refactoring,https://github.com/elki-project/elki/commit/11d55548c5f49e127773e352e84cc0d989ac497a
959,959.0,959.0,elki-project/elki,d0cef3b06ed276ac88e4c65bc9bbb75e9d0d57d1,refactoring distance package,https://github.com/elki-project/elki/commit/d0cef3b06ed276ac88e4c65bc9bbb75e9d0d57d1
960,960.0,960.0,elki-project/elki,300b14948d91fb87f29c23770c4739b810c8de5e,refactoring preprocessor package,https://github.com/elki-project/elki/commit/300b14948d91fb87f29c23770c4739b810c8de5e
961,961.0,961.0,elki-project/elki,82aa7e8fb7638e190092cd85c09ff1d6a0561280,refactoring distance package,https://github.com/elki-project/elki/commit/82aa7e8fb7638e190092cd85c09ff1d6a0561280
962,962.0,962.0,elki-project/elki,030e6e3608c33fae549cc03743b7c11432f530dd,refactoring hough algorithm,https://github.com/elki-project/elki/commit/030e6e3608c33fae549cc03743b7c11432f530dd
963,963.0,963.0,elki-project/elki,e28a630543d63413f0dab8a873dce6c670d69233,refactoring distance package,https://github.com/elki-project/elki/commit/e28a630543d63413f0dab8a873dce6c670d69233
964,964.0,964.0,elki-project/elki,add79f5046d9b3cb84a0791b545144d39c8fb883,refactoring hough algorithm,https://github.com/elki-project/elki/commit/add79f5046d9b3cb84a0791b545144d39c8fb883
965,965.0,965.0,elki-project/elki,28b6a77d05850202895bd5b22081e9f751caf904,refactoring distance package,https://github.com/elki-project/elki/commit/28b6a77d05850202895bd5b22081e9f751caf904
966,966.0,966.0,elki-project/elki,b96b59a3b64483c6ee408980b7f50316f1d81a69,refactoring Hough,https://github.com/elki-project/elki/commit/b96b59a3b64483c6ee408980b7f50316f1d81a69
967,967.0,967.0,elki-project/elki,fc098a0daabc0320dd3f77c76a31cb49f8c9680a,changes while refactoring distance package,https://github.com/elki-project/elki/commit/fc098a0daabc0320dd3f77c76a31cb49f8c9680a
968,968.0,968.0,elki-project/elki,6dafcb189898b26b67cf4660a498071c414d1b5e,refactoring distance package,https://github.com/elki-project/elki/commit/6dafcb189898b26b67cf4660a498071c414d1b5e
969,969.0,969.0,elki-project/elki,82f910cac497b04b62c11bb7a2cc7393b61e0053,refactoring distance package,https://github.com/elki-project/elki/commit/82f910cac497b04b62c11bb7a2cc7393b61e0053
970,970.0,970.0,elki-project/elki,7399373e63c546fe9d933f0a99b2a23ef9d1331c,refactoring distance package,https://github.com/elki-project/elki/commit/7399373e63c546fe9d933f0a99b2a23ef9d1331c
971,971.0,971.0,elki-project/elki,a62f972a3ba54141d4bd74df909f49d10dba1dad,refactoring distance package,https://github.com/elki-project/elki/commit/a62f972a3ba54141d4bd74df909f49d10dba1dad
972,972.0,972.0,elki-project/elki,1ee8e64654cea35024149b657f32c42cc81e3994,refactoring,https://github.com/elki-project/elki/commit/1ee8e64654cea35024149b657f32c42cc81e3994
973,973.0,973.0,elki-project/elki,fd96a18622684d8bb52bed458f143a747cb8aa5f,refactoring,https://github.com/elki-project/elki/commit/fd96a18622684d8bb52bed458f143a747cb8aa5f
974,974.0,974.0,elki-project/elki,8a377084e037fadddb4c9e35f35559799e9ff440,refactoring,https://github.com/elki-project/elki/commit/8a377084e037fadddb4c9e35f35559799e9ff440
975,975.0,975.0,elki-project/elki,00e7495cdb54cd2629a4a22e7421954c8d509b1b,refactoring,https://github.com/elki-project/elki/commit/00e7495cdb54cd2629a4a22e7421954c8d509b1b
976,976.0,976.0,elki-project/elki,fffda80f578df44e990b3321a8db1ac4cd235cc6,refactoring,https://github.com/elki-project/elki/commit/fffda80f578df44e990b3321a8db1ac4cd235cc6
977,977.0,977.0,elki-project/elki,6ae8b3ccc9ea41ad3b6158360ec14ecb78e8055c,refactoring,https://github.com/elki-project/elki/commit/6ae8b3ccc9ea41ad3b6158360ec14ecb78e8055c
978,978.0,978.0,elki-project/elki,9d7702f1ce8e20bdea76a3e1919417abd6d047a6,refactoring,https://github.com/elki-project/elki/commit/9d7702f1ce8e20bdea76a3e1919417abd6d047a6
979,979.0,979.0,elki-project/elki,071090e9ce1a560a6bd70aa987a15e932712e960,refactoring,https://github.com/elki-project/elki/commit/071090e9ce1a560a6bd70aa987a15e932712e960
980,980.0,980.0,elki-project/elki,dc50aa056c32d5cfdc96f9e7e2df11e0e2cd8cbd,refactoring,https://github.com/elki-project/elki/commit/dc50aa056c32d5cfdc96f9e7e2df11e0e2cd8cbd
981,981.0,981.0,elki-project/elki,086623febfac5e67253057be912f8d6a00cb63f3,refactoring,https://github.com/elki-project/elki/commit/086623febfac5e67253057be912f8d6a00cb63f3
982,982.0,982.0,elki-project/elki,eab00ce3d14cd258527d0517f5dbfb563cfd4ced,refactoring database properties,https://github.com/elki-project/elki/commit/eab00ce3d14cd258527d0517f5dbfb563cfd4ced
983,983.0,983.0,elki-project/elki,3dc6039020f21823d370f93c359ac983650a23af,refactoring algorithm subclasses,https://github.com/elki-project/elki/commit/3dc6039020f21823d370f93c359ac983650a23af
984,984.0,984.0,elki-project/elki,b3a1eb3c26f5828c6962b98e130c272726ff4bef,refactoring Hough algorithm,https://github.com/elki-project/elki/commit/b3a1eb3c26f5828c6962b98e130c272726ff4bef
985,985.0,985.0,elki-project/elki,da1f82f244e1b9ac3db0455da258350090619d8e,refactoring,https://github.com/elki-project/elki/commit/da1f82f244e1b9ac3db0455da258350090619d8e
986,986.0,986.0,elki-project/elki,b7619750bbb0eca93e3f14725893d5b92693250b,refactoring,https://github.com/elki-project/elki/commit/b7619750bbb0eca93e3f14725893d5b92693250b
987,987.0,987.0,elki-project/elki,3dacdc1dc21997316ecaed6894b489853c10da67,refactoring,https://github.com/elki-project/elki/commit/3dacdc1dc21997316ecaed6894b489853c10da67
988,988.0,988.0,elki-project/elki,6dfa99a28012db6913009f238506b36658c000a8,refactoring,https://github.com/elki-project/elki/commit/6dfa99a28012db6913009f238506b36658c000a8
989,989.0,989.0,elki-project/elki,ce7ccebd2da199a17957e832c07d27c8fc4eb6f0,refactoring,https://github.com/elki-project/elki/commit/ce7ccebd2da199a17957e832c07d27c8fc4eb6f0
990,990.0,990.0,elki-project/elki,f8ec6735040053af2dd31a8f934795ff5f637d94,refactoring,https://github.com/elki-project/elki/commit/f8ec6735040053af2dd31a8f934795ff5f637d94
991,991.0,991.0,elki-project/elki,9954a58fcd6469414523692263d995d34e722cce,refactoring,https://github.com/elki-project/elki/commit/9954a58fcd6469414523692263d995d34e722cce
992,992.0,992.0,elki-project/elki,dd5907a651e9cda9857e57d21ebca4264ae9f36d,refactoring,https://github.com/elki-project/elki/commit/dd5907a651e9cda9857e57d21ebca4264ae9f36d
993,993.0,993.0,elki-project/elki,da8a3dab3947761692f049f918dfcb66c92eaa67,refactoring,https://github.com/elki-project/elki/commit/da8a3dab3947761692f049f918dfcb66c92eaa67
994,994.0,994.0,elki-project/elki,04012e4475aa250be81c85557239212a38c742cc,refactoring,https://github.com/elki-project/elki/commit/04012e4475aa250be81c85557239212a38c742cc
995,995.0,995.0,elki-project/elki,5d2fea6baa5e9ab2a7902dbb95dc0e0c955111e5,refactoring,https://github.com/elki-project/elki/commit/5d2fea6baa5e9ab2a7902dbb95dc0e0c955111e5
996,996.0,996.0,elki-project/elki,dc3579cd68b056fd365ffbccbae37757fc845241,refactoring,https://github.com/elki-project/elki/commit/dc3579cd68b056fd365ffbccbae37757fc845241
997,997.0,997.0,elki-project/elki,1013d32d93c67360226f28e51dcc1d70ea5dd4dd,refactoring LocalPCA,https://github.com/elki-project/elki/commit/1013d32d93c67360226f28e51dcc1d70ea5dd4dd
998,998.0,998.0,elki-project/elki,aec9f8683f0a4b3c6c891d1ee4e82ef52b012d45,refactored,https://github.com/elki-project/elki/commit/aec9f8683f0a4b3c6c891d1ee4e82ef52b012d45
999,999.0,999.0,elki-project/elki,5a5b3c9165a375053bb2a68788268549d499ae69,refactoring DiSH,https://github.com/elki-project/elki/commit/5a5b3c9165a375053bb2a68788268549d499ae69
1000,1000.0,1000.0,elki-project/elki,59d497c26505a42390df153abc56b454b968619a,refactoring DiSH,https://github.com/elki-project/elki/commit/59d497c26505a42390df153abc56b454b968619a
1001,1001.0,1001.0,elki-project/elki,c73cdd2045e41b7a4cfd1a876b13bb759040991a,refactoring DiSH and wrappers,https://github.com/elki-project/elki/commit/c73cdd2045e41b7a4cfd1a876b13bb759040991a
1002,1002.0,1002.0,elki-project/elki,b828641689203b3aae9f77c109c79d04e7132171,refactoring DiSH,https://github.com/elki-project/elki/commit/b828641689203b3aae9f77c109c79d04e7132171
1003,1003.0,1003.0,elki-project/elki,c0a148463403f05a8a998345270bb9c3782df4cc,refactoring DiSH,https://github.com/elki-project/elki/commit/c0a148463403f05a8a998345270bb9c3782df4cc
1004,1004.0,1004.0,elki-project/elki,ffb2d0c3325742187602bd06715b98368256173e,refactoring DiSH,https://github.com/elki-project/elki/commit/ffb2d0c3325742187602bd06715b98368256173e
1005,1005.0,1005.0,elki-project/elki,926326fa43afd59fb8e4314779094e44d6671a88,refactored,https://github.com/elki-project/elki/commit/926326fa43afd59fb8e4314779094e44d6671a88
1006,1006.0,1006.0,elki-project/elki,6fb68fd044c295e2630deaf63637547fed06cea7,refactoring preprocessors,https://github.com/elki-project/elki/commit/6fb68fd044c295e2630deaf63637547fed06cea7
1007,1007.0,1007.0,elki-project/elki,4af3ab069fed7255c65104858a5ebd6c85f2d4c2,refactoring correlation distances,https://github.com/elki-project/elki/commit/4af3ab069fed7255c65104858a5ebd6c85f2d4c2
1008,1008.0,1008.0,elki-project/elki,ea17128de08ab18d8948d3fbe31905321999f3cb,refactoring data generators,https://github.com/elki-project/elki/commit/ea17128de08ab18d8948d3fbe31905321999f3cb
1009,1009.0,1009.0,elki-project/elki,0bf206f5f288fd780f0121a4c92edefeaf223781,refactoring index package,https://github.com/elki-project/elki/commit/0bf206f5f288fd780f0121a4c92edefeaf223781
1010,1010.0,1010.0,elki-project/elki,9cb020ee9c2c7d92342d7a0a8aab9a3577e5373e,refactoring index package,https://github.com/elki-project/elki/commit/9cb020ee9c2c7d92342d7a0a8aab9a3577e5373e
1011,1011.0,1011.0,elki-project/elki,4cbf1e810bdc7b817a830d5acff52fafa3990c34,refactoring index package,https://github.com/elki-project/elki/commit/4cbf1e810bdc7b817a830d5acff52fafa3990c34
1012,1012.0,1012.0,elki-project/elki,ec234ca213f25323f0ea39f9b019bd008e792324,refactoring index package,https://github.com/elki-project/elki/commit/ec234ca213f25323f0ea39f9b019bd008e792324
1013,1013.0,1013.0,elki-project/elki,be4ac5d5c98f29ae0210bcf64fb2735818262f00,refactoring index package,https://github.com/elki-project/elki/commit/be4ac5d5c98f29ae0210bcf64fb2735818262f00
1014,1014.0,1014.0,elki-project/elki,89ba15505d5715efb662906ba73dc4ca84eb63a1,refactoring index package,https://github.com/elki-project/elki/commit/89ba15505d5715efb662906ba73dc4ca84eb63a1
1015,1015.0,1015.0,elki-project/elki,48cf106ae4e99dc5bef3d15ffcbebd1e7fcdcbc6,refactoring index package,https://github.com/elki-project/elki/commit/48cf106ae4e99dc5bef3d15ffcbebd1e7fcdcbc6
1016,1016.0,1016.0,elki-project/elki,d9a64dbc57bb267a3126bfda9be0693b7ba66e8c,refactoring index package,https://github.com/elki-project/elki/commit/d9a64dbc57bb267a3126bfda9be0693b7ba66e8c
1017,1017.0,1017.0,elki-project/elki,8d5907a6f1b6e58b463db4eb80028e6def68a426,refactoring index package,https://github.com/elki-project/elki/commit/8d5907a6f1b6e58b463db4eb80028e6def68a426
1018,1018.0,1018.0,elki-project/elki,803db9dcbcec1836e4d42dab2dcc3fc303106dab,refactoring index package,https://github.com/elki-project/elki/commit/803db9dcbcec1836e4d42dab2dcc3fc303106dab
1019,1019.0,1019.0,elki-project/elki,d9cb7fa4a1ded9161655f4041ab740492a5f2598,refactoring index package,https://github.com/elki-project/elki/commit/d9cb7fa4a1ded9161655f4041ab740492a5f2598
1020,1020.0,1020.0,elki-project/elki,4273f7cfe07d6e95080231722ab52fae02f00004,refactoring generator classes,https://github.com/elki-project/elki/commit/4273f7cfe07d6e95080231722ab52fae02f00004
1021,1021.0,1021.0,elki-project/elki,85614d4c84c4881d47865044a64fe1a58b3a3c33,refactoring CorrelationGenerator,https://github.com/elki-project/elki/commit/85614d4c84c4881d47865044a64fe1a58b3a3c33
1022,1022.0,1022.0,elki-project/elki,189e95a0e3dfb91e41314fbb01e8e619b439e882,refactoring Online LOF,https://github.com/elki-project/elki/commit/189e95a0e3dfb91e41314fbb01e8e619b439e882
1023,1023.0,1023.0,elki-project/elki,c18da3707ff0d166a86a980e9f22a9eacc4ba39f,refactoring Online LOF,https://github.com/elki-project/elki/commit/c18da3707ff0d166a86a980e9f22a9eacc4ba39f
1024,1024.0,1024.0,elki-project/elki,b42d120b8dd14c4839ad7b2e81077c12747cb6c0,refactoring Online LOF,https://github.com/elki-project/elki/commit/b42d120b8dd14c4839ad7b2e81077c12747cb6c0
1025,1025.0,1025.0,elki-project/elki,db6421af2a11b01915f4fa276b433d20683cf2c6,refactoring Online LOF,https://github.com/elki-project/elki/commit/db6421af2a11b01915f4fa276b433d20683cf2c6
1026,1026.0,1026.0,elki-project/elki,c18a9bdcf04d47af9183d3afe4d3f3b1fc2d564b,refactoring Online LOF,https://github.com/elki-project/elki/commit/c18a9bdcf04d47af9183d3afe4d3f3b1fc2d564b
1027,1027.0,1027.0,elki-project/elki,4a4067a3511296a9bd2fd4243dfa9598ee099a04,refactoring Online LOF,https://github.com/elki-project/elki/commit/4a4067a3511296a9bd2fd4243dfa9598ee099a04
1028,1028.0,1028.0,elki-project/elki,add11ebabccde5facfc5191576b8d5858b71de01,refactoring Online LOF,https://github.com/elki-project/elki/commit/add11ebabccde5facfc5191576b8d5858b71de01
1029,1029.0,1029.0,elki-project/elki,055a745a5679688dc9576ef7f51dd4aac88b9f00,refactoring Online LOF,https://github.com/elki-project/elki/commit/055a745a5679688dc9576ef7f51dd4aac88b9f00
1030,1030.0,1030.0,elki-project/elki,d65da4c994e0ad94cf5ed27b2fc9ee90ae78c1b8,refactoring Online LOF,https://github.com/elki-project/elki/commit/d65da4c994e0ad94cf5ed27b2fc9ee90ae78c1b8
1031,1031.0,1031.0,elki-project/elki,e23ffb2ae5c6b6af0f5e7a3d4a2aeab7fdb0b5e3,refactoring Online LOF,https://github.com/elki-project/elki/commit/e23ffb2ae5c6b6af0f5e7a3d4a2aeab7fdb0b5e3
1032,1032.0,1032.0,elki-project/elki,80d4912ac7d1ee0d5457477cf0de1070d62bf1cf,refactoring Online LOF,https://github.com/elki-project/elki/commit/80d4912ac7d1ee0d5457477cf0de1070d62bf1cf
1033,1033.0,1033.0,elki-project/elki,b198236c18ad553d4cf842cd16745e01d3ee1c00,refactored: is noe parameterizable,https://github.com/elki-project/elki/commit/b198236c18ad553d4cf842cd16745e01d3ee1c00
1034,1034.0,1034.0,elki-project/elki,fa2d9018bd246788aa45b222f3cf6fa31582a0d0,refactoring LOF algorithm,https://github.com/elki-project/elki/commit/fa2d9018bd246788aa45b222f3cf6fa31582a0d0
1035,1035.0,1035.0,elki-project/elki,368603adf55ff3e1d5d717b247b1dc93a8437e47,refactoring restriction strings,https://github.com/elki-project/elki/commit/368603adf55ff3e1d5d717b247b1dc93a8437e47
1036,1036.0,1036.0,elki-project/elki,651c38aaaa39fe3e8bef83b6d322c78b17d0ba6e,refactoring restriction strings,https://github.com/elki-project/elki/commit/651c38aaaa39fe3e8bef83b6d322c78b17d0ba6e
1037,1037.0,1037.0,elki-project/elki,a9348fac9c44b20595ed70a6d5f07da87eb1fb0a,refactoring eigenpair filter,https://github.com/elki-project/elki/commit/a9348fac9c44b20595ed70a6d5f07da87eb1fb0a
1038,1038.0,1038.0,elki-project/elki,601dad32cca41746c014d8628416a4996a0f30e4,refactoring HiSC,https://github.com/elki-project/elki/commit/601dad32cca41746c014d8628416a4996a0f30e4
1039,1039.0,1039.0,elki-project/elki,f81b712372504dcf460f06b921409146bc3a0b18,refactoring PALME,https://github.com/elki-project/elki/commit/f81b712372504dcf460f06b921409146bc3a0b18
1040,1040.0,1040.0,elki-project/elki,b85f3d2c1b8dbd56f9b14d9b3067d22b69e8d6ad,refactoring,https://github.com/elki-project/elki/commit/b85f3d2c1b8dbd56f9b14d9b3067d22b69e8d6ad
1041,1041.0,1041.0,elki-project/elki,dd0534cc1455c811580fbebeba8b6e9bf8b30089,refactoring index databases,https://github.com/elki-project/elki/commit/dd0534cc1455c811580fbebeba8b6e9bf8b30089
1042,1042.0,1042.0,elki-project/elki,ddcdaf5a9d76aa76741c25d41a0a9ab20801a0c3,refactoring index databases,https://github.com/elki-project/elki/commit/ddcdaf5a9d76aa76741c25d41a0a9ab20801a0c3
1043,1043.0,1043.0,elki-project/elki,b32659734cdd8d3dfbd519fe766fe4de90aa35af,refactoring LinearEquationSystem,https://github.com/elki-project/elki/commit/b32659734cdd8d3dfbd519fe766fe4de90aa35af
1044,1044.0,1044.0,elki-project/elki,379cd32b5b48d7b1fa6a5068f6caa630198cfc59,refactoring wrapper classes,https://github.com/elki-project/elki/commit/379cd32b5b48d7b1fa6a5068f6caa630198cfc59
1045,1045.0,1045.0,elki-project/elki,5a8669dd663ec12bd2b2db82a456bfcb36727200,refactoring wrapper classes,https://github.com/elki-project/elki/commit/5a8669dd663ec12bd2b2db82a456bfcb36727200
1046,1046.0,1046.0,elki-project/elki,1318a79164a76cfbd00d775a44c7fdf21a3dadd9,refactoring wrapper classes,https://github.com/elki-project/elki/commit/1318a79164a76cfbd00d775a44c7fdf21a3dadd9
1047,1047.0,1047.0,elki-project/elki,92270b280f3f65a4aa086c82680a510c49b1b631,refactoring wrapper classes,https://github.com/elki-project/elki/commit/92270b280f3f65a4aa086c82680a510c49b1b631
1048,1048.0,1048.0,elki-project/elki,57beacf48debab23b3229a61cd3edee6a02e1936,refactoring wrapper classes,https://github.com/elki-project/elki/commit/57beacf48debab23b3229a61cd3edee6a02e1936
1049,1049.0,1049.0,elki-project/elki,33cd177e99174a4b75e725f34c390819dd3bb76b,refactoring wrapper classes,https://github.com/elki-project/elki/commit/33cd177e99174a4b75e725f34c390819dd3bb76b
1050,1050.0,1050.0,elki-project/elki,942b97b48a66aadfd512e3dfd01f2c9ab70996f7,"new classes for linear equations, need refactoring",https://github.com/elki-project/elki/commit/942b97b48a66aadfd512e3dfd01f2c9ab70996f7
1051,1051.0,1051.0,elki-project/elki,be6abd6644b62fd86cc70966cbf2cab75ac67608,refactoring wrapper classes,https://github.com/elki-project/elki/commit/be6abd6644b62fd86cc70966cbf2cab75ac67608
1052,1052.0,1052.0,elki-project/elki,ec3dbc7b2fa3c6f50851ba87fad451e4820791ec,refactoring PALME,https://github.com/elki-project/elki/commit/ec3dbc7b2fa3c6f50851ba87fad451e4820791ec
1053,1053.0,1053.0,elki-project/elki,329d22f83bb7893878bbe7ab8cd9a34c068fa7a2,refactoring of real number vectors,https://github.com/elki-project/elki/commit/329d22f83bb7893878bbe7ab8cd9a34c068fa7a2
1054,1054.0,1054.0,elki-project/elki,0db7d35022cbfaf317aeb3556b7040f6d89d3790,renamed due to refactoring real number vectors,https://github.com/elki-project/elki/commit/0db7d35022cbfaf317aeb3556b7040f6d89d3790
1055,1055.0,1055.0,elki-project/elki,49c6b0d785062d14fc95b724247a7a6a8e81af60,refactoring feature extraction - done by PETE ;-),https://github.com/elki-project/elki/commit/49c6b0d785062d14fc95b724247a7a6a8e81af60
1056,1056.0,1056.0,elki-project/elki,6e3ee2badce83a60b94ae572666e4303023b7ef7,introduced result.clustering - refactoring,https://github.com/elki-project/elki/commit/6e3ee2badce83a60b94ae572666e4303023b7ef7
1057,1057.0,1057.0,elki-project/elki,a0b1d7d9466432acd9b7ece92d518570bbd7fd57,"refactoring method compare(Object, Object)",https://github.com/elki-project/elki/commit/a0b1d7d9466432acd9b7ece92d518570bbd7fd57
1058,1058.0,1058.0,elki-project/elki,f9726ae897de2c75fb8bb014d72ec51e3ae13e81,refactoring MROptics,https://github.com/elki-project/elki/commit/f9726ae897de2c75fb8bb014d72ec51e3ae13e81
1059,1059.0,1059.0,elki-project/elki,d6d121c77603b2415f9f9d171fb60eac320e6db7,refactoring multi-represented objects,https://github.com/elki-project/elki/commit/d6d121c77603b2415f9f9d171fb60eac320e6db7
1060,1060.0,1060.0,elki-project/elki,c33aa96cc35d993a6631270d4c04e7f72195452f,refactoring feature extraction,https://github.com/elki-project/elki/commit/c33aa96cc35d993a6631270d4c04e7f72195452f
1061,1061.0,1061.0,elki-project/elki,2edbfd7265ac8b693b3ca7f49d85667e1f1aee03,refactoring multi-represented objects,https://github.com/elki-project/elki/commit/2edbfd7265ac8b693b3ca7f49d85667e1f1aee03
1062,1062.0,1062.0,elki-project/elki,bdd41e48603ef5b477536ad40bb6f4355a95d05c,refactoring feature extraction,https://github.com/elki-project/elki/commit/bdd41e48603ef5b477536ad40bb6f4355a95d05c
1063,1063.0,1063.0,elki-project/elki,bc41be6d343db06dc198bb5c0079aca84e2e5f92,refactoring multi-represented objects,https://github.com/elki-project/elki/commit/bc41be6d343db06dc198bb5c0079aca84e2e5f92
1064,1064.0,1064.0,elki-project/elki,6aac000061f601f6a26a3593535c2082ff1524a6,refactoring MTree Split Strategy,https://github.com/elki-project/elki/commit/6aac000061f601f6a26a3593535c2082ff1524a6
1065,1065.0,1065.0,elki-project/elki,f9e77a492326d8fa80f5db470b4b508842d92af1,refactoring feature extraction,https://github.com/elki-project/elki/commit/f9e77a492326d8fa80f5db470b4b508842d92af1
1066,1066.0,1066.0,elki-project/elki,92be5f0bbf33b34f3a8291e62d5df4ef27915975,refactoring Parser and DBConnection,https://github.com/elki-project/elki/commit/92be5f0bbf33b34f3a8291e62d5df4ef27915975
1067,1067.0,1067.0,elki-project/elki,d11281c331df7ae115395102c1f8ba2d647a53b9,refactoring Parser and DBConnection,https://github.com/elki-project/elki/commit/d11281c331df7ae115395102c1f8ba2d647a53b9
1068,1068.0,1068.0,elki-project/elki,7576e77f39abb67ab2115aaeb5cf10bb89c09f5d,refactoring Parser and DBConnection,https://github.com/elki-project/elki/commit/7576e77f39abb67ab2115aaeb5cf10bb89c09f5d
1069,1069.0,1069.0,elki-project/elki,6de7a6c8836450a1ed744177a174f20ebe591e07,refactoring Combination Tree,https://github.com/elki-project/elki/commit/6de7a6c8836450a1ed744177a174f20ebe591e07
1070,1070.0,1070.0,elki-project/elki,fefdc3905f323b7405b259065288dbfb21e738df,refactoring Heap,https://github.com/elki-project/elki/commit/fefdc3905f323b7405b259065288dbfb21e738df
1071,1071.0,1071.0,elki-project/elki,cd4dadaab03a17d2d43d040c05f5682701e71a27,refactoring Heap,https://github.com/elki-project/elki/commit/cd4dadaab03a17d2d43d040c05f5682701e71a27
1072,1072.0,1072.0,elki-project/elki,93cb6c5855a4c864ace5b9f4b129eedbd5f056e3,refactoring feature extraction,https://github.com/elki-project/elki/commit/93cb6c5855a4c864ace5b9f4b129eedbd5f056e3
1073,1073.0,1073.0,elki-project/elki,5c3dcd35050e7fac820977adeceb6c49454ccdc6,refactoring feature extraction for images,https://github.com/elki-project/elki/commit/5c3dcd35050e7fac820977adeceb6c49454ccdc6
1074,1074.0,1074.0,elki-project/elki,a97c249398df8302ca06185265404fbfd6522c04,refactoring Heap,https://github.com/elki-project/elki/commit/a97c249398df8302ca06185265404fbfd6522c04
1075,1075.0,1075.0,elki-project/elki,835d9d7ec0dc7009513e0d8b0d42fcea0bbfa862,refactoring Heap,https://github.com/elki-project/elki/commit/835d9d7ec0dc7009513e0d8b0d42fcea0bbfa862
1076,1076.0,1076.0,elki-project/elki,e5970f77212da50782b8d32c0d08b5ab213d26a2,refactoring Heap,https://github.com/elki-project/elki/commit/e5970f77212da50782b8d32c0d08b5ab213d26a2
1077,1077.0,1077.0,elki-project/elki,8267b94081dbe9e6e5cfb15838fe8316512df5ee,refactoring Heap,https://github.com/elki-project/elki/commit/8267b94081dbe9e6e5cfb15838fe8316512df5ee
1078,1078.0,1078.0,elki-project/elki,558996f7a736f1b206a8c5beb69e51f13974f0cd,refactoring Heap,https://github.com/elki-project/elki/commit/558996f7a736f1b206a8c5beb69e51f13974f0cd
1079,1079.0,1079.0,elki-project/elki,f41f5215a1370fa1254f0f6d57c88f9a11f1aac4,refactoring Heap,https://github.com/elki-project/elki/commit/f41f5215a1370fa1254f0f6d57c88f9a11f1aac4
1080,1080.0,1080.0,elki-project/elki,d15e490db760ef011b4a340352c60c9d170fb197,refactoring MTree,https://github.com/elki-project/elki/commit/d15e490db760ef011b4a340352c60c9d170fb197
1081,1081.0,1081.0,elki-project/elki,f9e9bf48c3b7aeb0a22dca5274d61065bd22a52b,refactoring MTree,https://github.com/elki-project/elki/commit/f9e9bf48c3b7aeb0a22dca5274d61065bd22a52b
1082,1082.0,1082.0,elki-project/elki,7903ce89691a81ef9c2f0dbd72d934a835c47566,refactoring MTree,https://github.com/elki-project/elki/commit/7903ce89691a81ef9c2f0dbd72d934a835c47566
1083,1083.0,1083.0,elki-project/elki,7500ff7630203350ed8f9d688c1772113afa6569,refactoring MTree,https://github.com/elki-project/elki/commit/7500ff7630203350ed8f9d688c1772113afa6569
1084,1084.0,1084.0,elki-project/elki,7d17e4d5db7f79c32820104bdba153d845d32e11,refactoring MTree,https://github.com/elki-project/elki/commit/7d17e4d5db7f79c32820104bdba153d845d32e11
1085,1085.0,1085.0,elki-project/elki,4ef4f64878caff14e9b84ee866d840f99b792cbe,refactoring MTree,https://github.com/elki-project/elki/commit/4ef4f64878caff14e9b84ee866d840f99b792cbe
1086,1086.0,1086.0,elki-project/elki,e1459c67f52daac126691db5ad3b4b50c07022f4,refactoring MTree,https://github.com/elki-project/elki/commit/e1459c67f52daac126691db5ad3b4b50c07022f4
1087,1087.0,1087.0,elki-project/elki,d739b63de5bdcb3e53c40dbf5bb631f490da625c,refactoring MTree,https://github.com/elki-project/elki/commit/d739b63de5bdcb3e53c40dbf5bb631f490da625c
1088,1088.0,1088.0,elki-project/elki,c53281ac1a5f52601a67c7a4ca7915825f46ab4d,refactoring MTree,https://github.com/elki-project/elki/commit/c53281ac1a5f52601a67c7a4ca7915825f46ab4d
1089,1089.0,1089.0,elki-project/elki,82155c642c32175a59eadabff8c55667e07f5aaf,refactoring Cache,https://github.com/elki-project/elki/commit/82155c642c32175a59eadabff8c55667e07f5aaf
1090,1090.0,1090.0,elki-project/elki,ddd78e17b0b342d9b3db69b9172576e4e7ebf38d,refactoring MTree,https://github.com/elki-project/elki/commit/ddd78e17b0b342d9b3db69b9172576e4e7ebf38d
1091,1091.0,1091.0,elki-project/elki,6ca1ab48d0fcf6d5bca2e00bc0d1581ea45291e6,refactoring MTree,https://github.com/elki-project/elki/commit/6ca1ab48d0fcf6d5bca2e00bc0d1581ea45291e6
1092,1092.0,1092.0,elki-project/elki,3f8df64d6ea864bcb3ad8a28aff06706ead37090,refactoring MTree,https://github.com/elki-project/elki/commit/3f8df64d6ea864bcb3ad8a28aff06706ead37090
1093,1093.0,1093.0,elki-project/elki,ff5ed689e86f5c57bb7c10413da059971d0d450b,refactoring MTree,https://github.com/elki-project/elki/commit/ff5ed689e86f5c57bb7c10413da059971d0d450b
1094,1094.0,1094.0,elki-project/elki,88a36531657ae685b3308691f0f30368c26eec42,refactoring M-Tree,https://github.com/elki-project/elki/commit/88a36531657ae685b3308691f0f30368c26eec42
1095,1095.0,1095.0,elki-project/elki,4e1c2a5e9d332092ae6549853fe267afee2c7db4,refactoring MTree,https://github.com/elki-project/elki/commit/4e1c2a5e9d332092ae6549853fe267afee2c7db4
1096,1096.0,1096.0,elki-project/elki,1bda102770ac148fb26e6a55aab5132e34e00076,refactoring M-Tree,https://github.com/elki-project/elki/commit/1bda102770ac148fb26e6a55aab5132e34e00076
1097,1097.0,1097.0,elki-project/elki,c6f4455b511c66ab74e087edeb195ed9ba2c3dfc,refactoring MdKNN-Tree,https://github.com/elki-project/elki/commit/c6f4455b511c66ab74e087edeb195ed9ba2c3dfc
1098,1098.0,1098.0,elki-project/elki,1ef798c5e32902a3fe97cc073f725dea04c0f31e,refactoring MdKNN-Tree,https://github.com/elki-project/elki/commit/1ef798c5e32902a3fe97cc073f725dea04c0f31e
1099,1099.0,1099.0,elki-project/elki,9bb788017802e17aeab978b6673815ef995fb540,refactoring MTree,https://github.com/elki-project/elki/commit/9bb788017802e17aeab978b6673815ef995fb540
1100,1100.0,1100.0,elki-project/elki,0f0aab54b3b10dad4eb90c488356a0cb968910f1,refactoring MTree,https://github.com/elki-project/elki/commit/0f0aab54b3b10dad4eb90c488356a0cb968910f1
1101,1101.0,1101.0,elki-project/elki,f50021d0a13caa90b357246cf67066a740037476,refactoring MTree,https://github.com/elki-project/elki/commit/f50021d0a13caa90b357246cf67066a740037476
1102,1102.0,1102.0,elki-project/elki,f2c9370b5ff7dc9a4448a2f89a5446ba5d8f1ee3,refactoring MTree,https://github.com/elki-project/elki/commit/f2c9370b5ff7dc9a4448a2f89a5446ba5d8f1ee3
1103,1103.0,1103.0,elki-project/elki,c9202bc45ab416640379348030148fbd800013b4,refactoring MTree,https://github.com/elki-project/elki/commit/c9202bc45ab416640379348030148fbd800013b4
1104,1104.0,1104.0,elki-project/elki,10b0652386bbb43fe21db7ef7ab35fe0681f0bd4,refactoring MTree,https://github.com/elki-project/elki/commit/10b0652386bbb43fe21db7ef7ab35fe0681f0bd4
1105,1105.0,1105.0,elki-project/elki,11561dfef312a888d9f57f960c46f1854f7527f7,refactoring MTree,https://github.com/elki-project/elki/commit/11561dfef312a888d9f57f960c46f1854f7527f7
1106,1106.0,1106.0,elki-project/elki,0e009e6685702a9119950ba1e125034379e78e1f,refactoring MTree,https://github.com/elki-project/elki/commit/0e009e6685702a9119950ba1e125034379e78e1f
1107,1107.0,1107.0,elki-project/elki,85c67db8dc90814065708013c248ef658625e958,refactoring MTree,https://github.com/elki-project/elki/commit/85c67db8dc90814065708013c248ef658625e958
1108,1108.0,1108.0,elki-project/elki,a5ec885563fbfcbd1ca01b9acd160a8bbf423e31,refactoring MTree,https://github.com/elki-project/elki/commit/a5ec885563fbfcbd1ca01b9acd160a8bbf423e31
1109,1109.0,1109.0,elki-project/elki,1ed9732db62b1a6dc3f59c0af32c5c46acd2f464,refactoring package index,https://github.com/elki-project/elki/commit/1ed9732db62b1a6dc3f59c0af32c5c46acd2f464
1110,1110.0,1110.0,elki-project/elki,9cafd54741d01a97d315c9beeefc31ad58f72131,refactoring DistanceFunction,https://github.com/elki-project/elki/commit/9cafd54741d01a97d315c9beeefc31ad58f72131
1111,1111.0,1111.0,elki-project/elki,06f5235d55b0b7760d3518c91d8e89ab81e04c22,refactoring DistanceFunction,https://github.com/elki-project/elki/commit/06f5235d55b0b7760d3518c91d8e89ab81e04c22
1112,1112.0,1112.0,elki-project/elki,59d82f2ab7eb3e01634adc2f94e1e47d535642d2,refactoring DistanceFunction,https://github.com/elki-project/elki/commit/59d82f2ab7eb3e01634adc2f94e1e47d535642d2
1113,1113.0,1113.0,elki-project/elki,26a2aabd289bb95d99c70d62c5b1de25d9cdd01c,refactoring RTree,https://github.com/elki-project/elki/commit/26a2aabd289bb95d99c70d62c5b1de25d9cdd01c
1114,1114.0,1114.0,elki-project/elki,c99d7f61b887f14e938a58a16ba7e9831012e241,refactoring RTree,https://github.com/elki-project/elki/commit/c99d7f61b887f14e938a58a16ba7e9831012e241
1115,1115.0,1115.0,elki-project/elki,c6d5f79fd53afbbf4e7f651dc1a591fed149066b,refactoring,https://github.com/elki-project/elki/commit/c6d5f79fd53afbbf4e7f651dc1a591fed149066b
1116,1116.0,1116.0,elki-project/elki,0534d366cc23f74adc2b65f1045fae6b2e941b27,refactoring,https://github.com/elki-project/elki/commit/0534d366cc23f74adc2b65f1045fae6b2e941b27
1117,1117.0,1117.0,elki-project/elki,df02856ce3507ba13b3fd15cd8744e87fb62a299,refactoring,https://github.com/elki-project/elki/commit/df02856ce3507ba13b3fd15cd8744e87fb62a299
1118,1118.0,1292.0,kermitt2/grobid,48894789d33d3b5f3c25be0a3bcbdcd1cd1caa3b,refactoring,https://github.com/kermitt2/grobid/commit/48894789d33d3b5f3c25be0a3bcbdcd1cd1caa3b
1119,1119.0,1293.0,kermitt2/grobid,164fab260b8d2ea0b75f388b4b10dd48868d68cd,"- fixing reference tokens (they were sharing the same List object)
- fixing running crossref client
- refactoring of the main page area detection
- a bit more heuristics to detect figures


Former-commit-id: 38cb0627f6bee3011bffac01a0be1f342fb7641d",https://github.com/kermitt2/grobid/commit/164fab260b8d2ea0b75f388b4b10dd48868d68cd
1120,1120.0,1294.0,kermitt2/grobid,1a909ebc1a3e2356ad0207a1b5ae380084ed2d55,"refactoring to improve the efficiency when metrics are computed


Former-commit-id: 99d3417956a222c07bcdd2ab8da7a1d0d49b8297",https://github.com/kermitt2/grobid/commit/1a909ebc1a3e2356ad0207a1b5ae380084ed2d55
1121,1121.0,1295.0,kermitt2/grobid,87b25f6d63bbeaebbcfd91827d0b7d982bbb3edd,"Review standard model evaluation at field level, refactorize and add tests


Former-commit-id: f28b5ce41a8fd1ddd831f9718108815cae4d0180",https://github.com/kermitt2/grobid/commit/87b25f6d63bbeaebbcfd91827d0b7d982bbb3edd
1122,1122.0,1296.0,kermitt2/grobid,7a3133c42e4ef75b693e84b2193a98d919863c95,"Merge pull request #219 from aoboturov/fix/cleanup

Refactored to extract unicode normalization into a normaliseTextAndRe…

Former-commit-id: b1b1cd690c0a079db642fc5b04c62ce526b9a315",https://github.com/kermitt2/grobid/commit/7a3133c42e4ef75b693e84b2193a98d919863c95
1123,1123.0,1297.0,kermitt2/grobid,e21c003da5cdc256741a2d3a06874ec2e85f6c81,"Refactored to extract unicode normalization into a normaliseTextAndRemoveSpaces method.


Former-commit-id: e1ba59b9024a1d9e57f1b8dbac68ecfe02e11d8f",https://github.com/kermitt2/grobid/commit/e21c003da5cdc256741a2d3a06874ec2e85f6c81
1124,1124.0,1298.0,kermitt2/grobid,fce992c52f7e8a752ef5d5135e094dd65c72f20b,"refactoring grobid finder
switching to java 8


Former-commit-id: b515f5f2b2041d6c386fa551ccf25a7b733ed003",https://github.com/kermitt2/grobid/commit/fce992c52f7e8a752ef5d5135e094dd65c72f20b
1125,1125.0,1299.0,kermitt2/grobid,bbe1fbfef8313dc9fc6143f090df4263c67aaf07,"Refactor TaggingLabels to make it extensible, removed Enum :) - issue #133


Former-commit-id: e597dfd009a64ed0df810f68e09db77cc8dd72dd",https://github.com/kermitt2/grobid/commit/bbe1fbfef8313dc9fc6143f090df4263c67aaf07
1126,1126.0,1300.0,kermitt2/grobid,70fdd40921b658a0139f338e59491424af8e2dbb,"Refactor TaggingLabels to make it extensible, removed Enum :) - issue #133


Former-commit-id: c920ae0a71600d7a55153562877ddbec1e88e803",https://github.com/kermitt2/grobid/commit/70fdd40921b658a0139f338e59491424af8e2dbb
1127,1127.0,1301.0,kermitt2/grobid,0498b3d1f4130e48ce3cf847d24372b39437ca6e,"Refactor TaggingLabels in order to be used by external modules, without having to change it. Issue #133


Former-commit-id: fa9f683b824a64b10b89a52efbcfeeb0e9d5f78e",https://github.com/kermitt2/grobid/commit/0498b3d1f4130e48ce3cf847d24372b39437ca6e
1128,1128.0,1302.0,kermitt2/grobid,70704890f3068217062f76be7ff39dd501ed23d6,"Merge pull request #114 from kermitt2/GrobidModelRefactor

Hop, refactor GrobidModels to allow inheritance using mixin

Former-commit-id: f99ede2556b46fe481019cfb4bf1d0d23ba70301",https://github.com/kermitt2/grobid/commit/70704890f3068217062f76be7ff39dd501ed23d6
1129,1129.0,1303.0,kermitt2/grobid,a26689e412435a46dbd8ce4e415704a8d2a01f09,"Refactor GrobidModel to allow dynamic inheritance


Former-commit-id: b20351c714113b6ecc74bb97c70cb0748041f187",https://github.com/kermitt2/grobid/commit/a26689e412435a46dbd8ce4e415704a8d2a01f09
1130,1130.0,1304.0,kermitt2/grobid,13060391b95277350331ca4c580fd08eace37ed6,"Refactor segmentation model, separated the feature extraction from the main method block, added new unit tests.


Former-commit-id: 434da98d4ba5f10c8da59685053d71866901111f",https://github.com/kermitt2/grobid/commit/13060391b95277350331ca4c580fd08eace37ed6
1131,1131.0,1305.0,kermitt2/grobid,c712a24f5f6230348f2844a8bf18a69df04378c8,"Merge pull request #111 from kermitt2/lfoppiano_refactor_utilities_Methods-040816

Lfoppiano refactor utilities methods 040816

Former-commit-id: b655092b81c0674084d19e665ed857496e9c1bf8",https://github.com/kermitt2/grobid/commit/c712a24f5f6230348f2844a8bf18a69df04378c8
1132,1132.0,1306.0,kermitt2/grobid,ddebbefddbd2f05330bbf53618907d43374fe88b,"Refactored methods from class GrobidRestUtils:
- I/O methods moved under core.utilities.IOUtilities as they can be reused in future modules
- getEngine(boolean isParallel) has been moved under class Engine

Moved method to create pool or single engine under Engine.


Former-commit-id: baeb6bcd932c0385e6a4d3ab7dfd1c90dc00525c",https://github.com/kermitt2/grobid/commit/ddebbefddbd2f05330bbf53618907d43374fe88b
1133,1133.0,1307.0,kermitt2/grobid,334bf1dd729f669e12b3c7f9fa40b4be45250e29,"introducing TagginTokenSyncronizer and co
refactoring TEI formatter to use the classes above


Former-commit-id: ea1d3a2b4b59f4d3dc4d409f8897f7c57aaf37ff",https://github.com/kermitt2/grobid/commit/334bf1dd729f669e12b3c7f9fa40b4be45250e29
1134,1134.0,1308.0,kermitt2/grobid,5947655abfeea2ed1505b42a39f4d9bc0575c6ab,"Merge pull request #72 from kermitt2/grobid_config_20150825

refactoring to use GrobidAnalysisConfig

Former-commit-id: 961ecfb0e728455000d147638e7903ecbfe5d502",https://github.com/kermitt2/grobid/commit/5947655abfeea2ed1505b42a39f4d9bc0575c6ab
1135,1135.0,1309.0,kermitt2/grobid,444d81859fa42d12f61ef2a2e9fde7d87eb3c02f,"refactoring to use GrobidAnalysisConfig


Former-commit-id: d1d374502e2dba3825e119563cf9e1bfd2926dcd",https://github.com/kermitt2/grobid/commit/444d81859fa42d12f61ef2a2e9fde7d87eb3c02f
1136,1136.0,1310.0,kermitt2/grobid,2a3f021cf62e84328b6245b902081cb297e321a0,"minor refactorings


Former-commit-id: 7cc2146d3045e5ea5aeeca5189e5f21c31577463",https://github.com/kermitt2/grobid/commit/2a3f021cf62e84328b6245b902081cb297e321a0
1137,1137.0,1311.0,kermitt2/grobid,94fd19f68c12c75032cf6d98d054786c9c019631,"refactoring to make model stateless


Former-commit-id: 6a0ff58e223d85e8d75d396cd7d8b33804bdbf26",https://github.com/kermitt2/grobid/commit/94fd19f68c12c75032cf6d98d054786c9c019631
1138,1138.0,1312.0,kermitt2/grobid,b67ef3e4edf71ed6cdfb0bfa90369ce1bdc8d8c2,"Refactorings + counters


Former-commit-id: f88e8ccd8b6f6874aaa10cd9c3ac4cda29e52026",https://github.com/kermitt2/grobid/commit/b67ef3e4edf71ed6cdfb0bfa90369ce1bdc8d8c2
1139,1139.0,1313.0,kermitt2/grobid,c22ba7c37feb184eace56fd1ad095186024a169e,"Refactorings + counters


Former-commit-id: 566b4dbc306111e8732025a72aa5733da86585ea",https://github.com/kermitt2/grobid/commit/c22ba7c37feb184eace56fd1ad095186024a169e
1140,1140.0,1314.0,jenetics/jenetics,2f98f8896b4aca4f6ec5fa2d50db74afbfcf4c1b,#815: Refactoring of sentence codec.,https://github.com/jenetics/jenetics/commit/2f98f8896b4aca4f6ec5fa2d50db74afbfcf4c1b
1141,1141.0,1315.0,jenetics/jenetics,a58ab05782e0f28eaf88b8f19b44980f41e094d4,Refactorings.,https://github.com/jenetics/jenetics/commit/a58ab05782e0f28eaf88b8f19b44980f41e094d4
1142,1142.0,1316.0,jenetics/jenetics,02c1a87c80abaa3fd870ae6145240e0583e3071e,Refactorings.,https://github.com/jenetics/jenetics/commit/02c1a87c80abaa3fd870ae6145240e0583e3071e
1143,1143.0,1317.0,jenetics/jenetics,bcb98b0a6fdf91841e51eaf3901772475940dbdd,#767: Refactor out static parts of math expr parser.,https://github.com/jenetics/jenetics/commit/bcb98b0a6fdf91841e51eaf3901772475940dbdd
1144,1144.0,1318.0,jenetics/jenetics,f4249d176d2f2cdeb6a68f4eece639cb751e3e4d,#767: Refactor 'Cfg' to Java record.,https://github.com/jenetics/jenetics/commit/f4249d176d2f2cdeb6a68f4eece639cb751e3e4d
1145,1145.0,1319.0,jenetics/jenetics,366fa4d5dc02e44de8d852e578a98d1301dad212,#773: Refactor 'Token' class to interface.,https://github.com/jenetics/jenetics/commit/366fa4d5dc02e44de8d852e578a98d1301dad212
1146,1146.0,1320.0,jenetics/jenetics,e4c6dd6af5106e00cae485bcb6e4cf9a016414d1,Refactor class to record.,https://github.com/jenetics/jenetics/commit/e4c6dd6af5106e00cae485bcb6e4cf9a016414d1
1147,1147.0,1321.0,jenetics/jenetics,61379389bb09e01cf9edd0bc6bb7ba34ec34fa71,#767: Some refactorings.,https://github.com/jenetics/jenetics/commit/61379389bb09e01cf9edd0bc6bb7ba34ec34fa71
1148,1148.0,1322.0,jenetics/jenetics,d894291648b0d9199693eeb32126fc8db053133e,#767: Some refactorings.,https://github.com/jenetics/jenetics/commit/d894291648b0d9199693eeb32126fc8db053133e
1149,1149.0,1323.0,jenetics/jenetics,277fdd2256ea2e022742d6eb2af86afe84935d94,#767: Some refactorings.,https://github.com/jenetics/jenetics/commit/277fdd2256ea2e022742d6eb2af86afe84935d94
1150,1150.0,1324.0,jenetics/jenetics,145a492ff9a2adbf9be0c38f25a138699e8272b1,#661: Refactor 'mapper' to 'interceptor'.,https://github.com/jenetics/jenetics/commit/145a492ff9a2adbf9be0c38f25a138699e8272b1
1151,1151.0,1325.0,jenetics/jenetics,e9960dbd8c8d41842e8c39e71ab44e282e585cad,#566: Fixes after engine refactorings.,https://github.com/jenetics/jenetics/commit/e9960dbd8c8d41842e8c39e71ab44e282e585cad
1152,1152.0,1326.0,jenetics/jenetics,0468abb4938a62d08d18fcf0fe25f1ccc6ee6e41,#557: Refactor 'ProxyComparator' to inner class of 'ProxySorter'.,https://github.com/jenetics/jenetics/commit/0468abb4938a62d08d18fcf0fe25f1ccc6ee6e41
1153,1153.0,1327.0,jenetics/jenetics,f27825d29c05d63058bc45e4cd56a4e2df74084a,#557: Refactor 'ProxySorter' to final class with static sort methods.,https://github.com/jenetics/jenetics/commit/f27825d29c05d63058bc45e4cd56a4e2df74084a
1154,1154.0,1328.0,jenetics/jenetics,b96c396add1a54a61fc5cdb32433ce8ff74dbc5f,#522: Some test refactorings.,https://github.com/jenetics/jenetics/commit/b96c396add1a54a61fc5cdb32433ce8ff74dbc5f
1155,1155.0,1329.0,jenetics/jenetics,42beaf2e574bf38bd7121edaf5883e9ad5469655,#522: Some test refactorings.,https://github.com/jenetics/jenetics/commit/42beaf2e574bf38bd7121edaf5883e9ad5469655
1156,1156.0,1330.0,jenetics/jenetics,5bc83d738c6f0ad664db00288cae3949833f65cc,#534: Refactor 'Sample' class to interface.,https://github.com/jenetics/jenetics/commit/5bc83d738c6f0ad664db00288cae3949833f65cc
1157,1157.0,1331.0,jenetics/jenetics,6b479e96516df40f2c16ef509bf0f3e7a62ec3eb,#442: Refactoring to generic 'TreePattern<V>' class.,https://github.com/jenetics/jenetics/commit/6b479e96516df40f2c16ef509bf0f3e7a62ec3eb
1158,1158.0,1332.0,jenetics/jenetics,441d1a474e1d2f35ffef7d8034b4b1b6983d4348,#316: Refactoring of 'TreeRewriter' hierarchy.,https://github.com/jenetics/jenetics/commit/441d1a474e1d2f35ffef7d8034b4b1b6983d4348
1159,1159.0,1333.0,jenetics/jenetics,82a2d270d3ba5eac9598f038d4da3e6a19dd0044,#316: Refactor existing rewrite code.,https://github.com/jenetics/jenetics/commit/82a2d270d3ba5eac9598f038d4da3e6a19dd0044
1160,1160.0,1334.0,jenetics/jenetics,55b6f383df958e41adfd5e4fc64e2a379411a6f1,"#387: Refactoring or tree 'Path' object.

This class is now an inner class of the 'Tree' interface.",https://github.com/jenetics/jenetics/commit/55b6f383df958e41adfd5e4fc64e2a379411a6f1
1161,1161.0,1335.0,jenetics/jenetics,d83c7f71602c17310907fe1b0b739e05a35ff622,"#379: Renaming classes, refactorings.",https://github.com/jenetics/jenetics/commit/d83c7f71602c17310907fe1b0b739e05a35ff622
1162,1162.0,1336.0,jenetics/jenetics,cf114d7d888fd9438395034cd9805e5fbc4d53af,#325: Refactor evaluators to inner classes of 'Engine'.,https://github.com/jenetics/jenetics/commit/cf114d7d888fd9438395034cd9805e5fbc4d53af
1163,1163.0,1337.0,jenetics/jenetics,ce80c6226d2ce4b0aef803ebab26e836669cb724,#223: Refactoring method structure.,https://github.com/jenetics/jenetics/commit/ce80c6226d2ce4b0aef803ebab26e836669cb724
1164,1164.0,1338.0,jenetics/jenetics,41834a1ecadef89cb58cb1454e5b9d6a77e4f622,#285: Refactoring of 'CycleEnginePool'.,https://github.com/jenetics/jenetics/commit/41834a1ecadef89cb58cb1454e5b9d6a77e4f622
1165,1165.0,1339.0,jenetics/jenetics,319aad516bb88cb971ade2c8435973103f253ca4,#285: Refactoring of 'CycleEnginePool'.,https://github.com/jenetics/jenetics/commit/319aad516bb88cb971ade2c8435973103f253ca4
1166,1166.0,1340.0,jenetics/jenetics,55711f4be660212c8ab5f8aa15dd6132ef3cffd6,#285: Refactoring of 'CycleEnginePool'.,https://github.com/jenetics/jenetics/commit/55711f4be660212c8ab5f8aa15dd6132ef3cffd6
1167,1167.0,1341.0,jenetics/jenetics,6c7785cee93fe2011cb17433c88597d0303146a1,#285: Refactoring of 'ConcatEnginePool'.,https://github.com/jenetics/jenetics/commit/6c7785cee93fe2011cb17433c88597d0303146a1
1168,1168.0,1342.0,jenetics/jenetics,ff9d31803153156d6df08161162b47124c964093,#285: Refactoring of 'ConcatEnginePool'.,https://github.com/jenetics/jenetics/commit/ff9d31803153156d6df08161162b47124c964093
1169,1169.0,1343.0,jenetics/jenetics,60528239c77df3f2baf2652e67311c1b4812bd2d,#285: Code simplification after refactoring.,https://github.com/jenetics/jenetics/commit/60528239c77df3f2baf2652e67311c1b4812bd2d
1170,1170.0,1344.0,jenetics/jenetics,5fcc7d8206fbed77aa02525f798925ca303dbc7f,#260: Fix code after refactoring.,https://github.com/jenetics/jenetics/commit/5fcc7d8206fbed77aa02525f798925ca303dbc7f
1171,1171.0,1345.0,jenetics/jenetics,81514d5376712251a4488ae0900f126b756e59fd,"Rename 'MathOps' to 'MathOp'.

And refactor it ti an enum.",https://github.com/jenetics/jenetics/commit/81514d5376712251a4488ae0900f126b756e59fd
1172,1172.0,1346.0,jenetics/jenetics,a945782556bd4cab93c138bc88036c9cdc3a4993,"Rename 'MathOps' to 'MathOp'.

And refactor it ti an enum.",https://github.com/jenetics/jenetics/commit/a945782556bd4cab93c138bc88036c9cdc3a4993
1173,1173.0,1347.0,jenetics/jenetics,94c910fada50de26dd005c237fa8c87909ef3346,"Rename 'MathOps' to 'MathOp'.

And refactor it ti an enum.",https://github.com/jenetics/jenetics/commit/94c910fada50de26dd005c237fa8c87909ef3346
1174,1174.0,1348.0,jenetics/jenetics,01d885d134aeeec75a1f3fe080cc7f8b7bd4785c,"Rename 'MathOps' to 'MathOp'.

And refactor it ti an enum.",https://github.com/jenetics/jenetics/commit/01d885d134aeeec75a1f3fe080cc7f8b7bd4785c
1175,1175.0,1349.0,jenetics/jenetics,3fdb3de5a8037b5a174e5670c5c10667e3aefdfa,#64: Refactoring tree tests.,https://github.com/jenetics/jenetics/commit/3fdb3de5a8037b5a174e5670c5c10667e3aefdfa
1176,1176.0,1350.0,jenetics/jenetics,0db0961a7b2b7b5589a7f9b7a8ac7f24c0e19c12,#181: Refactor 'elem' method signature.,https://github.com/jenetics/jenetics/commit/0db0961a7b2b7b5589a7f9b7a8ac7f24c0e19c12
1177,1177.0,1351.0,jenetics/jenetics,5934f290724e128b6f278a0a8020a8232704c1ea,#181: Refactoring of writer organization.,https://github.com/jenetics/jenetics/commit/5934f290724e128b6f278a0a8020a8232704c1ea
1178,1178.0,1352.0,jenetics/jenetics,618337ec9972fa9b8dfb0d8fbcb0c30de59dd6a8,#181: Refactoring existing code.,https://github.com/jenetics/jenetics/commit/618337ec9972fa9b8dfb0d8fbcb0c30de59dd6a8
1179,1179.0,1353.0,jenetics/jenetics,f6dfd7dec7b59aefe5cfc303a4c7667b7284b95c,#181: Refactoring existing code.,https://github.com/jenetics/jenetics/commit/f6dfd7dec7b59aefe5cfc303a4c7667b7284b95c
1180,1180.0,1354.0,jenetics/jenetics,a757a4e96108c5862ae9fe5b7e4f23a7d8a10f05,Refactoring of common code in 'Runner' class.,https://github.com/jenetics/jenetics/commit/a757a4e96108c5862ae9fe5b7e4f23a7d8a10f05
1181,1181.0,1355.0,jenetics/jenetics,117d1c48be08075a854f9f7c82df0c3f81f2d373,#79: Fix JAXB type name after refactoring.,https://github.com/jenetics/jenetics/commit/117d1c48be08075a854f9f7c82df0c3f81f2d373
1182,1182.0,1356.0,jenetics/jenetics,36d052a0f1e1043174bd5b3b5610a0b7affa84aa,"#79: Refactoring out common code.

Common code has been moved into 'Runner' class.",https://github.com/jenetics/jenetics/commit/36d052a0f1e1043174bd5b3b5610a0b7affa84aa
1183,1183.0,1357.0,jenetics/jenetics,d716978123d4f398ffc56a18e56f032a4746ee75,#32: Refactoring of 'AltererComplexity' class.,https://github.com/jenetics/jenetics/commit/d716978123d4f398ffc56a18e56f032a4746ee75
1184,1184.0,1358.0,jenetics/jenetics,c344cc9bde32d1176257a6843b951754dda466f3,Refactor 'TrackSegment' to top-level class.,https://github.com/jenetics/jenetics/commit/c344cc9bde32d1176257a6843b951754dda466f3
1185,1185.0,1359.0,jenetics/jenetics,d86e275d5a61612bb8d2d23518ee803b935a66ec,Refactor 'Track' to top-level class.,https://github.com/jenetics/jenetics/commit/d86e275d5a61612bb8d2d23518ee803b935a66ec
1186,1186.0,1360.0,jenetics/jenetics,cd81bba2bcb784dac9d32abae2c20e742c56c323,Refactor 'Route' to top-level class.,https://github.com/jenetics/jenetics/commit/cd81bba2bcb784dac9d32abae2c20e742c56c323
1187,1187.0,1361.0,jenetics/jenetics,171efa1b67fa68330662b04cb7a154c50b84246b,Refactor 'Location' to top-level class.,https://github.com/jenetics/jenetics/commit/171efa1b67fa68330662b04cb7a154c50b84246b
1188,1188.0,1362.0,jenetics/jenetics,e259179374e402796ef077a9da2187b9266fda15,Refactor GPX classes into own package.,https://github.com/jenetics/jenetics/commit/e259179374e402796ef077a9da2187b9266fda15
1189,1189.0,1363.0,jenetics/jenetics,677e7cc210741fb0aaf18b76091c22664b5e2e56,Refactor the 'EvolvingImagesWorker' to its own class.,https://github.com/jenetics/jenetics/commit/677e7cc210741fb0aaf18b76091c22664b5e2e56
1190,1190.0,1364.0,jenetics/jenetics,79b0152f9ef671030acff7880062062efa103d34,Refactor limit predicate to own class.,https://github.com/jenetics/jenetics/commit/79b0152f9ef671030acff7880062062efa103d34
1191,1191.0,1365.0,jenetics/jenetics,5e732bcd3b0974e2f6cca343f01c9beb2ed6e7c6,Fix refactoring bug.,https://github.com/jenetics/jenetics/commit/5e732bcd3b0974e2f6cca343f01c9beb2ed6e7c6
1192,1192.0,1366.0,jenetics/jenetics,0877fd4a82d38801331c772c6e2d9a35f7b02e94,Minor refactorings.,https://github.com/jenetics/jenetics/commit/0877fd4a82d38801331c772c6e2d9a35f7b02e94
1193,1193.0,1367.0,jenetics/jenetics,8cc0c9b4b7f6cc00cbfe4e24181d476d0e5551b4,Fix code after merge of refactored code.,https://github.com/jenetics/jenetics/commit/8cc0c9b4b7f6cc00cbfe4e24181d476d0e5551b4
1194,1194.0,1368.0,jenetics/jenetics,5a3a8ec393a6daa2006a3d8ce64092bbb732df23,Fix code after merge of refactored code.,https://github.com/jenetics/jenetics/commit/5a3a8ec393a6daa2006a3d8ce64092bbb732df23
1195,1195.0,1369.0,jenetics/jenetics,29c3d6c585cd23f55494ddcf293726dbf4a3706f,Fix bugs caused by refactorings in the 'r3.0.0' branch.,https://github.com/jenetics/jenetics/commit/29c3d6c585cd23f55494ddcf293726dbf4a3706f
1196,1196.0,1370.0,jenetics/jenetics,9ab5ccc446b804ac1928d67bd51cd0ad84f70219,Refactor 'Alterer' to functional interface.,https://github.com/jenetics/jenetics/commit/9ab5ccc446b804ac1928d67bd51cd0ad84f70219
1197,1197.0,1371.0,jenetics/jenetics,ed7ad39396fe58ee6ae1b04f734dd025f1599e9c,Moments class refactorings.,https://github.com/jenetics/jenetics/commit/ed7ad39396fe58ee6ae1b04f734dd025f1599e9c
1198,1198.0,1372.0,jenetics/jenetics,9e7aa32874b1733456c90dcbb3cc9003ae4bcd7c,Array classes refactorings.,https://github.com/jenetics/jenetics/commit/9e7aa32874b1733456c90dcbb3cc9003ae4bcd7c
1199,1199.0,1373.0,jenetics/jenetics,6311b917429d06037cf28dd2269adab2cea74e54,Array classes refactorings.,https://github.com/jenetics/jenetics/commit/6311b917429d06037cf28dd2269adab2cea74e54
1200,1200.0,1374.0,jenetics/jenetics,af7bfa3ed3c409d88f02270ada64469f49ec0af5,Refactor 'Entry' and 'Scope' class to inner class of 'Context'.,https://github.com/jenetics/jenetics/commit/af7bfa3ed3c409d88f02270ada64469f49ec0af5
1201,1201.0,1375.0,jenetics/jenetics,c22941449334ad15f2033e3913f9a72a5bd55546,Add TODO comment for refactoring in 2.0.,https://github.com/jenetics/jenetics/commit/c22941449334ad15f2033e3913f9a72a5bd55546
1202,1202.0,1376.0,jenetics/jenetics,a1cc94a0bc32e9b45d9f4b6be1e98753150abf8b,Refactor 'test' task to its own file.,https://github.com/jenetics/jenetics/commit/a1cc94a0bc32e9b45d9f4b6be1e98753150abf8b
1203,1203.0,1377.0,jenetics/jenetics,edf4845438f9eb3fdc446b0a048c4a920a1fdb6f,Refactor 'javadoc' task.,https://github.com/jenetics/jenetics/commit/edf4845438f9eb3fdc446b0a048c4a920a1fdb6f
1204,1204.0,1378.0,jenetics/jenetics,1414a4976bb899fd93b7f3d9095b9f4f3436a7f1,Refactor 'Seq' helper classes.,https://github.com/jenetics/jenetics/commit/1414a4976bb899fd93b7f3d9095b9f4f3436a7f1
1205,1205.0,1379.0,jenetics/jenetics,6de08041b1e2b4ae7a6058d855968571a917bfc0,Refactor some random methods to the internal package.,https://github.com/jenetics/jenetics/commit/6de08041b1e2b4ae7a6058d855968571a917bfc0
1206,1206.0,1380.0,jenetics/jenetics,57fb5796c77fbfbab98244ecef4404ceb1d223b7,Refactor the 'math.probability' class into 'internal.math.probability' class.,https://github.com/jenetics/jenetics/commit/57fb5796c77fbfbab98244ecef4404ceb1d223b7
1207,1207.0,1381.0,jenetics/jenetics,931c1d882dcddb284cac76e3ad6e61e4a43cd629,Some minor 'arrays' refactoring.,https://github.com/jenetics/jenetics/commit/931c1d882dcddb284cac76e3ad6e61e4a43cd629
1208,1208.0,1382.0,jenetics/jenetics,70806d5d78bec1b71d172223fc48c0afb7b31d3f,Refactor number gene generation.,https://github.com/jenetics/jenetics/commit/70806d5d78bec1b71d172223fc48c0afb7b31d3f
1209,1209.0,1383.0,jenetics/jenetics,364d2d20b98ee2665fd0ae89e5acb7f6fe060bd5,Refactor to use one primary constructor.,https://github.com/jenetics/jenetics/commit/364d2d20b98ee2665fd0ae89e5acb7f6fe060bd5
1210,1210.0,1384.0,jenetics/jenetics,4652e7dae5fb6a74b5e9083ff9af38cae7ddc421,Refactor 'TournamentSelector.select' method.,https://github.com/jenetics/jenetics/commit/4652e7dae5fb6a74b5e9083ff9af38cae7ddc421
1211,1211.0,1385.0,jenetics/jenetics,20c33c94a65680a169cfe302079ae02cca24e3b6,Refactor serialization tests.,https://github.com/jenetics/jenetics/commit/20c33c94a65680a169cfe302079ae02cca24e3b6
1212,1212.0,1386.0,jenetics/jenetics,051061d20684debd1c5fb241c85da4e73697b1e5,Refactor IndexStream to an abstract class.,https://github.com/jenetics/jenetics/commit/051061d20684debd1c5fb241c85da4e73697b1e5
1213,1213.0,1387.0,jenetics/jenetics,f7c4d897d12941ec73f86efdb4e36c45deb985b5,"Complete - # 24: Array refactoring
https://sourceforge.net/apps/trac/jenetics/ticket/24",https://github.com/jenetics/jenetics/commit/f7c4d897d12941ec73f86efdb4e36c45deb985b5
1214,1214.0,1388.0,jenetics/jenetics,851918f0263723ff11b3ce7a4b06983daf182691,"Incomplete - # 24: Array refactoring
https://sourceforge.net/apps/trac/jenetics/ticket/24",https://github.com/jenetics/jenetics/commit/851918f0263723ff11b3ce7a4b06983daf182691
1215,1215.0,1389.0,jenetics/jenetics,0e714bcd9894240e7c33b33706f97c0359f1322b,"Incomplete - # 24: Array refactoring
https://sourceforge.net/apps/trac/jenetics/ticket/24",https://github.com/jenetics/jenetics/commit/0e714bcd9894240e7c33b33706f97c0359f1322b
1216,1216.0,1390.0,jenetics/jenetics,16027c74afda05e7a6f5c31c780080b302294d34,"Incomplete - # 24: Array refactoring
https://sourceforge.net/apps/trac/jenetics/ticket/24",https://github.com/jenetics/jenetics/commit/16027c74afda05e7a6f5c31c780080b302294d34
1217,1217.0,1391.0,jenetics/jenetics,02ace3e95e99b16e1d2c353b923576badb2d337c,"Incomplete - # 24: Array refactoring
https://sourceforge.net/apps/trac/jenetics/ticket/24",https://github.com/jenetics/jenetics/commit/02ace3e95e99b16e1d2c353b923576badb2d337c
1218,1218.0,1392.0,jenetics/jenetics,1325dff22d02d6e5a2a3b4d02341c6b9fed15bd8,"Incomplete - # 24: Array refactoring
https://sourceforge.net/apps/trac/jenetics/ticket/24",https://github.com/jenetics/jenetics/commit/1325dff22d02d6e5a2a3b4d02341c6b9fed15bd8
1219,1219.0,1393.0,jenetics/jenetics,cee79e75d4a72b6a33a5e7420e48a2667acc0bbe,"Incomplete - # 24: Array refactoring
https://sourceforge.net/apps/trac/jenetics/ticket/24",https://github.com/jenetics/jenetics/commit/cee79e75d4a72b6a33a5e7420e48a2667acc0bbe
1220,1220.0,1394.0,jenetics/jenetics,85927aa6bc134d992e4ba3a91c2ef51cc3ed4ace,"Incomplete - # 24: Array refactoring
https://sourceforge.net/apps/trac/jenetics/ticket/24",https://github.com/jenetics/jenetics/commit/85927aa6bc134d992e4ba3a91c2ef51cc3ed4ace
1221,1221.0,1395.0,jenetics/jenetics,616d6dea8843e9af4965f38441272b101d24cf8c,"Incomplete - # 24: Array refactoring
https://sourceforge.net/apps/trac/jenetics/ticket/24",https://github.com/jenetics/jenetics/commit/616d6dea8843e9af4965f38441272b101d24cf8c
1222,1222.0,1396.0,jenetics/jenetics,4082099a872b3eacc8f7372852db6e3f3a74f2a0,"Incomplete - # 24: Array refactoring
https://sourceforge.net/apps/trac/jenetics/ticket/24",https://github.com/jenetics/jenetics/commit/4082099a872b3eacc8f7372852db6e3f3a74f2a0
1223,1223.0,1397.0,jenetics/jenetics,72bdd2e44f31182adfb47aca8de4eb3c87977d78,"Incomplete - # 24: Array refactoring
https://sourceforge.net/apps/trac/jenetics/ticket/24",https://github.com/jenetics/jenetics/commit/72bdd2e44f31182adfb47aca8de4eb3c87977d78
1224,1224.0,1398.0,jenetics/jenetics,dd77096cab4ce5796c38552efecc9f9ee3e3a455,"Incomplete - # 24: Array refactoring
https://sourceforge.net/apps/trac/jenetics/ticket/24

Rename the Array.seal() method to Array.toISeq() and remove the Array.isSealed() method.",https://github.com/jenetics/jenetics/commit/dd77096cab4ce5796c38552efecc9f9ee3e3a455
1225,1225.0,1399.0,jenetics/jenetics,7151e380a7dd9678d4128d00bdd9c2ef43292776,"Incomplete - # 24: Array refactoring
https://sourceforge.net/apps/trac/jenetics/ticket/24",https://github.com/jenetics/jenetics/commit/7151e380a7dd9678d4128d00bdd9c2ef43292776
1226,1226.0,1400.0,jenetics/jenetics,bd71a72d4318d3e4e883b5b22be03189fce39480,"Incomplete - # 24: Array refactoring
https://sourceforge.net/apps/trac/jenetics/ticket/24",https://github.com/jenetics/jenetics/commit/bd71a72d4318d3e4e883b5b22be03189fce39480
1227,1227.0,1401.0,jenetics/jenetics,3e2612d36e7809553cb6f9ee680443b3233b6155,"Incomplete - # 24: Array refactoring
https://sourceforge.net/apps/trac/jenetics/ticket/24

Streamline Array naming.",https://github.com/jenetics/jenetics/commit/3e2612d36e7809553cb6f9ee680443b3233b6155
1228,1228.0,1402.0,jenetics/jenetics,438cabb9d0958cb18932f2799881292cc1a065f1,"Incomplete - # 20: Rethink Alterer probability
https://sourceforge.net/apps/trac/jenetics/ticket/20
Complete - # 19: Refactoring: Move Accumulators.Variance class to stat package
https://sourceforge.net/apps/trac/jenetics/ticket/19",https://github.com/jenetics/jenetics/commit/438cabb9d0958cb18932f2799881292cc1a065f1
1229,1229.0,1403.0,jenetics/jenetics,5f06bf5f017b7b72f073ce61188e213c8b7a6a08,"Incomplete - # 20: Rethink Alterer probability
https://sourceforge.net/apps/trac/jenetics/ticket/20
Complete - # 19: Refactoring: Move Accumulators.Variance class to stat package
https://sourceforge.net/apps/trac/jenetics/ticket/19",https://github.com/jenetics/jenetics/commit/5f06bf5f017b7b72f073ce61188e213c8b7a6a08
1230,1230.0,1404.0,jenetics/jenetics,b4688c597c25719a0fc4a4db38b48fd3359e3299,"Incomplete - # 20: Rethink Alterer probability
https://sourceforge.net/apps/trac/jenetics/ticket/20
Complete - # 19: Refactoring: Move Accumulators.Variance class to stat package
https://sourceforge.net/apps/trac/jenetics/ticket/19",https://github.com/jenetics/jenetics/commit/b4688c597c25719a0fc4a4db38b48fd3359e3299
1231,1231.0,1405.0,jenetics/jenetics,c2c6604d3853fa339f912a786ddc58b221254e4e,"Incomplete - # 20: Rethink Alterer probability
https://sourceforge.net/apps/trac/jenetics/ticket/20
Complete - # 19: Refactoring: Move Accumulators.Variance class to stat package
https://sourceforge.net/apps/trac/jenetics/ticket/19",https://github.com/jenetics/jenetics/commit/c2c6604d3853fa339f912a786ddc58b221254e4e
1232,1232.0,1406.0,jenetics/jenetics,71e149fa0e69d9421bc59ab850ba10bb54b66ba1,"Incomplete - # 20: Rethink Alterer probability
https://sourceforge.net/apps/trac/jenetics/ticket/20
Complete - # 19: Refactoring: Move Accumulators.Variance class to stat package
https://sourceforge.net/apps/trac/jenetics/ticket/19",https://github.com/jenetics/jenetics/commit/71e149fa0e69d9421bc59ab850ba10bb54b66ba1
1233,1233.0,1407.0,jenetics/jenetics,242ecbf816c694ebec1367c3edf658ea1b2aef02,"Incomplete - # 20: Rethink Alterer probability
https://sourceforge.net/apps/trac/jenetics/ticket/20
Complete - # 19: Refactoring: Move Accumulators.Variance class to stat package
https://sourceforge.net/apps/trac/jenetics/ticket/19",https://github.com/jenetics/jenetics/commit/242ecbf816c694ebec1367c3edf658ea1b2aef02
1234,1234.0,1408.0,jenetics/jenetics,99058cb4f98537847bfc03ede5edb55d8194edd0,"Complete - # 19: Refactoring: Move Accumulators.Variance class to stat package
https://sourceforge.net/apps/trac/jenetics/ticket/19",https://github.com/jenetics/jenetics/commit/99058cb4f98537847bfc03ede5edb55d8194edd0
1235,1235.0,1409.0,jenetics/jenetics,bbc8b17997d9e625c5d60afd297eb8b55c3b5c67,"Incomplete - # 19: Refactoring: Move Accumulators.Variance class to stat package
https://sourceforge.net/apps/trac/jenetics/ticket/19",https://github.com/jenetics/jenetics/commit/bbc8b17997d9e625c5d60afd297eb8b55c3b5c67
1236,1236.0,1410.0,jenetics/jenetics,d10967045c542d2bcef16078983b622560ab7088,"Add javadoc
Some refactorings",https://github.com/jenetics/jenetics/commit/d10967045c542d2bcef16078983b622560ab7088
1237,1237.0,1411.0,jenetics/jenetics,07540f359b1dba304d97f51331a1eee8100ed420,Minor refactorings.,https://github.com/jenetics/jenetics/commit/07540f359b1dba304d97f51331a1eee8100ed420
1238,1238.0,1412.0,jenetics/jenetics,988ce896c76ba13dbdf3ccb097dba41f01cd5ca8,Adding additional Accumulators.accumulate() methods. Refactor NumberStatistics to use the new accumulators.,https://github.com/jenetics/jenetics/commit/988ce896c76ba13dbdf3ccb097dba41f01cd5ca8
1239,1239.0,1413.0,jenetics/jenetics,d591ff8713849d4765e19340cfedd0a07f59c452,Refactoring CharacterGene/Chromosome.,https://github.com/jenetics/jenetics/commit/d591ff8713849d4765e19340cfedd0a07f59c452
1240,1240.0,1414.0,jenetics/jenetics,dbc7a5e4bfbfd239628553a8470db7ead5fcaa01,Refactoring of the Alterer classes.,https://github.com/jenetics/jenetics/commit/dbc7a5e4bfbfd239628553a8470db7ead5fcaa01
1241,1241.0,1415.0,jenetics/jenetics,f029c9e22f0e52e56298dd089b8b379383b22429,Refactoring of the Alterer classes.,https://github.com/jenetics/jenetics/commit/f029c9e22f0e52e56298dd089b8b379383b22429
1242,1242.0,1416.0,jenetics/jenetics,d21ff81b75db0755e924b6a7b335f3ea232b5d65,Refactoring of the Alterer classes.,https://github.com/jenetics/jenetics/commit/d21ff81b75db0755e924b6a7b335f3ea232b5d65
1243,1243.0,1417.0,jenetics/jenetics,b51d69d70791393ce28f1cff6160c323629c2bc2,Refactoring of the Alterer classes.,https://github.com/jenetics/jenetics/commit/b51d69d70791393ce28f1cff6160c323629c2bc2
1244,1244.0,1418.0,jenetics/jenetics,44fec4b1a8d7ee219a977afaaab2a873197b3d7e,Refactoring GA statistic classes.,https://github.com/jenetics/jenetics/commit/44fec4b1a8d7ee219a977afaaab2a873197b3d7e
1245,1245.0,1419.0,jenetics/jenetics,ba9637dd4036082f3e2c32776e95970569135189,Refactoring GA statistic classes.,https://github.com/jenetics/jenetics/commit/ba9637dd4036082f3e2c32776e95970569135189
1246,1246.0,1420.0,jenetics/jenetics,fd8b65e2fab5fc49fa4254471f8616db8dd8cb39,Refactoring GA statistic classes.,https://github.com/jenetics/jenetics/commit/fd8b65e2fab5fc49fa4254471f8616db8dd8cb39
1247,1247.0,1421.0,jenetics/jenetics,392959491e25787cc5187cef576bcb212c9a1a07,Fixing Mutation class. After an previous refactoring no mutation was performed.,https://github.com/jenetics/jenetics/commit/392959491e25787cc5187cef576bcb212c9a1a07
1248,1248.0,1422.0,jenetics/jenetics,495e5af7df0178b6c1bf5c7199b2aa5257bec6ce,Adding EvaluatorRegistry and other small refactorings.,https://github.com/jenetics/jenetics/commit/495e5af7df0178b6c1bf5c7199b2aa5257bec6ce
1249,1249.0,1423.0,knime/knime-core,2e3a70d7f6b5c208856569133ad9da70fa8b408f,"UIEXT-553: Small improvements and refactorings

UIEXT-553 (Design template or API for basic nodes using the declarative
node dialog API)",https://github.com/knime/knime-core/commit/2e3a70d7f6b5c208856569133ad9da70fa8b408f
1250,1250.0,1424.0,knime/knime-core,74557b60e89581f637b73f0883f040b4849e21b5,"NXT-1356: Deprecate `ConfigurableNodeFactory.isPortConfigurableViaMenu()`

* Added deprecation note, leaving explanation

NXT-1356 (Refactor use of `Optionals` returned by `WorkflowBuildContext` in `EntityBuilderUtil`)",https://github.com/knime/knime-core/commit/74557b60e89581f637b73f0883f040b4849e21b5
1251,1251.0,1425.0,knime/knime-core,3d32da563288e24b86c5d09e3d5fcd3f4734add8,"UIEXT-540: Also add the 'cleanUp'-capability to the InitialDataService

Can/should be removed with the refactoring of the data services
(UIEXT-371).
Required because the initial data service for the table view in turn
uses a data service (which already has and requires the capability to
'clean itself up').

UIEXT-540 (Images cause problems when loaded twice)",https://github.com/knime/knime-core/commit/3d32da563288e24b86c5d09e3d5fcd3f4734add8
1252,1252.0,1426.0,knime/knime-core,8fa51d0b7cbf2e626683a7c784cbc4cacc222f02,"UIEXT-540: Clear the image data cache whenever cached table(s) change

Because whenever the cached table(s) are replaced, we can be sure that
row-batches of different tables (e.g. differently sorted) aren't
rendered 'next' to each other. I.e. images will never be requested for
these tables at the same time.
Table caching logic refactored accordingly and simplified/modularized.

UIEXT-540 (Insufficient caching of table view images)",https://github.com/knime/knime-core/commit/8fa51d0b7cbf2e626683a7c784cbc4cacc222f02
1253,1253.0,1427.0,knime/knime-core,24897cc17e4db0a5d52bf85159e9755a6012ee05,"UIEXT-354: Refactor code based on code review

Adjust calculation of lazy load parameters
Move renderer selection to interactivity section
Move renderer adjusting to fit column names to backend

UIEXT-354 (Table data cell renderer selection (frontend))",https://github.com/knime/knime-core/commit/24897cc17e4db0a5d52bf85159e9755a6012ee05
1254,1254.0,1428.0,knime/knime-core,f95d36cc0494ed8fcfa9250d268523398f739657,"UIEXT-572: Refactor default values for updateTotalSelected

UIEXT-572 (Lazyload selection)",https://github.com/knime/knime-core/commit/f95d36cc0494ed8fcfa9250d268523398f739657
1255,1255.0,1429.0,knime/knime-core,82112bbdd73a69dbc13569a40b7c40e8f2c570d6,"AP-3276: Add alphanumeric string comparator; refactor row comparator

Add comparator to compare string-compatible values alphanumerically
instead of lexicographically. This order is also called
""natural sort order"", but it seems that ""alphanumeric"" is the term
used in programming.

Refactor the RowComparator to use the builder pattern in order to avoid using `-1` publicly to mean ""compare row id"".

If, in the future, the same column should be comparable
multiple times, the underlying row comparator implementation can be adapted.

AP-3276 (Sorter node: Support for Natural Sort Order)",https://github.com/knime/knime-core/commit/82112bbdd73a69dbc13569a40b7c40e8f2c570d6
1256,1256.0,1430.0,knime/knime-core,6f10362290f74f31059f7f22567d2d8d227d1a77,"UIEXT-394: Settings retrieval from native nodes refactored again

* settings retrieval for native nodes extracted into a dedicated method
* distinguish two cases in case there is no flow object stack (i.e. node
is most likely not connected):
  * settings have never been changed (i.e. fall back to default
settings)
  * settings have been changed (and the defaults were overwritten)
  * -> test extended and adopted accordingly

UIEXT-394 (Settings aren't properly loaded into dialog if node is not connected)",https://github.com/knime/knime-core/commit/6f10362290f74f31059f7f22567d2d8d227d1a77
1257,1257.0,1431.0,knime/knime-core,7ef9dd2d94dbb8692b417d80717bceb469b04938,"UIEXT-439: NodeCleanUpCallback refactored and exposed to other plugins

Refactored to follow a builder pattern because yet another
'configuration'-option has been added.
Exposed because it's now also used by the TableViewNodeFactory.
Tests added, too.

UIEXT-439 (Images fail to render in WebPortal)",https://github.com/knime/knime-core/commit/7ef9dd2d94dbb8692b417d80717bceb469b04938
1258,1258.0,1432.0,knime/knime-core,f5abe350527ae222eab494b648a7d65f78db1a1e,"UIEXT-255: Bit of refactoring after review

* sonar issues fixed
* isExposedVariable-method simplified

UIEXT-255 (Properly handle modified view settings which are exposed as flow variable)",https://github.com/knime/knime-core/commit/f5abe350527ae222eab494b648a7d65f78db1a1e
1259,1259.0,1433.0,knime/knime-core,8c994be575d40287dfc07d545d50b470ca9a63ba,"UIEXT-277: SelectionTranslationService and Selection refactored

Refactored to translate from a set of row keys to a list of string and
back.
No more SelectionTranslationService based on InputStreams
(string-based only now).
SelectionEvent returns a list of strings (called selection) which
doesn't need to be a list of row keys (up to the node implementer). If
row key to string list translation fails, it will contain an error
instead.

UIEXT-277 (Generalize Selection Events)",https://github.com/knime/knime-core/commit/8c994be575d40287dfc07d545d50b470ca9a63ba
1260,1260.0,1434.0,knime/knime-core,57e608c5f908399ed2432f2da2404211967a651d,"UIEXT-136: Refactoring around the dialog's 'NodeSettingsService'

* ...SettingsDataService renamed to ...NodeSettingsService to
  * avoid confusion with the other data services
  * establish the connection to 'NodeSettings'-objects
* distinction between json- and text-based NodeSettingsService because
if it's json-based, it will effect the 'initial data service' response
which allows for proper error handling by the framework

UIEXT-136 (React on knimeService error in pagebuilder)",https://github.com/knime/knime-core/commit/57e608c5f908399ed2432f2da2404211967a651d
1261,1261.0,1435.0,knime/knime-core,7df700f18285b64da7ef04ab2a409b4e8f5c7d89,"AP-18320: Added WFM#setInitialFlowScopeContext + ParChunk-Rework

A method used by ID in order to properly capture all nodes in a temporary
metanode created during execution using the ""Workflow Executor"". Previously
this was done using a ""Pallel-Chunk""-like metanode but that would leave out any
side branches feeding in new data. Using a workflow global inital scope object
all nodes in this metanode would inherit the same flow scope context.

As part of the ticket, also the Virtual In/Out nodes were refactored, so that
there is a re-usable super class (NodeModel) not implementing ScopeStart/End

AP-18320: (Workflow Executor does not work when workflow has no inputs/outputs)",https://github.com/knime/knime-core/commit/7df700f18285b64da7ef04ab2a409b4e8f5c7d89
1262,1262.0,1436.0,knime/knime-core,a40ae1f0bfd94107a124671318f21e8979186895,"UIEXT-165: Small refactoring: single source of default settings

The newly added TextSettingsDataService.saveDefaultSettings is
also used when default settings are supplied as initial data
for the node dialog.

UIEXT-165 (Show default settings in flow variables dialog)",https://github.com/knime/knime-core/commit/a40ae1f0bfd94107a124671318f21e8979186895
1263,1263.0,1437.0,knime/knime-core,c6972929eb87f7e60b945336a03210a98865a1c1,"UIEXT-97: Some refactoring after code review (mostly naming)

* enum Page.Type renamed to Page.ContentType
* PageKind renamed to PageType
* 'view_'-prefix for view-page ids

UIEXT-97 (Serve ui-extension resources through middleware API)",https://github.com/knime/knime-core/commit/c6972929eb87f7e60b945336a03210a98865a1c1
1264,1264.0,1438.0,knime/knime-core,8fdea540ee38bb40d0a1cf3f46fbe5a2f1919362,"UIEXT-97: Node dialog resource are not written to disc anymore

... but served through the CEF middleware API.

* NodeDialogManager and NodeViewManager refactored and shared logic
moved into abstract parent class
  * additional 'manager' interfaces introduced
* NodeViewEnt and NodeDialogEnt refactored and shared logic moved into
parent class.
* Tests adopted accordingly (to not check for written files anymore).

UIEXT-97 (Serve ui-extension resources through middleware API)",https://github.com/knime/knime-core/commit/8fdea540ee38bb40d0a1cf3f46fbe5a2f1919362
1265,1265.0,1439.0,knime/knime-core,24c96838d6c6326e9e4fb7174c6469c018004f73,"UIEXT-111: NodeViewStateEventSource added

... which provides the mechanism to update the node view whenever the
node state changes.
Utility method added to create 'NodeViewEnts' together with the
associated event sources (SelectionEventSource and
NodeViewStateEventSource).
NodeViewEnt-initialization refactored to also take the node state into
account (i.e. all properties are only available if the associated node
is executed).
Tests added, too.

UIEXT-111 (Backend implementation for unavailable views (node re-execution))",https://github.com/knime/knime-core/commit/24c96838d6c6326e9e4fb7174c6469c018004f73
1266,1266.0,1440.0,knime/knime-core,29989c16bc8c82476c2494ff8056b1f30a8ec6de,"UIEXT-50: Refactoring around selection event logic

* SelectionEventSource moved from knime-js-core into ui-core such that
NodeViewEnt can be instantiated with it
(and to be available for ap.next in the future)
* NodeViewEnt adopted to use the SelectionEventSource to retrieve the
initial selection (and synchronize the hilite-listener registration with
it)
* abstract EventSource-class moved from knime-gateway into ui-core such
that SelectionEventSource can be derived from it, too
* HiLiteListenerRegistry class removed and logic is now covered by the
SelectionEventSource (simpler now); synchronization of the initial
selection and hilite-listener registration is now part of the
SelectionEventSource directly
* helper method in SelectionEventSource to process events (to avoid code
duplication)
* tests moved/removed/adopted accordingly

UIEXT-50 (Add data point selection to WebPortal backend)",https://github.com/knime/knime-core/commit/29989c16bc8c82476c2494ff8056b1f30a8ec6de
1267,1267.0,1441.0,knime/knime-core,aa28ee24a4148a94a7b0e7e54fd6f2ddc95a10d3,"UIEXT-92: DataServiceProvider interface and logic refactored

* logic to call the data services moved into new
'DataServiceManager'-class
* data service instances are only created once per node and cached
(until the node instance is disposed)
* 'create..DataService' instead of 'get...DataService' to make clear
that the DataServiceProvider always creates new instances

UIEXT-92 ((Re)define NodeFactory API for ViewNodeFactories)",https://github.com/knime/knime-core/commit/aa28ee24a4148a94a7b0e7e54fd6f2ddc95a10d3
1268,1268.0,1442.0,knime/knime-core,3a97af7e7c045186c207e86f1a96f585963f4240,"UIEXT-92: NodeView & NodeDialog refactored to not use the builder pattern (yet)

Builder pattern (i.e. functional approach) is added later on top
as a 'mere' convenience layer (i.e. NodeDialogs and NodeViews can
always be defined without using the builder pattern). See UIXT-100.

Also: NodeDialog's settings handling refactored to distiguish 'model'
and 'view' settings. Though, view settings persistence is NOT covered with this
commit, yet.

Tests adopted respectively.

UIEXT-92 ((Re)define NodeFactory API for ViewNodeFactories)",https://github.com/knime/knime-core/commit/3a97af7e7c045186c207e86f1a96f585963f4240
1269,1269.0,1443.0,knime/knime-core,094ced1e3bb469c449f65807deaf7117e4a13b92,"AP-17553: Address SonarLint warnings.

Just renaming and refactoring.

AP-17553 (Joiner node without RowID concatenation upon joining based on RowID)",https://github.com/knime/knime-core/commit/094ced1e3bb469c449f65807deaf7117e4a13b92
1270,1270.0,1444.0,knime/knime-core,0953798398ba1a135c68e3064df880282df0df80,"AP-17478: Refactored based on comments

* .api_filters
* javadoc added

AP-17478 (Add node decorator for single selection widgets with active re-execution setting)",https://github.com/knime/knime-core/commit/0953798398ba1a135c68e3064df880282df0df80
1271,1271.0,1445.0,knime/knime-core,ea1568dbc6daf1a2fad725aed3e150122685a5d2,"AP-17490: Refactor ValueFactoryUtils

It now contains all logic for dealing with ValueFactories, except
finding DefaultValueFactories which has been moved to a separate utility
class with the corresponding name.

AP-17490 (VirtualTableExtensionTable and DataCellValueFactory don't play
along)",https://github.com/knime/knime-core/commit/ea1568dbc6daf1a2fad725aed3e150122685a5d2
1272,1272.0,1446.0,knime/knime-core,016d49d2c7442e683f6971acc7cb1cef168ec27c,"AP-17596: Extract interfaces, refactor package

AP-17596 (Extract Interfaces into own Util Class)",https://github.com/knime/knime-core/commit/016d49d2c7442e683f6971acc7cb1cef168ec27c
1273,1273.0,1447.0,knime/knime-core,26df40ad77229687be02ed18b5bc9e43a76274e0,"NXT-756: Node dialog data services + refactoring

Service accesses extracted into extra class.

NXT-756 (Add possibility to register dialogs as an ui-extension)",https://github.com/knime/knime-core/commit/26df40ad77229687be02ed18b5bc9e43a76274e0
1274,1274.0,1448.0,knime/knime-core,bd75777d9afb995843e75be463f1ae0b062ceb5a,"NXT-679: Resource-type added (node view ui extension)

Replaces the 'isWebComponent'-method. It's more flexible and easier to
extend for more types in the future.
NodeViewEnt slightly refactored for that matter.

NXT-679 (Frontend UI Extensions in PageBuilder (Composite Views))",https://github.com/knime/knime-core/commit/bd75777d9afb995843e75be463f1ae0b062ceb5a
1275,1275.0,1449.0,knime/knime-core,4989f6ee92ea13323701023632b4351eff8f14c0,"NXT-725: Enable individual access to resources of node view page

... via a relative path serving as the resource-id.
Depending on the environment (desktop vs. remote), either the complete
page url is provided _or_ just a relative page path.
In case of a page path, the related page resources can be access via a
new NodeViewManager.getNodeViewPageResource-method.

NodeViewManager-class refactorings include:
* node view cache with node id as key
* new page cache
* node views are always(!) removed from the cache on node removal, node
state change and workflow dispose
* pages are only removed from the cache if they are not static (on node
removal, state change, workflow dispose)
* page files are only deleted if they are not static
* a page id (used in page cache and as directory for page resource
files) is either the node factory name (static pages) or the node id
(dynamic pages)

Other refactorings:
* Page.relativePath returns a string instead of a path
* NodeViewEnt.getResourceUrl and NodeViewEnt.getResourcePath
* tests

NXT-725 (Extend and adopt WebPortal backend to enable node views (UI extension))",https://github.com/knime/knime-core/commit/4989f6ee92ea13323701023632b4351eff8f14c0
1276,1276.0,1450.0,knime/knime-core,b5418de23d08126ca4f3a6a19f39b189cb6f887f,"NXT-676: 'Data service API' for node views + heavy refactoring around it

* org.knime.rpc(.tests) removed; logic moved into org.knime.core.ui(.tests)
* package structure (e.g. for rpc-logic) revised and harmonized
  with the new web-ui logic
* new NodeView (and associated classes) from org.knime.core into
  org.knime.core.ui
* API to build 'pages' and 'node views' refactored:
** builder pattern
** not interface-driven (NodeView and Page are unmodifiable classes now)
* NodeViewManager to manage (and re-use) node view instances
* 'Reexecutable' interface added to org.knime.core (generalization of the
  ability of 'InteractiveNode's to re-execute) and
  WorkflowManager/NodeModel adopted accordingly
* data service API (also) for node views
** apply data service (text- or json-based)
** init data service (text- or json-based)
** data service (txt-based)
** rpc data service (json-rpc-based impl)
* new tests added to org.knime.core.ui.tests

NXT-676 (Data Service API for UI Extensions)",https://github.com/knime/knime-core/commit/b5418de23d08126ca4f3a6a19f39b189cb6f887f
1277,1277.0,1451.0,knime/knime-core,7d6f91939d3503b248e90936a035853ce606fe5f,"AP-17152: Minor refactor to reduce code duplication

AP-17152 (Filter event fired on re-load after re-execution (Refresh Button) event does not contain filter information)",https://github.com/knime/knime-core/commit/7d6f91939d3503b248e90936a035853ce606fe5f
1278,1278.0,1452.0,knime/knime-core,155d4be96fc52a85183188aa0b6bb0f379c17ed7,"AP-17070: Refactored anonymous hashing strategy classes into private classes.

AP-17070 (Sonar Code Cleanup)",https://github.com/knime/knime-core/commit/155d4be96fc52a85183188aa0b6bb0f379c17ed7
1279,1279.0,1453.0,knime/knime-core,1aa1cae064365ac4656892794794f41492c80607,AP-15651: Fix compilation errors introduce through refactoring core.table,https://github.com/knime/knime-core/commit/1aa1cae064365ac4656892794794f41492c80607
1280,1280.0,1454.0,knime/knime-core,2d227b7078061b9793ee63a68f52198ee9f4cb6c,"AP-16933: SinglePageExecution API slightly refactored

(without logic change)
* getSuccessorWizardNodesWithinPage method signature changed (for a more
flexible usage
* now unnecessary method removed
* WizardExecutionController to provide the id of the node that has been
reset for single page re-execution

AP-16933 (Execution statistics return reset nodes (for re-execution))",https://github.com/knime/knime-core/commit/2d227b7078061b9793ee63a68f52198ee9f4cb6c
1281,1281.0,1455.0,knime/knime-core,28323e406cb6f1bea6d4e5e594e7fe52f4b723b8,"code cleanup NodeModel#executeModel (no functional change)

... caused Sonar complained 'cyclic complexity = 53' and I'm about to
change this method.

No change other than code formatting and refactoring.",https://github.com/knime/knime-core/commit/28323e406cb6f1bea6d4e5e594e7fe52f4b723b8
1282,1282.0,1456.0,knime/knime-core,553f5079d25b06c1d81e8e7d836ff499d3a8de5e,"AP-15882: fixed issues with metanode inputs to 'captured' wkfs

* the port object reader (which in this case represent a
'workflow-incoming' port instead of a node output port) are placed at a
static position relative to the destination node
* bit of refactoring to increase readability and reduce method
complexity

AP-15882 (Problem with connections reaching into a capture scope whose
source is the parent workflow (i.e. metanode port))",https://github.com/knime/knime-core/commit/553f5079d25b06c1d81e8e7d836ff499d3a8de5e
1283,1283.0,1457.0,knime/knime-core,20841ddf868ec692c2ebdb3275b9bf967b19338a,"AP-15877: Changes to make ID work in Parallel Chunk Loop

* FlowVirtualScopeContext refactored to make it easier to use
* static helper method added to FlowVirtualScopeContext for easier
registration of the scopes 'host node'
* new abstract node model to represent node that serve as 'host nodes'
for a FlowVirtualScopeContext
* parallel chunk logic to use use virtual scope logic and register the
parallel chunk loop start node as 'host' node
* adding port objects to 'host node' synchronized
* ...

AP-15877 (Parallel Chunk Loop should retain port objects which lead into
a capture scope for later usage)",https://github.com/knime/knime-core/commit/20841ddf868ec692c2ebdb3275b9bf967b19338a
1284,1284.0,1458.0,knime/knime-core,4d891f1e60e3478dba9b211df15e69f3ad07993f,"AP-16017: Refactor ValueSchema#findValueFactory

Move a bunch of if/else conditions into other methods.

AP-16017 (Core Team Code Cleanup Benni)",https://github.com/knime/knime-core/commit/4d891f1e60e3478dba9b211df15e69f3ad07993f
1285,1285.0,1459.0,knime/knime-core,dbff9a8cb06ffde7976385870c8666b338dffab1,AP-14918: Refactor to RowRead / RowWrite,https://github.com/knime/knime-core/commit/dbff9a8cb06ffde7976385870c8666b338dffab1
1286,1286.0,1460.0,knime/knime-core,808289ff97a36638eafdfbc3a9a975526c908c0a,"AP-14897: Refactor new ReadAPI class names

- Also rename classes, extension point, etc.",https://github.com/knime/knime-core/commit/808289ff97a36638eafdfbc3a9a975526c908c0a
1287,1287.0,1461.0,knime/knime-core,14deace11affdecf7918944b929ed00bda8bb353,"AP-14652: Reduce visibility of Joiner code

AP-14652 (Refactoring and Cleanup)",https://github.com/knime/knime-core/commit/14deace11affdecf7918944b929ed00bda8bb353
1288,1288.0,1462.0,knime/knime-core,3169dbe517014e2078a3591ec2fa1386660ffdb6,"AP-14652: Updated internal reserved column name for joining on row keys.

Now matches the legacy joiner implementation.
Added a test and improved solution for the case where the column name disambiguator produces a column name that is also already taken.

AP-14652 (Refactoring and Cleanup)",https://github.com/knime/knime-core/commit/3169dbe517014e2078a3591ec2fa1386660ffdb6
1289,1289.0,1463.0,knime/knime-core,975c44a6e98a425f2bb7b339934fae14d0298b36,"AP-14652: Fixed ColumnPairsSelectionPanel (also required for AP-4686)

AP-14652 (Refactoring and Cleanup)",https://github.com/knime/knime-core/commit/975c44a6e98a425f2bb7b339934fae14d0298b36
1290,1290.0,1464.0,knime/knime-core,08946125424465b72770557898875769d569db35,"AP-14652: Progress report for BlockHashJoin.

AP-14652 (Refactoring and Cleanup)",https://github.com/knime/knime-core/commit/08946125424465b72770557898875769d569db35
1291,1291.0,1465.0,knime/knime-core,c7021644ae13d12720a6a39078de60f05fd7c302,"AP-14652: Refactoring and cleanup.

AP-14652 (Refactoring and Cleanup)",https://github.com/knime/knime-core/commit/c7021644ae13d12720a6a39078de60f05fd7c302
1292,1292.0,1466.0,knime/knime-core,435e6e434efa6ef84454ce0cdf462dc5e08d2033,"AP-13907: File store handler refactoring in order to work in virtual scopes

(2nd iteration)
If nodes are part of a virtual scope their file store handlers need to
reference (i.e. delegate) the handler provided by the virtual scope -
including the loop start/end file store handlers (which caused most of
the refactoring).

AP-13907 (Inner-workflow execution of 'workflow-producing' workflows results in broken 'static-input' references)",https://github.com/knime/knime-core/commit/435e6e434efa6ef84454ce0cdf462dc5e08d2033
1293,1293.0,1467.0,knime/knime-core,2b5b5b098949dff1e14cbd4475fdc54ddd181020,"AP-13907: Special file store handling in virtual scope

The file store handlers a determined by the virtual scope itself, i.e.
all nodes in a virtual scope exclusively use the file store handler
provided by the scope.
Bit of refactoring of the file store handler initialization in native
node container (for better readability).

AP-13907 (Inner-workflow execution of 'workflow-producing' workflows
results in broken 'static-input' references)",https://github.com/knime/knime-core/commit/2b5b5b098949dff1e14cbd4475fdc54ddd181020
1294,1294.0,1468.0,knime/knime-core,6d282eec162be1a495bfbf26de5e44f201fe04f0,"AP-14139: Enable RearrangeColumnsTable to save and load ExtensionTables

I don't like the implementation, but this is minimal invasive. We should
actually refactor a little how tables are saved/loaded. BDT save/load
has a lot of logic which can be reused, but is duplicated in some places.",https://github.com/knime/knime-core/commit/6d282eec162be1a495bfbf26de5e44f201fe04f0
1295,1295.0,1469.0,knime/knime-core,f9ac2859e07206388b5431cf43cf944d69ef0e8e,"AP-13359: refactored loading in ""NodeFactoryClassMapper""

AP-13359: Deactivate buddy class loading",https://github.com/knime/knime-core/commit/f9ac2859e07206388b5431cf43cf944d69ef0e8e
1296,1296.0,1470.0,knime/knime-core,53e7e357eb69146f0be8b3c17837e742c19528f7,"AP-6268: Logic to inactivate a component changed considerably

* inactivation now done by 'executing' the component's workflow manager
locally
* also: try-catch-logic moved into NodeExecutionJob (for components
only, for now, more refactoring still needs to be done here for native
nodes)

AP-6268 (Components cannot be used with Try Catch nodes)",https://github.com/knime/knime-core/commit/53e7e357eb69146f0be8b3c17837e742c19528f7
1297,1297.0,1471.0,knime/knime-core,2a71f89fbf26b04d9574587ba0adcb2bbfa08e1e,"AP-13038: Component metadata

- Removing the UI for port name and description setting on virtual in/out port nodes.
- Some refactoring and comments that made sense in this context.

AP-13038 (Component metadata editor)",https://github.com/knime/knime-core/commit/2a71f89fbf26b04d9574587ba0adcb2bbfa08e1e
1298,1298.0,1472.0,knime/knime-core,b7dc25c8b154d148e95171b88c96fd27ef94c1a6,"AP-12811: Changed error message creation

AP-12811 (Refactor map method of the MappingFramework)",https://github.com/knime/knime-core/commit/b7dc25c8b154d148e95171b88c96fd27ef94c1a6
1299,1299.0,1473.0,knime/knime-core,4493db946e8438007349a8f7ed08813bede686be,"AP-12811: Refactor map method of the MappingFramework

AP-12811 (Refactor map method of the MappingFramework)",https://github.com/knime/knime-core/commit/4493db946e8438007349a8f7ed08813bede686be
1300,1300.0,1474.0,knime/knime-core,71189d53785ef2d7979295f1b6377853937dcc1d,"AP-12001: Follow-up: metadata editor

- Refactoring due to moving the SWTUtilities class from org.knime.core to org.knime.core.ui

AP-12001 (Follow-up: metadata editor)
https://knime-com.atlassian.net/browse/AP-12001",https://github.com/knime/knime-core/commit/71189d53785ef2d7979295f1b6377853937dcc1d
1301,1301.0,1475.0,knime/knime-core,ca5e7ec55566763db483ad617a6eb6c3b76639b5,"AP-12119: KnimeURIUtil removed, URIUtil added

Due to refactoring.

AP-12119 (Copy&Paste of workflow from Hub)",https://github.com/knime/knime-core/commit/ca5e7ec55566763db483ad617a6eb6c3b76639b5
1302,1302.0,1476.0,knime/knime-core,6a3bcb4bd9ef4d7a10b4f7209d53790e63c6227f,"AP-11852: Refactoring & update documentation on knime.async.io.cachesize

AP-11852 (Enable asynchronous writing of tables to disk at loop end
nodes)",https://github.com/knime/knime-core/commit/6a3bcb4bd9ef4d7a10b4f7209d53790e63c6227f
1303,1303.0,1477.0,knime/knime-core,2e849c252287142413931ea7f927d7cb4c725df5,"AP-11852: Refactoring & update documentation on knime.synchronous.io

AP-11852 (Enable asynchronous writing of tables to disk at loop end
nodes)",https://github.com/knime/knime-core/commit/2e849c252287142413931ea7f927d7cb4c725df5
1304,1304.0,1478.0,knime/knime-core,803a6949e29c7fdf3982a16ce53b37d56f4f4870,"AP-10695: Refactor annotation display related code

- Centralizing color utilities
- Adding the notion of versioning (transient) of an annotation to allow for easier determination of recomputation requirements
- Moving a private convenience method from another class into AnnotationData as a public good

AP-10695 (Refactor annotation display related code)
https://knime-com.atlassian.net/browse/AP-10695",https://github.com/knime/knime-core/commit/803a6949e29c7fdf3982a16ce53b37d56f4f4870
1305,1305.0,1479.0,knime/knime-core,b1dd186ede81e1df9033d35d0a0525851a07ad94,"(devops): removed deps to workbench code and jsnippets

... the code in org.knime.base was refactored so that it doesn't do
CSS replacement anymore. Looking at the source code it had never done it
really as the file doesn't contain the '[CSS]' placeholder.

Changes are needed by Sebastian Gerau who's working on restructuring the
build",https://github.com/knime/knime-core/commit/b1dd186ede81e1df9033d35d0a0525851a07ad94
1306,1306.0,1480.0,knime/knime-core,33a7729ab369db8bebeab56a4e1290286cb76894,"AP-10425: Move Annotations to Back/Front context menu entries

- Refactoring common code due to PR feedback

AP-10425 (Move Annotations to Back/Front context menu entries)
https://knime-com.atlassian.net/browse/AP-10425",https://github.com/knime/knime-core/commit/33a7729ab369db8bebeab56a4e1290286cb76894
1307,1307.0,1481.0,knime/knime-core,2549f90f8bb63629d58f6b6a1eed921ffd0046c9,"AP-10425: Move Annotations to Back/Front context menu entries

- Adding bring forward and send backward Actions, as well as WorkflowManager code
- Including new actions, and pre-existing 'to front' and 'to back' actions to the context menu
- Refactoring to allow the 4 annotation movement actions to share common code

AP-10425 (Move Annotations to Back/Front context menu entries)
https://knime-com.atlassian.net/browse/AP-10425",https://github.com/knime/knime-core/commit/2549f90f8bb63629d58f6b6a1eed921ffd0046c9
1308,1308.0,1482.0,knime/knime-core,11783e11b0e0a2f356cfd907d04de4bfe14a5126,"AP-9564: Pin workflow messages to viewport

- Workflow info / warn / error messages are now pinned to the top of viewport, tracking the viewport's size and location changes
- Refactoring suggestions from PR feedback
- Ridding ourselves of the message box flicker on scroll
- Left justifying the message labels

AP-9564 (Workflow Editor: yellow message bar (""you are editing a remote workflow"") always to be pinned to the top of the current viewport)
https://knime-com.atlassian.net/browse/AP-9564",https://github.com/knime/knime-core/commit/11783e11b0e0a2f356cfd907d04de4bfe14a5126
1309,1309.0,1483.0,knime/knime-core,97e06d6081fa4af1ec7a0a228463035ffec574db,"(devops): removed deps to workbench code and jsnippets

... the code in org.knime.base was refactored so that it doesn't do
CSS replacement anymore. Looking at the source code it had never done it
really as the file doesn't contain the '[CSS]' placeholder.

Changes are needed by Sebastian Gerau who's working on restructuring the
build",https://github.com/knime/knime-core/commit/97e06d6081fa4af1ec7a0a228463035ffec574db
1310,1310.0,1484.0,knime/knime-core,4f527d1811253b4b1666c2d93744782d50748fb8,"AP-9349: Refactor it tracking: buffer->reader; own class for it builder

AP-9349 (Column-based storage: row iterator for subset of columns)",https://github.com/knime/knime-core/commit/4f527d1811253b4b1666c2d93744782d50748fb8
1311,1311.0,1485.0,knime/knime-core,9f2a68b5cbe713bfd23ef741f3013cfd22e618ad,"AP-6411 Refactored the JS view using the Knime Table

The confusion matrix table is now using the Knime Table.
The confusion matrix side values (rates) are now calculated in the JS view.
The classification name are derived from the Datatable spec.

AP-6411 (JS Scorer Node)",https://github.com/knime/knime-core/commit/9f2a68b5cbe713bfd23ef741f3013cfd22e618ad
1312,1312.0,1486.0,knime/knime-core,8ab7968f49309875455a54233abb97b686d15497,"AP-6411: Refactored the AccuracyScorerCalculator class

Implemented the static createConfusionMatrixSpec() method along with a helper method calculate() .

AP-6411 (JS Scorer Node)",https://github.com/knime/knime-core/commit/8ab7968f49309875455a54233abb97b686d15497
1313,1313.0,1487.0,knime/knime-core,c7d6b841014a1ab0fc3068a9f6773f73027e261b,"Added options in the Accuracy Scorer Calculator (sorting strategy, sorting reversed, ignore missing values).
Refactored a little bit (the constructore doesn't do much now, the results are now calculated by calling the calculate method).
Added the number of rows as a result to the calculator.",https://github.com/knime/knime-core/commit/c7d6b841014a1ab0fc3068a9f6773f73027e261b
1314,1314.0,1488.0,knime/knime-core,56d86565185a52fbf59c8378f89ef1ffa93caabc,"AP-8683: refactoring

AP-8683 (Change Search to Filter in NameFilterPanel)",https://github.com/knime/knime-core/commit/56d86565185a52fbf59c8378f89ef1ffa93caabc
1315,1315.0,1489.0,knime/knime-core,80b2cf8a68dcb98e0e5ae80cd5adea27af56669c,"AP-8864: Added Outlier Detector Apply and Model

Some refactoring of the classes to reduce dependencies.

AP-8864 (Outlier Detector (Apply))",https://github.com/knime/knime-core/commit/80b2cf8a68dcb98e0e5ae80cd5adea27af56669c
1316,1316.0,1490.0,knime/knime-core,ab9c77b0f8c8287637fad182a6fd42fda2c7fa06,"AP-8977: Refactor LogRegPredictor to avoid second pass over row

AP-8977 (Speedup Logistic Regression Predictor, especially for 'wide'
data/fingerprints (tens of hundreds of attributes))",https://github.com/knime/knime-core/commit/ab9c77b0f8c8287637fad182a6fd42fda2c7fa06
1317,1317.0,1491.0,knime/knime-core,234ad6f0514b62e583fdc3402bc4b028fde3cc8d,"AP-5670: addressing the remaining discussed issues.

. the SHIFT-F12 binding has been removed
. ""Hide Node Names"" and ""Append Node Ids"" will remain using CTRL across all platforms
. M1-ENTER, M1-SHIFT-ENTER and M1 keypress work ubiquitously across the node dialog configuration panel on Mac now
. some refactoring of the node dialog wrapping classes introducing an abstract superclass, including TODO notes about future refactoring",https://github.com/knime/knime-core/commit/234ad6f0514b62e583fdc3402bc4b028fde3cc8d
1318,1318.0,1492.0,knime/knime-core,22b390e432ccec34c15bac2ec894ae0d9b87b7e2,"AP-8864: Refactoring

Summary table now solely created by the OutlierReviser

AP-8864 (Outlier Detector)",https://github.com/knime/knime-core/commit/22b390e432ccec34c15bac2ec894ae0d9b87b7e2
1319,1319.0,1493.0,knime/knime-core,3312a1e26043cebae2975b24f03e63f135db1b25,"AP-5355: Refactoring, concurrent selection handling

Columns defining groups as well as outliers get ignored when computing
the groups

AP-5355 (Outlier Detector)",https://github.com/knime/knime-core/commit/3312a1e26043cebae2975b24f03e63f135db1b25
1320,1320.0,1494.0,knime/knime-core,bceb64a6557657c95a7c4c513b4dbd3b300a3392,"AP-5355: Refactoring, new functions and docu update

The Outlier Detector now provides a summary view (intervals,
number of outlier, number of member)

AP-5355 (Outlier Detector)",https://github.com/knime/knime-core/commit/bceb64a6557657c95a7c4c513b4dbd3b300a3392
1321,1321.0,1495.0,knime/knime-core,15c83c4648e015553705c61f617d40bf5aebb13e,"AP-8683: refactorings

changed key-, mouse-and focuslisteners to adapters, removed static
string constants, fixed ConcurrentModificationException by replacing
enhanced for loop with regular one

AP-8683 (Change Search to Filter in NameFilterPanel)",https://github.com/knime/knime-core/commit/15c83c4648e015553705c61f617d40bf5aebb13e
1322,1322.0,1496.0,knime/knime-core,e5d242eb862f68f729eb68f7045cd3d45bc26cfb,"AP-8745: refactored expressions core and cleaned code

* polished everything and decided what's visible to other programmers.
* added predicate script functions that only return boolean
* adjusted formulas node and testcases

AP-8745 (New Formulas Node)",https://github.com/knime/knime-core/commit/e5d242eb862f68f729eb68f7045cd3d45bc26cfb
1323,1323.0,1497.0,knime/knime-core,4e4aa5853abebf2ef41c72804e2c1cd3d947fc9b,AP-8731: Refactor handleNaN,https://github.com/knime/knime-core/commit/4e4aa5853abebf2ef41c72804e2c1cd3d947fc9b
1324,1324.0,1498.0,knime/knime-core,1c71ec591ad9980049cfeff29dd3e6aa17949e33,"AP-7917: Refactor GBT PMML Predictor node to accept classification model

AP-7917 (Implement PMML translation for classification GBTs)",https://github.com/knime/knime-core/commit/1c71ec591ad9980049cfeff29dd3e6aa17949e33
1325,1325.0,1499.0,knime/knime-core,d7acb4b7938a1b5466769bbe57cc80bcc7d81cf3,"AP-6906: refactor utility methods for dealing with JSon In/Out

AP-6906 (Usability of Call Workflow Nodes with Respect to Input and
Output Parameters)",https://github.com/knime/knime-core/commit/d7acb4b7938a1b5466769bbe57cc80bcc7d81cf3
1326,1326.0,1500.0,knime/knime-core,df7454bb9caea9309c6a0092b5edd245c60e0acb,"AP-6906: stricter parameter names for DialogNodes + refactored...

.. determining the input/output nodes.

AP-6906 (Usability of Call Workflow Nodes with Respect to Input and
Output Parameters)",https://github.com/knime/knime-core/commit/df7454bb9caea9309c6a0092b5edd245c60e0acb
1327,1327.0,1501.0,knime/knime-core,98fed83bf3d304c89ec248e1967770084b9f6c06,"AP-6906: Refactor getExternalNodeDataNodes for duplicate handling

AP-6906 (Usability of Call Workflow Nodes with Respect to Input and
Output Parameters)",https://github.com/knime/knime-core/commit/98fed83bf3d304c89ec248e1967770084b9f6c06
1328,1328.0,1502.0,knime/knime-core,2e5aa41f6d92916aaffc40c37e76c8d8c74604f8,"AP-7982: refactored workflow load with more version checks

AP-7982 (Workflow Loader to show confirmation dialog if a workflow
created with a 'future' version is loaded)",https://github.com/knime/knime-core/commit/2e5aa41f6d92916aaffc40c37e76c8d8c74604f8
1329,1329.0,1503.0,knime/knime-core,1f25e62348e5b6aa968f5a5e021a0458459697b3,"AP-7827: a little refactoring

AP-7827: New usage configuration dialog for wrapped metanodes",https://github.com/knime/knime-core/commit/1f25e62348e5b6aa968f5a5e021a0458459697b3
1330,1330.0,1504.0,knime/knime-core,3be179cd09a845062d1df81b3f38cd1f4f0ec4ab,"AP-7074: Refactor framework to be more general

It is now possible to perform vanilla SGD in addition to SAG.

AP-7074: Logistic Regression: SAG algorithm",https://github.com/knime/knime-core/commit/3be179cd09a845062d1df81b3f38cd1f4f0ec4ab
1331,1331.0,1505.0,knime/knime-core,28a6bd5e6eb0e4ea6ed2003799c95c5b82ffad9b,"AP-7074: Some refactoring and documentation

Make MultinomialLoss an enum type since it has no members.
Remove the class Gradient that is never used.",https://github.com/knime/knime-core/commit/28a6bd5e6eb0e4ea6ed2003799c95c5b82ffad9b
1332,1332.0,1506.0,knime/knime-core,c288ada372dd3f6db5c8b8e4f0be57c34030af8d,"Refactoring of the org.knime.time package

* created new package org.knime.time.util
* moved all relevant classes into it
* created DateTimeUtils class containing important functions",https://github.com/knime/knime-core/commit/c288ada372dd3f6db5c8b8e4f0be57c34030af8d
1333,1333.0,1507.0,knime/knime-core,81fee02db8804bd4361cb68d4cf91bdba3565986,"AP-7065 Change in node state listener

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/81fee02db8804bd4361cb68d4cf91bdba3565986
1334,1334.0,1508.0,knime/knime-core,8ed5d8db78d2e0ea5015d21c6df6ebaa55cdb5bf,"AP-7065 Extract SubnodeViewValue, further extend test case

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/8ed5d8db78d2e0ea5015d21c6df6ebaa55cdb5bf
1335,1335.0,1509.0,knime/knime-core,207ed532e416c118d2f784d0ce282ea96a8d119e,"AP-7065 Move SubnodeViewableModel to org.knime.core.wizard

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/207ed532e416c118d2f784d0ce282ea96a8d119e
1336,1336.0,1510.0,knime/knime-core,8a2b22cc1de87041d4945e0e76394e22852d3b8e,"AP-7065: fix test case & removed unused code

AP-7065 (Refactor WizardExecutionController for single page and wizard
execution)",https://github.com/knime/knime-core/commit/8a2b22cc1de87041d4945e0e76394e22852d3b8e
1337,1337.0,1511.0,knime/knime-core,84f1923c7e4e810e663b7777dbb6bc8facb3f9e1,"AP-7065: very minor code cleanup & comments

AP-7065 (Refactor WizardExecutionController for single page and wizard
execution)",https://github.com/knime/knime-core/commit/84f1923c7e4e810e663b7777dbb6bc8facb3f9e1
1338,1338.0,1512.0,knime/knime-core,84e8ae513cb70f0b1a226eb4aaea3e16345f2472,"AP-7065 Appended test case, value map has NodeIDSuffix as key

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/84e8ae513cb70f0b1a226eb4aaea3e16345f2472
1339,1339.0,1513.0,knime/knime-core,f3172ffce4f2425aea32f05e07f47922e2d04eb5,"AP-7065: fixed node state listener in SubNodeViewableModel

AP-7065 (Refactor WizardExecutionController for single page and wizard
execution)",https://github.com/knime/knime-core/commit/f3172ffce4f2425aea32f05e07f47922e2d04eb5
1340,1340.0,1514.0,knime/knime-core,51fc2db5697d527466cd9e852ffbf141aee85cb7,"AP-7065 Javadoc, api filters

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/51fc2db5697d527466cd9e852ffbf141aee85cb7
1341,1341.0,1515.0,knime/knime-core,cbd8f754f740d276474289dc0ad6fb4007a656a7,"AP-7065: code cleanup

AP-7065 (Refactor WizardExecutionController for single page and wizard
execution)",https://github.com/knime/knime-core/commit/cbd8f754f740d276474289dc0ad6fb4007a656a7
1342,1342.0,1516.0,knime/knime-core,69681edb1228eda88d47f7b39dc082214329bc52,"AP-7065 create wizard page view value map

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/69681edb1228eda88d47f7b39dc082214329bc52
1343,1343.0,1517.0,knime/knime-core,ff3fd6c2c36831890b2dfade141a34f99d7221bb,"AP-7065 Simple test

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/ff3fd6c2c36831890b2dfade141a34f99d7221bb
1344,1344.0,1518.0,knime/knime-core,b07656cf849b7ad5fb3553460b5e5fef621c7ff8,"AP-7065 correct serialization of combined error for subnode view

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/b07656cf849b7ad5fb3553460b5e5fef621c7ff8
1345,1345.0,1519.0,knime/knime-core,8cd41f21294e919bc721e5389ffbdd6fa3c02dde,"AP-7065 resetting view on validation or loading IOExceptions

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/8cd41f21294e919bc721e5389ffbdd6fa3c02dde
1346,1346.0,1520.0,knime/knime-core,71066f8ba0b85f20484ddec98f7ccb8c8e1ad39e,"AP-7065 still a few TODOs

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/71066f8ba0b85f20484ddec98f7ccb8c8e1ad39e
1347,1347.0,1521.0,knime/knime-core,7360d6f06e8f3916846917d40d8d5d5c748831ab,"AP-7065 repair WEC after rebase

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/7360d6f06e8f3916846917d40d8d5d5c748831ab
1348,1348.0,1522.0,knime/knime-core,497002132545f070a7d6ab0c7b01383d1d84d3d8,"AP-7065 merging Thorsten’s change on WEC

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/497002132545f070a7d6ab0c7b01383d1d84d3d8
1349,1349.0,1523.0,knime/knime-core,4223a72d6ff0af686c07cabb29afd6459936bffd,"AP-7065 Checking value equals after reexecute, trigger model changed if not

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/4223a72d6ff0af686c07cabb29afd6459936bffd
1350,1350.0,1524.0,knime/knime-core,84b395a39d2d546059845b406a4f061c56cb5922,"AP-7065 validate on view model and show potential validation error

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/84b395a39d2d546059845b406a4f061c56cb5922
1351,1351.0,1525.0,knime/knime-core,d399aadfa0b25dc157acec41e0d3a788e5043937,"AP-7065 removing dispose listener again and adding instanceof check

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/d399aadfa0b25dc157acec41e0d3a788e5043937
1352,1352.0,1526.0,knime/knime-core,60c5bb44321e6585a50678d434bc4f8539792b13,"AP-7065: added assertion (state check really) for
#getWizardExecController

AP-7065 (Refactor WizardExecutionController for single page and wizard
execution)",https://github.com/knime/knime-core/commit/60c5bb44321e6585a50678d434bc4f8539792b13
1353,1353.0,1527.0,knime/knime-core,49bd261a5eb6b1c297b13f63c85dbd03302e6443,"AP-7065 splitting WizardPageManager in single and wizard

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/49bd261a5eb6b1c297b13f63c85dbd03302e6443
1354,1354.0,1528.0,knime/knime-core,f0d4531c6d009cd05510fe75ef37c6330076d0a9,"AP-7065 adding api filters file

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/f0d4531c6d009cd05510fe75ef37c6330076d0a9
1355,1355.0,1529.0,knime/knime-core,9d0ee0866e267c13934f188cc4538ab496a0020c,"AP-7065 WIP

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/9d0ee0866e267c13934f188cc4538ab496a0020c
1356,1356.0,1530.0,knime/knime-core,8ea727b87795bbe40a58e13d618ff72046041217,"AP-7065: added TODOS for Christian

AP-7065 (Refactor WizardExecutionController for single page and wizard
execution)",https://github.com/knime/knime-core/commit/8ea727b87795bbe40a58e13d618ff72046041217
1357,1357.0,1531.0,knime/knime-core,3094cf6545cc6fe0687c06dcfd53f5e9fd4008b8,"AP-7065: No NodeContext when queuing execution -- done by WFM itself

AP-7065 (Refactor WizardExecutionController for single page and wizard
execution)",https://github.com/knime/knime-core/commit/3094cf6545cc6fe0687c06dcfd53f5e9fd4008b8
1358,1358.0,1532.0,knime/knime-core,b001a8126f47b1b686e2877204c3a7abe4b9ccf0,"AP-7065: assertion added

AP-7065 (Refactor WizardExecutionController for single page and wizard
execution)",https://github.com/knime/knime-core/commit/b001a8126f47b1b686e2877204c3a7abe4b9ccf0
1359,1359.0,1533.0,knime/knime-core,d4ca7ef06429605ef5b010d3888f169bf74dbf7f,"AP-7065: refactoring: single page 'executioncontroller' no longer a
controller

AP-7065 (Refactor WizardExecutionController for single page and wizard
execution)",https://github.com/knime/knime-core/commit/d4ca7ef06429605ef5b010d3888f169bf74dbf7f
1360,1360.0,1534.0,knime/knime-core,2e4383d5c316c1a04a885b83e5dd8b4f37ac43d5,"AP-7065: rename method in WFM

AP-7065 (Refactor WizardExecutionController for single page and wizard
execution)",https://github.com/knime/knime-core/commit/2e4383d5c316c1a04a885b83e5dd8b4f37ac43d5
1361,1361.0,1535.0,knime/knime-core,7cd1fb90bc7f96c6720de360d2a4b2c3df00a120,"AP-7065 rename AbstractExecutionController to WebResourceExecutionController

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/7cd1fb90bc7f96c6720de360d2a4b2c3df00a120
1362,1362.0,1536.0,knime/knime-core,364e36f68977d575ccad89ffc519fbcf62eb9e28,"AP-7065: added license.txt

AP-7065 (Refactor WizardExecutionController for single page and wizard
execution)",https://github.com/knime/knime-core/commit/364e36f68977d575ccad89ffc519fbcf62eb9e28
1363,1363.0,1537.0,knime/knime-core,ae84f670b8d6ebfe2a910c98d6d56fca333b9514,"AP-7065: Javadoc in WEC and SPEC

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/ae84f670b8d6ebfe2a910c98d6d56fca333b9514
1364,1364.0,1538.0,knime/knime-core,e09a6091efb666a2671719ed5bca3fb19c74421d,"AP-7065: Javadoc in AbstractExecutionController

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/e09a6091efb666a2671719ed5bca3fb19c74421d
1365,1365.0,1539.0,knime/knime-core,bb58741eaabe93d73ac905d87a29f527383a494c,"AP-7065: temporarily increasing wizard node view size to have a width larger than 992px (bootstrap md threshold)
is static right now, still needs a concept how this can be made configurable (per node settings)
AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/bb58741eaabe93d73ac905d87a29f527383a494c
1366,1366.0,1540.0,knime/knime-core,163a7107c9c9b8e129cc1765064d80f4820629bd,"AP-7065: since tag

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/163a7107c9c9b8e129cc1765064d80f4820629bd
1367,1367.0,1541.0,knime/knime-core,d7b3a3e4c2cd90571a16df05eb6b374be2006eb5,"AP-7065: API filter

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/d7b3a3e4c2cd90571a16df05eb6b374be2006eb5
1368,1368.0,1542.0,knime/knime-core,416e848eac5a4bba67a00e7ef68dfad900aa8688,"AP-7065: Adapting test cases for wizard execution

AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/416e848eac5a4bba67a00e7ef68dfad900aa8688
1369,1369.0,1543.0,knime/knime-core,9b620a526c647fb6d85aa0506cb8f3f8388a1803,"AP-7065: Splitting up WEC in Abstract and WEC+Single Executor
Changes to WorkflowManager
AP-7065 Refactor WizardExecutionController",https://github.com/knime/knime-core/commit/9b620a526c647fb6d85aa0506cb8f3f8388a1803
1370,1370.0,1544.0,knime/knime-core,faa75a7b42aa68e15ac5720f9de8c0ca25c30f1c,"AP-6231: UI labels modifiable + refactor protected fields

AP-6231 (API: new UI component NominalValueFilterPanel (twin list for
inclusion/exclusion of values from column's domain))",https://github.com/knime/knime-core/commit/faa75a7b42aa68e15ac5720f9de8c0ca25c30f1c
1371,1371.0,1545.0,knime/knime-core,008fd02ee39a978798bd9c10c537f9652e8772d5,"AP-7169: Refactor model classes

Introduce abstract class to remove redundant implementation of
PredictorRecord generation.
Load and save logic remains untouched to ensure compatibility.
The only classes that are directly affected by the changes are
AbstractTreeEnsembleModel (new), TreeEnsembleModel and
RegressionTreeModel. All other changes were necessary due to the
relocation of the enum TreeType from TreeEnsembleModel to
AbstractTreeEnsembleModel.

AP-7169 (NPE in Gradient Boosted Trees)",https://github.com/knime/knime-core/commit/008fd02ee39a978798bd9c10c537f9652e8772d5
1372,1372.0,1546.0,knime/knime-core,172901ac58c739efa1a4fb369454879c6ba2eaa3,Fixing time and collection bug. An older version was used during refactoring which why old bugs where copied over,https://github.com/knime/knime-core/commit/172901ac58c739efa1a4fb369454879c6ba2eaa3
1373,1373.0,1547.0,knime/knime-core,f754887801ead29c366d27673dab4ac268d77840,RefSplitColumn: Adds Reference Column Splitter and refactors Reference Column Filter to avoid redundant code,https://github.com/knime/knime-core/commit/f754887801ead29c366d27673dab4ac268d77840
1374,1374.0,1548.0,knime/knime-core,af5c18b0fed7b44fd9332b953b349302916c2d80,RowSplitRef: Adds Reference Row Splitter and refactors Reference Row Filter to avoid redundant code,https://github.com/knime/knime-core/commit/af5c18b0fed7b44fd9332b953b349302916c2d80
1375,1375.0,1549.0,knime/knime-core,c111cd232b476e8175ad3149afd3aea1afbd0864,"Catch regular close event, refactor dialog creation",https://github.com/knime/knime-core/commit/c111cd232b476e8175ad3149afd3aea1afbd0864
1376,1376.0,1550.0,knime/knime-core,699d56bde1a9dc500a4ff720f6898c7d4b6c56b1,Bug 5860 and refactored Joiner node dialog and Joiner class for easier re-usage in Spark joiner,https://github.com/knime/knime-core/commit/699d56bde1a9dc500a4ff720f6898c7d4b6c56b1
1377,1377.0,1551.0,knime/knime-core,684dcc0b0361a80b2b33b1c2cebcf57429b65de6,"Classes refactored and exported to allow their usage in the Spark Java Snippet nodes.

FINAL SUBMISSION!",https://github.com/knime/knime-core/commit/684dcc0b0361a80b2b33b1c2cebcf57429b65de6
1378,1378.0,1552.0,knime/knime-core,a88fac83fb3a2d15df9881aeb6cbe423fd4a4824,Classes refactored and exported to allow their usage in the Spark Java Snippet nodes,https://github.com/knime/knime-core/commit/a88fac83fb3a2d15df9881aeb6cbe423fd4a4824
1379,1379.0,1553.0,knime/knime-core,679932de3b3f648496068b20c04ea1008ca47fbe,Classes refactored and exported to allow their usage in the Spark Java Snippet nodes,https://github.com/knime/knime-core/commit/679932de3b3f648496068b20c04ea1008ca47fbe
1380,1380.0,1554.0,knime/knime-core,66159ca1b42d04839db80473335418ac156b474e,Classes refactored and exported to allow their usage in the Spark Java Snippet nodes,https://github.com/knime/knime-core/commit/66159ca1b42d04839db80473335418ac156b474e
1381,1381.0,1555.0,knime/knime-core,3477beb7b5344784ffbe36dbb49fc0d5800cce33,Classes refactored and exported to allow their usage in the Spark Java Snippet nodes,https://github.com/knime/knime-core/commit/3477beb7b5344784ffbe36dbb49fc0d5800cce33
1382,1382.0,1556.0,knime/knime-core,47e5ea80ce6521030d31fcd09a6ab269f3840ae7,Classes refactored and exported to allow their usage in the Spark Java Snippet nodes,https://github.com/knime/knime-core/commit/47e5ea80ce6521030d31fcd09a6ab269f3840ae7
1383,1383.0,1557.0,knime/knime-core,f8fde04a756dcae6b47ecfab2c5f367297bbbe02,Classes refactored and exported to allow their usage in the Spark Java Snippet nodes,https://github.com/knime/knime-core/commit/f8fde04a756dcae6b47ecfab2c5f367297bbbe02
1384,1384.0,1558.0,knime/knime-core,aa017312022d059d3773931b7714df0f33b8face,Column rename node refactored to use the new column rename config from the standard KNIME column rename node,https://github.com/knime/knime-core/commit/aa017312022d059d3773931b7714df0f33b8face
1385,1385.0,1559.0,knime/knime-core,8a6c6424369d746ce7c6e4239e82c8216ba95312,Rename node refactored to increase re-usability in other nodes by adding a dedicated configuration object,https://github.com/knime/knime-core/commit/8a6c6424369d746ce7c6e4239e82c8216ba95312
1386,1386.0,1560.0,knime/knime-core,b863de2b4deb12f761d04b1f1622129d672ffc71,"on Bug 6121 (Data Generator, File Reader, Concatenate nodes to implement streamable API)
- changing data gen & concatenate node, refactoring some util classes",https://github.com/knime/knime-core/commit/b863de2b4deb12f761d04b1f1622129d672ffc71
1387,1387.0,1561.0,knime/knime-core,e0107fc430fa4e6cb0368b240d370981206f4a49,"on bug 6096: If/Case-Start nodes with additional option ""activate all outputs during configuration step"" 
https://bugs.knime.org/show_bug.cgi?id=6096
... still refactoring",https://github.com/knime/knime-core/commit/e0107fc430fa4e6cb0368b240d370981206f4a49
1388,1388.0,1562.0,knime/knime-core,dd35a6c988196e37771c8dc07336163b67a2acae,"on bug 6096: If/Case-Start nodes with additional option ""activate all outputs during configuration step"" 
https://bugs.knime.org/show_bug.cgi?id=6096
... still refactoring",https://github.com/knime/knime-core/commit/dd35a6c988196e37771c8dc07336163b67a2acae
1389,1389.0,1563.0,knime/knime-core,49d38aa2d1d6e88dbd61ce1603eec19274f91c10,"on bug 6096: If/Case-Start nodes with additional option ""activate all outputs during configuration step"" 
https://bugs.knime.org/show_bug.cgi?id=6096
... still refactoring",https://github.com/knime/knime-core/commit/49d38aa2d1d6e88dbd61ce1603eec19274f91c10
1390,1390.0,1564.0,knime/knime-core,c7fbd31f55d124bdcae3e406472005576ea812f0,modelchanged on reset didn't perform correctly after refactoring,https://github.com/knime/knime-core/commit/c7fbd31f55d124bdcae3e406472005576ea812f0
1391,1391.0,1565.0,knime/knime-core,531488a0ead5eef0700af6781888cfad31dddd71,"REOPENED - bug 5742: New node: Target Shuffling
	renamed (via refactoring) yScramble-node 

https://bugs.knime.org/show_bug.cgi?id=5742",https://github.com/knime/knime-core/commit/531488a0ead5eef0700af6781888cfad31dddd71
1392,1392.0,1566.0,knime/knime-core,349ac4f005da45907055f2882011af8c41493d2d,"fix bug 5278: Utility class for sorting a table column wise 
https://bugs.knime.org/show_bug.cgi?id=5278
fix bug 5279:  Refactor/ Replace Statistic3Table
https://bugs.knime.org/show_bug.cgi?id=5279
(merged from branch)",https://github.com/knime/knime-core/commit/349ac4f005da45907055f2882011af8c41493d2d
1393,1393.0,1567.0,knime/knime-core,f78ffae78d0a127b887b01efa6a39b7b07e04414,"fix bug 5278: Utility class for sorting a table column wise 
https://bugs.knime.org/show_bug.cgi?id=5278
fix bug 5279:  Refactor/ Replace Statistic3Table
https://bugs.knime.org/show_bug.cgi?id=5279
(merged from branch)",https://github.com/knime/knime-core/commit/f78ffae78d0a127b887b01efa6a39b7b07e04414
1394,1394.0,1568.0,knime/knime-core,a105f9c49addd9a35f83db14be4d77d4b11fcba3,Started refactoring to reuse the dialog components in the db groupby node as well,https://github.com/knime/knime-core/commit/a105f9c49addd9a35f83db14be4d77d4b11fcba3
1395,1395.0,1569.0,knime/knime-core,26b44631b20b2b316b4cfb19c79a167c26c3184c,"only refactoring - changed all code to use BDTable - easier progress reporting. Part of fix for:
5022: Logistic Regression Learner improvements
http://bimbug.inf.uni-konstanz.de/show_bug.cgi?id=5022",https://github.com/knime/knime-core/commit/26b44631b20b2b316b4cfb19c79a167c26c3184c
1396,1396.0,1570.0,knime/knime-core,1ecddbc4f659306833e5fe958afa00d1862c8066,fixed auto-guessing in refactored domain calculator,https://github.com/knime/knime-core/commit/1ecddbc4f659306833e5fe958afa00d1862c8066
1397,1397.0,1571.0,knime/knime-core,845b97e86217e1359ccc77d183e511b269d78944,"IN_PROGRESS - bug 5224: Hive connector node 
http://bimbug.inf.uni-konstanz.de/show_bug.cgi?id=5224

- added first version of node
- refactored settings classes
- fixed problem in DatabaseDriverLoader when JDBC driver requires additional Jar files",https://github.com/knime/knime-core/commit/845b97e86217e1359ccc77d183e511b269d78944
1398,1398.0,1572.0,knime/knime-core,d18f7440f96fefa56753f40259c72e93d89318c2,"Refactoring wizard nodes to contain representation and value
Adapt changes to new quickform nodes",https://github.com/knime/knime-core/commit/d18f7440f96fefa56753f40259c72e93d89318c2
1399,1399.0,1573.0,knime/knime-core,47e603181251723cf5fffc9038b7c93760d304a0,refactoring some file store code without changing any functionality. Will continue with FileStorePortObject later... (currently it says in the header that the class is not supported by the core). Checking it in as we will do some class name refactoring tomorrow (working on the subnode),https://github.com/knime/knime-core/commit/47e603181251723cf5fffc9038b7c93760d304a0
1400,1400.0,1574.0,knime/knime-core,f3edd868849417c86013045d2214699313a6e427,"refactored one method and added a commented out code block, which will be used later when we have FileStorePortObject",https://github.com/knime/knime-core/commit/f3edd868849417c86013045d2214699313a6e427
1401,1401.0,1575.0,knime/knime-core,c64064c803825f94359670bc0503a46cb3ff4f5a,refactored most of the interactive and web node and view handling,https://github.com/knime/knime-core/commit/c64064c803825f94359670bc0503a46cb3ff4f5a
1402,1402.0,1576.0,knime/knime-core,204638e15741a685280efab181a16b7116fae8f2,"fixed problem with ""match all"" wildcards and full string replacement; was introduced with the last refactoring",https://github.com/knime/knime-core/commit/204638e15741a685280efab181a16b7116fae8f2
1403,1403.0,1577.0,knime/knime-core,7bb9c6aae61e4b0871ca020b274a183dad5ca887,"deprecating getState() in NodeContainer. We (MB, BW) added more states (EXECUTED_MARKED and EXECUTED_QUEUED), which are needed for the re-execution of interactive nodes. The new states require refactoring of all occurrences, which we like to avoid in the future. Hence, a NodeContainerState interface was added that is available from the NC and which is sufficient to do all state checking in GUI, reporting and server code. More changes to come...",https://github.com/knime/knime-core/commit/7bb9c6aae61e4b0871ca020b274a183dad5ca887
1404,1404.0,1578.0,knime/knime-core,876a7941b82a1aea6fdb7e21ba923e20ebef92c6,"deprecating getState() in NodeContainer. We (MB, BW) added more states (EXECUTED_MARKED and EXECUTED_QUEUED), which are needed for the re-execution of interactive nodes. The new states require refactoring of all occurrences, which we like to avoid in the future. Hence, a NodeContainerState interface was added that is available from the NC and which is sufficient to do all state checking in GUI, reporting and server code. More changes to come...",https://github.com/knime/knime-core/commit/876a7941b82a1aea6fdb7e21ba923e20ebef92c6
1405,1405.0,1579.0,knime/knime-core,be39883e4b83a4ceac92ccb0d821de5819791a69,"working on bug 3314: Linear Correlation node to have more dynamic column filter (dynamic column handling) 
fixed code, refactoring follows",https://github.com/knime/knime-core/commit/be39883e4b83a4ceac92ccb0d821de5819791a69
1406,1406.0,1580.0,knime/knime-core,9ec85d9cd89afefc2a9d26b80d62bfa081ccd56d,added API problem filter for column filter refactoring,https://github.com/knime/knime-core/commit/9ec85d9cd89afefc2a9d26b80d62bfa081ccd56d
1407,1407.0,1581.0,knime/knime-core,72848a3ab7ed3e0ebddb0584370c5d50b8780448,"RESOLVED - bug 3276: Refactor usage of XMLBeans 
http://bimbug.inf.uni-konstanz.de/show_bug.cgi?id=3276

- the classloader of org.apache.xmlbeans must consult all dependent plug-ins in order to find the xsb files
- plug-ins using  xmlbeans must also export non-Java packages containing the xsb files so that the classloader of org.apache.xmlbeans can find them",https://github.com/knime/knime-core/commit/72848a3ab7ed3e0ebddb0584370c5d50b8780448
1408,1408.0,1582.0,knime/knime-core,c3e29b9d02dfdd2177f4b224da250a945597bf37,"RESOLVED - bug 3276: Refactor usage of XMLBeans 
http://bimbug.inf.uni-konstanz.de/show_bug.cgi?id=3276",https://github.com/knime/knime-core/commit/c3e29b9d02dfdd2177f4b224da250a945597bf37
1409,1409.0,1583.0,knime/knime-core,a02a1fbcc7d512a00ef16713f77fc1a65d19c841,"RESOLVED - bug 3276: Refactor usage of XMLBeans 
http://bimbug.inf.uni-konstanz.de/show_bug.cgi?id=3276",https://github.com/knime/knime-core/commit/a02a1fbcc7d512a00ef16713f77fc1a65d19c841
1410,1410.0,1584.0,knime/knime-core,9975178d044dacc3a9f0774e61b093d594ed2d04,"REOPENED - bug 3276: Refactor usage of XMLBeans 
http://bimbug.inf.uni-konstanz.de/show_bug.cgi?id=3276",https://github.com/knime/knime-core/commit/9975178d044dacc3a9f0774e61b093d594ed2d04
1411,1411.0,1585.0,knime/knime-core,4135c553b0c5271ba3023302d91f6e185abd30da,"REOPENED - bug 3276: Refactor usage of XMLBeans 
http://bimbug.inf.uni-konstanz.de/show_bug.cgi?id=3276",https://github.com/knime/knime-core/commit/4135c553b0c5271ba3023302d91f6e185abd30da
1412,1412.0,1586.0,knime/knime-core,7e2be860565631cbe04da092b2778e7dc69c2d47,"NEW - bug 3276: Refactor usage of XMLBeans 
http://bimbug.inf.uni-konstanz.de/show_bug.cgi?id=3276

Second part: change of org.knime.core",https://github.com/knime/knime-core/commit/7e2be860565631cbe04da092b2778e7dc69c2d47
1413,1413.0,1587.0,knime/knime-core,2a8ef31213109af2e92c60fc8c595e4294925582,"NEW - bug 3276: Refactor usage of XMLBeans 
http://bimbug.inf.uni-konstanz.de/show_bug.cgi?id=3276

First part: added xmlbeans-plug-in and chancged core.util and core.pmml",https://github.com/knime/knime-core/commit/2a8ef31213109af2e92c60fc8c595e4294925582
1414,1414.0,1588.0,knime/knime-core,f04faf06f3c1a7683d2c70dcada768511d390c7b,"refactoring some of the classes (pure eclipse refactoring, no functional change) -- no bug report",https://github.com/knime/knime-core/commit/f04faf06f3c1a7683d2c70dcada768511d390c7b
1415,1415.0,1589.0,knime/knime-core,fbb815b48340de68eaa7dfa95482fe484f01f4cc,cont. fix 2840: moved old Missing Value implementation to deprecated; refactored new Missing Value node to MissingValueHandling2*.*,https://github.com/knime/knime-core/commit/fbb815b48340de68eaa7dfa95482fe484f01f4cc
1416,1416.0,1590.0,knime/knime-core,80e6ec6f606933937acd96577b281205fe4a8571,"enh. 2840: Missing Value node allow specifying multiple columns (of the same type) in the ""Individual"" tab; search box for fast column selection
refactored utility methods from ColumnFilter- and FilterColumnPanel in a new class ListModelFilterUtils",https://github.com/knime/knime-core/commit/80e6ec6f606933937acd96577b281205fe4a8571
1417,1417.0,1591.0,knime/knime-core,3d1d07ec06334fbdd894cdf632599afc439edd11,refactored some of the sorting to allow other DataTables to be sorted to. General structure discussed with Thorsten.,https://github.com/knime/knime-core/commit/3d1d07ec06334fbdd894cdf632599afc439edd11
1418,1418.0,1592.0,knime/knime-core,678e0e3b4900e1150fed4f565605e4a5836a87ef,"moved sorting routines into core, refactored usage (no longer a DataTable)",https://github.com/knime/knime-core/commit/678e0e3b4900e1150fed4f565605e4a5836a87ef
1419,1419.0,1593.0,knime/knime-core,fffe28e92b76a4bdfbde12bc899d95550055a4bd,fix: due to the Config/NodeSettings refactoring into ConfigBase the method copyTo(ConfigWO) has been removed from NodeSettingsRO; implemented again; fixing backward comp.,https://github.com/knime/knime-core/commit/fffe28e92b76a4bdfbde12bc899d95550055a4bd
1420,1420.0,1594.0,knime/knime-core,aacf8b3529e13f8fcc4b4b92ed5ea8a3f3d2d667,"- some refactorings around file dropping on workflow editor
- enabled some more nodes to support file dropping (SDF, XLS, XML, ...)",https://github.com/knime/knime-core/commit/aacf8b3529e13f8fcc4b4b92ed5ea8a3f3d2d667
1421,1421.0,1595.0,knime/knime-core,003f732e8ca3d6da6d476df0cb9d68206b7adc1e,fixed the general regression predictor. failing test is running again. some PmmlContentHandler refactoring (addPMMLModelContent),https://github.com/knime/knime-core/commit/003f732e8ca3d6da6d476df0cb9d68206b7adc1e
1422,1422.0,1596.0,knime/knime-core,e4f3601512e180b32417cc3c06ab0c03ff1c69d2,"merged (almost all) changes from /branches/hittisau_2011 to trunk, includes new ensemble plugin, parallelized loop exec, auto-layouting, xml refactoring, partial pmml-rewrite",https://github.com/knime/knime-core/commit/e4f3601512e180b32417cc3c06ab0c03ff1c69d2
1423,1423.0,1597.0,knime/knime-core,63f09b7e130f837ea1cfc8d8f453320e92990585,refactored.,https://github.com/knime/knime-core/commit/63f09b7e130f837ea1cfc8d8f453320e92990585
1424,1424.0,1598.0,knime/knime-core,ab50971ae06ba75e5512d3a31eb096d552f6a2bd,"added variable option to CSV write. refactored remaining ""WorkflowVariable..."" to ""ScopeVariable..."".",https://github.com/knime/knime-core/commit/ab50971ae06ba75e5512d3a31eb096d552f6a2bd
1425,1425.0,1599.0,knime/knime-core,1ca59d47c9a8908f0e250675c82b6ba04793c758,"added variable option to CSV write. refactored remaining ""WorkflowVariable..."" to ""ScopeVariable..."".",https://github.com/knime/knime-core/commit/1ca59d47c9a8908f0e250675c82b6ba04793c758
1426,1426.0,1600.0,knime/knime-core,bae9a6fed61c499965f0e823d18333478ea5d244,bugfixes 1329 and 1736. refactored ScatterPlotter to override getMappedXValue and getMappedYValue ion order to ensure that all deriving classes use the same mapping (taking the dot size into account),https://github.com/knime/knime-core/commit/bae9a6fed61c499965f0e823d18333478ea5d244
1427,1427.0,1601.0,knime/knime-core,a2f1cb5cd9f7160f456da8af94c312b52a31de6a,"fix: Fuzzy Rule Predictor generates incomplete spec (during configure) when class probabilities are appended, but domain does not contain possible values; refactored column spec handling
fix: if highest prediction is zero, return missing class label
better error message when rule model is empty (empty model can be applied, however)",https://github.com/knime/knime-core/commit/a2f1cb5cd9f7160f456da8af94c312b52a31de6a
1428,1428.0,1602.0,knime/knime-core,22cd92eb4e5d2c37f3f829c34642e7dd412d4aa2,refactor unit test,https://github.com/knime/knime-core/commit/22cd92eb4e5d2c37f3f829c34642e7dd412d4aa2
1429,1429.0,1603.0,knime/knime-core,9d6115dbb3e5c043cc606e98a616bba76984e351,refactored some unit test classes,https://github.com/knime/knime-core/commit/9d6115dbb3e5c043cc606e98a616bba76984e351
1430,1430.0,1604.0,knime/knime-core,675c7ecfe0a2b2e78c9f2c2e6fa9f5f0ac723bc1,refactored some unit test classes,https://github.com/knime/knime-core/commit/675c7ecfe0a2b2e78c9f2c2e6fa9f5f0ac723bc1
1431,1431.0,1605.0,knime/knime-core,44c5834885edb9f3c0d6ca2dfdb0828d748aff0b,refactoring some test cases (once again),https://github.com/knime/knime-core/commit/44c5834885edb9f3c0d6ca2dfdb0828d748aff0b
1432,1432.0,1606.0,knime/knime-core,1462947b88d035b924d81121aeb3a46977b50666,refactoring some test cases,https://github.com/knime/knime-core/commit/1462947b88d035b924d81121aeb3a46977b50666
1433,1433.0,1607.0,knime/knime-core,b72a3bc8f587ecf9383a8bbb7513543fd49164b4,"bug fix #1529 (comments absent when loading old workflow)
(this includes quite some refactoring of the persistor classes), review thomas",https://github.com/knime/knime-core/commit/b72a3bc8f587ecf9383a8bbb7513543fd49164b4
1434,1434.0,1608.0,knime/knime-core,b8ef932e4bdf0352ec4e566bda0affac729efb91,"refactor'ed HiLiteHandler API: the handler is now a final class, an the manager is a translator without mapping; the DefaultHiLiteHandler und DefaultHiLiteManager have been removed",https://github.com/knime/knime-core/commit/b8ef932e4bdf0352ec4e566bda0affac729efb91
1435,1435.0,1609.0,knime/knime-core,e93dd273a6ce8815db240a0c4817a375a9585a46,"refactor'ed HiLiteHandler API: the handler is now a final class, an the manager is a translator without mapping; the DefaultHiLiteHandler und DefaultHiLiteManager have been removed",https://github.com/knime/knime-core/commit/e93dd273a6ce8815db240a0c4817a375a9585a46
1436,1436.0,1610.0,knime/knime-core,36eebc695e62fea1bb6f216befd35ef362e0195c,refactoring.,https://github.com/knime/knime-core/commit/36eebc695e62fea1bb6f216befd35ef362e0195c
1437,1437.0,1611.0,knime/knime-core,e887d17d75616604df725a5e58c4eea7dec48979,refactoring.,https://github.com/knime/knime-core/commit/e887d17d75616604df725a5e58c4eea7dec48979
1438,1438.0,1612.0,knime/knime-core,681ac21059276dfac24357a5097a4f9962bd88e6,"refactored port object classes - they are now in a separate package ""port""",https://github.com/knime/knime-core/commit/681ac21059276dfac24357a5097a4f9962bd88e6
1439,1439.0,1613.0,knime/knime-core,62c83d98fac6c175bd92adac4633b2423d4261cc,"refactored port object classes - they are now in a separate package ""port""",https://github.com/knime/knime-core/commit/62c83d98fac6c175bd92adac4633b2423d4261cc
1440,1440.0,1614.0,knime/knime-core,75f15bd9dd9776f92515aa3fe58fd4e43e00c63c,"refactored Wrapperli :(
added get and contains methods to collection cells",https://github.com/knime/knime-core/commit/75f15bd9dd9776f92515aa3fe58fd4e43e00c63c
1441,1441.0,1615.0,knime/knime-core,efb639e4e757af03c91c2635051eeb216133bebb,Interval bin creation refactored to eliminate duplicate code,https://github.com/knime/knime-core/commit/efb639e4e757af03c91c2635051eeb216133bebb
1442,1442.0,1616.0,knime/knime-core,9f981ae63be6b62d5daf064bcd777256aa37ac45,refactored Loophead/tail to start/end,https://github.com/knime/knime-core/commit/9f981ae63be6b62d5daf064bcd777256aa37ac45
1443,1443.0,1617.0,knime/knime-core,5fd1af71a757cdfe49be6979e1a434bf605a723f,refactoring: extracted method setWorkflowManagerInput,https://github.com/knime/knime-core/commit/5fd1af71a757cdfe49be6979e1a434bf605a723f
1444,1444.0,1618.0,knime/knime-core,8b2141549356453bc8f25ced61d34dc575162623,refactoring: extracted method setWorkflowManagerInput,https://github.com/knime/knime-core/commit/8b2141549356453bc8f25ced61d34dc575162623
1445,1445.0,1619.0,knime/knime-core,a1bd9dedc4a7237df6b897d182a76be235c72b0e,"Refactoring started to support interactive and fixed pie chart 
implementation",https://github.com/knime/knime-core/commit/a1bd9dedc4a7237df6b897d182a76be235c72b0e
1446,1446.0,1620.0,knime/knime-core,f7d988297dec0c26d99d4a3e52286f87680b9acf,"Start to refactor data models to support fixed and interactive
pie charts",https://github.com/knime/knime-core/commit/f7d988297dec0c26d99d4a3e52286f87680b9acf
1447,1447.0,1621.0,knime/knime-core,186fa4abfd4f87d494e09003484fea3620f8d548,"Start to refactor data models to support fixed and interactive
pie charts",https://github.com/knime/knime-core/commit/186fa4abfd4f87d494e09003484fea3620f8d548
1448,1448.0,1622.0,knime/knime-core,74485931eec7dd91fb740010359ea6dbf930b75e,fixed testSmilesParser; error was caused by the last-minute refactoring the chem-packages,https://github.com/knime/knime-core/commit/74485931eec7dd91fb740010359ea6dbf930b75e
1449,1449.0,1623.0,knime/knime-core,37d102ff4a84d36f3ce526e57163a244c4bd66b0,Small refactoring,https://github.com/knime/knime-core/commit/37d102ff4a84d36f3ce526e57163a244c4bd66b0
1450,1450.0,1624.0,knime/knime-core,7c4e18faa7d4572cd1807de191b64c76f20ef8be,Refactoring moving of the histogram implementations into a own package,https://github.com/knime/knime-core/commit/7c4e18faa7d4572cd1807de191b64c76f20ef8be
1451,1451.0,1625.0,universal-automata/liblevenshtein-java,60813c426215d60359e809750d2f58b765cb1e5b,"Refactors code structure.
1. Drops ""dylon"" from package names.
2. Renames ""com.github.liblevenshtein.levenshtein.distance"" to ""com.github.liblevenshtein.distance""
3. Renames ""com.github.liblevenshtein.levenshtein"" to ""com.github.liblevenshtein.transducer""
4. Moves ""com.github.liblevenshtein.levenshtein.LibLevenshteinProtos"" to ""com.github.liblevenshtein.proto.LibLevenshteinProtos""",https://github.com/universal-automata/liblevenshtein-java/commit/60813c426215d60359e809750d2f58b765cb1e5b
1452,1452.0,1626.0,universal-automata/liblevenshtein-java,a5cc961c19b66e115799e8873c60813ccb1ba7a5,"Refactors the SortedDawg to accept terms post-construction, if they are lexicographically, monotonically non-decreasing and none are lexicographically less than the previously-added term",https://github.com/universal-automata/liblevenshtein-java/commit/a5cc961c19b66e115799e8873c60813ccb1ba7a5
1453,1453.0,1627.0,apache/mahout,e1f606016ec6e3fd270424eaab2b6b530c68d48c,"Merge pull request #428 from rawkintrevo/2158

MAHOUT-2158 Website Refactor",https://github.com/apache/mahout/commit/e1f606016ec6e3fd270424eaab2b6b530c68d48c
1454,1454.0,1628.0,apache/mahout,c8c16b949c0eee0abab4e890590995d90353b0dc,website-refactor structure and navbar,https://github.com/apache/mahout/commit/c8c16b949c0eee0abab4e890590995d90353b0dc
1455,1455.0,1629.0,apache/mahout,8df99c7249b99ef137fb0f2935ac0c3050215fe4,"[MAHOUT-2084][MAHOUT-2083]: prevent build from creating a default source release in $MAHOUT_HOME/target (#389)

* [MAHOUT-2084] uppress default source release, refactor releases for compliance with:
https://www.apache.org/dev/release-publishing#distribution

* filter files only to copy to release, add release dir

* add dist/release to binary release

* [maven-release-plugin] prepare release mahout-14.1_2.11-RC4

* [maven-release-plugin] prepare for next development iteration

* manual rollback to 14.1-SNAPSHOT

* dist/diretory will not be suffixed by scala.compat.version, it is an apache reserved directory name

* adding keys file to /dist/release/mahout/KEYS per release instructions",https://github.com/apache/mahout/commit/8df99c7249b99ef137fb0f2935ac0c3050215fe4
1456,1456.0,1630.0,apache/mahout,53fe38bc1142b26ce947fd7351a2e183746f7b60,"Mahout 14.1 Rollback (#380)

* [MAHOUT-2017] small tweaks after large refactor several upgrades [MAHOUT-2072]

* [MAHOUT-2017] use {project.base.directory} over {project.build.directory}/

* [MAHOUT-2017] small fixes to release binaries explain some issues

* set back 14.1-SAPSHOT version

* [maven-release-plugin] prepare release mahout-14.1

* [maven-release-plugin] prepare release mahout-14.1

* [maven-release-plugin] prepare for next development iteration

* [MAHOUT-2071] move assembly files to mvn defined standard location per: https://maven.apache.org/guides/mini/guide-assemblies.html

* [MAHOUT-2071] bring in dependancies to assembly pom

* rollback to version 14.1-SNAPSHOT

* [MAHOUT-2071] cleanup root pom.xml

* [MAHOUT-2071] fixup assembly bin.xml and src.xml files

* [MAHOUT-2074] - Dockerfiles!!

* [MAHOUT-2074] - entrypioint work

* [maven-release-plugin] prepare release mahout-14.1

* merging upstream

* [maven-release-plugin] prepare for next development iteration

* remove <scm /> from all but root pom.xml

* remove mahout-release from root pom.xml

* release recycling",https://github.com/apache/mahout/commit/53fe38bc1142b26ce947fd7351a2e183746f7b60
1457,1457.0,1631.0,apache/mahout,3009d6500fd98d4e05f72cb027818c25f41253ca,"[NOJIRA][MAHOUT-14.1][RELEASEWORK]- Merge apache/mahout-14.1 to aplaumbo/mahout-14.1 (Github/gitbox permissions are not working- cant push directly) (#379)

* [MAHOUT-2017] small tweaks after large refactor several upgrades [MAHOUT-2072]

* [MAHOUT-2017] use {project.base.directory} over {project.build.directory}/

* [MAHOUT-2017] small fixes to release binaries explain some issues

* set back 14.1-SAPSHOT version

* [maven-release-plugin] prepare release mahout-14.1

* [maven-release-plugin] prepare release mahout-14.1

* [maven-release-plugin] prepare for next development iteration

* [MAHOUT-2071] move assembly files to mvn defined standard location per: https://maven.apache.org/guides/mini/guide-assemblies.html

* [MAHOUT-2071] bring in dependancies to assembly pom

* rollback to version 14.1-SNAPSHOT

* [MAHOUT-2071] cleanup root pom.xml

* [MAHOUT-2071] fixup assembly bin.xml and src.xml files

* [MAHOUT-2074] - Dockerfiles!!

* [MAHOUT-2074] - entrypioint work",https://github.com/apache/mahout/commit/3009d6500fd98d4e05f72cb027818c25f41253ca
1458,1458.0,1632.0,apache/mahout,b041fb3156ae954352611738a14dca7ecec10905,"Mahout 14.1 Rollback, release prepare, changes in terminoligy (#378)

* [MAHOUT-2017] small tweaks after large refactor several upgrades [MAHOUT-2072]

* [MAHOUT-2017] use {project.base.directory} over {project.build.directory}/

* [MAHOUT-2017] small fixes to release binaries explain some issues

* set back 14.1-SAPSHOT version",https://github.com/apache/mahout/commit/b041fb3156ae954352611738a14dca7ecec10905
1459,1459.0,1633.0,apache/mahout,c9f1245eca595ad3e3991adbbca8e5b3c0a78496,"Mahout 14.1 (#377)

* [MAHOUT-2017] small tweaks after large refactor several upgrades [MAHOUT-2072]

* [MAHOUT-2017] use {project.base.directory} over {project.build.directory}/",https://github.com/apache/mahout/commit/c9f1245eca595ad3e3991adbbca8e5b3c0a78496
1460,1460.0,1634.0,apache/mahout,e0015b85026ba96d8cb7f787ae196c4584ce1639,[MAHOUT-2017] small tweaks after large refactor several upgrades [MAHOUT-2072] (#376),https://github.com/apache/mahout/commit/e0015b85026ba96d8cb7f787ae196c4584ce1639
1461,1461.0,1635.0,apache/mahout,8e48983a66571ab6ac331c1cb2043df58ed1213b,[MAHOUT-2017] small tweaks after large refactor several upgrades [MAHOUT-2072],https://github.com/apache/mahout/commit/8e48983a66571ab6ac331c1cb2043df58ed1213b
1462,1462.0,1636.0,apache/mahout,49ad8cb457079301a87b02e71ba1273c62585bed,MAHOUT-2033 Fixed Map-Reduce Refactor,https://github.com/apache/mahout/commit/49ad8cb457079301a87b02e71ba1273c62585bed
1463,1463.0,1637.0,apache/mahout,410ed16af1fc587999868dd4990cebfa7d14633e,NO-JIRA Clean up MR refactor,https://github.com/apache/mahout/commit/410ed16af1fc587999868dd4990cebfa7d14633e
1464,1464.0,1638.0,apache/mahout,a84294211d9f426e7bc8709f6f876ce23b21ba6d,WEBSITE refactored Mr and regular navbars into one,https://github.com/apache/mahout/commit/a84294211d9f426e7bc8709f6f876ce23b21ba6d
1465,1465.0,1639.0,apache/mahout,e2549b78cd17ecdaeaec5ca67bad2474a7cb2d60,Refactored to docs and front sub sites,https://github.com/apache/mahout/commit/e2549b78cd17ecdaeaec5ca67bad2474a7cb2d60
1466,1466.0,1640.0,apache/mahout,727e5be85c0326d9c009d9cdc361fe47ffa201ad,MAHOUT-1837: fix incorrect <= threshold to > threshold to indicate a dense matrix. Refactored name to densityAnalysis(...). closes apache/mahout#244,https://github.com/apache/mahout/commit/727e5be85c0326d9c009d9cdc361fe47ffa201ad
1467,1467.0,1641.0,apache/mahout,38d0808523800a4369b18251e58b04d61771baf5,"WIP, Mahout-Flink Integration, adding missing methods; code refactoring",https://github.com/apache/mahout/commit/38d0808523800a4369b18251e58b04d61771baf5
1468,1468.0,1642.0,apache/mahout,1d9b6322e4db2cfd0b681e27591fe81206a915f5,"Refactored FinkEngine.drmDfsRead(), closes apache/mahout #165",https://github.com/apache/mahout/commit/1d9b6322e4db2cfd0b681e27591fe81206a915f5
1469,1469.0,1643.0,apache/mahout,f5a4a976288a3ec10942f1b28ea793bacac33955,MAHOUT-1776 Refactor common Engine agnostic classes to Math-Scala module closes apache/mahout#163,https://github.com/apache/mahout/commit/f5a4a976288a3ec10942f1b28ea793bacac33955
1470,1470.0,1644.0,apache/mahout,b988c493b562ceeaa5f82027f108c67d06c1fc19,"MAHOUT-1655 Refactors mr-legacy into mahout-hdfs and mahout-mr, closes apache/mahout#86",https://github.com/apache/mahout/commit/b988c493b562ceeaa5f82027f108c67d06c1fc19
1471,1471.0,1645.0,apache/mahout,ae1808be0e76c15544e75ec54aae3fc720f65364,refactor more engine specific parts of CLI and drivers and adding -D:key=value for changing the sparkconf of a driver,https://github.com/apache/mahout/commit/ae1808be0e76c15544e75ec54aae3fc720f65364
1472,1472.0,1646.0,apache/mahout,666d314fb8d9f466a5496a143d73d55036aea619,"NOJIRA refactor IndexedDataset and CLI drivers into core and engine specific parts, closes apache/mahout#59",https://github.com/apache/mahout/commit/666d314fb8d9f466a5496a143d73d55036aea619
1473,1473.0,1647.0,apache/mahout,a80974037853c5227f9e5ef1c384a1fca134746e,"MAHOUT-1541, MAHOUT-1568, MAHOUT-1569 refactoring the options parser and option defaults to DRY up individual driver code putting more in base classes, tightened up the test suite with a better way of comparing actual with correct",https://github.com/apache/mahout/commit/a80974037853c5227f9e5ef1c384a1fca134746e
1474,1474.0,1648.0,apache/mahout,3dd18344a47fb86b5127bcf3e051a2eb4e7ca996,"MAHOUT-1573: More explicit parallelism adjustments in math-scala DRM apis; elements of automatic parallelism management

This closes apache/mahout#13.

Squashed commit of the following:

commit de03a6aa8361424ee8fb776f995fbe1b811e0ccd
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Wed Jun 18 14:22:46 2014 -0700

    doc

commit f399f7a4dc61905ef05d9944dbd2e5a4c31a654b
Merge: b02cf18 45d8803
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Wed Jun 18 14:18:35 2014 -0700

    Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/mahout into MAHOUT-1573

commit b02cf18dac608e2f969a845efd7ee35a3a5bd0e0
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Wed Jun 18 14:18:03 2014 -0700

    switching to par(...) api

commit 06bb4bcdedb3c5aac50a44ddec3957f1ed12d808
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Fri Jun 6 23:05:12 2014 -0700

    pom fixes to fix tests (spark hadoop dependencies must precede that of mahout-math's for tests to run correctly)

commit 1e6e3f87ffab5897569fea94c643da2bdbb59e33
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Fri Jun 6 22:15:33 2014 -0700

    remove any special handling of Par in rewrites

commit 2f3b4f5bac901ec152453473d4982cb9b6e5d651
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Fri Jun 6 16:33:27 2014 -0700

    + auto_|| operator

commit 2733002f4b5db3d5114a440b03967d954a3738e9
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Fri Jun 6 15:56:26 2014 -0700

    explicit parallelism adjustment levers exact_|| and min_||

commit cf7f18b4af4ad043d2bdcefeeda15031fa018543
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Fri Jun 6 13:21:19 2014 -0700

    docs

commit 2f785109b9a52e748626ba46f5bc0a35ffc98e2c
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Fri Jun 6 13:02:11 2014 -0700

    Refactoring drmFromHDFS()",https://github.com/apache/mahout/commit/3dd18344a47fb86b5127bcf3e051a2eb4e7ca996
1475,1475.0,1649.0,apache/mahout,9cf90546dfa8bf11c99089a12d70b0272e7da211,"MAHOUT-1566: (Experimental) Regular ALS factorizer with conversion tests, optimizer enhancements and bug fixes.

This closes apache/mahout#6. (Re-commit).

Squashed commit of the following:

commit 32d5183543ee032770bfcebe0a5b2e22b3a388e3
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Wed Jun 4 12:31:57 2014 -0700

    removing commented-out section

commit 8e14bf0cf44a5ee86b0c137e8fbb0a8e75bf6ca8
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Tue Jun 3 13:44:01 2014 -0700

    parameter doc

commit cfa207b1bf98fd941b4d0d48baab4ac35b0deb03
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Tue Jun 3 13:42:12 2014 -0700

    +License on DQR

commit d9249968cd444ab90d92fa5197a5893f32e8c5a8
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Tue Jun 3 11:42:18 2014 -0700

    Adding regularization parameter. Refactoring decompositions and their tests into single package (for both distributed and non-distributed stuff).

commit f8ef52fe33dcf6259156ed913ac86dbad6d1a12f
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Tue Jun 3 11:05:52 2014 -0700

    flipping elementwise operator to OK in-place computation by default (back to where it were). For now. See if the problem surfaces frequent enough to switch to cloned computations.

commit dce371fbdbd17b9c1a3c79260dc8e1180e6073ee
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Mon Jun 2 18:48:33 2014 -0700

    Switching elemnetwise operators to non-inplace execution by default. This will create GC overhead but it is more benign for side effects.

commit c92a6cca9eea1c9d15c5fee9c29c79ef9ed3c77f
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Mon Jun 2 17:53:41 2014 -0700

    Fixing bug. Non-idempotent in-place elementwise computations are still an issue

commit 775490da0f28887350c8725909d4af24e8f37310
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Mon Jun 2 15:17:11 2014 -0700

    WIP; bug in zipping -- does several rounds over partitions causing unidempotant side effects.

commit 565ecb0ca2bb6b1dda30af2c81bdeb1be7fae9fe
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Fri May 30 18:11:42 2014 -0700

    stopping computation on negative convergence too (i guess in ideal data it converges too fast and rounding errors could push rmse back up.)

commit 2c9ba249e7dc312c2919a60d43e781eae67c51a9
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Fri May 30 17:50:36 2014 -0700

    license

commit 4b525e5011c002bdb4eb37e27699dc1f89f63d63
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Fri May 30 17:43:31 2014 -0700

    print out iteration rmses in the test

commit 84949a533270cb2bfe735f85321706a424a950cf
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Fri May 30 17:36:00 2014 -0700

    Bug fixes, test ok

commit c47995e74dce76e74bc4a58dbd473120da407dc0
Author: Dmitriy Lyubimov <dlyubimov@apache.org>
Date:   Thu May 29 21:32:23 2014 -0700

    ALS",https://github.com/apache/mahout/commit/9cf90546dfa8bf11c99089a12d70b0272e7da211
1476,1476.0,1650.0,apache/mahout,048b6899f4cbe1226981fd030cf6890510754406,"MAHOUT-1464 'Fat' nongraph physical A'A.
Refactored decompositions package out of drm package.
Added some kryo and akka related properties to the test setup.

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1579565 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/048b6899f4cbe1226981fd030cf6890510754406
1477,1477.0,1651.0,apache/mahout,0dc7b5cdebe24b9dd309d0c08a2049245d30d0a3,"Refactoring. Moved Hadoop related code out of CanopyClusterer.

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1574684 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/0dc7b5cdebe24b9dd309d0c08a2049245d30d0a3
1478,1478.0,1652.0,apache/mahout,e69bcbd022f59e1ec0fb6cec5fea0a742c761cf3,"MAHOUT-1020: Refactored printRepresentativePoints utility to RepresentativePointsDriver as a static so it can be used more easily outside of the tests. All tests run.

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1345375 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/e69bcbd022f59e1ec0fb6cec5fea0a742c761cf3
1479,1479.0,1653.0,apache/mahout,fd355fe7b249b552160eba3ce72aee3a09ee08e8,"MAHOUT-984. Refactored clustering out of FuzzyKMeansDriver using ClusterClassificationDriver.
All junit tests pass.

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1307859 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/fd355fe7b249b552160eba3ce72aee3a09ee08e8
1480,1480.0,1654.0,apache/mahout,ba81a9322c8006217df919e89e212e7723cbb9a2,"MAHOUT-981, MAHOUT-983. Refactored K-Means Clustering and Dirichlet Clustering to use ClusterClassificationDriver. 
Using cluster.getModel().configure() in ClusterClassificationDriver in order to configure DirichletCluster for MahalanobisDistanceMeasure. 
Added/fixed test cases by:
Using separate directories in test cases for supplying initial clusters and to store buildClusters to prevent two cluster-*-final files in the same directory.
Writing IntWritable in test cases instead of LongWritable ( As the ClusterClassificationDriver clusters records with IntWritable keys). 


git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1301654 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/ba81a9322c8006217df919e89e212e7723cbb9a2
1481,1481.0,1655.0,apache/mahout,3eba6f26486dcb9e2ec03702b60a38de399e738f,"MAHOUT-933:
- refactored ClusteringPolicies into hierarchy under new AbstractClusteringPolicy
- added close() to ClusteringPolicy to allow policy-specific actions needed to compute convergence
- removed ClusteringPolicy from ClusterIterator constructor as ClusterClassifier already has one
- added convergence computations for kmeans and fuzzyk
- added final clustersOut renaming to add -final suffix
- updated Display examples and unit tests to reflect above
- all tests run

I think it is time to begin refactoring the buildClusters methods of the respective clustering drivers to use ClusterIterator as it seems to be producing equivalent results to the original implementations. This will involve removing a lot of existing driver, mapper and reducer code and many time-consuming unit tests. It will also have some impact on other components as the representation of clusters in the file system changes from Cluster to self-describing ClusterWritable.

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1298625 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/3eba6f26486dcb9e2ec03702b60a38de399e738f
1482,1482.0,1656.0,apache/mahout,76e80dceb487cc9105b3e993bc9fadd65701fbb8,"MAHOUT-933: Refactored actual classification out of ClusterClassifier and into ClusteringPolicies. This
allows classifier to be completely generic as to the algorithm and gives policies correct use of e.g. fuzzyK 'm'
Introduced Canopy and MeanShift clustering policies for classification though not used by cluster iterator
Modified serialization of ClusterClassifiers to include ClusteringPolicy
Added ClusterClassifier serialization methods to exploded sequenceFile representation needed for MR
Updated Display examples and unit tests. All run

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1292563 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/76e80dceb487cc9105b3e993bc9fadd65701fbb8
1483,1483.0,1657.0,apache/mahout,6db7f6287a5720ea3dca07c1c89da4568bb4e84e,"MAHOUT-947: add new inputs to seq dumper, refactor to common CLI input

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1243556 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/6db7f6287a5720ea3dca07c1c89da4568bb4e84e
1484,1484.0,1658.0,apache/mahout,4432e3194bc54dcbfe8fd7267c01bddd26762e3a,"MAHOUT-846: Minor refactoring to eliminate unnecessary vector.times(SQRT2PI)

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1222443 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/4432e3194bc54dcbfe8fd7267c01bddd26762e3a
1485,1485.0,1659.0,apache/mahout,c590f1b006f6c186ea1e98e9aaea27df66f83f98,"MAHOUT-846: Refactored pdf() to sum the exponents and perform the exponentiation only once. All tests run

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1222420 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/c590f1b006f6c186ea1e98e9aaea27df66f83f98
1486,1486.0,1660.0,apache/mahout,29a7f38810270fa45a17bdf2418c896c1594d43c,"MAHOUT-798: add in examples for working with ASF email archive, plus various refactorings to clusterdumper, etc. for viewing results

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1180043 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/29a7f38810270fa45a17bdf2418c896c1594d43c
1487,1487.0,1661.0,apache/mahout,e3fb0c4f3162fda964b6ad8658fb09702bc279d2,"MAHOUT-746 Refactoring of the parallel Naive Bayes implementation in org.apache.mahout.classifier.naivebayes

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1142566 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/e3fb0c4f3162fda964b6ad8658fb09702bc279d2
1488,1488.0,1662.0,apache/mahout,38616e010567870d39b9fd5ef7211ef348fdb29b,"minor refactoring

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1135073 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/38616e010567870d39b9fd5ef7211ef348fdb29b
1489,1489.0,1663.0,apache/mahout,74f849b10c4d76281f31741a9cef48ceddcde123,"MAHOUT-729 Refactoring: Use Maps.newHashMap() and Lists.newArrayList() from Guava globally

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1134456 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/74f849b10c4d76281f31741a9cef48ceddcde123
1490,1490.0,1664.0,apache/mahout,d608a88d95b4a7bfd5f32a24f0c0a5d5cf6f25cf,"MAHOUT-718 Small refactoring to broaden the use of Google Guava: Closeables

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1131350 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/d608a88d95b4a7bfd5f32a24f0c0a5d5cf6f25cf
1491,1491.0,1665.0,apache/mahout,96024a77ce7b2d271e4c84e185912189ec53bd4e,"MAHOUT-718 Small refactoring to broaden the use of Google Guava

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1130443 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/96024a77ce7b2d271e4c84e185912189ec53bd4e
1492,1492.0,1666.0,apache/mahout,ad17b0d1f00bea5f1932ce3d8f2170120e29d4f2,"Refactor JDBC-related iterators and simplify. Fixes exception from last commit.

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1089894 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/ad17b0d1f00bea5f1932ce3d8f2170120e29d4f2
1493,1493.0,1667.0,apache/mahout,a13b4b7fae76062d7db63aebbde750fce6daed70,"MAHOUT-633 new iterators over SequenceFiles, used in 90% of the code involving reading SequenceFiles; other refactoring of iterators and some related HDFS usages (PathFilters); some small style changes along the way too

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1087225 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/a13b4b7fae76062d7db63aebbde750fce6daed70
1494,1494.0,1668.0,apache/mahout,3c9538a43c1c02567f6018cf3bafbeadb49b7b65,"MAHOUT-513
- Created interface GaussianAccumulator and two concrete implementations:
  - RunningSumsGaussianAccumulator uses running sums approach
  - OnlineGaussianAccumulator uses Knuth (Welford) approach
- Added unit test thereof which produces significant std deviations and drastically-odd
  variances. I'm committing this so it can get more eyeballs. It is not used anywhere yet.
- Refactored CDbwClusterEvaluator to use RunningSumsGaussianAccumulator and
  existing tests continue to run
- Cleaned up logging in various clustering algorithms to increase use of debug vs. info
  to reduce log clutter
All tests run.

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1002718 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/3c9538a43c1c02567f6018cf3bafbeadb49b7b65
1495,1495.0,1669.0,apache/mahout,f900e2a6e1a5a60a76757c5a61a9024a6545bcd6,"MAHOUT-504. Fixed CLI arguments and did other refactoring of synthetic control
example. Tested CLI invocation with explicit arguments which was the source of
the problems cited in this issue. All tests run

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1001015 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/f900e2a6e1a5a60a76757c5a61a9024a6545bcd6
1496,1496.0,1670.0,apache/mahout,64301883acca71df44f307f5c281639839c62818,"Style bits. Refactoring of VectorWritable subclasses per mailing list discussion. Standardize on Lucene 3.0 behavior.

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@996730 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/64301883acca71df44f307f5c281639839c62818
1497,1497.0,1671.0,apache/mahout,2ca68e8b9e154e03f6f081f1ef726760e3905b63,"Refactored WeightedVectorWritable to extend VectorWritable and updated relevant code. All tests run

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@996363 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/2ca68e8b9e154e03f6f081f1ef726760e3905b63
1498,1498.0,1672.0,apache/mahout,7be2356a7b44ff6a67ffa158525b41addd02a626,"MAHOUT-497 - Refactor matrix stuff to put cardinality, size(), rowSize() and columnSize() into Abstract matrix.  Put rowSize() and columnSize() into Matrix.

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@995227 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/7be2356a7b44ff6a67ffa158525b41addd02a626
1499,1499.0,1673.0,apache/mahout,22726e80d48f13e5f46ba3a0f9576e407bb7c466,"MAHOUT-495 - Moved RandomUtils and uncommons math dependency to math to allow refactoring of random stuff.  Switched all distributions to use RandomUtils.

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@991806 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/22726e80d48f13e5f46ba3a0f9576e407bb7c466
1500,1500.0,1674.0,apache/mahout,555cc737089c6d6be5d390a0928464d28bee4cef,"MAHOUT-479: added unit tests to test VectorModelClassifier, ModelDistribution serialization and to ensure
GaussianClusterDistribution and DistanceMeasureClusterDistributions work in Dirichlet. Refactored model
distribution arguments to allow Java developers to provide fully-configured model distributions vs multiple
string parameters. Added distance measure parameter to Dirichlet for use with DMClusterDistributions.

All unit tests run.

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@987647 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/555cc737089c6d6be5d390a0928464d28bee4cef
1501,1501.0,1675.0,apache/mahout,fed7d6133df15b27c2d210a784f4a0cbea7c9dda,"MAHOUT-479: This commit refactors Cluster to inherit from Model<VectorWritable> instead of AbstractCluster
which now inherits just Cluster. The existing Dirichlet models also now inherit from Cluster, simplifying the use
of generics and cleaning up a lot of the code.

Since Dirichlet now can iterate over arbitrary Clusters as its models, this opens up the entire set of DistanceMeasure
based clusters for Dirichlet processing. This should allow the output of e.g. Canopy to become the prior model
distribution in a subsequent Dirichlet step. Is this a feature?

The AbstractCluster hierarchy has been adjusted allowing GaussianClusterDistribution and 
DistanceMeasureClusterDistribution to instantiate its subclasses. Both have tests and seem to work as expected.

All unit tests run. More to follow

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@987240 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/fed7d6133df15b27c2d210a784f4a0cbea7c9dda
1502,1502.0,1676.0,apache/mahout,03424784c070b28b3e6ec3fcc1fab1163d1decf3,"MAHOUT-479: Refactored Model and Cluster hierarchies to include DistanceMeasure in cluster state. All unit tests run

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@986960 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/03424784c070b28b3e6ec3fcc1fab1163d1decf3
1503,1503.0,1677.0,apache/mahout,b3ba49c381d8fb155b887d4eb89c828b8c0bd722,"MAHOUT-294:
- modified most DisplayClustering subclasses to use the new sequential method on drivers. (Not Dirichlet yet)
- using file system to transmit Clusters required a rework since they were not serializing needed state
- refactored Canopy, Cluster, SoftCluster and MeanShiftCanopy significantly, abstracting shared behavior to new AbstractCluster class.
- deleted ClusterBase after moving static method to AbstractCluster
- added ClusterObservations to replace KMeansInfo and FuzzyKMeansInfo
- changed all cluster identifier formatting to include type indication
- upshot of new clusters is improved posterior statistics for all with radius() now returning stdDev(), a vector
- new radius() used in Display examples to show elliptical clusters
- adjusted unit tests and all pass

probably should have made a new JIRA for some of this

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@978786 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/b3ba49c381d8fb155b887d4eb89c828b8c0bd722
1504,1504.0,1678.0,apache/mahout,a14c9cb094b7b5745ecd82110fc759c6466d41c0,"MAHOUT-294: 
- Refactored clustering jobs to subclass AbstractJob. 
- Added fuzzy k-means example to synthetic control examples
- Added cluster dump to synthetic control examples
- Fixed _log file access bug in ClusterDumper when run on Hadoop
- all synthetic control examples run on Hadoop cluster
- Fuzzy k-Means produces numerically odd-looking clusters
- added unit tests of run() command line option for each clustering algorithm
- all unit tests run


git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@964507 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/a14c9cb094b7b5745ecd82110fc759c6466d41c0
1505,1505.0,1679.0,apache/mahout,c81292ec7522e829c85fed1df5ae17e4849d18f1,"The rest of: More refactoring to clean up the clustering display examples

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@962745 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/c81292ec7522e829c85fed1df5ae17e4849d18f1
1506,1506.0,1680.0,apache/mahout,571a6e9a0117726b5d15f83d7bcd46ff0cc580a9,"More refactoring to clean up the clustering display examples

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@962739 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/571a6e9a0117726b5d15f83d7bcd46ff0cc580a9
1507,1507.0,1681.0,apache/mahout,bedb0216ed3e4d50b247a3228d06bc4a57df0e8b,"Fixed subtle refactoring bug in MeanShiftCanopyClusterer which was causing DisplayMeanShift example to produce garbage. Added a unit test thereof. All tests run and example produces nice clustering again.

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@961880 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/bedb0216ed3e4d50b247a3228d06bc4a57df0e8b
1508,1508.0,1682.0,apache/mahout,4097e10dcf621bcc12c69d209006a2add83fcd81,"MAHOUT-294: 
- cleaned up LDADriver by refactoring options to DefaultOptionsCreator
- updated lda.props and fkmeans.props default numReducers
- added lda invocation comment to build-reuters.sh
MAHOUT-297: 
- removed redundant clone() from Canopy constructor

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@945777 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/4097e10dcf621bcc12c69d209006a2add83fcd81
1509,1509.0,1683.0,apache/mahout,e068ce739ad5857e15a6e65d22a1664e3ed79392,"Clustering command line cleanup:
- refactored all clustering Driver main methods to move command line options to
  DefaultOptionCreator to improve command uniformity, defaults and to clean up
  messy drivers. Impacted Canopy, Dirichlet, FuzzyKMeans, KMeans and MeanShift
  drivers.
- added command option comments to conf/*.props consistent with above.
- added new files for canopy.props and lda.props
- removed Dirichlet's prototypeSize argument in favor of reading the first data point
  to determine cardinality

All tests run

git-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@945447 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/e068ce739ad5857e15a6e65d22a1664e3ed79392
1510,1510.0,1684.0,apache/mahout,3aec9dc08ec9aa779de2c7058079f1c67021cb70,"MAHOUT-236:
- removed output directory deletion from DirichletDriver.writeInitialState
- added runClustering option to KmeansDriver and MeanShiftCanopyDriver
- refactored methods from MeanShiftCanopyJob into MeanShiftCanopyDriver and removed job
- adjusted TestKmeansClustering and TestMeanShift
- adjusted synthetic control examples to employ ClusterDumper of outputs
- adjusted TestClusterDumper and TestDCbwEvaluator for KMeans and MeanShift job api changes
- decreased number of iterations in unit tests to improve performance
- all tests run

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@939867 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/3aec9dc08ec9aa779de2c7058079f1c67021cb70
1511,1511.0,1685.0,apache/mahout,2951ca4f74fcb3636baf57d5b3599f3aa1bdea61,"MAHOUT-236:
- moved default file directory definitions to Cluster from ClusterBase
- refactored CanopyClusteringJob and ClusterDriver into CanopyDriver & removed both
- added runClustering option to CanopyDriver.runJob
- refactored DirichletJob into DirichletDriver
- added runClustering option to DirichletDriver.runJob
- added emitMostLikely and threshold options to DirichletDriver.runJob
- implemented emitMostLikelyCluster and emitAllClusters (above threshold)
- refactored FuzzyKMeansJob into FuzzyKMeanstDriver
- added runClustering option to FuzzyKMeanstDriver.runJob
- added emitMostLikely and threshold options to FuzzyKMeanstDriver.runJob
- implemented emitMostLikelyCluster and emitAllClusters (above threshold)
- enhanced TestClusterDumper to utilize term dictionary and enhanced printouts
- updated other unit tests, all of which run


git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@939800 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/2951ca4f74fcb3636baf57d5b3599f3aa1bdea61
1512,1512.0,1686.0,apache/mahout,1ac13fa7f87f6c81816b53f29d048df48a55bd25,"MAHOUT-362 last refactorings for now

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@930890 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/1ac13fa7f87f6c81816b53f29d048df48a55bd25
1513,1513.0,1687.0,apache/mahout,4d434adfdc9c8742ce73ceee66c55b26920be4ad,"Initial commit of MAHOUT-362. Refactoring to come.

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@930801 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/4d434adfdc9c8742ce73ceee66c55b26920be4ad
1514,1514.0,1688.0,apache/mahout,5a32a902bad5b56bd39193bc7dfd2b86ef11e769,"MAHOUT-180

Adds DistributedRowMatrix (not fully implemented - only has timesSquared(Vector) currently, others to follow), DistributedLanczosSolver and EigenVerificationJob.

Wiki to follow on usage.

Some refactorings in the math.decomposer (no distributed/hadoop) versions as well, to tie together the various solvers under one kind of interface with some
shared code.  There may be more changes.


git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@912134 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/5a32a902bad5b56bd39193bc7dfd2b86ef11e769
1515,1515.0,1689.0,apache/mahout,1b4185175a2dbb08603c0b9e4a258dd3830c80b1,"Minor varargs refactoring.


git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@911643 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/1b4185175a2dbb08603c0b9e4a258dd3830c80b1
1516,1516.0,1690.0,apache/mahout,6980b95dce04af3545fb3b75c11836b0988bb98a,"Moving FpGrowthJob to core and renamed as FPGrowthDriver and some other refactor

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@908024 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/6980b95dce04af3545fb3b75c11836b0988bb98a
1517,1517.0,1691.0,apache/mahout,4f91f4458bef5854c6af5a051c0ef788c0e0f774,"Sorry about the montser commit, but I was on a roll.

Fixes MAHOUT-269, MAHOUT-268, MAHOUT-267, MAHOUT-263, MAHOUT-209, MAHOUT-265, and MAHOUT-208.  MAHOUT-211 was actually not fixed yet either, but now is.

Also includes 

  * some UnaryFunction / DoubleFunction and BinaryFunction / DoubleDoubleFunction refactor-merging,
  * performance tuning in the world of vectors: AbstracVector.assign(BinaryFunction f, double d) can be sparse-optimized in the case where f(0,d) = 0, much like assign(UnaryFunction f), when f(0) == 0.
  * SquaredEuclideanDistanceMeasure (and hence EuclideanDistanceMeasure) were both broken and wrong (see discussion on mahout-dev).  Fixed now.  Tests passed before, and still do though.  There'll be another checkin on that subject shortly.
  * tests for much of the above.

mvn clean install works fine, but I haven't run all the drivers.



git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@903965 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/4f91f4458bef5854c6af5a051c0ef788c0e0f774
1518,1518.0,1692.0,apache/mahout,435c42923b389bb434484c6d68c7951c98c323a6,"MAHOUT-251

- DirichletDriver, DirichletJob - added command line arguments for modelPrototypeClass and prototypeSize
- Display2dASNDirichlet, DisplayASNDirichlet, DisplayASNOutputState, DisplayDirichlet, DisplayNDirichlet,
	DisplayOutputState, DisplaySNDirichlet - added modelProtype initializations to model distributions
	
- math/SquareRootFunction - changed computation from abs() to sqrt() as the previous had crept in during recent
	refactoring and was completely horking the Dirichlet std() calculations
	
- Cluster - changed std calculation to remove size=2 assumption
- NormalModel - changed computeParameters to use std.size() vs s1.size() for uniformity
- AsymmetricSampledNormalModel - changed comment in computeParameters

all tests run

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@900519 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/435c42923b389bb434484c6d68c7951c98c323a6
1519,1519.0,1693.0,apache/mahout,0308bb821691c00d8cbbf4dce01e489745463a41,"MAHOUT-251: Generalized and refactored Dirichlet models and model distributions to 
remove 2-d and dense vector assumptions by introducing a new abstract 
VectorModelDistribution to provide a modelProtootype and size to the distributions for 
creating prior models of arbitrary vector size and flavor.

Removed unused classes and all Json serialization code. Updated unit tests and added 
new tests of 3-d models.

Fixed an initialization bug in the synthetic control InputDriver and updated clustering examples
which now run.

Classes removed:
- DirichletCombiner
- ModelHolder
- JsonDirichletStateAdapter
- JsonModelAdapter
- JsonModelDistributionAdapter
- JsonModelHolderAdapter

New Classes:
- VectorModelDistribution - abstract superclass holds modelPrototype for subclasses

ModifiedClasses:
- DirichletCluster - removed asFormatString and fromFormatString Json serialization which were unused
- DirichletDriver - added modelPrototypeClass and prototypeSIze arguments for initializing VectorModelDistributions
- DirichletMapper - incorporated above arguments in state initialization
- NormalModelDistribution, SampledNormalModelDistribution, AsymmetricSampledNormalDistribution - 
	removed 2-d DenseVector dependencies by using superclass modelPrototype
- AsymmetricSampledNormalModel - removed 2-d restrictions

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@900270 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/0308bb821691c00d8cbbf4dce01e489745463a41
1520,1520.0,1694.0,apache/mahout,c21e773c0c8c3b6aa46415fb8a7bcbef6c4885f3,"MAHOUT-163: slight refactoring to move log likelihood calculation into math and add tests

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@896053 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/c21e773c0c8c3b6aa46415fb8a7bcbef6c4885f3
1521,1521.0,1695.0,apache/mahout,f17cc37c0a07a873811424a47f84c95e2555a5ed,"slight refactoring

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@895448 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/f17cc37c0a07a873811424a47f84c95e2555a5ed
1522,1522.0,1696.0,apache/mahout,a73bdd42ab31a989e041f0ffe057b8bd3cfacacf,"MAHOUT-11 - refactors lots of the clustering code to get rid of its
static fields. Thanks to Drew Farris for fixing most of the code.


git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@889158 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/a73bdd42ab31a989e041f0ffe057b8bd3cfacacf
1523,1523.0,1697.0,apache/mahout,db6d401455f769fccc6d83b188206151ffa0f465,"Refactored argument and conf handling in CF Hadoop jobs.

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@887326 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/db6d401455f769fccc6d83b188206151ffa0f465
1524,1524.0,1698.0,apache/mahout,b11989c85e8afe871e0c2b595968f2e319f44cde,"MAHOUT-138 - fixing dependency after utils/common packages refactoring.


git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@816561 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/b11989c85e8afe871e0c2b595968f2e319f44cde
1525,1525.0,1699.0,apache/mahout,90fe0a203290e1ceded177d7b354e68e9637fc2a,"MAHOUT-176: Refactor out VectorIterable in favor of Iterable<Vector>

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@812953 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/90fe0a203290e1ceded177d7b354e68e9637fc2a
1526,1526.0,1700.0,apache/mahout,f3e63ce6ae465f9e34345e0c729ce2a087b082ed,"Misc cleanup and refactoring in CF... taking the liberty of just modifying 'my' code at will here.

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@805747 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/f3e63ce6ae465f9e34345e0c729ce2a087b082ed
1527,1527.0,1701.0,apache/mahout,f5062921d65ae46431c4595d56f27b44058d2f41,"MAHOUT-161: refactor norms to allow for norm and normalize

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@802515 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/f5062921d65ae46431c4595d56f27b44058d2f41
1528,1528.0,1702.0,apache/mahout,7cb1bd97d34439b21408c36586ca577ba6b0a7cc,"MAHOUT-144: refactoring of Maven for code style and some other changes

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@794692 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/7cb1bd97d34439b21408c36586ca577ba6b0a7cc
1529,1529.0,1703.0,apache/mahout,9acbff2a8c8b09ca713a562a738d6849c0268abf,"Convert Fuzzy KMeans to CLI2, hook in random initialization option, refactor random stuff slightly to improve consumability

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@789843 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/9acbff2a8c8b09ca713a562a738d6849c0268abf
1530,1530.0,1704.0,apache/mahout,11a21dcf5e2968829930cc0810f72e77dd423bba,"MAHOUT-139 and minor MAHOUT-137: Vector improvements, some utilities and some minor refactoring of common code in Cluster and Canopy

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@788186 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/11a21dcf5e2968829930cc0810f72e77dd423bba
1531,1531.0,1705.0,apache/mahout,96bd5a3b13d939a82ba1aaaf2607378129bef3b4,"MAHOUT-118 fixes all of the occurrences (except one) of FileSystem.get to use the two argument version with an appropriate Path as a first argument.

The only remaining instance is in org.apache.mahout.ga.watchmaker.MahoutEvaluator at line 64, where there's no obvious Path available to provide the first argument. Getting this one working will probably require refactoring.

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@765769 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/96bd5a3b13d939a82ba1aaaf2607378129bef3b4
1532,1532.0,1706.0,apache/mahout,ce91768b58508f308b9415e1600a3753c8d76219,"- Committing Dirichlet Process Clustering (MAHOUT-30). Some minor refactoring from the latest patch (MAHOUT-30f) to move models and distributions from test tree into core so that examples can see them.
All tests run and the pom packages.

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@754797 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/ce91768b58508f308b9415e1600a3753c8d76219
1533,1533.0,1707.0,apache/mahout,a034755f6872c1f353c903a96dcc00de523664ad,"More small code refactorings, minor performance improvements -- also fixed a bug in refresh-related code of Similarity implementations

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@748740 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/a034755f6872c1f353c903a96dcc00de523664ad
1534,1534.0,1708.0,apache/mahout,c80f45bdf74250ae6a2ec083bae4d1019c7f5b25,"MAHOUT-104: some more POM refactoring -- argh

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@741115 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/c80f45bdf74250ae6a2ec083bae4d1019c7f5b25
1535,1535.0,1709.0,apache/mahout,c4ca4a1c53e9373777b2d1521d10408bcbe188c6,"MAHOUT-104: some more POM refactoring -- argh

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@741114 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/c4ca4a1c53e9373777b2d1521d10408bcbe188c6
1536,1536.0,1710.0,apache/mahout,1abd480c37550893ee1384e6b72af1f289d60540,"MAHOUT-104: some more POM refactoring -- argh

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@741113 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/1abd480c37550893ee1384e6b72af1f289d60540
1537,1537.0,1711.0,apache/mahout,5a5dacc97c182fffd130131f12e0f3d757ea4f8c,"MAHOUT-104: some more POM refactoring -- argh

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@741110 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/5a5dacc97c182fffd130131f12e0f3d757ea4f8c
1538,1538.0,1712.0,apache/mahout,a2e0e7a8d282bc326c9a47df388418f06a4dd86e,"MAHOUT-104: some more POM refactoring

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@741106 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/a2e0e7a8d282bc326c9a47df388418f06a4dd86e
1539,1539.0,1713.0,apache/mahout,3a4a00138bae2aaa272da85aed75c2ed1aa28058,"MAHOUT-104: some more POM refactoring

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@741104 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/3a4a00138bae2aaa272da85aed75c2ed1aa28058
1540,1540.0,1714.0,apache/mahout,58d7a84ad21b12a3ac5c710e6b9dec17fc1df0ba,"Big ol' patch that mostly adds @Override for interface methods, for Java 6, but also tacks on a number of small performance tweaks and other small refactorings

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@729175 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/58d7a84ad21b12a3ac5c710e6b9dec17fc1df0ba
1541,1541.0,1715.0,apache/mahout,5c8f78f9b586d497a52c6b67616d7de5d26e2c4b,"refactor to use a common-build.  Replace the calls to openssl w/ calls to mahout-checksum which uses Ant's checksum capability.

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@705357 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/5c8f78f9b586d497a52c6b67616d7de5d26e2c4b
1542,1542.0,1716.0,apache/mahout,045b0811b96e92d55bdcae24b6361bf4e315bd18,"More fun IntelliJ-suggested refactorings and small tweaks

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@684957 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/045b0811b96e92d55bdcae24b6361bf4e315bd18
1543,1543.0,1717.0,apache/mahout,946101731f238c7c43f9a6ba16daf9c8aaa893f4,"Refactoring: separate out Cache.Retriever to top level interface and make Cache implement it too for neatness

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@681930 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/946101731f238c7c43f9a6ba16daf9c8aaa893f4
1544,1544.0,1718.0,apache/mahout,c176ef271797ac8aa6d49b8b24660333e075f56f,"More small refactorings

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@668007 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/c176ef271797ac8aa6d49b8b24660333e075f56f
1545,1545.0,1719.0,apache/mahout,5893f0267a0d2132411ca8b36386e3d5c27b73d8,"Added BooleanPreference, plus refactorings to support it, for better support of ""binary"" yes-or-nothing preferences in data models

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@661920 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/5893f0267a0d2132411ca8b36386e3d5c27b73d8
1546,1546.0,1720.0,apache/mahout,9bc5b4066c95154ba5bce43559c2078a054f9cf9,"MAHOUT-59: Refactored arguments of KMeansDriver.runJob() for consistency with the other clustering driver methods. Added a new KMeansJob class to hold code that deletes the output directory so that examples can be chained. Adjusted TestKmeansClustering to new argument types.

KMeans tests still run. 

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@660343 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/9bc5b4066c95154ba5bce43559c2078a054f9cf9
1547,1547.0,1721.0,apache/mahout,5339db364918df7a20fd4345558facc5f71dda91,"MAHOUT-5: Add M/R k-Means clustering implementation by Jeff Eastman, and refactor some common code from Canopy clustering

git-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@632543 13f79535-47bb-0310-9956-ffa450edef68",https://github.com/apache/mahout/commit/5339db364918df7a20fd4345558facc5f71dda91
1548,1548.0,1722.0,mimno/Mallet,83c3e95435c3e15abd388d63d2dc962932a2110e,"Merge pull request #120 from clairew/pipeTestrefactor

Pipe test refactor",https://github.com/mimno/Mallet/commit/83c3e95435c3e15abd388d63d2dc962932a2110e
1549,1549.0,1723.0,mimno/Mallet,f8b5b9cd2e9de96e17a78328d9f696729c732aba,Pipe test refactor,https://github.com/mimno/Mallet/commit/f8b5b9cd2e9de96e17a78328d9f696729c732aba
1550,1550.0,1724.0,mimno/Mallet,a32fc807707a231eca12307cbd8b2f4e4f72ed4b,"Merge pull request #119 from clairew/utilTestRefactor

Refactoring util tests",https://github.com/mimno/Mallet/commit/a32fc807707a231eca12307cbd8b2f4e4f72ed4b
1551,1551.0,1725.0,mimno/Mallet,49c2a8fac14edf716f79168dad4b67aeb94f6f49,Refactoring util tests,https://github.com/mimno/Mallet/commit/49c2a8fac14edf716f79168dad4b67aeb94f6f49
1552,1552.0,1726.0,mimno/Mallet,ac4470625424c94f674d33ff1efad7652b8246a2,"Merge pull request #111 from clairew/DependencyRefactor

Types Test Dependency Refactor",https://github.com/mimno/Mallet/commit/ac4470625424c94f674d33ff1efad7652b8246a2
1553,1553.0,1727.0,mimno/Mallet,e401d6fab91ec7faaea4295fefcd5d8cabf9ab92,Added Types test import dependency refactor,https://github.com/mimno/Mallet/commit/e401d6fab91ec7faaea4295fefcd5d8cabf9ab92
1554,1554.0,1728.0,mimno/Mallet,1514ca85adb9088323e45ae0c0648f3b2ce2e29a,Initial commit for dependency refactor,https://github.com/mimno/Mallet/commit/1514ca85adb9088323e45ae0c0648f3b2ce2e29a
1555,1555.0,1729.0,mimno/Mallet,b6581fbbe6138bae3acd5037dd860f6ec4204192,Refactoring PR.,https://github.com/mimno/Mallet/commit/b6581fbbe6138bae3acd5037dd860f6ec4204192
1556,1556.0,1730.0,mimno/Mallet,f1871e43cad77432ddfb1857ae7bbf4057d7cec8,Refactoring PR.,https://github.com/mimno/Mallet/commit/f1871e43cad77432ddfb1857ae7bbf4057d7cec8
1557,1557.0,1731.0,mimno/Mallet,5a8c7571bb4f29ee3c8c0126e6d6524f29c7f455,Refactor LDAHyper with Topication class.,https://github.com/mimno/Mallet/commit/5a8c7571bb4f29ee3c8c0126e6d6524f29c7f455
1558,1558.0,1732.0,Waikato/moa,960155a3a2ce8eec45f97fbb7e8099e06c5ea80c,"Created a task to write instances to a Kafka topic.

+ general refactoring.",https://github.com/Waikato/moa/commit/960155a3a2ce8eec45f97fbb7e8099e06c5ea80c
1559,1559.0,1733.0,Waikato/moa,a266697c6387c601ed9bd8105cf53d58a336ccef,"Merge pull request #154 from henrygouk/adagrad-refactor

Adagrad refactor",https://github.com/Waikato/moa/commit/a266697c6387c601ed9bd8105cf53d58a336ccef
1560,1560.0,1734.0,Waikato/moa,3af42ec34a6077d44c0635e4bfad22a51f5eb43d,code refactor,https://github.com/Waikato/moa/commit/3af42ec34a6077d44c0635e4bfad22a51f5eb43d
1561,1561.0,1735.0,Waikato/moa,08495c40868ba8fd7f1622679396528643026299,code revision and refactor,https://github.com/Waikato/moa/commit/08495c40868ba8fd7f1622679396528643026299
1562,1562.0,1736.0,modernmt/modernmt,3521db5adc24d7e20a0194313ced7a91de34fa0d,Small code refactoring,https://github.com/modernmt/modernmt/commit/3521db5adc24d7e20a0194313ced7a91de34fa0d
1563,1563.0,1737.0,modernmt/modernmt,2d8ecae1256d940219802d918a7a8a92f2dcdb0f,Code refactoring on Lazy Corpora implementations and Bloom Filter classes,https://github.com/modernmt/modernmt/commit/2d8ecae1256d940219802d918a7a8a92f2dcdb0f
1564,1564.0,1738.0,modernmt/modernmt,a451e25b3df29eed08f2e8244f861284a37030a2,Small code refactoring,https://github.com/modernmt/modernmt/commit/a451e25b3df29eed08f2e8244f861284a37030a2
1565,1565.0,1739.0,modernmt/modernmt,324b5c0ac9149f11a237a37b4a40d50bf05105b3,Small code-refactoring in tag porjection,https://github.com/modernmt/modernmt/commit/324b5c0ac9149f11a237a37b4a40d50bf05105b3
1566,1566.0,1740.0,modernmt/modernmt,e03014311b122f53d03f59c3fa8ce57b74c8ca67,Merge branch 'refactoring/decode_batch' into develop,https://github.com/modernmt/modernmt/commit/e03014311b122f53d03f59c3fa8ce57b74c8ca67
1567,1567.0,1741.0,modernmt/modernmt,e8714079cd03fe8acd1712fbbe136e472ecf08b0,Code refactoring,https://github.com/modernmt/modernmt/commit/e8714079cd03fe8acd1712fbbe136e472ecf08b0
1568,1568.0,1742.0,modernmt/modernmt,de707d06c48e50988a06a7c852a0d52a48fb4574,Small code refactoring on Tag,https://github.com/modernmt/modernmt/commit/de707d06c48e50988a06a7c852a0d52a48fb4574
1569,1569.0,1743.0,modernmt/modernmt,491c3e91d50bb984bf3281ba745ac5aa04a5f895,Small code refactoring on PostprocessorMain,https://github.com/modernmt/modernmt/commit/491c3e91d50bb984bf3281ba745ac5aa04a5f895
1570,1570.0,1744.0,modernmt/modernmt,9964e470ce8c69681876558ce0fa9522fb2984fc,Refactoring of ClusterNode.submit(),https://github.com/modernmt/modernmt/commit/9964e470ce8c69681876558ce0fa9522fb2984fc
1571,1571.0,1745.0,modernmt/modernmt,4c1e2f7a9f1f9ae945a0625619ee65e9a87b724e,"Code refactoring: common, general features of SentenceBatchScheduler are now abstracted into AbstractScheduler",https://github.com/modernmt/modernmt/commit/4c1e2f7a9f1f9ae945a0625619ee65e9a87b724e
1572,1572.0,1746.0,modernmt/modernmt,4e722f76984c8381957e54ebae9dd944de36d7dd,Small code refactoring and TranslationJoiner improvement,https://github.com/modernmt/modernmt/commit/4e722f76984c8381957e54ebae9dd944de36d7dd
1573,1573.0,1747.0,modernmt/modernmt,9766e37ba61d516607bf7d49e9ae409d8272957f,Code refactoring,https://github.com/modernmt/modernmt/commit/9766e37ba61d516607bf7d49e9ae409d8272957f
1574,1574.0,1748.0,modernmt/modernmt,e52d82b7ae2d09bc2fc848b4de3bbc79d857691e,Small code refactoring,https://github.com/modernmt/modernmt/commit/e52d82b7ae2d09bc2fc848b4de3bbc79d857691e
1575,1575.0,1749.0,modernmt/modernmt,ead85c65b7fed9f16abe7fb5581f904be145c3a8,Refactoring 'commons' module,https://github.com/modernmt/modernmt/commit/ead85c65b7fed9f16abe7fb5581f904be145c3a8
1576,1576.0,1750.0,modernmt/modernmt,e56cac285f63203f766f4f62637e65f996103a6f,Decoder translation's score refactoring: score is geometric mean of batch scores,https://github.com/modernmt/modernmt/commit/e56cac285f63203f766f4f62637e65f996103a6f
1577,1577.0,1751.0,modernmt/modernmt,87e87947556b8e46b64a6df7974455d92f8beffb,decoder sentece spit code refactoring,https://github.com/modernmt/modernmt/commit/87e87947556b8e46b64a6df7974455d92f8beffb
1578,1578.0,1752.0,modernmt/modernmt,6b5fe52cb76716050670ff9b518fd56f169b4b34,small code refactoring,https://github.com/modernmt/modernmt/commit/6b5fe52cb76716050670ff9b518fd56f169b4b34
1579,1579.0,1753.0,modernmt/modernmt,f995c1a2fb8cb8ea28421e9c56d88a4401151156,Merge branch 'refactoring/textprocessing' into versions/v4.0,https://github.com/modernmt/modernmt/commit/f995c1a2fb8cb8ea28421e9c56d88a4401151156
1580,1580.0,1754.0,modernmt/modernmt,085e18e1c95f59b4a1fa975dcd313a0deda60e0c,small code refactoring,https://github.com/modernmt/modernmt/commit/085e18e1c95f59b4a1fa975dcd313a0deda60e0c
1581,1581.0,1755.0,modernmt/modernmt,72ae01870b77a764539bd2a468711166f474c1b9,Merge branch 'experimental/chinese-tokenizer' into refactoring/textprocessing,https://github.com/modernmt/modernmt/commit/72ae01870b77a764539bd2a468711166f474c1b9
1582,1582.0,1756.0,modernmt/modernmt,2452c3fd6c2a8447fedd80a5f91cff79e72833ce,Tokenization refactoring complete,https://github.com/modernmt/modernmt/commit/2452c3fd6c2a8447fedd80a5f91cff79e72833ce
1583,1583.0,1757.0,modernmt/modernmt,c70cd779946d5eff92c10c1748645860a71dcf0f,Small code refactoring in python Decoder,https://github.com/modernmt/modernmt/commit/c70cd779946d5eff92c10c1748645860a71dcf0f
1584,1584.0,1758.0,modernmt/modernmt,8984bcf543e9f45cf76f40d1373a027aa0a7c664,Python decoder code refactoring,https://github.com/modernmt/modernmt/commit/8984bcf543e9f45cf76f40d1373a027aa0a7c664
1585,1585.0,1759.0,modernmt/modernmt,5e5cf0e0816b8ceeb2ad02badba891ac8638c69e,Small code refactoring,https://github.com/modernmt/modernmt/commit/5e5cf0e0816b8ceeb2ad02badba891ac8638c69e
1586,1586.0,1760.0,modernmt/modernmt,5ac057283f3f4af624877d2d0216b85b5f2751f2,Refactoring of Memory analyzers: removed static Analyzers utility class and replaced with customizable AnalyzerFactory,https://github.com/modernmt/modernmt/commit/5ac057283f3f4af624877d2d0216b85b5f2751f2
1587,1587.0,1761.0,modernmt/modernmt,d2bcc9e293dbafa15fb3c7aed611ffa3a3f41f29,Small refactoring in download_dependencies.py,https://github.com/modernmt/modernmt/commit/d2bcc9e293dbafa15fb3c7aed611ffa3a3f41f29
1588,1588.0,1762.0,modernmt/modernmt,f965d98f6cdfed275903a3e70e5631635366b06b,small code refactoring,https://github.com/modernmt/modernmt/commit/f965d98f6cdfed275903a3e70e5631635366b06b
1589,1589.0,1763.0,modernmt/modernmt,60257583db909b0ff80831875a31fffec0180450,FastAlign Vocabulary refactoring,https://github.com/modernmt/modernmt/commit/60257583db909b0ff80831875a31fffec0180450
1590,1590.0,1764.0,modernmt/modernmt,7bba2c6b1a2cb3327c60d6ef4d5c7f7e4bb86a3f,Merge branch 'refactoring/var-tokenization' into develop,https://github.com/modernmt/modernmt/commit/7bba2c6b1a2cb3327c60d6ef4d5c7f7e4bb86a3f
1591,1591.0,1765.0,modernmt/modernmt,9dc91b21244eacbe4ca0dee0f8081061fcf68e07,small code refactoring,https://github.com/modernmt/modernmt/commit/9dc91b21244eacbe4ca0dee0f8081061fcf68e07
1592,1592.0,1766.0,modernmt/modernmt,6b37a82f6c7410b72876a4280b78292fd76b0466,Refactoring decodingTime and added memoryLookupTime,https://github.com/modernmt/modernmt/commit/6b37a82f6c7410b72876a4280b78292fd76b0466
1593,1593.0,1767.0,modernmt/modernmt,17efe41d58b2387f8253c1b8c1d00e23e3330873,Small code refactoring,https://github.com/modernmt/modernmt/commit/17efe41d58b2387f8253c1b8c1d00e23e3330873
1594,1594.0,1768.0,modernmt/modernmt,e0b82b66b206fc1c7a58e78031f9a9717ea0f5d8,code refactoring,https://github.com/modernmt/modernmt/commit/e0b82b66b206fc1c7a58e78031f9a9717ea0f5d8
1595,1595.0,1769.0,modernmt/modernmt,a68b4dcf9fdf08ef2425ef714e8623f5efc7f0d0,Working on python refactoring,https://github.com/modernmt/modernmt/commit/a68b4dcf9fdf08ef2425ef714e8623f5efc7f0d0
1596,1596.0,1770.0,modernmt/modernmt,22a75be7f748cd586f32b7c30c34b4e1aa3c1b5b,Code refactoring,https://github.com/modernmt/modernmt/commit/22a75be7f748cd586f32b7c30c34b4e1aa3c1b5b
1597,1597.0,1771.0,modernmt/modernmt,216a59767887ef880e6ea112e85c71d49a52f495,Code refactoring,https://github.com/modernmt/modernmt/commit/216a59767887ef880e6ea112e85c71d49a52f495
1598,1598.0,1772.0,modernmt/modernmt,4bd915614823a631a501baadb30bfdc4cf7eb3cd,Code refactoring,https://github.com/modernmt/modernmt/commit/4bd915614823a631a501baadb30bfdc4cf7eb3cd
1599,1599.0,1773.0,modernmt/modernmt,950dd4e5562d082a4cbe8c0b2f9cd3ef75dc3043,Code refactoring,https://github.com/modernmt/modernmt/commit/950dd4e5562d082a4cbe8c0b2f9cd3ef75dc3043
1600,1600.0,1774.0,modernmt/modernmt,2c5c0d688d54644f872a7205467b51f51c2b2d2c,"Refactoring DataManager: language filtering is done only by DataManager itself, both ContextAnalyzer and TranslationMemory directly write on their indexes all contributions that the DataManager let pass",https://github.com/modernmt/modernmt/commit/2c5c0d688d54644f872a7205467b51f51c2b2d2c
1601,1601.0,1775.0,modernmt/modernmt,ea1e2bcdf10cefa29796eda6f68ec276bc3a0242,Code refactoring,https://github.com/modernmt/modernmt/commit/ea1e2bcdf10cefa29796eda6f68ec276bc3a0242
1602,1602.0,1776.0,modernmt/modernmt,90bfeb94bc39df027ab4e8bf004fd85d4e0f20ae,Code refactoring,https://github.com/modernmt/modernmt/commit/90bfeb94bc39df027ab4e8bf004fd85d4e0f20ae
1603,1603.0,1777.0,modernmt/modernmt,7a874f8b1ca7509bc0f00e5bb170d050f7272a27,Preprocessing tokenization refactoring,https://github.com/modernmt/modernmt/commit/7a874f8b1ca7509bc0f00e5bb170d050f7272a27
1604,1604.0,1778.0,modernmt/modernmt,9f5f6e3e014c00f5b00f53b9d225ffbbb476ac44,Small code refactoring,https://github.com/modernmt/modernmt/commit/9f5f6e3e014c00f5b00f53b9d225ffbbb476ac44
1605,1605.0,1779.0,modernmt/modernmt,81450de9be9675c9d12d4dd4112d10edd503f108,NeuralDecoder setup refactoring,https://github.com/modernmt/modernmt/commit/81450de9be9675c9d12d4dd4112d10edd503f108
1606,1606.0,1780.0,modernmt/modernmt,7df89ed22164d693e6ef28e3d20129e08a53011e,F1BleuRescorer refactoring,https://github.com/modernmt/modernmt/commit/7df89ed22164d693e6ef28e3d20129e08a53011e
1607,1607.0,1781.0,modernmt/modernmt,458c902297df0613dfc8bd2c40c9741914960f1f,QueryBuilder refactoring,https://github.com/modernmt/modernmt/commit/458c902297df0613dfc8bd2c40c9741914960f1f
1608,1608.0,1782.0,modernmt/modernmt,19a6346753b9f76c04190644b077bbdba3ec17ae,Small code refactoring,https://github.com/modernmt/modernmt/commit/19a6346753b9f76c04190644b077bbdba3ec17ae
1609,1609.0,1783.0,modernmt/modernmt,e3c76c4d3eca567aed7a75a608c8500aa5f0a2ae,small refactoring,https://github.com/modernmt/modernmt/commit/e3c76c4d3eca567aed7a75a608c8500aa5f0a2ae
1610,1610.0,1784.0,modernmt/modernmt,4bc261901b2956aafa4ba1e9322200a8366838dc,bin refactoring,https://github.com/modernmt/modernmt/commit/4bc261901b2956aafa4ba1e9322200a8366838dc
1611,1611.0,1785.0,modernmt/modernmt,419a4215f91e5df487a5a6067cb154e4e8b9a0b8,DataListeners refactoring,https://github.com/modernmt/modernmt/commit/419a4215f91e5df487a5a6067cb154e4e8b9a0b8
1612,1612.0,1786.0,modernmt/modernmt,62d63f3381854545c31b48bef2219f29d9e1108f,code refactoring,https://github.com/modernmt/modernmt/commit/62d63f3381854545c31b48bef2219f29d9e1108f
1613,1613.0,1787.0,modernmt/modernmt,facc3a8916ba4efdd355b6137e7268185ee5cbef,small code refactoring,https://github.com/modernmt/modernmt/commit/facc3a8916ba4efdd355b6137e7268185ee5cbef
1614,1614.0,1788.0,modernmt/modernmt,438ff28f999338fcb50d61180fa312ff17d8b2e3,code refactoring and simplification,https://github.com/modernmt/modernmt/commit/438ff28f999338fcb50d61180fa312ff17d8b2e3
1615,1615.0,1789.0,modernmt/modernmt,bc22cc7029e225129bad186ee972a2bd6ca6ec36,code refactoring and simplification,https://github.com/modernmt/modernmt/commit/bc22cc7029e225129bad186ee972a2bd6ca6ec36
1616,1616.0,1790.0,modernmt/modernmt,56bce8940e5e676bfe28de66e973e401e11440a6,Refactoring of decodingTime,https://github.com/modernmt/modernmt/commit/56bce8940e5e676bfe28de66e973e401e11440a6
1617,1617.0,1791.0,modernmt/modernmt,095be11d4cc2f9703723fd8d429d200a6b1227aa,implemented translation task logic for sentence splitting and merging + refactoring sentence splitter,https://github.com/modernmt/modernmt/commit/095be11d4cc2f9703723fd8d429d200a6b1227aa
1618,1618.0,1792.0,modernmt/modernmt,d945a4dc524958159146ee06abd6ce1886e03897,Code refactoring,https://github.com/modernmt/modernmt/commit/d945a4dc524958159146ee06abd6ce1886e03897
1619,1619.0,1793.0,modernmt/modernmt,f7681f75bf6df6c5ef761ae56e3ba7b9326c97e4,small refactoring deleting useless components,https://github.com/modernmt/modernmt/commit/f7681f75bf6df6c5ef761ae56e3ba7b9326c97e4
1620,1620.0,1794.0,modernmt/modernmt,5742a3d1d11885df3354cebb6916dddb528e4237,big refactoring,https://github.com/modernmt/modernmt/commit/5742a3d1d11885df3354cebb6916dddb528e4237
1621,1621.0,1795.0,modernmt/modernmt,b94410eb4e515dd59d70fb9e7474fd4dc889e8b7,bug fixing; code refactoring; variable renaming;,https://github.com/modernmt/modernmt/commit/b94410eb4e515dd59d70fb9e7474fd4dc889e8b7
1622,1622.0,1796.0,modernmt/modernmt,06b04e7166c7c363edbde3a569bbc9412d9c8841,Code refactoring: Translation is now a class rather than a dictionary,https://github.com/modernmt/modernmt/commit/06b04e7166c7c363edbde3a569bbc9412d9c8841
1623,1623.0,1797.0,modernmt/modernmt,6095bbbd72086e869a5cd0aa754092d0a0174e2d,Refactoring of training options,https://github.com/modernmt/modernmt/commit/6095bbbd72086e869a5cd0aa754092d0a0174e2d
1624,1624.0,1798.0,modernmt/modernmt,80440df392e71b28de346eb8b11fb5fcdd613dca,ParameterFileProxy refactoring,https://github.com/modernmt/modernmt/commit/80440df392e71b28de346eb8b11fb5fcdd613dca
1625,1625.0,1799.0,modernmt/modernmt,5315a6cf53dcf8281bc55dba014160fba3f9b856,Parameters order refactoring,https://github.com/modernmt/modernmt/commit/5315a6cf53dcf8281bc55dba014160fba3f9b856
1626,1626.0,1800.0,modernmt/modernmt,1a4461c35aa15592f5e5eed4373a1120e4846358,Merge branch 'refactoring/memory' of https://github.com/ModernMT/MMT into refactoring/memory,https://github.com/modernmt/modernmt/commit/1a4461c35aa15592f5e5eed4373a1120e4846358
1627,1627.0,1801.0,modernmt/modernmt,1c11aa0839ec80cb934cc2a831597d789b814d11,Merge branch 'refactoring/memory' of git+ssh://github.com/ModernMT/MMT into refactoring/memory,https://github.com/modernmt/modernmt/commit/1c11aa0839ec80cb934cc2a831597d789b814d11
1628,1628.0,1802.0,modernmt/modernmt,ac14f6a05b712c40dc37b89480245d9022bd1c7b,Training optimizer options refactoring,https://github.com/modernmt/modernmt/commit/ac14f6a05b712c40dc37b89480245d9022bd1c7b
1629,1629.0,1803.0,modernmt/modernmt,8b65499a5783b0225415ca89d08a8accf0847b3a,Small code refactoring,https://github.com/modernmt/modernmt/commit/8b65499a5783b0225415ca89d08a8accf0847b3a
1630,1630.0,1804.0,modernmt/modernmt,b87ac812de9d9dc4463c3855e53e76d6ab4d77eb,Small refactoring,https://github.com/modernmt/modernmt/commit/b87ac812de9d9dc4463c3855e53e76d6ab4d77eb
1631,1631.0,1805.0,modernmt/modernmt,c36928584545e9aa6e84c2cef16438e3f19a9353,Code refactoring,https://github.com/modernmt/modernmt/commit/c36928584545e9aa6e84c2cef16438e3f19a9353
1632,1632.0,1806.0,modernmt/modernmt,1a341bc3fec0115f449046ef2fd9170b62815036,Code refactoring,https://github.com/modernmt/modernmt/commit/1a341bc3fec0115f449046ef2fd9170b62815036
1633,1633.0,1807.0,modernmt/modernmt,03f2dbcc2e6fd72595a68f94dfb787331f9470bd,Small code refactoring,https://github.com/modernmt/modernmt/commit/03f2dbcc2e6fd72595a68f94dfb787331f9470bd
1634,1634.0,1808.0,modernmt/modernmt,6086c28337012e3de77aa05e3941313d3cfea1ff,Refactoring of both LuceneTranslationMemory and LuceneAnalyzer for improved testing capabilities,https://github.com/modernmt/modernmt/commit/6086c28337012e3de77aa05e3941313d3cfea1ff
1635,1635.0,1809.0,modernmt/modernmt,aef7aa5197de54e91cbffc88e00c036a1066e770,Refactoring of Pre/Post-processor completed: improved multi-thread efficiency,https://github.com/modernmt/modernmt/commit/aef7aa5197de54e91cbffc88e00c036a1066e770
1636,1636.0,1810.0,modernmt/modernmt,e5afea50fc4c83d2e4f9704030c9ec9e45352c44,"Refactoring to multilingual for: commons, context-analyzer, decoders, text-processing.",https://github.com/modernmt/modernmt/commit/e5afea50fc4c83d2e4f9704030c9ec9e45352c44
1637,1637.0,1811.0,modernmt/modernmt,f579543e0cb313aca31975f2f05136b97d352ecc,Code refactoring of onmt,https://github.com/modernmt/modernmt/commit/f579543e0cb313aca31975f2f05136b97d352ecc
1638,1638.0,1812.0,modernmt/modernmt,6be1c0a8c5d842c70022107fb11f3d5e93c0f0ec,Engine and Decoder classes refactoring. Single thread executor for OpenNMT decoder.,https://github.com/modernmt/modernmt/commit/6be1c0a8c5d842c70022107fb11f3d5e93c0f0ec
1639,1639.0,1813.0,modernmt/modernmt,4d8b701ca66189e06f6600de27646f005d0f6acf,code refactoring,https://github.com/modernmt/modernmt/commit/4d8b701ca66189e06f6600de27646f005d0f6acf
1640,1640.0,1814.0,modernmt/modernmt,4cc96f08b6fffa4e7831b728e34d409ca96996fb,Small code refactoring,https://github.com/modernmt/modernmt/commit/4cc96f08b6fffa4e7831b728e34d409ca96996fb
1641,1641.0,1815.0,modernmt/modernmt,3f70539e99365127b6507c3e18142acda1594654,small code refactoring,https://github.com/modernmt/modernmt/commit/3f70539e99365127b6507c3e18142acda1594654
1642,1642.0,1816.0,modernmt/modernmt,2e848e270880224eb7dd37972a8e535caabb0432,Merge branch 'develop' of git+ssh://github.com/ModernMT/MMT into refactoring/simplify,https://github.com/modernmt/modernmt/commit/2e848e270880224eb7dd37972a8e535caabb0432
1643,1643.0,1817.0,modernmt/modernmt,017202949a3a12e48a057540593654ec47af96bc,StaticLM pruning + Trie model. Code refactoring and bugfixing.,https://github.com/modernmt/modernmt/commit/017202949a3a12e48a057540593654ec47af96bc
1644,1644.0,1818.0,modernmt/modernmt,be8c3f23f66bd7a6a973bca05104adaed40cab95,Merge branch 'develop' into refactoring/simplify,https://github.com/modernmt/modernmt/commit/be8c3f23f66bd7a6a973bca05104adaed40cab95
1645,1645.0,1819.0,modernmt/modernmt,59ee7fdc510cf387710e9480d6c6ff3c7f8f1497,Merge branch 'develop' of git+ssh://github.com/ModernMT/MMT into refactoring/simplify,https://github.com/modernmt/modernmt/commit/59ee7fdc510cf387710e9480d6c6ff3c7f8f1497
1646,1646.0,1820.0,modernmt/modernmt,6dede1630f9085f9f7a67e2dd141a5ff14739a79,Merge branch 'refactoring/java_processes' of git+ssh://github.com/ModernMT/MMT into refactoring/java_processes,https://github.com/modernmt/modernmt/commit/6dede1630f9085f9f7a67e2dd141a5ff14739a79
1647,1647.0,1821.0,modernmt/modernmt,67bbf001d3d314ee628c8e3c4db17ef4c48962e9,python refactoring for java processes,https://github.com/modernmt/modernmt/commit/67bbf001d3d314ee628c8e3c4db17ef4c48962e9
1648,1648.0,1822.0,modernmt/modernmt,8c8613cb7a985c831b8b87b90767ab432e5b2a31,Refactoring in ClusterNodeMain,https://github.com/modernmt/modernmt/commit/8c8613cb7a985c831b8b87b90767ab432e5b2a31
1649,1649.0,1823.0,modernmt/modernmt,3ebe935ed8038bac17fd19812dd1fb5dd78c3975,Merge branch 'refactoring/java_processes' of git+ssh://github.com/ModernMT/MMT into refactoring/java_processes,https://github.com/modernmt/modernmt/commit/3ebe935ed8038bac17fd19812dd1fb5dd78c3975
1650,1650.0,1824.0,modernmt/modernmt,70f1f29648148b5308399e0b54e8a186027981b4,general refactoring,https://github.com/modernmt/modernmt/commit/70f1f29648148b5308399e0b54e8a186027981b4
1651,1651.0,1825.0,modernmt/modernmt,239e90b09d85e3c515376cc2c866be957cb68138,refactoring in cassandraIdGenerator advanceCounters method,https://github.com/modernmt/modernmt/commit/239e90b09d85e3c515376cc2c866be957cb68138
1652,1652.0,1826.0,modernmt/modernmt,b5825d836f1b4d75250be3b558eb98ebe1c8a0c0,refactoring,https://github.com/modernmt/modernmt/commit/b5825d836f1b4d75250be3b558eb98ebe1c8a0c0
1653,1653.0,1827.0,modernmt/modernmt,a0c556bb5c604e9a3e4565271c846496476bc8c1,refactoring + bugfix,https://github.com/modernmt/modernmt/commit/a0c556bb5c604e9a3e4565271c846496476bc8c1
1654,1654.0,1828.0,modernmt/modernmt,3544cf88e2a269cc85ea5aad99b30296a41ad7e4,refactoring,https://github.com/modernmt/modernmt/commit/3544cf88e2a269cc85ea5aad99b30296a41ad7e4
1655,1655.0,1829.0,modernmt/modernmt,4095262c01f4d1ada8a48f41493907dec62b5f54,started kafka topics refactoring,https://github.com/modernmt/modernmt/commit/4095262c01f4d1ada8a48f41493907dec62b5f54
1656,1656.0,1830.0,modernmt/modernmt,51af84d913e642e3d2f746c3575434546a2685ec,Merge branch 'develop' into refactoring/translation-sessions,https://github.com/modernmt/modernmt/commit/51af84d913e642e3d2f746c3575434546a2685ec
1657,1657.0,1831.0,modernmt/modernmt,a537a40c671e4fe782ac141c28c5c728165c4286,Merge remote-tracking branch 'origin/develop' into refactoring/translation-sessions,https://github.com/modernmt/modernmt/commit/a537a40c671e4fe782ac141c28c5c728165c4286
1658,1658.0,1832.0,modernmt/modernmt,ebb8bbd84bea089bd5be7cc31c075cd023d7ed50,Cassandra IDs refactoring,https://github.com/modernmt/modernmt/commit/ebb8bbd84bea089bd5be7cc31c075cd023d7ed50
1659,1659.0,1833.0,modernmt/modernmt,c852ad8a95f770bbb641990dc21d4fcf8b918edd,Refactoring of SuffixArrayPT db and storage iterators,https://github.com/modernmt/modernmt/commit/c852ad8a95f770bbb641990dc21d4fcf8b918edd
1660,1660.0,1834.0,modernmt/modernmt,2d60343b0865ceb5d2dafdb0a60761f354929d4a,Refactoring of InterpolatedLM StorageIterator,https://github.com/modernmt/modernmt/commit/2d60343b0865ceb5d2dafdb0a60761f354929d4a
1661,1661.0,1835.0,modernmt/modernmt,7b52f5dbb384d06ad8e7ad19bd25ce6afd415af3,Implemented multipart/form-data support and refactoring of GET /context API,https://github.com/modernmt/modernmt/commit/7b52f5dbb384d06ad8e7ad19bd25ce6afd415af3
1662,1662.0,1836.0,modernmt/modernmt,f91212f209409eb15feab6c07a7d69b3e870b0ea,ModernMT cluster node start refactoring,https://github.com/modernmt/modernmt/commit/f91212f209409eb15feab6c07a7d69b3e870b0ea
1663,1663.0,1837.0,modernmt/modernmt,9947ca6d490c8ae820955cd34efff8c33f18437a,Cleaning pipeline refactoring and new time-window draft filter implemented,https://github.com/modernmt/modernmt/commit/9947ca6d490c8ae820955cd34efff8c33f18437a
1664,1664.0,1838.0,modernmt/modernmt,9c83aef1a57268661c3dd086777d707e1c39f7a5,Code refactoring,https://github.com/modernmt/modernmt/commit/9c83aef1a57268661c3dd086777d707e1c39f7a5
1665,1665.0,1839.0,modernmt/modernmt,6605b51cff94821bea5044dd46bf20783c3e90df,solved conflicts; refactoring for orientation counts,https://github.com/modernmt/modernmt/commit/6605b51cff94821bea5044dd46bf20783c3e90df
1666,1666.0,1840.0,modernmt/modernmt,b6251346e7435cb8a4a0f8104e318633049e6121,Code refactoring,https://github.com/modernmt/modernmt/commit/b6251346e7435cb8a4a0f8104e318633049e6121
1667,1667.0,1841.0,modernmt/modernmt,4bebb64cd67fe5e04c4f014d54af273b0a6b6f36,Refactoring completed for native MosesDecoder,https://github.com/modernmt/modernmt/commit/4bebb64cd67fe5e04c4f014d54af273b0a6b6f36
1668,1668.0,1842.0,modernmt/modernmt,f00623efe387a96bb7b212ca83d753232a9494da,Refactoring completed for native FastAlign,https://github.com/modernmt/modernmt/commit/f00623efe387a96bb7b212ca83d753232a9494da
1669,1669.0,1843.0,modernmt/modernmt,e66306e0ba20a5d4f7538b61c81083edf961b95c,Refactoring completed for native Vocabulary,https://github.com/modernmt/modernmt/commit/e66306e0ba20a5d4f7538b61c81083edf961b95c
1670,1670.0,1844.0,modernmt/modernmt,fa9d437ca4973a946555ea8d053d8349f25ab0f6,refactoring after pull request merge,https://github.com/modernmt/modernmt/commit/fa9d437ca4973a946555ea8d053d8349f25ab0f6
1671,1671.0,1845.0,modernmt/modernmt,e1d5b24877355f7bea7c2f9fceecfc5db7027bde,FastAlign refactoring completed,https://github.com/modernmt/modernmt/commit/e1d5b24877355f7bea7c2f9fceecfc5db7027bde
1672,1672.0,1846.0,modernmt/modernmt,de95a138a715f95b58050cb3aa93f532388e52ce,refactoring,https://github.com/modernmt/modernmt/commit/de95a138a715f95b58050cb3aa93f532388e52ce
1673,1673.0,1847.0,modernmt/modernmt,38de141924ffe005a465eaed72d2ad9b02d120ea,Refactoring Moses native project,https://github.com/modernmt/modernmt/commit/38de141924ffe005a465eaed72d2ad9b02d120ea
1674,1674.0,1848.0,modernmt/modernmt,ede5ac11d4627727907846db0d935b78f777403e,"Refactoring: removed module Model, classes moved to Core",https://github.com/modernmt/modernmt/commit/ede5ac11d4627727907846db0d935b78f777403e
1675,1675.0,1849.0,modernmt/modernmt,aaaf9fe0b332f973e627e6a7eaf1b633f2ad0993,Refactoring on Model module package organization. Added support for XLIFF to parallel files conversion.,https://github.com/modernmt/modernmt/commit/aaaf9fe0b332f973e627e6a7eaf1b633f2ad0993
1676,1676.0,1850.0,modernmt/modernmt,50c1aac018e708131ff8d693dbb01421572d5475,Refactoring of Corpus classes. Added support to .4cb files.,https://github.com/modernmt/modernmt/commit/50c1aac018e708131ff8d693dbb01421572d5475
1677,1677.0,1851.0,modernmt/modernmt,3e6e5a3ed93b0d38e96a0474419b2c38e0a8718a,Refactoring ParallelCorpus->BilingualCorpus: removed old invalid calls to FileParallelCorpus() constructor,https://github.com/modernmt/modernmt/commit/3e6e5a3ed93b0d38e96a0474419b2c38e0a8718a
1678,1678.0,1852.0,modernmt/modernmt,fee3cb323c2732e4181a4cf6222a9dd66aef18cd,Refactoring of Pipeline builders,https://github.com/modernmt/modernmt/commit/fee3cb323c2732e4181a4cf6222a9dd66aef18cd
1679,1679.0,1853.0,modernmt/modernmt,5b3fe71540ac54e51cec2b85a5796deb1770e0ff,"Small refactoring: attribute ""node"" of ModernMT class is now protected",https://github.com/modernmt/modernmt/commit/5b3fe71540ac54e51cec2b85a5796deb1770e0ff
1680,1680.0,1854.0,modernmt/modernmt,510d9e93267a1972c8dccdbf72e8a397ec53f047,Modules refactoring,https://github.com/modernmt/modernmt/commit/510d9e93267a1972c8dccdbf72e8a397ec53f047
1681,1681.0,1855.0,modernmt/modernmt,c0625b73792d110ba466d0c41ada6a521a5cd955,Refactoring attribute name,https://github.com/modernmt/modernmt/commit/c0625b73792d110ba466d0c41ada6a521a5cd955
1682,1682.0,1856.0,modernmt/modernmt,0498be8526c8f1b263b4272185d7043b6dbf6662,"Refactored code, added comments",https://github.com/modernmt/modernmt/commit/0498be8526c8f1b263b4272185d7043b6dbf6662
1683,1683.0,1857.0,modernmt/modernmt,e2784dbce947aa16f96e0b99c81298fb8cbb39a9,Refactored symetrization,https://github.com/modernmt/modernmt/commit/e2784dbce947aa16f96e0b99c81298fb8cbb39a9
1684,1684.0,1858.0,modernmt/modernmt,9d65b7e124fa338d50f7ff40fa652e5fd3abfde2,Refactoring text processing classes,https://github.com/modernmt/modernmt/commit/9d65b7e124fa338d50f7ff40fa652e5fd3abfde2
1685,1685.0,1859.0,modernmt/modernmt,95a9b7ed53ba9fdcc018fc9630053350e7834c0f,Refactored Aligner module,https://github.com/modernmt/modernmt/commit/95a9b7ed53ba9fdcc018fc9630053350e7834c0f
1686,1686.0,1860.0,modernmt/modernmt,98d41d04e65dfd8758d94ac53d145696ec1da832,Language specific detokenizers added. Refactoring of pyflex script to make it usable both for Tokenizer and Detokenizer.,https://github.com/modernmt/modernmt/commit/98d41d04e65dfd8758d94ac53d145696ec1da832
1687,1687.0,1861.0,modernmt/modernmt,4d72ef90af166067d5cfb82229634a87e166f5d1,Refactored code,https://github.com/modernmt/modernmt/commit/4d72ef90af166067d5cfb82229634a87e166f5d1
1688,1688.0,1862.0,modernmt/modernmt,7a5539b74c747e131232356d6f51263c0e15fbb8,Refactoring: divided TokensOutputter into TokensOutputter and SentenceOutputter,https://github.com/modernmt/modernmt/commit/7a5539b74c747e131232356d6f51263c0e15fbb8
1689,1689.0,1863.0,modernmt/modernmt,48aaf8bf498161b687789a55553469b3157ec685,Bugfix: tags are now outputted tokenized if requested. Refactoring of some parts of the TextProcessing module.,https://github.com/modernmt/modernmt/commit/48aaf8bf498161b687789a55553469b3157ec685
1690,1690.0,1864.0,modernmt/modernmt,66cf5732d7842eeb61a2f3f71ff99e73f1605cc2,Refactoring of model classes,https://github.com/modernmt/modernmt/commit/66cf5732d7842eeb61a2f3f71ff99e73f1605cc2
1691,1691.0,1865.0,modernmt/modernmt,a0922b9e12a052dab700d81d1230bb59654d1c96,Refactoring of exceptions thrown by ContextAnalyzer and High-level entities,https://github.com/modernmt/modernmt/commit/a0922b9e12a052dab700d81d1230bb59654d1c96
1692,1692.0,1866.0,modernmt/modernmt,208ef7d79b2a38781bca747ac27f9b49efb499db,Refactoring examples folder,https://github.com/modernmt/modernmt/commit/208ef7d79b2a38781bca747ac27f9b49efb499db
1693,1693.0,1867.0,modernmt/modernmt,e0baf35c8997e29c66620e9a06aeb3a49cf04024,Refactoring project structure,https://github.com/modernmt/modernmt/commit/e0baf35c8997e29c66620e9a06aeb3a49cf04024
1694,1694.0,1868.0,rabidgremlin/Mutters,0f556c507e3049c74858cbcef5fb18cd31b516e2,"Feature/utterance fast match (#20)

* Add additional unit tests before refactoring TemplatedUtterance

* Implement efficient TemplatedUtterance matching

This custom matching algorithm is much, much, much faster than the
previous approach based on regular expressions",https://github.com/rabidgremlin/Mutters/commit/0f556c507e3049c74858cbcef5fb18cd31b516e2
1695,1695.0,1869.0,rabidgremlin/Mutters,117ecc3c0657080901812b81d03ca8f7725bd4ad,"FastText support and refactor (#4)

* Upgraded to OpenNLP 1.8.0. Externalised tokenizer.

* Externalised tokenizer for templated intent matcher.

* Made NER plugable via SlotMatcher interface.

* Updated readme.

* Refactored core packages.

* Extracted out abstract ML based intent matcher.

* More.

* Basic fast text plumbing in play

* Cleaned input

* Added waether example

* More tweaks.

* Cleaned up  build and fastText.

* Renamed test packages.

* More tweaks of build.

* Removed uneeded file.

* Fixed ignores.

* Cleaned up build and improved simple tokenizer.

* Upgraded blade-ink.

* Extracted out configuration class.

* Created InkBotConfiguration interface.

* Added StateMachineBotConfiguration.

* Cleaned up interfaces.

* Updated wrapper.

* updated wrappers

* Added check that tokenizer doesn't damage slot identifiers.

* Changed interface to force supply of tokenizer to OpenNLPSlotMatcher.

* Fixed interface to match new form of templated intents.

* Added test for ordinals.

* Added READMEs.

* More readmes.

* Fixed links.

* More docs update.

* Updated javadoc.

* More javadoc.

* Javadoc for slots.

* Java doc for templated matches and state machine bot.

* Fixed javadoc errors.",https://github.com/rabidgremlin/Mutters/commit/117ecc3c0657080901812b81d03ca8f7725bd4ad
1696,1696.0,1870.0,rabidgremlin/Mutters,e0d3227fa9d5308162a0b6f71507b2d0308cbd06,Code clean up and ink function refactor,https://github.com/rabidgremlin/Mutters/commit/e0d3227fa9d5308162a0b6f71507b2d0308cbd06
1697,1697.0,1871.0,rabidgremlin/Mutters,f5994ba41ab2419ac7a8914e8cbac4f0e9aa385a,Refactoring bot classes to add Ink bot.,https://github.com/rabidgremlin/Mutters/commit/f5994ba41ab2419ac7a8914e8cbac4f0e9aa385a
1698,1698.0,1872.0,rabidgremlin/Mutters,1b3f42f533cd314fdc0f58f531ee603f95b000b1,Refactor and use of slots now.,https://github.com/rabidgremlin/Mutters/commit/1b3f42f533cd314fdc0f58f531ee603f95b000b1
1699,1699.0,1873.0,rabidgremlin/Mutters,4d0f011920866709ad1064aec7fb1463fa6169e9,Start of refactor.,https://github.com/rabidgremlin/Mutters/commit/4d0f011920866709ad1064aec7fb1463fa6169e9
1700,1700.0,1874.0,rabidgremlin/Mutters,4ba1986bb17c7c24db796878fa6285420c4449d6,Added AbstractBot and refactored example.,https://github.com/rabidgremlin/Mutters/commit/4ba1986bb17c7c24db796878fa6285420c4449d6
1701,1701.0,1875.0,rabidgremlin/Mutters,e585f417870d460799e17094664f8850a31636a0,"Added Context for parsing.
Refactored input.
Fix regex bug.",https://github.com/rabidgremlin/Mutters/commit/e585f417870d460799e17094664f8850a31636a0
1702,1702.0,1876.0,rabidgremlin/Mutters,3e8615d262d40b11b09c24b203de5c4acc5db9db,Refactored into packages.,https://github.com/rabidgremlin/Mutters/commit/3e8615d262d40b11b09c24b203de5c4acc5db9db
1703,1703.0,1877.0,graphaware/neo4j-nlp,21684389c54027aa1aba82584af3e666a54dd839,Merge branch 'feature/multi-purpose-refactoring' into develop,https://github.com/graphaware/neo4j-nlp/commit/21684389c54027aa1aba82584af3e666a54dd839
1704,1704.0,1878.0,graphaware/neo4j-nlp,a16069b3d37a7015abcf75d1cd1d2df1dad931df,Merge branch 'develop' into feature/multi-purpose-refactoring,https://github.com/graphaware/neo4j-nlp/commit/a16069b3d37a7015abcf75d1cd1d2df1dad931df
1705,1705.0,1879.0,graphaware/neo4j-nlp,5ae7063eaada9e5a9e8fe3a66d639a7514be47df,Merge branch 'feature/multi-purpose-refactoring' of github.com:graphaware/neo4j-nlp into feature/multi-purpose-refactoring,https://github.com/graphaware/neo4j-nlp/commit/5ae7063eaada9e5a9e8fe3a66d639a7514be47df
1706,1706.0,1880.0,graphaware/neo4j-nlp,be3b8b00bb15a3eba15ca58896bba5085c0c6d11,further refactoring,https://github.com/graphaware/neo4j-nlp/commit/be3b8b00bb15a3eba15ca58896bba5085c0c6d11
1707,1707.0,1881.0,graphaware/neo4j-nlp,ab5f0c8bda083304e2c0df8164f13d8c303dc8e3,first commit for the multi-purpose-refactoring,https://github.com/graphaware/neo4j-nlp/commit/ab5f0c8bda083304e2c0df8164f13d8c303dc8e3
1708,1708.0,1882.0,graphaware/neo4j-nlp,16a7c6234afcd48f91e4d98c085e6c6bd88b9c35,TextRank refactoring,https://github.com/graphaware/neo4j-nlp/commit/16a7c6234afcd48f91e4d98c085e6c6bd88b9c35
1709,1709.0,1883.0,graphaware/neo4j-nlp,fe6e35623f74aae35ef9c21dce4c9898a607d7bd,some refactoring,https://github.com/graphaware/neo4j-nlp/commit/fe6e35623f74aae35ef9c21dce4c9898a607d7bd
1710,1710.0,1884.0,graphaware/neo4j-nlp,3a58771649a2c405324ce5227f47abc5fc0ce5cb,refactoring for workflow,https://github.com/graphaware/neo4j-nlp/commit/3a58771649a2c405324ce5227f47abc5fc0ce5cb
1711,1711.0,1885.0,graphaware/neo4j-nlp,08f0879ecb7358acc1c583a4e647b4aba92d151d,word2vec refactoring added also persistence in dynamic configuration,https://github.com/graphaware/neo4j-nlp/commit/08f0879ecb7358acc1c583a4e647b4aba92d151d
1712,1712.0,1886.0,graphaware/neo4j-nlp,4ced422ba5758d53a6f75fd9f40550fda92ed221,refactoring on page rank,https://github.com/graphaware/neo4j-nlp/commit/4ced422ba5758d53a6f75fd9f40550fda92ed221
1713,1713.0,1887.0,graphaware/neo4j-nlp,1075f990cc2b28bdf4810700bdc6549b77c1f16b,refactored parser common codebase and added word parser,https://github.com/graphaware/neo4j-nlp/commit/1075f990cc2b28bdf4810700bdc6549b77c1f16b
1714,1714.0,1888.0,graphaware/neo4j-nlp,91be7cc1fc0823512627573632c68a08df99bc8a,"pipeline refactored (#70)

it looks fine to me, we need only to update the documentation",https://github.com/graphaware/neo4j-nlp/commit/91be7cc1fc0823512627573632c68a08df99bc8a
1715,1715.0,1889.0,graphaware/neo4j-nlp,c9e406463cb3a5eb3c2820ba5fa7ba54a01b07f3,"further refactoring for workflow: added new queue based output, added delete and get for every procedure",https://github.com/graphaware/neo4j-nlp/commit/c9e406463cb3a5eb3c2820ba5fa7ba54a01b07f3
1716,1716.0,1890.0,graphaware/neo4j-nlp,881efb53a02157cb637b9638e244ae1147ae5a4c,refactoring converting pipeline to workflow,https://github.com/graphaware/neo4j-nlp/commit/881efb53a02157cb637b9638e244ae1147ae5a4c
1717,1717.0,1891.0,graphaware/neo4j-nlp,ffbb7b517f60506bac8e747573450baecc1769ad,first round of refactoring for pipeline,https://github.com/graphaware/neo4j-nlp/commit/ffbb7b517f60506bac8e747573450baecc1769ad
1718,1718.0,1892.0,graphaware/neo4j-nlp,a27b85cb3a2fccca6fca66103743bba0300aca0f,refactoring TextRank,https://github.com/graphaware/neo4j-nlp/commit/a27b85cb3a2fccca6fca66103743bba0300aca0f
1719,1719.0,1893.0,graphaware/neo4j-nlp,4debf3065c1c74746b2467a00918a134467e6dc8,"Merge pull request #19 from graphaware/refactoring

[WIP] refactoring",https://github.com/graphaware/neo4j-nlp/commit/4debf3065c1c74746b2467a00918a134467e6dc8
1720,1720.0,1894.0,graphaware/neo4j-nlp,48aaf27c6ef5ff0c42b7dd29de148a66b690b80c,Merge branch 'refactoring' of https://github.com/graphaware/neo4j-nlp into refactoring,https://github.com/graphaware/neo4j-nlp/commit/48aaf27c6ef5ff0c42b7dd29de148a66b690b80c
1721,1721.0,1895.0,graphaware/neo4j-nlp,c7690dbb7295b09b473f6a057996f953edea8248,Merge origin/refactoring into refactoring,https://github.com/graphaware/neo4j-nlp/commit/c7690dbb7295b09b473f6a057996f953edea8248
1722,1722.0,1896.0,graphaware/neo4j-nlp,07a1ba129945bf5fcae0d5c1aae66dfe4963c0ae,Merge branch 'refactoring' of github.com:graphaware/neo4j-nlp into refactoring,https://github.com/graphaware/neo4j-nlp/commit/07a1ba129945bf5fcae0d5c1aae66dfe4963c0ae
1723,1723.0,1897.0,graphaware/neo4j-nlp,0201393a6cd536daa70bbae4a900a234cf5d459a,Merge origin/refactoring into refactoring,https://github.com/graphaware/neo4j-nlp/commit/0201393a6cd536daa70bbae4a900a234cf5d459a
1724,1724.0,1898.0,graphaware/neo4j-nlp,1558b931f1ae4e10f5dc0df9bf61d313028ff74e,Merge branch 'refactoring' of github.com:graphaware/neo4j-nlp into refactoring,https://github.com/graphaware/neo4j-nlp/commit/1558b931f1ae4e10f5dc0df9bf61d313028ff74e
1725,1725.0,1899.0,graphaware/neo4j-nlp,e24bc39109604a8bfca11395ad6ac2ec0be8dbc1,refactored default processor and pipeline,https://github.com/graphaware/neo4j-nlp/commit/e24bc39109604a8bfca11395ad6ac2ec0be8dbc1
1726,1726.0,1900.0,graphaware/neo4j-nlp,9071ad17c8b6770d6f4f90de1e3c0efddb582ac4,Merge origin/refactoring into refactoring,https://github.com/graphaware/neo4j-nlp/commit/9071ad17c8b6770d6f4f90de1e3c0efddb582ac4
1727,1727.0,1901.0,graphaware/neo4j-nlp,67832f2cac7fcb220c753388d4715394a634d702,Merge branch 'refactoring' of github.com:graphaware/neo4j-nlp into refactoring,https://github.com/graphaware/neo4j-nlp/commit/67832f2cac7fcb220c753388d4715394a634d702
1728,1728.0,1902.0,graphaware/neo4j-nlp,ba788ec0af3bb7f5f4c74366dbd2bb7a7b4719b6,first refactoring of TextRank,https://github.com/graphaware/neo4j-nlp/commit/ba788ec0af3bb7f5f4c74366dbd2bb7a7b4719b6
1729,1729.0,1903.0,graphaware/neo4j-nlp,bc0f94a5df64ca853810672abb6d67cf3392196b,Merge branch 'refactoring' of https://github.com/graphaware/neo4j-nlp into refactoring,https://github.com/graphaware/neo4j-nlp/commit/bc0f94a5df64ca853810672abb6d67cf3392196b
1730,1730.0,1904.0,graphaware/neo4j-nlp,d2eb32415e6137f26a2ba414f82bb7625a3ee7ca,Merge branch 'refactoring' of github.com:graphaware/neo4j-nlp into refactoring,https://github.com/graphaware/neo4j-nlp/commit/d2eb32415e6137f26a2ba414f82bb7625a3ee7ca
1731,1731.0,1905.0,graphaware/neo4j-nlp,31715d6f3a0e11aa32569c8b8e988e5300e0acff,Merge branch 'refactoring' of https://github.com/graphaware/neo4j-nlp into refactoring,https://github.com/graphaware/neo4j-nlp/commit/31715d6f3a0e11aa32569c8b8e988e5300e0acff
1732,1732.0,1906.0,graphaware/neo4j-nlp,2e30ab5d29ec5d4b810bdbb8af922f747f2142bd,"Merge origin/refactoring into refactoring

Conflicts:
	src/main/java/com/graphaware/nlp/NLPManager.java",https://github.com/graphaware/neo4j-nlp/commit/2e30ab5d29ec5d4b810bdbb8af922f747f2142bd
1733,1733.0,1907.0,graphaware/neo4j-nlp,6e4252cc474b9edd2f3e23085257c558922a7bf9,Merge origin/refactoring into refactoring,https://github.com/graphaware/neo4j-nlp/commit/6e4252cc474b9edd2f3e23085257c558922a7bf9
1734,1734.0,1908.0,graphaware/neo4j-nlp,c1b67aecdd417f3fc0a8e2a5ad80b332450ff542,Merge branch 'refactoring' of https://github.com/graphaware/neo4j-nlp into refactoring,https://github.com/graphaware/neo4j-nlp/commit/c1b67aecdd417f3fc0a8e2a5ad80b332450ff542
1735,1735.0,1909.0,graphaware/neo4j-nlp,cf3e49dbb34704fd31e589eb67a6fa7afae4e0f0,Merge branch 'refactoring' of https://github.com/graphaware/neo4j-nlp into refactoring,https://github.com/graphaware/neo4j-nlp/commit/cf3e49dbb34704fd31e589eb67a6fa7afae4e0f0
1736,1736.0,1910.0,graphaware/neo4j-nlp,7a3e0edec1a62f29fa40dcd39abaa0d1505c1c41,Merge branch 'refactoring' of github.com:graphaware/neo4j-nlp into refactoring,https://github.com/graphaware/neo4j-nlp/commit/7a3e0edec1a62f29fa40dcd39abaa0d1505c1c41
1737,1737.0,1911.0,graphaware/neo4j-nlp,c43870e38ac9c0f939aa1385ebc444d21552f953,Merge branch 'refactoring' of github.com:graphaware/neo4j-nlp into refactoring,https://github.com/graphaware/neo4j-nlp/commit/c43870e38ac9c0f939aa1385ebc444d21552f953
1738,1738.0,1912.0,graphaware/neo4j-nlp,8cebd3d1d7db55ea2fb4790018db56e57c59998a,Merge branch 'refactoring' of github.com:graphaware/neo4j-nlp into refactoring,https://github.com/graphaware/neo4j-nlp/commit/8cebd3d1d7db55ea2fb4790018db56e57c59998a
1739,1739.0,1913.0,graphaware/neo4j-nlp,d65ce3252cb7d6d3c19618e7f9b0cbad864ca803,started doc refactoring,https://github.com/graphaware/neo4j-nlp/commit/d65ce3252cb7d6d3c19618e7f9b0cbad864ca803
1740,1740.0,1914.0,graphaware/neo4j-nlp,e67d3c10b1fd8a3c3d517a3f73ba93230a6d764a,Merge origin/refactoring into refactoring,https://github.com/graphaware/neo4j-nlp/commit/e67d3c10b1fd8a3c3d517a3f73ba93230a6d764a
1741,1741.0,1915.0,graphaware/neo4j-nlp,155fd2ec200c392372045b17082f5aeda1e8c589,Merge branch 'refactoring' of github.com:graphaware/neo4j-nlp into refactoring,https://github.com/graphaware/neo4j-nlp/commit/155fd2ec200c392372045b17082f5aeda1e8c589
1742,1742.0,1916.0,graphaware/neo4j-nlp,3d45e48fcd20e6893f1c96307dc9f34f7756c88e,Merge origin/refactoring into refactoring,https://github.com/graphaware/neo4j-nlp/commit/3d45e48fcd20e6893f1c96307dc9f34f7756c88e
1743,1743.0,1917.0,graphaware/neo4j-nlp,96742c7b5bf9fc3e3af7d9642ef52d1872edbce1,refactoring: persistence split and cleanup - AnnotatedText,https://github.com/graphaware/neo4j-nlp/commit/96742c7b5bf9fc3e3af7d9642ef52d1872edbce1
1744,1744.0,1918.0,graphaware/neo4j-nlp,84dab5695fc8caa0ae85ff8686bf387c7622a845,refactoring : started splitting persistence into multiple persisters,https://github.com/graphaware/neo4j-nlp/commit/84dab5695fc8caa0ae85ff8686bf387c7622a845
1745,1745.0,1919.0,graphaware/neo4j-nlp,f423e5d51e6b4b65ab233c025382b679ffebed6b,refactoring: test annotate procedure with multiple nodes,https://github.com/graphaware/neo4j-nlp/commit/f423e5d51e6b4b65ab233c025382b679ffebed6b
1746,1746.0,1920.0,graphaware/neo4j-nlp,dd02d3997ae047ad5fa24ba08f35443f44ef658d,refactoring : unit test on AnnotatedText::filter,https://github.com/graphaware/neo4j-nlp/commit/dd02d3997ae047ad5fa24ba08f35443f44ef658d
1747,1747.0,1921.0,graphaware/neo4j-nlp,b8cfb2f99a2fef2d3c03df6655005ba3d3135e3c,refactoring: ported removePipeline and refactored custom pipeline storage,https://github.com/graphaware/neo4j-nlp/commit/b8cfb2f99a2fef2d3c03df6655005ba3d3135e3c
1748,1748.0,1922.0,graphaware/neo4j-nlp,ccbc4d07f9242ef680561dceea5ccc0532cb8ea9,refactoring: custom pipelines are now stored in KV store,https://github.com/graphaware/neo4j-nlp/commit/ccbc4d07f9242ef680561dceea5ccc0532cb8ea9
1749,1749.0,1923.0,graphaware/neo4j-nlp,b63005d477a74b908b3ba1e8cd41d0ba5d0f020b,refactoring : some love in tests,https://github.com/graphaware/neo4j-nlp/commit/b63005d477a74b908b3ba1e8cd41d0ba5d0f020b
1750,1750.0,1924.0,graphaware/neo4j-nlp,4b056c2739f3a471bbcf84c7683203f03b89f59c,"Merge origin/refactoring into refactoring

Conflicts:
	src/main/java/com/graphaware/nlp/dsl/procedure/AnnotateProcedure.java",https://github.com/graphaware/neo4j-nlp/commit/4b056c2739f3a471bbcf84c7683203f03b89f59c
1751,1751.0,1925.0,graphaware/neo4j-nlp,5cbd4439c01a2540c5be6d25461f151390d2bf2d,refactored addPipeline,https://github.com/graphaware/neo4j-nlp/commit/5cbd4439c01a2540c5be6d25461f151390d2bf2d
1752,1752.0,1926.0,graphaware/neo4j-nlp,532b8579122b6453133288b295360b9f049602b5,refactoring: configuration procedure set multiple settings at once,https://github.com/graphaware/neo4j-nlp/commit/532b8579122b6453133288b295360b9f049602b5
1753,1753.0,1927.0,graphaware/neo4j-nlp,25a1b14e6df5ec48145028f63223d38df3ac3756,"refactoring: general puprose dynamic configuration, procedure and test for it",https://github.com/graphaware/neo4j-nlp/commit/25a1b14e6df5ec48145028f63223d38df3ac3756
1754,1754.0,1928.0,graphaware/neo4j-nlp,3fcab5de831d5b9accebeea69fc1c170c49dd341,"refactoring: improved base test suite, added getPipelineInfos procedure",https://github.com/graphaware/neo4j-nlp/commit/3fcab5de831d5b9accebeea69fc1c170c49dd341
1755,1755.0,1929.0,graphaware/neo4j-nlp,c6b7947948675ecb3174c131021921767e50e0a8,persistence refactoring : test helper class and more assertions,https://github.com/graphaware/neo4j-nlp/commit/c6b7947948675ecb3174c131021921767e50e0a8
1756,1756.0,1930.0,graphaware/neo4j-nlp,bc3a0bcfe34b9fada2a83cec5c9607ea07964210,persistence refactoring : store phrases,https://github.com/graphaware/neo4j-nlp/commit/bc3a0bcfe34b9fada2a83cec5c9607ea07964210
1757,1757.0,1931.0,graphaware/neo4j-nlp,ea875a7d93d04d888f08dc89aa0f94fea0f4ad67,persistence refactoring: ner and pos + test,https://github.com/graphaware/neo4j-nlp/commit/ea875a7d93d04d888f08dc89aa0f94fea0f4ad67
1758,1758.0,1932.0,graphaware/neo4j-nlp,670d488114304849cb7df428b874a4699f2f413a,persistence refactoring : universal dependencies,https://github.com/graphaware/neo4j-nlp/commit/670d488114304849cb7df428b874a4699f2f413a
1759,1759.0,1933.0,graphaware/neo4j-nlp,4442df4724780a2e9d041b91431c47cf97258839,persistence refactoring : tag occurrences and tags,https://github.com/graphaware/neo4j-nlp/commit/4442df4724780a2e9d041b91431c47cf97258839
1760,1760.0,1934.0,graphaware/neo4j-nlp,dd3057477df08250cfab20ad02de43e019ccb759,persistence refactoring and test,https://github.com/graphaware/neo4j-nlp/commit/dd3057477df08250cfab20ad02de43e019ccb759
1761,1761.0,1935.0,graphaware/neo4j-nlp,85e4ff56938538dac61d799b22a284a6f6a46a68,refactoring phase 1,https://github.com/graphaware/neo4j-nlp/commit/85e4ff56938538dac61d799b22a284a6f6a46a68
1762,1762.0,1936.0,graphaware/neo4j-nlp,a84a04737c7c5f2720f12512e5216a0295e34673,little refactoring on PageRank,https://github.com/graphaware/neo4j-nlp/commit/a84a04737c7c5f2720f12512e5216a0295e34673
1763,1763.0,1937.0,graphaware/neo4j-nlp,c83f6662cdabb682086c6ba2c64aadccd1d3a562,minor refactoring,https://github.com/graphaware/neo4j-nlp/commit/c83f6662cdabb682086c6ba2c64aadccd1d3a562
1764,1764.0,1938.0,graphaware/neo4j-nlp,1b0cb3b55dbc2a700c4c3e272d1b1236f70b0260,"added phrases and relationships, refactoring, bug fixes, class for profiling",https://github.com/graphaware/neo4j-nlp/commit/1b0cb3b55dbc2a700c4c3e272d1b1236f70b0260
1765,1765.0,1939.0,graphaware/neo4j-nlp,93cfb368a53b9c5e9ba3683c738463e1d27eb6c0,"added support for phrases occurrences in text processor, some more refactoring",https://github.com/graphaware/neo4j-nlp/commit/93cfb368a53b9c5e9ba3683c738463e1d27eb6c0
1766,1766.0,1940.0,graphaware/neo4j-nlp,6fb6363343a68bcd6bfcdd5cee86dc9ac3c6f260,"refactoring text processing, improved performance, added sentiment analysis as a distinct process",https://github.com/graphaware/neo4j-nlp/commit/6fb6363343a68bcd6bfcdd5cee86dc9ac3c6f260
1767,1767.0,1941.0,graphaware/neo4j-nlp,fd968164e3b0caebd64d4bc2732c4dfbb15ef58b,refactoring text processing,https://github.com/graphaware/neo4j-nlp/commit/fd968164e3b0caebd64d4bc2732c4dfbb15ef58b
1768,1768.0,1942.0,graphaware/neo4j-nlp,658e04c9f3e12025aea70769e13680fad83d5aab,"some refactoring, new tests",https://github.com/graphaware/neo4j-nlp/commit/658e04c9f3e12025aea70769e13680fad83d5aab
1769,1769.0,1943.0,graphaware/neo4j-nlp,093b9a530d8f3bf06949b0cb797ce106cb045f86,"some refactoring, added license, start improving procedure interface",https://github.com/graphaware/neo4j-nlp/commit/093b9a530d8f3bf06949b0cb797ce106cb045f86
1770,1770.0,1944.0,CElabls/neuronix,06294fdb1913389a0721bbe54a225447760dae29,"refactored some code.

       :sunglasses:",https://github.com/CElabls/neuronix/commit/06294fdb1913389a0721bbe54a225447760dae29
1771,1771.0,1945.0,CElabls/neuronix,f7ad00691cdf5e4d124d928a041707c25fc50783,refactor some code,https://github.com/CElabls/neuronix/commit/f7ad00691cdf5e4d124d928a041707c25fc50783
1772,1772.0,1946.0,CElabls/neuronix,4bfd7f2aaf56f9a5d91ef353f786d1485cabc0f4,refactor some code,https://github.com/CElabls/neuronix/commit/4bfd7f2aaf56f9a5d91ef353f786d1485cabc0f4
1773,1773.0,1947.0,haifengl/smile,b83ad5aef476b4e4f337326bcd71adc3512e680b,refactor SparseOneHotEncoder to BinaryEncoder,https://github.com/haifengl/smile/commit/b83ad5aef476b4e4f337326bcd71adc3512e680b
1774,1774.0,1948.0,haifengl/smile,c6055f4ebf280e1e185318b13a3485d2313effe4,refactor tests,https://github.com/haifengl/smile/commit/c6055f4ebf280e1e185318b13a3485d2313effe4
1775,1775.0,1949.0,haifengl/smile,21560c53596c8c1ac1bb2dd540cd0389acad0161,refactor BagOfWords,https://github.com/haifengl/smile/commit/21560c53596c8c1ac1bb2dd540cd0389acad0161
1776,1776.0,1950.0,haifengl/smile,ddc93a47fa0a8297104ecece6f159c4adc34fd2c,refactor sum squares ratio,https://github.com/haifengl/smile/commit/ddc93a47fa0a8297104ecece6f159c4adc34fd2c
1777,1777.0,1951.0,haifengl/smile,50f14e0fe9a49da558b769f18fb0ecc8a90268cc,refactor SignalNoiseRatio,https://github.com/haifengl/smile/commit/50f14e0fe9a49da558b769f18fb0ecc8a90268cc
1778,1778.0,1952.0,haifengl/smile,c6b335f4478493a17fca9457da4c2fa3f1166e9a,refactor KPCA,https://github.com/haifengl/smile/commit/c6b335f4478493a17fca9457da4c2fa3f1166e9a
1779,1779.0,1953.0,haifengl/smile,181f5e7991f77b70eef387bf486e4a8b565c52cc,refactor LinearProjection,https://github.com/haifengl/smile/commit/181f5e7991f77b70eef387bf486e4a8b565c52cc
1780,1780.0,1954.0,haifengl/smile,4bba5527838180525ba85f44491fbc316b215ab6,refactor imputation test,https://github.com/haifengl/smile/commit/4bba5527838180525ba85f44491fbc316b215ab6
1781,1781.0,1955.0,haifengl/smile,4805ae5cfb8a85861459bddb6ebddfebfda574fe,refactor LLSImputer,https://github.com/haifengl/smile/commit/4805ae5cfb8a85861459bddb6ebddfebfda574fe
1782,1782.0,1956.0,haifengl/smile,0daed82c83b241aebc01e8b6b8adb9fa4f66e0a8,refactor SVDImputer,https://github.com/haifengl/smile/commit/0daed82c83b241aebc01e8b6b8adb9fa4f66e0a8
1783,1783.0,1957.0,haifengl/smile,f707cc1ccbed6f8604a1102afeafa84675f147b2,"refactor CoverTree<K,V>",https://github.com/haifengl/smile/commit/f707cc1ccbed6f8604a1102afeafa84675f147b2
1784,1784.0,1958.0,haifengl/smile,386ca8b7d78ce0889da6030f36e22ddc069e46e1,"refactor BKTree<K,V>",https://github.com/haifengl/smile/commit/386ca8b7d78ce0889da6030f36e22ddc069e46e1
1785,1785.0,1959.0,haifengl/smile,db31ab1ee3351f3e9bd289ec4f7736cb20bff198,"refactor LinearSearch<K,V>",https://github.com/haifengl/smile/commit/db31ab1ee3351f3e9bd289ec4f7736cb20bff198
1786,1786.0,1960.0,haifengl/smile,33ab6559a20c38015201e06522b2a11355a9a59b,refactor scaler,https://github.com/haifengl/smile/commit/33ab6559a20c38015201e06522b2a11355a9a59b
1787,1787.0,1961.0,haifengl/smile,f4d1a6e5baa3db41bc3841f0764d14b31b7eb1f0,refactor MLP,https://github.com/haifengl/smile/commit/f4d1a6e5baa3db41bc3841f0764d14b31b7eb1f0
1788,1788.0,1962.0,haifengl/smile,dfa9234f655d8d17657c6f577bbe6705dc679d10,refactor ensemble api,https://github.com/haifengl/smile/commit/dfa9234f655d8d17657c6f577bbe6705dc679d10
1789,1789.0,1963.0,haifengl/smile,21d1b6b1bcf7c6efcd972cdb8eac0af468b03e3b,refactor ensemble,https://github.com/haifengl/smile/commit/21d1b6b1bcf7c6efcd972cdb8eac0af468b03e3b
1790,1790.0,1964.0,haifengl/smile,ed3de5c907d02bc2baa05411f62e87378eca8f8a,refactor FeatureTransform and add invert(),https://github.com/haifengl/smile/commit/ed3de5c907d02bc2baa05411f62e87378eca8f8a
1791,1791.0,1965.0,haifengl/smile,70f42231ec4ffb96ab5a2ecbbdd9cff8ff3e2f48,refactor tSNE test,https://github.com/haifengl/smile/commit/70f42231ec4ffb96ab5a2ecbbdd9cff8ff3e2f48
1792,1792.0,1966.0,haifengl/smile,64f2a48c6ed83137e45e23f18a9b3561dd0a64ca,refactor Model interface,https://github.com/haifengl/smile/commit/64f2a48c6ed83137e45e23f18a9b3561dd0a64ca
1793,1793.0,1967.0,haifengl/smile,fe9fe987ea11741f76ff698134f2a0c25475ae66,refactor Regression api,https://github.com/haifengl/smile/commit/fe9fe987ea11741f76ff698134f2a0c25475ae66
1794,1794.0,1968.0,haifengl/smile,d571557a482f524e95e025cf4c372e871eef2fae,refactor Classifier api,https://github.com/haifengl/smile/commit/d571557a482f524e95e025cf4c372e871eef2fae
1795,1795.0,1969.0,haifengl/smile,0a9d6bc33d0f084d9710868ba11a5218082edf54,refactor smile commands,https://github.com/haifengl/smile/commit/0a9d6bc33d0f084d9710868ba11a5218082edf54
1796,1796.0,1970.0,haifengl/smile,2e35acd1e7fc03e49a7506e776c0f8f68c112d91,refactor Projection API,https://github.com/haifengl/smile/commit/2e35acd1e7fc03e49a7506e776c0f8f68c112d91
1797,1797.0,1971.0,haifengl/smile,53835685bc7a58088562888f15fa7a70dcaa453b,refactor Corpus method names,https://github.com/haifengl/smile/commit/53835685bc7a58088562888f15fa7a70dcaa453b
1798,1798.0,1972.0,haifengl/smile,63d91108d0d942168ee619af539dfa19bde81975,refactor LOOCV,https://github.com/haifengl/smile/commit/63d91108d0d942168ee619af539dfa19bde81975
1799,1799.0,1973.0,haifengl/smile,77fac6115d89925fb3457a5e8c7f7c1f3bfa0faf,refactor LOOCV,https://github.com/haifengl/smile/commit/77fac6115d89925fb3457a5e8c7f7c1f3bfa0faf
1800,1800.0,1974.0,haifengl/smile,54d5a3043fafc885cddbe1bf5f77b2da84058969,refactor Bootstrap,https://github.com/haifengl/smile/commit/54d5a3043fafc885cddbe1bf5f77b2da84058969
1801,1801.0,1975.0,haifengl/smile,1b55f6be7862c17c0e9d1646832321c8753bb0d0,refactor CrossValidation,https://github.com/haifengl/smile/commit/1b55f6be7862c17c0e9d1646832321c8753bb0d0
1802,1802.0,1976.0,haifengl/smile,fdefdad6ac130a7ef2617d2a91d09d2921f28b23,refactor Kernel for HPO,https://github.com/haifengl/smile/commit/fdefdad6ac130a7ef2617d2a91d09d2921f28b23
1803,1803.0,1977.0,haifengl/smile,378ee2850e42238c81d3e03bbbc7594a02635a4a,refactor pdist(),https://github.com/haifengl/smile/commit/378ee2850e42238c81d3e03bbbc7594a02635a4a
1804,1804.0,1978.0,haifengl/smile,8659d5f6ccd8d3c4eee6954715198be31ddced59,refactor Pearson kernel,https://github.com/haifengl/smile/commit/8659d5f6ccd8d3c4eee6954715198be31ddced59
1805,1805.0,1979.0,haifengl/smile,738e3344e222d3a19e8e6faa3fb18dedfe8b58cf,refactor dot product kernels,https://github.com/haifengl/smile/commit/738e3344e222d3a19e8e6faa3fb18dedfe8b58cf
1806,1806.0,1980.0,haifengl/smile,e66b252100d878e9a127651c446d72dc2add6acd,"refactor MathEx.distance(int[], int[]) for binary sparse arrays",https://github.com/haifengl/smile/commit/e66b252100d878e9a127651c446d72dc2add6acd
1807,1807.0,1981.0,haifengl/smile,aac82dbc977a70f3bc2153cc91ef8c8d2e7f5a18,refactor GPR,https://github.com/haifengl/smile/commit/aac82dbc977a70f3bc2153cc91ef8c8d2e7f5a18
1808,1808.0,1982.0,haifengl/smile,370c06cdaa24924ad460e05cfa41aa2027c88ff9,refactor FMeasure to FScore,https://github.com/haifengl/smile/commit/370c06cdaa24924ad460e05cfa41aa2027c88ff9
1809,1809.0,1983.0,haifengl/smile,c1f214891c7c985b7de9c08a500438b95155d004,refactor BinaryClassificationMetric to ProbabilisticClassificationMetric,https://github.com/haifengl/smile/commit/c1f214891c7c985b7de9c08a500438b95155d004
1810,1810.0,1984.0,haifengl/smile,0d9d9e73b4687699b0ef77444b26354c4bbf69f5,refactor update,https://github.com/haifengl/smile/commit/0d9d9e73b4687699b0ef77444b26354c4bbf69f5
1811,1811.0,1985.0,haifengl/smile,e9453c8fb958bd1b667192374a7110d4b1d30ba3,refactor with new matrix api,https://github.com/haifengl/smile/commit/e9453c8fb958bd1b667192374a7110d4b1d30ba3
1812,1812.0,1986.0,haifengl/smile,cbddc7e652f0d662444dc47f40ed062490a5ffe1,refactor FactorCrossing,https://github.com/haifengl/smile/commit/cbddc7e652f0d662444dc47f40ed062490a5ffe1
1813,1813.0,1987.0,haifengl/smile,1757002984e73a5241c5600bfbf085d1bae8e5f7,refactor formula,https://github.com/haifengl/smile/commit/1757002984e73a5241c5600bfbf085d1bae8e5f7
1814,1814.0,1988.0,haifengl/smile,8c7a68b590641cb3a31931d87c8daaafa56cbcf5,refactor HyperTerm and Term api,https://github.com/haifengl/smile/commit/8c7a68b590641cb3a31931d87c8daaafa56cbcf5
1815,1815.0,1989.0,haifengl/smile,57ebe376ce993fa8122c1210d87d4380c37d42eb,refactor ARPACK api,https://github.com/haifengl/smile/commit/57ebe376ce993fa8122c1210d87d4380c37d42eb
1816,1816.0,1990.0,haifengl/smile,76345174c712fd71de09f719ed3608a5479ef573,refactor ARPACK,https://github.com/haifengl/smile/commit/76345174c712fd71de09f719ed3608a5479ef573
1817,1817.0,1991.0,haifengl/smile,1f3a2ea46f95d8f2e7233bc20e1e43adc313c215,refactor element-wise operations,https://github.com/haifengl/smile/commit/1f3a2ea46f95d8f2e7233bc20e1e43adc313c215
1818,1818.0,1992.0,haifengl/smile,33b9d70fe22172e39b246ba1eca3b9a2685e4fea,refactor with new matrix interface,https://github.com/haifengl/smile/commit/33b9d70fe22172e39b246ba1eca3b9a2685e4fea
1819,1819.0,1993.0,haifengl/smile,8cfe83a9ea3e8665acdc4485f636fbf3b9193980,refactor IMatrix,https://github.com/haifengl/smile/commit/8cfe83a9ea3e8665acdc4485f636fbf3b9193980
1820,1820.0,1994.0,haifengl/smile,ab9e288967f6f12910cf0786b14cfa299428ee3b,refactor SparseMatrix,https://github.com/haifengl/smile/commit/ab9e288967f6f12910cf0786b14cfa299428ee3b
1821,1821.0,1995.0,haifengl/smile,2a3e7cf9a8b51f01bfc485dba89624ad3fc91515,refactor BandMatrix,https://github.com/haifengl/smile/commit/2a3e7cf9a8b51f01bfc485dba89624ad3fc91515
1822,1822.0,1996.0,haifengl/smile,a730d62b2b5d0cacc040a11ab5c70ba80cdcdc4c,refactoring,https://github.com/haifengl/smile/commit/a730d62b2b5d0cacc040a11ab5c70ba80cdcdc4c
1823,1823.0,1997.0,haifengl/smile,3d3643895b3512ee36693c942584bd685fce4066,refactor LogisticRegression,https://github.com/haifengl/smile/commit/3d3643895b3512ee36693c942584bd685fce4066
1824,1824.0,1998.0,haifengl/smile,a28e099801a0108dbd52fe9867e5f9b52364a7b4,refactor UMAP,https://github.com/haifengl/smile/commit/a28e099801a0108dbd52fe9867e5f9b52364a7b4
1825,1825.0,1999.0,haifengl/smile,be6df36b7145a107fad0eca3503362d95d122ac7,refactor UMAP,https://github.com/haifengl/smile/commit/be6df36b7145a107fad0eca3503362d95d122ac7
1826,1826.0,2000.0,haifengl/smile,b242bc55974c3fda74313f49703e6e5dec8a2222,refactor TreeSHAP,https://github.com/haifengl/smile/commit/b242bc55974c3fda74313f49703e6e5dec8a2222
1827,1827.0,2001.0,haifengl/smile,ee7533cbf98814beb50a7c5171858aaba759d19d,refactor class Stat to BIC and GoodTuring,https://github.com/haifengl/smile/commit/ee7533cbf98814beb50a7c5171858aaba759d19d
1828,1828.0,2002.0,haifengl/smile,38fa70036151d9d33dff9c98e5793a52d97c8b8b,refactor plot scala api,https://github.com/haifengl/smile/commit/38fa70036151d9d33dff9c98e5793a52d97c8b8b
1829,1829.0,2003.0,haifengl/smile,bf574cf1d17e197291985e00872fdc95c81b187c,initial refactor ready,https://github.com/haifengl/smile/commit/bf574cf1d17e197291985e00872fdc95c81b187c
1830,1830.0,2004.0,haifengl/smile,ae820cef1cad35a1c880311e66175665484edbda,inital refactor of plot,https://github.com/haifengl/smile/commit/ae820cef1cad35a1c880311e66175665484edbda
1831,1831.0,2005.0,haifengl/smile,3a91d5945ecfcdc2d09b3ab2625016ba15e1263d,refactor bigram/ngram collocation and keyword extraction,https://github.com/haifengl/smile/commit/3a91d5945ecfcdc2d09b3ab2625016ba15e1263d
1832,1832.0,2006.0,haifengl/smile,ca5f634583b6e8f58aeb607ba91e3bdeece1f6ee,refactor CRF,https://github.com/haifengl/smile/commit/ca5f634583b6e8f58aeb607ba91e3bdeece1f6ee
1833,1833.0,2007.0,haifengl/smile,be869e81e250760f2ecdacd1376e72aad3839c16,refactor RegressionTree Loss function,https://github.com/haifengl/smile/commit/be869e81e250760f2ecdacd1376e72aad3839c16
1834,1834.0,2008.0,haifengl/smile,d90e70d1f11ef89d907557dfd614a0473d9513b2,refactor HMM,https://github.com/haifengl/smile/commit/d90e70d1f11ef89d907557dfd614a0473d9513b2
1835,1835.0,2009.0,haifengl/smile,68c731370e38315192851cb596803ddd0919d0da,refactor ClassLabel,https://github.com/haifengl/smile/commit/68c731370e38315192851cb596803ddd0919d0da
1836,1836.0,2010.0,haifengl/smile,61030f9471350c5cf673bae201934cf94b8034a2,refactor distribution api,https://github.com/haifengl/smile/commit/61030f9471350c5cf673bae201934cf94b8034a2
1837,1837.0,2011.0,haifengl/smile,6a8a544335f73099091a9425a2b43aa9b9079860,refactor NeuralMap,https://github.com/haifengl/smile/commit/6a8a544335f73099091a9425a2b43aa9b9079860
1838,1838.0,2012.0,haifengl/smile,0f3c02815db2909768febec7f9f2676ecc3e7f0f,refactor growing neural gas,https://github.com/haifengl/smile/commit/0f3c02815db2909768febec7f9f2676ecc3e7f0f
1839,1839.0,2013.0,haifengl/smile,94e7cc41f0a7dc0f3ff29797130f73fb277343a7,refactor BIRCH,https://github.com/haifengl/smile/commit/94e7cc41f0a7dc0f3ff29797130f73fb277343a7
1840,1840.0,2014.0,haifengl/smile,52a9b17d30fd174cfb2a06b4eb2eaa366cdf6687,refactor neural gas,https://github.com/haifengl/smile/commit/52a9b17d30fd174cfb2a06b4eb2eaa366cdf6687
1841,1841.0,2015.0,haifengl/smile,96dbb0c3da35dfd76fd01eec7ae3af06f092eb47,refactor neural gas,https://github.com/haifengl/smile/commit/96dbb0c3da35dfd76fd01eec7ae3af06f092eb47
1842,1842.0,2016.0,haifengl/smile,363d75c7908733993fac39e01336f72e5cc3dc85,refactor SOM,https://github.com/haifengl/smile/commit/363d75c7908733993fac39e01336f72e5cc3dc85
1843,1843.0,2017.0,haifengl/smile,e0b1093bba77a0f83b289b3831672d2c8233da00,refactor partition clustering,https://github.com/haifengl/smile/commit/e0b1093bba77a0f83b289b3831672d2c8233da00
1844,1844.0,2018.0,haifengl/smile,0da619c4cf0acc958280c6f4cbd69999a679e6f4,refactor hierarchical clustering,https://github.com/haifengl/smile/commit/0da619c4cf0acc958280c6f4cbd69999a679e6f4
1845,1845.0,2019.0,haifengl/smile,bd4daa8d2bab920995ce47f25db5713add3f5f58,refactor projection module,https://github.com/haifengl/smile/commit/bd4daa8d2bab920995ce47f25db5713add3f5f58
1846,1846.0,2020.0,haifengl/smile,c821dae8cc1d7f144888afa913de2b3cc085bdd5,refactor SNLSH,https://github.com/haifengl/smile/commit/c821dae8cc1d7f144888afa913de2b3cc085bdd5
1847,1847.0,2021.0,haifengl/smile,a85731247a7df7c0543c6b710a2b8cfdfd65cca7,refactor LSH and MPLSH,https://github.com/haifengl/smile/commit/a85731247a7df7c0543c6b710a2b8cfdfd65cca7
1848,1848.0,2022.0,haifengl/smile,f070fae3522d905e6c04c8f05f11b6f02ab8895d,refactor nearest neighbor search,https://github.com/haifengl/smile/commit/f070fae3522d905e6c04c8f05f11b6f02ab8895d
1849,1849.0,2023.0,haifengl/smile,e6a4ba828dce4343e5806359c3fae59efa42b26b,refactor missing value imputation,https://github.com/haifengl/smile/commit/e6a4ba828dce4343e5806359c3fae59efa42b26b
1850,1850.0,2024.0,haifengl/smile,e90c09e5016f2431f5c5f8a64d9e6e07db8fe3b9,refactor t-SNE,https://github.com/haifengl/smile/commit/e90c09e5016f2431f5c5f8a64d9e6e07db8fe3b9
1851,1851.0,2025.0,haifengl/smile,41ace2018fc6ed2645db9b42153c0060a17471e6,refactor manifold learning,https://github.com/haifengl/smile/commit/41ace2018fc6ed2645db9b42153c0060a17471e6
1852,1852.0,2026.0,haifengl/smile,8e4554d1cc2d873b5819f9685a70152cdb607a57,refactor mds,https://github.com/haifengl/smile/commit/8e4554d1cc2d873b5819f9685a70152cdb607a57
1853,1853.0,2027.0,haifengl/smile,56d5e6e3d158f4baf3f7a8a097ff120b7142c1be,refactor genetic algorithm based feature selection,https://github.com/haifengl/smile/commit/56d5e6e3d158f4baf3f7a8a097ff120b7142c1be
1854,1854.0,2028.0,haifengl/smile,826b008ec519af415f9faecaf24be9cba0031017,refactor genetic algorithm,https://github.com/haifengl/smile/commit/826b008ec519af415f9faecaf24be9cba0031017
1855,1855.0,2029.0,haifengl/smile,c40e969233c71c00ae57284791248b96f2a12bd2,refactor SVR,https://github.com/haifengl/smile/commit/c40e969233c71c00ae57284791248b96f2a12bd2
1856,1856.0,2030.0,haifengl/smile,aea703d07ca9a6088c45104361d2947b38b9fa2f,refactor SVM,https://github.com/haifengl/smile/commit/aea703d07ca9a6088c45104361d2947b38b9fa2f
1857,1857.0,2031.0,haifengl/smile,9da34820836234df5017f3ad41c85675d458ee51,refactor SVM,https://github.com/haifengl/smile/commit/9da34820836234df5017f3ad41c85675d458ee51
1858,1858.0,2032.0,haifengl/smile,17c2c7b0a658209a0f13592f7e9f70f7b5c1ff8d,refactor neural network,https://github.com/haifengl/smile/commit/17c2c7b0a658209a0f13592f7e9f70f7b5c1ff8d
1859,1859.0,2033.0,haifengl/smile,a5a611ff1858cdf1176be7915b1313acd6c10b9f,refactor FLD,https://github.com/haifengl/smile/commit/a5a611ff1858cdf1176be7915b1313acd6c10b9f
1860,1860.0,2034.0,haifengl/smile,cb6e0f1edf1a22438784c3b4afa5ac1102a10655,"refactor LDA, QDA and RDA",https://github.com/haifengl/smile/commit/cb6e0f1edf1a22438784c3b4afa5ac1102a10655
1861,1861.0,2035.0,haifengl/smile,3c284cc25d70ffb5084bcf7035a58162cb25b8c1,refactor Platt scaling,https://github.com/haifengl/smile/commit/3c284cc25d70ffb5084bcf7035a58162cb25b8c1
1862,1862.0,2036.0,haifengl/smile,f44655f686091730f51c7546d37fce7229b7b7b0,refactor rbf network for classification,https://github.com/haifengl/smile/commit/f44655f686091730f51c7546d37fce7229b7b7b0
1863,1863.0,2037.0,haifengl/smile,bbb58e57ae6b128369a721c20d7591bfaf3615bf,refactor naive bayes,https://github.com/haifengl/smile/commit/bbb58e57ae6b128369a721c20d7591bfaf3615bf
1864,1864.0,2038.0,haifengl/smile,eef6d6670b04ac1e23e114891afe58f0192aa115,refactor knn,https://github.com/haifengl/smile/commit/eef6d6670b04ac1e23e114891afe58f0192aa115
1865,1865.0,2039.0,haifengl/smile,43f0338c20e5b353c3316a77e07be34ad2b30627,refactor logistic regression,https://github.com/haifengl/smile/commit/43f0338c20e5b353c3316a77e07be34ad2b30627
1866,1866.0,2040.0,haifengl/smile,847b1e1744271e3a9bb7881d5b848cc8f8f4ef48,refactor maxent,https://github.com/haifengl/smile/commit/847b1e1744271e3a9bb7881d5b848cc8f8f4ef48
1867,1867.0,2041.0,haifengl/smile,684789afaf5959fa7176e9ca1ec24b742879f3dc,refactor test method of ensemble algorithms,https://github.com/haifengl/smile/commit/684789afaf5959fa7176e9ca1ec24b742879f3dc
1868,1868.0,2042.0,haifengl/smile,85ca190bbd1991ab1595759b9636b2d6f56c108d,refactor validation api,https://github.com/haifengl/smile/commit/85ca190bbd1991ab1595759b9636b2d6f56c108d
1869,1869.0,2043.0,haifengl/smile,bf28b98c5bec8290668eaceb85ca561bae384d0b,refactor AdaBoost,https://github.com/haifengl/smile/commit/bf28b98c5bec8290668eaceb85ca561bae384d0b
1870,1870.0,2044.0,haifengl/smile,18d566bc5e824459f1268b3cb27d65fcf0523edb,refactor decision tree,https://github.com/haifengl/smile/commit/18d566bc5e824459f1268b3cb27d65fcf0523edb
1871,1871.0,2045.0,haifengl/smile,f4cdb8e0aa9a657e1bd4f7d79365a0edc4c6a797,refactor validation measures,https://github.com/haifengl/smile/commit/f4cdb8e0aa9a657e1bd4f7d79365a0edc4c6a797
1872,1872.0,2046.0,haifengl/smile,b016d415bc9faa1fc34b04a175a606d0e4b20957,refactor regression unit tests,https://github.com/haifengl/smile/commit/b016d415bc9faa1fc34b04a175a606d0e4b20957
1873,1873.0,2047.0,haifengl/smile,eb16d4009be904afd5b0be0de9c1aef5aaec4353,refactor unit tests,https://github.com/haifengl/smile/commit/eb16d4009be904afd5b0be0de9c1aef5aaec4353
1874,1874.0,2048.0,haifengl/smile,07bbb77cb8b6f619ac72510a6d870038650ab447,refactor GBT api,https://github.com/haifengl/smile/commit/07bbb77cb8b6f619ac72510a6d870038650ab447
1875,1875.0,2049.0,haifengl/smile,61cca6cc95cb26e3e993052b88420c9bf28b4ad5,refactor Maxent with stream,https://github.com/haifengl/smile/commit/61cca6cc95cb26e3e993052b88420c9bf28b4ad5
1876,1876.0,2050.0,haifengl/smile,e8590f83fde3ff28f7847bbcd6fe3a6df586ddc5,refactor GBT for classification,https://github.com/haifengl/smile/commit/e8590f83fde3ff28f7847bbcd6fe3a6df586ddc5
1877,1877.0,2051.0,haifengl/smile,24562e3363f1246ef683d48c956ee56f9963004c,refactor GBT for regression,https://github.com/haifengl/smile/commit/24562e3363f1246ef683d48c956ee56f9963004c
1878,1878.0,2052.0,haifengl/smile,9ecd3266bd155b28c07261bfdcb898b5abbf2988,refactor random forest for regression,https://github.com/haifengl/smile/commit/9ecd3266bd155b28c07261bfdcb898b5abbf2988
1879,1879.0,2053.0,haifengl/smile,d7128d815f5000cc253e3cc1dc555e12cfc5b869,refactor regression tree,https://github.com/haifengl/smile/commit/d7128d815f5000cc253e3cc1dc555e12cfc5b869
1880,1880.0,2054.0,haifengl/smile,87ac084dad8ca0881fe778cf1281b1e1d97fe4e0,refactor random forest for classification,https://github.com/haifengl/smile/commit/87ac084dad8ca0881fe778cf1281b1e1d97fe4e0
1881,1881.0,2055.0,haifengl/smile,166eca355587570972cdcc6f2225f1205b709d8f,inital refactor of DecisionTree,https://github.com/haifengl/smile/commit/166eca355587570972cdcc6f2225f1205b709d8f
1882,1882.0,2056.0,haifengl/smile,e495b42cc85ad9fb420e02ef5d50cd1bc8695c2b,refactor CART,https://github.com/haifengl/smile/commit/e495b42cc85ad9fb420e02ef5d50cd1bc8695c2b
1883,1883.0,2057.0,haifengl/smile,363ce8488b523e4ce424e2b334021415d434573d,refactor fit api,https://github.com/haifengl/smile/commit/363ce8488b523e4ce424e2b334021415d434573d
1884,1884.0,2058.0,haifengl/smile,1708e986fd8731c9f3d3815e41373681986e4bb1,refactor StructType.measures,https://github.com/haifengl/smile/commit/1708e986fd8731c9f3d3815e41373681986e4bb1
1885,1885.0,2059.0,haifengl/smile,2dc8dc281baa9e055d06740598f79c9cde9302de,refactor neural network,https://github.com/haifengl/smile/commit/2dc8dc281baa9e055d06740598f79c9cde9302de
1886,1886.0,2060.0,haifengl/smile,838a834d98a1ef56b65103d14a77de7cfc3876bd,refactor NeuralNetwork,https://github.com/haifengl/smile/commit/838a834d98a1ef56b65103d14a77de7cfc3876bd
1887,1887.0,2061.0,haifengl/smile,2f054d0586e4b64ddeeb023ff782e2ed00a9e196,refactor LDA,https://github.com/haifengl/smile/commit/2f054d0586e4b64ddeeb023ff782e2ed00a9e196
1888,1888.0,2062.0,haifengl/smile,c467b65eb1797c4f2a8fd93d52b288886de43f3a,refactor SVR,https://github.com/haifengl/smile/commit/c467b65eb1797c4f2a8fd93d52b288886de43f3a
1889,1889.0,2063.0,haifengl/smile,26f303cebe18051c0110b4359e99ecefacd482db,refactor RBF network,https://github.com/haifengl/smile/commit/26f303cebe18051c0110b4359e99ecefacd482db
1890,1890.0,2064.0,haifengl/smile,3c96bddb6386cc3a8e375ff6b529464594132044,refactor prop parameters,https://github.com/haifengl/smile/commit/3c96bddb6386cc3a8e375ff6b529464594132044
1891,1891.0,2065.0,haifengl/smile,e53746da29edbd7de59bc4a2c1f36d2746f98944,refactor Gaussian Process,https://github.com/haifengl/smile/commit/e53746da29edbd7de59bc4a2c1f36d2746f98944
1892,1892.0,2066.0,haifengl/smile,4be744e4073b3bbeb4177e3be46d04b154a3a273,refactor elastic net and RLS,https://github.com/haifengl/smile/commit/4be744e4073b3bbeb4177e3be46d04b154a3a273
1893,1893.0,2067.0,haifengl/smile,471fafbf89811db1220fa415c6a66560d667f865,refactor linear models,https://github.com/haifengl/smile/commit/471fafbf89811db1220fa415c6a66560d667f865
1894,1894.0,2068.0,haifengl/smile,62797b026764a30ee8f49cedb3b237bc347233d0,refactor OLS test,https://github.com/haifengl/smile/commit/62797b026764a30ee8f49cedb3b237bc347233d0
1895,1895.0,2069.0,haifengl/smile,4ac7654fcce8fa8373d6dd9e4d9fcd8782a630e7,refactor elastic net,https://github.com/haifengl/smile/commit/4ac7654fcce8fa8373d6dd9e4d9fcd8782a630e7
1896,1896.0,2070.0,haifengl/smile,22d083b54d2085393dc9b64f08d9787e4c166395,refactor LASSO,https://github.com/haifengl/smile/commit/22d083b54d2085393dc9b64f08d9787e4c166395
1897,1897.0,2071.0,haifengl/smile,8703834581040e74a085cb6d6e79bc27c22c4467,refactor RLS,https://github.com/haifengl/smile/commit/8703834581040e74a085cb6d6e79bc27c22c4467
1898,1898.0,2072.0,haifengl/smile,c7fe2ea17e44df1dc0d29809365f4ffc78c3b555,refactor RidgeRegression,https://github.com/haifengl/smile/commit/c7fe2ea17e44df1dc0d29809365f4ffc78c3b555
1899,1899.0,2073.0,haifengl/smile,d756717930078484eb611a011aeb6d3b3d87281a,refactor standardizer,https://github.com/haifengl/smile/commit/d756717930078484eb611a011aeb6d3b3d87281a
1900,1900.0,2074.0,haifengl/smile,68f4e5ae33f7ff66bb136654dfdcd6326cc735df,refactor Scalers,https://github.com/haifengl/smile/commit/68f4e5ae33f7ff66bb136654dfdcd6326cc735df
1901,1901.0,2075.0,haifengl/smile,c6d7cd112f9c4bee447651bbf968af9f91da7d85,add DataFrame.of(Stream). initial refactor Scaler,https://github.com/haifengl/smile/commit/c6d7cd112f9c4bee447651bbf968af9f91da7d85
1902,1902.0,2076.0,haifengl/smile,16f2421e5bfcb455a8bfff13f7d48f952fd7bbc1,"refactor formula.frame, formula.matrix, and formula.response",https://github.com/haifengl/smile/commit/16f2421e5bfcb455a8bfff13f7d48f952fd7bbc1
1903,1903.0,2077.0,haifengl/smile,c2ed516f166e8698e08c77a8523991b043f3a022,refactor Formula.apply(),https://github.com/haifengl/smile/commit/c2ed516f166e8698e08c77a8523991b043f3a022
1904,1904.0,2078.0,haifengl/smile,7b43f58c6c97834904e8be342d03ff84da485cda,refactor OLS,https://github.com/haifengl/smile/commit/7b43f58c6c97834904e8be342d03ff84da485cda
1905,1905.0,2079.0,haifengl/smile,0d3030301a160b3afd33a6e02017ff6e5af2db68,refactor Measure,https://github.com/haifengl/smile/commit/0d3030301a160b3afd33a6e02017ff6e5af2db68
1906,1906.0,2080.0,haifengl/smile,91f2a6f3029680e4e65678e3e9ed2944f70d2c19,1. refactor MurmurHash 2. Rename SortUtils to Sort 3. Use interface instead of class for utility classes,https://github.com/haifengl/smile/commit/91f2a6f3029680e4e65678e3e9ed2944f70d2c19
1907,1907.0,2081.0,haifengl/smile,19623e1c0ef5600286d646a8dc21057f920484d3,refactor Term/Factor,https://github.com/haifengl/smile/commit/19623e1c0ef5600286d646a8dc21057f920484d3
1908,1908.0,2082.0,haifengl/smile,a69a60275759beb352ec5e2534971ad833d71785,refactor GroupKFold,https://github.com/haifengl/smile/commit/a69a60275759beb352ec5e2534971ad833d71785
1909,1909.0,2083.0,haifengl/smile,888ce6ce6cd25abf1ccaa9aa08a982ee9844126a,refactor SparseDataset,https://github.com/haifengl/smile/commit/888ce6ce6cd25abf1ccaa9aa08a982ee9844126a
1910,1910.0,2084.0,haifengl/smile,74ea72081b069f03d36013f5e1ffc4ec380f89e9,refactor BinarySparseDataset,https://github.com/haifengl/smile/commit/74ea72081b069f03d36013f5e1ffc4ec380f89e9
1911,1911.0,2085.0,haifengl/smile,f8ef88fccacc0a5065df4125932132f06892665e,refactor k-modes algorithm,https://github.com/haifengl/smile/commit/f8ef88fccacc0a5065df4125932132f06892665e
1912,1912.0,2086.0,haifengl/smile,8acc6181e0ae1d4ca557e7d9dbf0e9d8fc07999d,refactor binary distances,https://github.com/haifengl/smile/commit/8acc6181e0ae1d4ca557e7d9dbf0e9d8fc07999d
1913,1913.0,2087.0,haifengl/smile,f7634a86bab5cf7575e8f1b403999cf30ef1350e,refactor k-modes directory,https://github.com/haifengl/smile/commit/f7634a86bab5cf7575e8f1b403999cf30ef1350e
1914,1914.0,2088.0,haifengl/smile,adf4e17e36540cf8dac361b89c5682609f3ba77c,refactor scala distances using original Distance trait,https://github.com/haifengl/smile/commit/adf4e17e36540cf8dac361b89c5682609f3ba77c
1915,1915.0,2089.0,haifengl/smile,21d8d96d23498c5bc8b2cde27d6220a8472d4ba5,moove some utils code into an util object and refactor some distance classes,https://github.com/haifengl/smile/commit/21d8d96d23498c5bc8b2cde27d6220a8472d4ba5
1916,1916.0,2090.0,haifengl/smile,870638f0e6b3f058f73103fa7f09ee6fe142eeda,"Refactor RegressionTree code a little bit

Simplify control flow in RegressionTree.java
`nextSplits` queue is never null - it means that there
are code branches that are never used.

Loop that splits nodes will never be executed if trainRoot.findBestSplit()
return false. It means that some relevant code can be put inside if clause
keeping outer scope cleaner.",https://github.com/haifengl/smile/commit/870638f0e6b3f058f73103fa7f09ee6fe142eeda
1917,1917.0,2091.0,haifengl/smile,19fcce1c6a24952b9b92b39e7d8a8c0aba702e42,remove useless trait and refactor distances,https://github.com/haifengl/smile/commit/19fcce1c6a24952b9b92b39e7d8a8c0aba702e42
1918,1918.0,2092.0,haifengl/smile,675252d193f57da234eb63f6e015988b33b08471,refactor scala nlp api,https://github.com/haifengl/smile/commit/675252d193f57da234eb63f6e015988b33b08471
1919,1919.0,2093.0,haifengl/smile,1c64a132b75c651d762fea00bacb933ce61272c5,refactor FeatureGenerator,https://github.com/haifengl/smile/commit/1c64a132b75c651d762fea00bacb933ce61272c5
1920,1920.0,2094.0,haifengl/smile,0809c17bb82b5c885898d1d28ab4657026aeb06c,refactor eigen decomposition,https://github.com/haifengl/smile/commit/0809c17bb82b5c885898d1d28ab4657026aeb06c
1921,1921.0,2095.0,haifengl/smile,f01c1c5c8d0182ee05539638e405d7e86e323e07,refactor SVD interface,https://github.com/haifengl/smile/commit/f01c1c5c8d0182ee05539638e405d7e86e323e07
1922,1922.0,2096.0,haifengl/smile,5a41c8abc9b1045ef354081220d08f28da44414c,refactor QR and Cholesky,https://github.com/haifengl/smile/commit/5a41c8abc9b1045ef354081220d08f28da44414c
1923,1923.0,2097.0,haifengl/smile,85afc05ff2ec542a3e7da064e101fb8f597095a1,refactor QR,https://github.com/haifengl/smile/commit/85afc05ff2ec542a3e7da064e101fb8f597095a1
1924,1924.0,2098.0,haifengl/smile,3c56a91914b2101a17e91d89be2b9ea2b2158b1a,refactor Matrix and LU interface,https://github.com/haifengl/smile/commit/3c56a91914b2101a17e91d89be2b9ea2b2158b1a
1925,1925.0,2099.0,haifengl/smile,963ce3e39816324050958b5ff84aede9880a8905,refactor matrix interface,https://github.com/haifengl/smile/commit/963ce3e39816324050958b5ff84aede9880a8905
1926,1926.0,2100.0,haifengl/smile,5e4e92f7f6a93b7ca987c29c7a38a68fcb56a1d6,refactor nd4j package path,https://github.com/haifengl/smile/commit/5e4e92f7f6a93b7ca987c29c7a38a68fcb56a1d6
1927,1927.0,2101.0,haifengl/smile,e5bd2680caecc6a40348c0d33979899ba0b2c5e7,refactor DenseMatrix,https://github.com/haifengl/smile/commit/e5bd2680caecc6a40348c0d33979899ba0b2c5e7
1928,1928.0,2102.0,haifengl/smile,8a736e24094f6a757539e917a93c29c5f07f2c60,refactor doc html file pattern,https://github.com/haifengl/smile/commit/8a736e24094f6a757539e917a93c29c5f07f2c60
1929,1929.0,2103.0,haifengl/smile,a3fa23bb11330250810cfd19869050240b67a17e,refactor matrix library,https://github.com/haifengl/smile/commit/a3fa23bb11330250810cfd19869050240b67a17e
1930,1930.0,2104.0,haifengl/smile,a948edcb429d7073c64c85625fb3e4d8586cc50f,refactor eigen and svd to Lanczos,https://github.com/haifengl/smile/commit/a948edcb429d7073c64c85625fb3e4d8586cc50f
1931,1931.0,2105.0,haifengl/smile,af2c10137a1b932f693f9f2e50e11ffe68229e18,refactor power method to PowerIteration,https://github.com/haifengl/smile/commit/af2c10137a1b932f693f9f2e50e11ffe68229e18
1932,1932.0,2106.0,haifengl/smile,0ce1937b84259aea04c22ad614034c3afc4d9c1f,refactor DenseMatrix to abstract class,https://github.com/haifengl/smile/commit/0ce1937b84259aea04c22ad614034c3afc4d9c1f
1933,1933.0,2107.0,haifengl/smile,2bcc7dee15e3e7f326e267e6c89c0082ddc794cd,refactor BiconjugateGradient out of Matrix,https://github.com/haifengl/smile/commit/2bcc7dee15e3e7f326e267e6c89c0082ddc794cd
1934,1934.0,2108.0,haifengl/smile,1737460c48673e2ed1d7202d50180eda80b940ce,"Merge pull request #140 from jovilius/refactor/factor-out-attributes-default

Factor out default attributes for classification and regression.",https://github.com/haifengl/smile/commit/1737460c48673e2ed1d7202d50180eda80b940ce
1935,1935.0,2109.0,haifengl/smile,3a2b59f46769f2ce0a2c89f53b959f9cabbc7cbf,refactor package smile.io into objects smile.read and smile.write,https://github.com/haifengl/smile/commit/3a2b59f46769f2ce0a2c89f53b959f9cabbc7cbf
1936,1936.0,2110.0,haifengl/smile,29691a5f9ddf5ddc5b628ea8489aaa0fc0cba537,refactor smile.io,https://github.com/haifengl/smile/commit/29691a5f9ddf5ddc5b628ea8489aaa0fc0cba537
1937,1937.0,2111.0,haifengl/smile,e4793843d6f6c23851e482c61b5b52e0a32f6d04,"refactor som, neural gas/map to package smile.vq",https://github.com/haifengl/smile/commit/e4793843d6f6c23851e482c61b5b52e0a32f6d04
1938,1938.0,2112.0,haifengl/smile,b8f918003b34426482dd373527e4de30ef30d590,refactor readTable and readCsv,https://github.com/haifengl/smile/commit/b8f918003b34426482dd373527e4de30ef30d590
1939,1939.0,2113.0,haifengl/smile,d9857825e9d0c517c694685ccba941bd7bbba614,refactor scala plot api,https://github.com/haifengl/smile/commit/d9857825e9d0c517c694685ccba941bd7bbba614
1940,1940.0,2114.0,haifengl/smile,20fe4356a38342fb7605e1fd5b4b27c70e610851,refactor scala package object,https://github.com/haifengl/smile/commit/20fe4356a38342fb7605e1fd5b4b27c70e610851
1941,1941.0,2115.0,haifengl/smile,d3e4afc4168aa0f8f47c292103fb233896cf6e45,refactor cart and related algorithms,https://github.com/haifengl/smile/commit/d3e4afc4168aa0f8f47c292103fb233896cf6e45
1942,1942.0,2116.0,haifengl/smile,a38cb06f45fc85203791ee266fd34c835e80cd49,refactor benchmark,https://github.com/haifengl/smile/commit/a38cb06f45fc85203791ee266fd34c835e80cd49
1943,1943.0,2117.0,haifengl/smile,d9b148049a5e24984e7ec92b1103c4721e18df1f,refactor add licence,https://github.com/haifengl/smile/commit/d9b148049a5e24984e7ec92b1103c4721e18df1f
1944,1944.0,2118.0,haifengl/smile,55c680e44c9c866b88e2cd983a0e80e524e4575b,"Refactor and import SmileDemo

No data imported. This is mainly used as examples how to use SMILE.",https://github.com/haifengl/smile/commit/55c680e44c9c866b88e2cd983a0e80e524e4575b
1945,1945.0,2119.0,apache/submarine,48cdf7bbc82af714a5a5485c92d7da4f2fba3891,"SUBMARINE-1362. Refactor submarine-k8s-agent using JOSDK

### What is this PR for?
A unified agent service replaces the previous one for each experiment and notebook. The unified agent will listen to both experiments and notebooks and update their status in real time, instead of having to start them independently, which would have resulted in untimely status updates.
We will use the Java Operator SDK (https://github.com/java-operator-sdk/java-operator-sdk)

### What type of PR is it?
Feature

### Todos
* [x] - Use Java Operator SDK to replace old agent
* [x] - Remove agent pod deployment when creating/deleting resource
* [x] - Operator support agent deployment
* [x] - Add agent test cases

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1362

### How should this be tested?
Agent test cases

### Screenshots (if appropriate)
NA

### Questions:
* Do the license files need updating? Yes
* Are there breaking changes for older versions? Yes
* Does this need new documentation? No

Author: cdmikechen <cdmikechen@apache.org>

Signed-off-by: cdmikechen <cdmikechen@apache.org>

Closes #1038 from cdmikechen/SUBMARINE-1362 and squashes the following commits:

0e91b022 [cdmikechen] Update libs version in LICENSE-binary
e8718928 [cdmikechen] Fix cicd
b9497d7c [cdmikechen] Add cicd
d5d9d0af [cdmikechen] Unit tests update
ee87f8d5 [cdmikechen] Add Apache2.0
e8f109fb [cdmikechen] Add agent test
fa74b7ca [cdmikechen] Add Apache2.0
b78d9cc2 [cdmikechen] Add Test Framework
c98425bb [cdmikechen] Add agent deployment in operator
de4035b2 [cdmikechen] Remove agent pod deployment when creating/deleting resource
b8f01ee3 [cdmikechen] Use Java Operator SDK to replace old agent",https://github.com/apache/submarine/commit/48cdf7bbc82af714a5a5485c92d7da4f2fba3891
1946,1946.0,2120.0,apache/submarine,4d234b01e7383a22b5e0ded0d58966e13c8eb16a,"SUBMARINE-1230. Optimize submarine-operator-v3

### What is this PR for?
Optimise submarine-operator-v3 code for production deployment.

### What type of PR is it?
Refactoring

### Todos
* [x] - Optimising the parameters of CRD configuration (e.g. add a config to replace image and other parameters related to image, add env in server, add pull secrets in CR, minio secrets, etc.)
* [x] - Move seldon-secret.yaml to operator
* [x] - Support seldon/submarine gateway config
* [x] - Log timestamp format
* [x] - Fix license
* [x] - Adjusting the host list of the gateway
* [x] - Support for updates of some CR configs (e.g. replicas, image ...)

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1230

### How should this be tested?
submarine-operator-v3 test case in github action

### Screenshots (if appropriate)
NA

### Questions:
* Do the license files need updating? Yes
* Are there breaking changes for older versions? Yes
* Does this need new documentation? Yes

Author: cdmikechen <cdmikechen@apache.org>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #1026 from cdmikechen/SUBMARINE-1230 and squashes the following commits:

9aed80f8 [cdmikechen] Add serve and tensorboard test case
c0e5d8ed [cdmikechen] Add server test case
f3147be5 [cdmikechen] Add some test cases
e415052e [cdmikechen] Database Secret
3c3f3b02 [cdmikechen] Change compare
c66024e2 [cdmikechen] Remove seldon secret step
6456794d [cdmikechen] Fix sidecar cni error
8c7f2508 [cdmikechen] Remove istio sidecar and add finalizers
3cac3477 [cdmikechen] submarine istio gateway
764658da [cdmikechen] continue rebase
dae36345 [cdmikechen] Minio secrets and server database check
cbe5f3b4 [cdmikechen] change namespace to submarine-cloud-v3-system
f18008c3 [cdmikechen] Fix server compare and test error
48db1947 [cdmikechen] Fix status update error
b3768823 [cdmikechen] add compare vs secret server
f73c9dda [cdmikechen] fix vs test
8a811d5f [cdmikechen] test for minikube
f2247e2f [cdmikechen] update helm charts crd.yaml
dfa13ff6 [cdmikechen] add seldon secret and handle the case where common is empty
e4bd2e31 [cdmikechen] move minio secret to Secret
ed773fef [cdmikechen] add env in server
4397e172 [cdmikechen] Change License add minio/mc/busybox/mlflow/tensorflow image add pullsecrets Modify the VirtualService policy",https://github.com/apache/submarine/commit/4d234b01e7383a22b5e0ded0d58966e13c8eb16a
1947,1947.0,2121.0,apache/submarine,dd6a292414d3e1547d5603c8daceddabdda6d6ae,"SUBMARINE-1296. Add create user function when register a new user.

### What is this PR for?
<!-- A few sentences describing the overall goals of the pull request's commits.
First time? Check out the contributing guide - https://submarine.apache.org/contribution/contributions.html
-->
Originally we were unable to create a user correctly; We add create user function when registering a new user in this PR.
### What type of PR is it?
[Bug Fix | Improvement | Feature | Documentation | Hot Fix | Refactoring]
Bug Fix
### Future work

- When we log in to the account, it always shows adim in the userInfo
- Remove the mock data in [here](https://github.com/apache/submarine/blob/2faebb8efd69833853f62d89b4f1fea1b1718148/submarine-workbench/workbench-web/src/app/pages/user/register/register.component.ts#L32)

### What is the Jira issue?
[SUBMARINE-1293](https://issues.apache.org/jira/browse/SUBMARINE-1293)
### How should this be tested?
<!--
* First time? Setup Travis CI as described on https://submarine.apache.org/contribution/contributions.html#continuous-integration
* Strongly recommended: add automated unit tests for any new or changed behavior
* Outline any manual steps to test the PR here.
-->
### Screenshots (if appropriate)

- When you haven't created such a user
<img width=""888"" alt=""image"" src=""https://user-images.githubusercontent.com/52046377/200595282-6262060c-aca6-4dd1-9ca5-cdd6a8bb5ed7.png"">

- When you save duplicated username
<img width=""1440"" alt=""image"" src=""https://user-images.githubusercontent.com/52046377/200595715-2e900dd4-659d-4977-a732-a8436cb93e80.png"">

- Done creation and log in again

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: HH <hhcs9527@gmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #1012 from hhcs9527/SUBMARINE-1296 and squashes the following commits:

e118d814 [HH] SUBMARINE-1296. Add create user function when register a new user.",https://github.com/apache/submarine/commit/dd6a292414d3e1547d5603c8daceddabdda6d6ae
1948,1948.0,2122.0,apache/submarine,1704b4ebe304de7cd6a6e05b1111ecc320094a4e,"SUBMARINE-1343. Unified Version Definition [JAVA]

### What is this PR for?
Unified version definition for java

### What type of PR is it?
Refactoring

### Todos
* [x] - Remove some versions that can be skipped in maven
* [x] - Defining a uniform version number in java

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1343

### How should this be tested?
* Add a version check test case
* Maven build check

### Screenshots (if appropriate)
NA

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: cdmikechen <cdmikechen@apache.org>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #1010 from cdmikechen/SUBMARINE-1343 and squashes the following commits:

08f7e7bd [cdmikechen] fix length check
54dceed8 [cdmikechen] fix checkstyle
2459766b [cdmikechen] Unified Version Definition [JAVA]",https://github.com/apache/submarine/commit/1704b4ebe304de7cd6a6e05b1111ecc320094a4e
1949,1949.0,2123.0,apache/submarine,83f8aabf59ba62df4d7827f2e6307038bb0a70e0,"SUBMARINE-1324. Fix the experiment pods label selector after using the new training operator

### What is this PR for?
After updated to new training operator, the metrics/logs/params of the experiment cannot be shown, which is found that the pod label had changed to `job-name`.

### What type of PR is it?
Bug Fix

### Todos
* [x] - Change label to job-name

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1324

### How should this be tested?
Consider adding after refactoring.

### Screenshots (if appropriate)
![image](https://user-images.githubusercontent.com/12069428/189625495-7e640088-b6b8-4e04-85b3-3659f923256b.png)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: cdmikechen <cdmikechen@hotmail.com>
Author: cdmikechen <cdmikechen@apache.org>

Signed-off-by: cdmikechen <cdmikechen@apache.org>

Closes #995 from cdmikechen/SUBMARINE-1324 and squashes the following commits:

971f4a66 [cdmikechen] Add test
6bda7200 [cdmikechen] Change label to job-name",https://github.com/apache/submarine/commit/83f8aabf59ba62df4d7827f2e6307038bb0a70e0
1950,1950.0,2124.0,apache/submarine,ca25b9de97e730fd0ff4441eee198cda3e779e4d,"SUBMARINE-1329. Improve test coverage of submarine.artifacts module

### What is this PR for?

We lack tests in the `submodule.artifacts` module. We should add tests and aim for at least 90% test coverage for this module.

**Additionally**, this PR also fix SUBMARINE-922 issue since #994 accidentally modify the code.

### What type of PR is it?

Improvement

### Todos

### What is the Jira issue?

<https://issues.apache.org/jira/browse/SUBMARINE-1329>

### How should this be tested?

```bash
cd submarine-sdk/pysubmarine
python3 -m venv .venv
source .venv/bin/activate
pip install -U pip setuptools wheel
pip install -e .[tf2,pytorch]
pip install -r github-actions/test-requirements.txt
```

```bash
$ pytest -m 'not e2e'

...
---------- coverage: platform linux, python 3.7.14-final-0 -----------
Name                                                        Stmts   Miss  Cover   Missing
-----------------------------------------------------------------------------------------
submarine/__init__.py                                           9      0   100%
submarine/artifacts/__init__.py                                 2      0   100%
submarine/artifacts/repository.py                              30      0   100%
submarine/cli/__init__.py                                       2      0   100%
...
-----------------------------------------------------------------------------------------
TOTAL                                                        4725   2621    45%

============================================================================ 42 passed, 7 skipped, 31 deselected, 10 warnings in 23.88s ============================================================================
```

### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? Yes/No
* Are there breaking changes for older versions? Yes/No
* Does this need new documentation? Yes/No

Author: huang06 <tom4996131207@gmail.com>

Signed-off-by: cdmikechen <cdmikechen@apache.org>

Closes #998 from huang06/test/pytest and squashes the following commits:

42df4353 [huang06] ci: undo codecov
8e665772 [huang06] docs: apply Apache License
1b5eb129 [huang06] feat: use pytest.ini as configuration file
7bbb66b1 [huang06] ci: update
2d1e335b [huang06] ci: restore
eb4eb128 [huang06] test: update
78667fcd [huang06] feat: ignore .mypy_cache/
6ce63719 [huang06] test: update
1fa6b50f [huang06] refactor: remove unused options
bc8b7e12 [huang06] ci: configure pytest options
01cd21f9 [huang06] style: black
9433a96c [huang06] ci: restore
481d5525 [huang06] feat: avoid GPL dependency
837a8557 [huang06] test: add tests for repository
e9f2c34e [huang06] test: add moto package
e3895fe0 [huang06] ci: test
ccc81713 [huang06] ci: test
6b3a4d67 [huang06] ci: generate pytest report with line numbers",https://github.com/apache/submarine/commit/ca25b9de97e730fd0ff4441eee198cda3e779e4d
1951,1951.0,2125.0,apache/submarine,7fa13a65530183c1ee424e14f7b92c3cbc1cd297,"SUBMARINE-1320. Drop supports for Python2.7 and Python3.6 (#994)

* refactor: cleanup

* feat: update linter configrations

* style: reformat by black

* docs: remove Python 3.6 support

* ci: remove Python3.6 from matrix

* feat: apply flake8 to dev-support/cicd

* fix: replace --experimental-string-processing with --preview

* style: fix python code style

* fix: ci requires types-certifi

* feat: update TF2 patch version & freeze keras to 2.6.0

* feat: update TF1 patch version & update matrix.tf-version

* feat: FsPreHandler is used by HDFSPreHandler

* ci: add unit-tf1 and unit-tf2

* ci: running `pip check` to verify compatible dependencies

* ci: fix package name

* feat: release numpy limitation

* test: add numpy

* test: update test requirements

* build: update dependency versions

* style: update

* feat: update pandas version

* feat: update pandas version

* ci: test tf1 with python3.7

* ci: add pip list

* ci: update

* feat: pin click

* fix: pin tensorflow-estimator

* fix: pin protobuf for tf1

* style: update

* ci: exclude partial combinations in matrix

* ci: update

* test: add e2e marker

* style: black

* feat: suppress `Cannot find implementation or library stub` error

* feat: pin importlib-metadata

* feat: suppress imported but unused error

* revert: aa21d5d4

* test: fix wrong params

* style: concate tuples

* feat: checkout rebased files

* ci: use compatible release operator to select the latest patch version

* feat: pin linter versions

* feat: update tf15 dependency version constraint

* docs: use Python3.6 for vsersion-0.0.7

* feat: update

* feat: prints out diffs

* ci: update

* ci: update

* ci: delete `pip check`

* feat: update flake8 config

* feat: update black arguments

* feat: update tf15 dependency constraint

* ci: simplify steps

* ci: update

* docs: update supported python versions

* style: format strings with f-string

* style: remove unnecessary f-string

* style: format strings with f-string

* feat: restore",https://github.com/apache/submarine/commit/7fa13a65530183c1ee424e14f7b92c3cbc1cd297
1952,1952.0,2126.0,apache/submarine,b2c7e81f0123b736fc16cc498886c6062e68a4fb,"SUBMARINE-1315. Fix model can not serve error (#992)

### What is this PR for?
The model serve now registers the wrong namespace for resources, and taking the model name directly as a resource name can lead to problems with illegal characters.
![image](https://user-images.githubusercontent.com/12069428/187067306-98067ede-1c8a-4c0a-b356-96607519d40e.png)


### What type of PR is it?
Bug Fix

### Todos
* [x] - Model serve codes refactoring.
* [x] - Replace default to submarine-server namespace.
* [x] - Add a primary key id for `registered_model`(model_id) and `model_version` (model_version_id)
* [x] - Replace model service name to `submarine-model-${id}-@{modelId}` in k8s resource metadata name. 
* [x] - Replace SeldonGraph container name to `version-${modelVersion}`.
* [x] - Replace ingress routing to `/seldon/${namespace}/${modelVersionId}/${modelVersion}/` and add owner reference for cascaded deletion of operator.
* [x] - Add save_model method and serve predictions example in example quick-start .

### What is the Jira issue?
https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-1315

### How should this be tested?
Add a simple test case to test k8s resource.

### Screenshots (if appropriate)
There is still a legacy of problems. Now that seldon automatically creates the serve services (http and rpc) using istio, the `VirtualService` we create for our own serve will be duplicated, and the url provided by the seldon returned by calling swagger with our own `VirtualService` (like http://localhost:32080/seldon/submarine-user-test/1/1/api/v1.0/doc/) is still seldon http `VirtualService` url.

The first was created by us and the following two by seldon. Both are currently accessible.
![image](https://user-images.githubusercontent.com/12069428/188297152-09022bfa-ab4b-412e-b694-3a928d8b1a50.png)

Swagger UI
![image](https://user-images.githubusercontent.com/12069428/188297072-a9904689-0e05-43f6-8624-a994a44799de.png)


### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? Yes
* Does this need new documentation? No",https://github.com/apache/submarine/commit/b2c7e81f0123b736fc16cc498886c6062e68a4fb
1953,1953.0,2127.0,apache/submarine,206efd9f6c2995f52059423ceb1e96e18786e76e,"SUBMARINE-1287. Experiment codes refactoring

### What is this PR for?
Based on the modified refactored notebook codes, the experiment codes are also need to be refactored.

### What type of PR is it?
Refactoring

### Todos
* [x] - Experiment codes refactoring in K8sSubmitter
* [x] - Add experiment test cases
* [x] - Fix some test cases error (Add h2 database dependency for test)
* [x] - Add `submarine-submitter-k8s` package test cases to workflow

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1287

### How should this be tested?
Add experiment test cases (tensorflow, pytorch, xgboots)

### Screenshots (if appropriate)
No

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? Yes
* Does this need new documentation? No

Author: cdmikechen <cdmikechen@hotmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #974 from cdmikechen/SUBMARINE-1287 and squashes the following commits:

01e2828f [cdmikechen] add jacoco cache
4b50fe23 [cdmikechen] Fix codecov error
09f19423 [cdmikechen] add submarine-submitter-k8s codecov
4f761d75 [cdmikechen] Add submarine-submitter-k8s to build
4d8fee16 [cdmikechen] Add test workflow
580e2cce [cdmikechen] Fix SubmitterTransactionTest error
25b3a088 [cdmikechen] Add PyTorch/XGBoost test
d0d9b55a [cdmikechen] Change agent name
a62e6117 [cdmikechen] Add SubmitterPyTorchApiTest
f857521f [cdmikechen] Fix NotebookSpecParserTest error
5401e2a5 [cdmikechen] Refactor Experiment",https://github.com/apache/submarine/commit/206efd9f6c2995f52059423ceb1e96e18786e76e
1954,1954.0,2128.0,apache/submarine,37fb84235461494d9813c9a72a8719b878083fa9,"SUBMARINE-1284. Remove old cluster server document and codes

### What is this PR for?
Current document about cluster server design has been deprecated. We have deployed submarine server in k8s cloud. So that we should remove this document, relevant codes and pom references.

### What type of PR is it?
Refactoring

### Todos
* [x] - Remove `Cluster Server Design - High-Availability` document.
* [x] - Remove `submarine-commons-cluster` package and related dependencies.

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1284

### How should this be tested?
Deleted code should not require unit tests.

### Screenshots (if appropriate)
No

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No (but we have deleted `submarine-commons-cluster`, and we should no longer need to import this package)
* Does this need new documentation? No

Author: cdmikechen <cdmikechen@hotmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #968 from cdmikechen/SUBMARINE-1284 and squashes the following commits:

ddbe855d [cdmikechen] remove submarine-clusterServer dependence
bd4084cf [cdmikechen] Fix ci error
861bb262 [cdmikechen] SUBMARINE-1284. Remove old cluster server document and codes",https://github.com/apache/submarine/commit/37fb84235461494d9813c9a72a8719b878083fa9
1955,1955.0,2129.0,apache/submarine,b08a6b6dd2b3d585f6768d3d1b3c680435c371f6,"SUBMARINE-1174. K8sSubmitter refactoring involving Notebook create and delete method

### What is this PR for?
The current K8sSubmitter contains a lot of CRD processing logic in addition to the implementation of the interface.
The purpose of this PR is to split the CRD processing logic from the class as far as possible and merge it into the resource object for processing.

The current PR refactored part of the code so that we can see the changes of the code after refactoring.

### What type of PR is it?
Refactoring

### Todos
* [x] - Refactoring `K8sSubmitter`  involving Notebook create and delete method (Configmap/PVC/IstioVirtualService/NoteBookCR)
* [x] - Add k8s mock client/server for test

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1174

### How should this be tested?
The refactored codes can use the original test case.

### Screenshots (if appropriate)
No

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: cdmikechen <cdmikechen@hotmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #870 from cdmikechen/SUBMARINE-1174 and squashes the following commits:

b30fdea6 [cdmikechen] rebase SUBMARINE-1276 and handling null pointer exceptions
ecf1d2b6 [cdmikechen] SUBMARINE-1174. K8sSubmitter refactoring involving Notebook create and delete method",https://github.com/apache/submarine/commit/b08a6b6dd2b3d585f6768d3d1b3c680435c371f6
1956,1956.0,2130.0,apache/submarine,595ff75d781bb27aea3ee03c8f597c9db4e2cc78,"SUBMARINE-1277. Refactor rest logic

### What is this PR for?
Move logic of rest to manager

### What type of PR is it?
Refactoring

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1277

### How should this be tested?

### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: jeff-901 <b07901052@ntu.edu.tw>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #962 from jeff-901/SUBMARINE-1277 and squashes the following commits:

3593e146 [jeff-901] fix logic
03c09516 [jeff-901] refactor rest logic",https://github.com/apache/submarine/commit/595ff75d781bb27aea3ee03c8f597c9db4e2cc78
1957,1957.0,2131.0,apache/submarine,1f6eb4d6b581eb64fa827b0ff02902a10fab3884,"SUBMARINE-1069. Websocket in Submarine Server

### What is this PR for?
<!-- A few sentences describing the overall goals of the pull request's commits.
First time? Check out the contributing guide - https://submarine.apache.org/contribution/contributions.html
-->
Considering future developing, extend websocket in Sebmarine Server.
In this PR, I used the source code of old notebook websocket server(which I didn't remove in this PR, but should remove it in the future refactor process) to build three websocket server and related test.

I name the url of each server is /ws/notebook/, /ws/experiment/, /ws/environment/
And I rename the old websocket url as /wss

### What type of PR is it?
Feature
### Todos
* [x] - automatic test

### What is the Jira issue?
<!-- * Open an issue on Jira https://issues.apache.org/jira/browse/SUBMARINE/
* Put link here, and add [SUBMARINE-*Jira number*] in PR title, eg. `SUBMARINE-23. PR title`
-->
https://issues.apache.org/jira/browse/SUBMARINE-1069
### How should this be tested?
<!--
* First time? Setup Travis CI as described on https://submarine.apache.org/contribution/contributions.html#continuous-integration
* Strongly recommended: add automated unit tests for any new or changed behavior
* Outline any manual steps to test the PR here.
-->
By test in submarine-server/server-core/src/test/java/org/apache/submarine/server/websocket
### Screenshots (if appropriate)
![Screenshot from 2022-04-19 20-06-41](https://user-images.githubusercontent.com/57944334/165305850-64638f40-8088-40c1-9b0c-8ac85df6e525.png)
![Screenshot from 2022-04-19 20-07-57](https://user-images.githubusercontent.com/57944334/165305859-f4533154-6f1c-4f5b-ab0d-0d5bd36f17b9.png)
![Screenshot from 2022-04-19 20-08-19](https://user-images.githubusercontent.com/57944334/165305867-64f6b22b-a3e7-4d0d-9786-772006e771a8.png)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? Maybe

Author: featherchen <garychen0975321741@gmail.com>

Signed-off-by: kuanhsun <kuanhsun@apache.org>

Closes #852 from featherchen/SUBMARINE-1069 and squashes the following commits:

0afab660 [featherchen] fix comment
c55f250e [featherchen] fix bugs
2c544392 [featherchen] fix bugs
589626f3 [featherchen] add test
bfddc094 [featherchen] add test
ef0dfb87 [featherchen] add test
f5e7d352 [featherchen] modify test
d08c8892 [featherchen] modify test
cdac6a21 [featherchen] delete redudent import
f72b19e4 [featherchen] fix bug
cc611b05 [featherchen] set up three websocket
1ecc577d [featherchen] extend websocket component
9011c0d8 [featherchen] test
9c218d83 [featherchen] trivial
84412201 [featherchen] change
57a0a333 [featherchen] LOG problem",https://github.com/apache/submarine/commit/1f6eb4d6b581eb64fa827b0ff02902a10fab3884
1958,1958.0,2132.0,apache/submarine,13bc411b9e8ca3fd6429763848e9905b097e18ff,"SUBMARINE-1210. Refactor database in server

### What is this PR for?
Move database related code to new folder
Delete hibernetes

### What type of PR is it?
Refactoring

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1210

### How should this be tested?

### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: jeff-901 <b07901052@ntu.edu.tw>

Signed-off-by: kuanhsun <kuanhsun@apache.org>

Closes #952 from jeff-901/SUBMARINE-1210 and squashes the following commits:

31926d47 [jeff-901] fix mapper
7cae5e60 [jeff-901] pom checkstyle
ecc12ebb [jeff-901] fix workbench test
92983109 [jeff-901] move workbench test
86eb3b1b [jeff-901] update version
28d929bd [jeff-901] fix dict
ec916268 [jeff-901] move database
7d9f4d81 [jeff-901] refactor import
654fe86b [jeff-901] fix rebase",https://github.com/apache/submarine/commit/13bc411b9e8ca3fd6429763848e9905b097e18ff
1959,1959.0,2133.0,apache/submarine,2267e0bfda9c139bdebfa10240525f4c1ec46898,"SUBMARINE-1208. Move folder response and gson into utils under server-core

### What is this PR for?
Move folder server-core/response and server-core/gson into server-core/utils to clear the structure of the folder.

### What type of PR is it?
Refactoring

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1208
### How should this be tested?
No
### Screenshots (if appropriate)
No
### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: Ray02250418 <b08901174@ntu.edu.tw>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #912 from Ray02250418/SUBMARINE-1208 and squashes the following commits:

8bf68c74 [Ray02250418] SUBMARINE-1208. Move files into folders
da5454f1 [Ray02250418] SUBMARINE-1208. Move files and refactor",https://github.com/apache/submarine/commit/2267e0bfda9c139bdebfa10240525f4c1ec46898
1960,1960.0,2134.0,apache/submarine,600c4c2760a44ce48702707647587fd5704c126d,"SUBMARINE-1165. Change Submarine-database from deployment to statefulset

### What is this PR for?
Change the database from deployment to statefulset, so we can avoid some locking table/database problems when upgrading or restarting database server.

### What type of PR is it?
Refactoring

### Todos
* [x] - Remove database.replicas in CRD. The current database configuration does not support HA or cluster mode. Delete this configuration to avoid unnecessary database problems. There are already relevant JIRA issues: https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-1225
* [x] - Replace database resource definition from deployment to statefulset in submarine-operator
* [x] - we may get nil exception, and we may need to merge PR https://github.com/apache/submarine/pull/911 before passing git test flow.

### What is the Jira issue?
https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-1165

### How should this be tested?
Should be tested by exists cases.

### Screenshots (if appropriate)
No

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? Yes
* Does this need new documentation? No

Author: cdmikechen <cdmikechen@hotmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #913 from cdmikechen/SUBMARINE-1165 and squashes the following commits:

c55ac548 [cdmikechen] Rename statefulset
b51af621 [cdmikechen] change database deployment check to statefulset check
d34cfd66 [cdmikechen] SUBMARINE-1165. Change Submarine-database from deployment to statefulset",https://github.com/apache/submarine/commit/600c4c2760a44ce48702707647587fd5704c126d
1961,1961.0,2135.0,apache/submarine,170c5061a0e07a2fe88bab6be8f02638ec443c25,"SUBMARINE-1207. Move server-core/workbench/entity to server-api/workbench

### What is this PR for?
Move files under submarine-server/server-core/src/main/java/org/apache/submarine/server/workbench/entity to submarine-server/server-api/src/main/java/org/apache/submarine/server/api/workbench.

### What type of PR is it?
Refactoring

### What is the Jira issue?
https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-1207?filter=allopenissues

### Screenshots (if appropriate)
No

### Questions:
* Do the license files need updating? /No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: Ray02250418 <b08901174@ntu.edu.tw>

Signed-off-by: Jeff Liu <jeffliu@apache.org>

Closes #902 from Ray02250418/SUBMARINE-1207 and squashes the following commits:

2484f353 [Ray02250418] SUBMARINE-1207. Remove import from the same package
afbee930 [Ray02250418] SUBMARINE-1207. Correct typo
6a1641c9 [Ray02250418] SUBMARINE-1207. workbench/annotation to rest/workbench/annotation
23504d73 [Ray02250418] SUBMARINE-1207. workbench/rest to rest/workbench
3e587c24 [Ray02250418] SUBMARINE-1207. Move files and change import path",https://github.com/apache/submarine/commit/170c5061a0e07a2fe88bab6be8f02638ec443c25
1962,1962.0,2136.0,apache/submarine,e8d2d8e922c4dd4b6e6f65fde8d92d9086475f39,"SUBMARINE-1209. Collect files into folder under server-submitter

### What is this PR for?
move server-submitter/mljob*.java, server-submitter/notebook*.java, server-submitter/CustomResourceJob*.java into folders

### What type of PR is it?
Refactoring

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1209

### Screenshots (if appropriate)
No

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: JackLiu00521 <jackliu00521@gmail.com>

Signed-off-by: Jeff Liu <jeffliu@apache.org>

Closes #907 from JackLiu00521/SUBMARINE-1209 and squashes the following commits:

07c75e88 [JackLiu00521] SUBMARINE-1209. update NotebookCondition
fec1ca54 [JackLiu00521] SUBMARINE-1209. test action
891c8507 [JackLiu00521] SUBMARINE-1209. Move folder and change dependency",https://github.com/apache/submarine/commit/e8d2d8e922c4dd4b6e6f65fde8d92d9086475f39
1963,1963.0,2137.0,apache/submarine,7b0482a1434a507d45681a35a2ada18ffdf5a1e7,"SUBMARINE-1223. Update Submarine Operator CRD to v1

### What is this PR for?
Update Submarine Operator CRD:
* Unify the CRD (upgrade apiextensions.k8s.io/v1beta1 to apiextensions.k8s.io/v1)
* Add some details to support the new CRD (The adjusted CRD can support multiple CRDs to share group resources)

### What type of PR is it?
Refactoring

### Todos
* [x] - Update Submarine Operator CRD

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1223

### How should this be tested?
Can be tested by exists cicd.

### Screenshots (if appropriate)
No

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: chenx <744417972@qq.com>
Author: cdmikechen <cdmikechen@hotmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #905 from cdmikechen/SUBMARINE-1223 and squashes the following commits:

d84f29fe [chenx] add submarines/status rbac
1b3bd5b1 [chenx] Fix status problem
1a703f17 [cdmikechen] SUBMARINE-1223. Update Submarine Operator CRD",https://github.com/apache/submarine/commit/7b0482a1434a507d45681a35a2ada18ffdf5a1e7
1964,1964.0,2138.0,apache/submarine,e4eeb446b52acf18a9028d8dd16aa50ca9c47156,"SUBMARINE-1212. fine tune crud operation flow of notebook to align experiment flow

### What is this PR for?
After we completed the refactoring of experiment operation flow, we would like to align the same pattern on notebook flow; In that case, both the experiment and notebook flow has the same flow. Besides, we also could collect all the status change logic into agent.

### What type of PR is it?
Improvement

### Todos
N/A

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1212
### How should this be tested?
should passed all existed tests.
### Screenshots (if appropriate)

### Questions:
* Do the license files need updating?No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: FatalLin <fatallin@gmail.com>

Signed-off-by: kuanhsun <kuanhsun@apache.org>

Closes #897 from FatalLin/SUBMARINE-1212 and squashes the following commits:

ce633445 [FatalLin] rollback deleting logic
179dfa36 [FatalLin] modify nameing policy
3a7899f4 [FatalLin] fine tune crud operation flow of notebook",https://github.com/apache/submarine/commit/e4eeb446b52acf18a9028d8dd16aa50ca9c47156
1965,1965.0,2139.0,apache/submarine,0c2b915393fe01424c551007de4622ca4bb76d28,"SUBMARINE-1106. refactor curd operation of TFJob and PyTorchJob

### What is this PR for?
just like the refactoring work of notebook crud operation, we also refactor the crud operation of tfjob and pytorch job via agent.

### What type of PR is it?
Feature

### Todos
N/A

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1106
### How should this be tested?
this PR should pass all the existed test cases.
### Screenshots (if appropriate)
![Screen Shot 2022-03-01 at 10 38 36 PM](https://user-images.githubusercontent.com/5687317/156190100-2b01243b-49ee-43f2-a04f-0043b43e48f3.png)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: FatalLin <fatallin@gmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #893 from FatalLin/SUBMARINE-1106 and squashes the following commits:

d410e7fc [FatalLin] fix
85399ffa [FatalLin] using datetime compare function to avoid timezone issue
0c146dc7 [FatalLin] fix
bbd0a143 [FatalLin] rollback path
c227a08e [FatalLin] add uid to entity
8d72dc7a [FatalLin] fix
b016dcb4 [FatalLin] add apache header
5f4fd2ae [FatalLin] refactor curd operation of TFJob and PyTorchJob
913436a2 [FatalLin] merge
39a4b0c6 [FatalLin] refactor tfjob",https://github.com/apache/submarine/commit/0c2b915393fe01424c551007de4622ca4bb76d28
1966,1966.0,2140.0,apache/submarine,fa58973f5f36067ab7db7a1b6d2e27ea8a71874b,"SUBMARINE-1187.  Refine the interface of internal service and keep more details into db

### What is this PR for?
per discussion with pingsutw, we would like to persist more detail data into database which allow us to provide to users when they check the detail, therefore I refine the logic when handler receiving the events, it will align the same logic in k8ssubmitter to rebuild the corresponding object, and pass to internal service, then the internal service persist it into database.

### What type of PR is it?
Improvement
### Todos
* [ ] - Task

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1187
### How should this be tested?
existed unit tests.
### Screenshots (if appropriate)
same of: https://github.com/apache/submarine/pull/877
### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: FatalLin <fatallin@gmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #878 from FatalLin/SUBMARINE-1187 and squashes the following commits:

01fdea4e [FatalLin] add missing dependency
282cffc2 [FatalLin] code polish
89565e1d [FatalLin] change jdbc type from date to timestamp
fcf0fd26 [FatalLin] use the same time from k8s instead of mysql as initialize value
d1c0eb27 [FatalLin] persist createTime as well
8f8a047b [FatalLin] add timezone to extract correct time
e2d11f2a [FatalLin] fix test case
bf504dbd [FatalLin] align datetime formate
82c4de06 [FatalLin] merge
53893d95 [FatalLin] polish the interface of internal service
f1cc552d [FatalLin] rollback codes to fit testing behavior
ba2fdd5e [FatalLin] justify init status of notebook creation
6d797ed8 [FatalLin] fix
c5fa8a3d [FatalLin] format
87d98614 [FatalLin] remove unsed code section
71647660 [FatalLin] merge
225e06d6 [FatalLin] refactory of notebook crud opertion
f09dd69e [FatalLin] commit for pair programming",https://github.com/apache/submarine/commit/fa58973f5f36067ab7db7a1b6d2e27ea8a71874b
1967,1967.0,2141.0,apache/submarine,7411c5d1c8a6951d1f671774e1f68e2636a64332,"Submarine 1108. Refactor CRUD operation of Notebook

### What is this PR for?
Just like we mentioned in ticket, we tried to refactor the status sync-up mechanism in a more k8s native way. So in this pr, I leveraged the sidecar pattern to monitor the status of notebook object,  this agent's responsibility is monitoring the status of notebook from started to terminated, and each change will be pass to submaine-server transparently via internal api.

### What type of PR is it?
Feature

### Todos
* [ ] - Task
![Screen Shot 2022-01-31 at 12 36 40 AM](https://user-images.githubusercontent.com/5687317/151708978-0d04b299-66f8-4805-acdb-697c9c4e96c5.png)
![Screen Shot 2022-01-31 at 12 36 51 AM](https://user-images.githubusercontent.com/5687317/151708990-d567b64e-6b5d-4870-9071-3f701fd41b36.png)
![Screen Shot 2022-01-31 at 12 48 27 AM](https://user-images.githubusercontent.com/5687317/151708992-4460fce7-f929-4428-9af9-573bead1213b.png)
![Screen Shot 2022-01-31 at 12 48 50 AM](https://user-images.githubusercontent.com/5687317/151708995-d2b64a11-3dfd-4a0d-a303-ba225dc3176c.png)

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1108
### How should this be tested?
this refactoring should pass all the existed notebook operation tests.
### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: FatalLin <fatallin@gmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #877 from FatalLin/SUBMARINE-1108 and squashes the following commits:

f1cc552d [FatalLin] rollback codes to fit testing behavior
ba2fdd5e [FatalLin] justify init status of notebook creation
6d797ed8 [FatalLin] fix
c5fa8a3d [FatalLin] format
87d98614 [FatalLin] remove unsed code section
71647660 [FatalLin] merge
225e06d6 [FatalLin] refactory of notebook crud opertion
f09dd69e [FatalLin] commit for pair programming",https://github.com/apache/submarine/commit/7411c5d1c8a6951d1f671774e1f68e2636a64332
1968,1968.0,2142.0,apache/submarine,7f95da6b6bcd763ac9b088b41502465f7b986b3e,"SUBMARINE-1178. Upgrade tag components for model management UI

### What is this PR for?
<!-- A few sentences describing the overall goals of the pull request's commits.
First time? Check out the contributing guide - https://submarine.apache.org/contribution/contributions.html
-->
Upgrades model management tags UI and allows users to create or delete tags through the frontend.

### What type of PR is it?
[Bug Fix | Improvement | Feature | Documentation | Hot Fix | Refactoring]
Improvement

### Todos
* [x] - separate UI looking for registered model tags and model version tags.
* [x] - enable tags deletion.
* [x] - enable tags creation.

### What is the Jira issue?
<!-- * Open an issue on Jira https://issues.apache.org/jira/browse/SUBMARINE/
* Put link here, and add [SUBMARINE-*Jira number*] in PR title, eg. `SUBMARINE-23. PR title`
-->
https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-1178
### How should this be tested?
<!--
* First time? Setup Travis CI as described on https://submarine.apache.org/contribution/contributions.html#continuous-integration
* Strongly recommended: add automated unit tests for any new or changed behavior
* Outline any manual steps to test the PR here.
-->
Checkout model management page.
### Screenshots (if appropriate)

https://user-images.githubusercontent.com/59821107/148557952-2e8e838f-12d9-4705-a9aa-997269be4697.mp4

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: andybi7676 <andybi7676@gmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #863 from andybi7676/SUBMARINE-1178 and squashes the following commits:

3c069eda [andybi7676] SUBMARINE-1178. upgrade model tags UI and allow create&delete through frontend",https://github.com/apache/submarine/commit/7f95da6b6bcd763ac9b088b41502465f7b986b3e
1969,1969.0,2143.0,apache/submarine,8b3e46312dbac627bde98a9d859a36bc516285e2,"SUBMARINE-1164. Update example python code

### What is this PR for?
Change ModelsClient in example python code to Submarine Client because mlflow package will be removed.
Also, some bugs fixed:
1. The bug of chart in experiment info UI.
2. The bug of default timestamp value for log_metric.
3. Incorrect image name of post.sh under quickstart.

### What type of PR is it?
Refactoring

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1164

### How should this be tested?

### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: jeff-901 <b07901052@ntu.edu.tw>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #856 from jeff-901/SUBMARINE-1164 and squashes the following commits:

dc63b578 [jeff-901] checkstyle
de559f40 [jeff-901] update example",https://github.com/apache/submarine/commit/8b3e46312dbac627bde98a9d859a36bc516285e2
1970,1970.0,2144.0,apache/submarine,247d3139cefd5aa13c108f78a638224365bcc1d8,"SUBMARINE-1102. Fix download page links

### What is this PR for?
<!-- A few sentences describing the overall goals of the pull request's commits.
First time? Check out the contributing guide - https://submarine.apache.org/contribution/contributions.html
-->

Fix download page links to release notes

### What type of PR is it?
[Bug Fix | Improvement | Feature | Documentation | Hot Fix | Refactoring]

Bug Fix

### Todos

### What is the Jira issue?
<!-- * Open an issue on Jira https://issues.apache.org/jira/browse/SUBMARINE/
* Put link here, and add [SUBMARINE-*Jira number*] in PR title, eg. `SUBMARINE-23. PR title`
-->

https://issues.apache.org/jira/browse/SUBMARINE-1102

### How should this be tested?
<!--
* First time? Setup Travis CI as described on https://submarine.apache.org/contribution/contributions.html#continuous-integration
* Strongly recommended: add automated unit tests for any new or changed behavior
* Outline any manual steps to test the PR here.
-->

Run the development server locally. See [`website/README`](https://github.com/apache/submarine/blob/master/website/README.md)

### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: joshvictor1024 <joshvictoronfire@gmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #813 from joshvictor1024/SUBMARINE-1102 and squashes the following commits:

06d1b6db [joshvictor1024] SUBMARINE-1102. Fix download page links",https://github.com/apache/submarine/commit/247d3139cefd5aa13c108f78a638224365bcc1d8
1971,1971.0,2145.0,apache/submarine,6291724ae1fd4dc8b48eae5332bf123e86375110,"SUBMARINE-1054. Refactor submarine-operator

### What is this PR for?
<!-- A few sentences describing the overall goals of the pull request's commits.
First time? Check out the contributing guide - https://submarine.apache.org/contribution/contributions.html
-->
The submarine operator is responsible for creating the submarine. However, it will create the submarine with settings written in code currently.

We want to make it read settings from yaml files, so that others can easily change the settings.

### What type of PR is it?
Improvement

### Todos
* [x] - Add artifacts
* [x] - Add YAML file parser

### What is the Jira issue?
<!-- * Open an issue on Jira https://issues.apache.org/jira/browse/SUBMARINE/
* Put link here, and add [SUBMARINE-*Jira number*] in PR title, eg. `SUBMARINE-23. PR title`
-->

https://issues.apache.org/jira/browse/SUBMARINE-1054

### How should this be tested?
<!--
* First time? Setup Travis CI as described on https://submarine.apache.org/contribution/contributions.html#continuous-integration
* Strongly recommended: add automated unit tests for any new or changed behavior
* Outline any manual steps to test the PR here.
-->

Run operator e2e test: `go test ./test/e2e`

### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: Kenchu123 <k88913n@gmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #788 from Kenchu123/SUBMARINE-1054 and squashes the following commits:

3e64c24c [Kenchu123] SUBMARINE-1054. Add mlflow initContainer to check database
8e6bebf5 [Kenchu123] SUBMARINE-1054. Add database readinessProbe and change the comment of PathToOSFile
37eca8a7 [Kenchu123] SUBMARINE-1054 Add artifacts and read files from them",https://github.com/apache/submarine/commit/6291724ae1fd4dc8b48eae5332bf123e86375110
1972,1972.0,2146.0,apache/submarine,50ae48339df4a11d115ac4b76b363da9796a3260,"SUBMARINE-1078. Retire Spark security module from submarine project

### What is this PR for?
<!-- A few sentences describing the overall goals of the pull request's commits.
First time? Check out the contributing guide - https://submarine.apache.org/contribution/contributions.html
-->
Retire Spark security module from the submarine project

### What type of PR is it?

Refactoring

### Todos

None

### What is the Jira issue?
<!-- * Open an issue on Jira https://issues.apache.org/jira/browse/SUBMARINE/
* Put link here, and add [SUBMARINE-*Jira number*] in PR title, eg. `SUBMARINE-23. PR title`
-->
SUBMARINE-1078

### How should this be tested?
<!--
* First time? Setup Travis CI as described on https://submarine.apache.org/contribution/contributions.html#continuous-integration
* Strongly recommended: add automated unit tests for any new or changed behavior
* Outline any manual steps to test the PR here.
-->
Passing GA

### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? Yes
* Does this need new documentation? No

Author: Kent Yao <yao@apache.org>

Signed-off-by: Liu Xun <liuxun@apache.org>

Closes #796 from yaooqinn/SUBMARINE-1078 and squashes the following commits:

64ec345 [Kent Yao] submarine
1657856 [Kent Yao] SUBMARINE-1078. Retire Spark security module from submarine project",https://github.com/apache/submarine/commit/50ae48339df4a11d115ac4b76b363da9796a3260
1973,1973.0,2147.0,apache/submarine,63e5f5c199841bd7cfb3b103252ae93cd3ebbde1,"SUBMARINE-1071. Fix pysubmarine test of tensorflow2

### What is this PR for?
<!-- A few sentences describing the overall goals of the pull request's commits.
First time? Check out the contributing guide - https://submarine.apache.org/contribution/contributions.html
-->
Due to package version problem, we need to downgrade tensorflow-estimator to 2.6.0 and upgrade numpy to 1.19.2.
Also I have refactored the workflow of python-sdk test to make it more clear.

### What type of PR is it?
Bug Fix

### Todos
* [x] - Fix test

### What is the Jira issue?
<!-- * Open an issue on Jira https://issues.apache.org/jira/browse/SUBMARINE/
* Put link here, and add [SUBMARINE-*Jira number*] in PR title, eg. `SUBMARINE-23. PR title`
-->
https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-1071?filter=allopenissues
### How should this be tested?
<!--
* First time? Setup Travis CI as described on https://submarine.apache.org/contribution/contributions.html#continuous-integration
* Strongly recommended: add automated unit tests for any new or changed behavior
* Outline any manual steps to test the PR here.
-->
By Github action
### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: featherchen <garychen0975321741@gmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #792 from featherchen/SUBMARINE-1071 and squashes the following commits:

68fb4606 [featherchen] change job name
7d231ae8 [featherchen] refactor
3df75c20 [featherchen] refactor
2d4dc795 [featherchen] refactor
25c77769 [featherchen] refactor
e231e510 [featherchen] add -e
e1348d56 [featherchen] echo
01afc4ce [featherchen] refactor python workflow of CI/CD
c556f434 [featherchen] refactor python workflow of CI/CD
0108c249 [featherchen] refactor python workflow of CI/CD
bdc7545c [featherchen] refactor python workflow of CI/CD
e342e00b [featherchen] refactor python workflow of CI/CD
bb316cda [featherchen] refactor python workflow of CI/CD
a9f307b7 [featherchen] refactor python workflow of CI/CD
042ae7c4 [featherchen] downgrade tensorflow-estimator to 2.6.0
4185c5e5 [featherchen] downgrade tensorflow-estimator to 2.6.0
1ad8e8be [featherchen] downgrade tensorflow-estimator to 2.6.0",https://github.com/apache/submarine/commit/63e5f5c199841bd7cfb3b103252ae93cd3ebbde1
1974,1974.0,2148.0,apache/submarine,d20fa007bea5968479b62d7fe362c5fbab539d3d,"SUBMARINE-1061. Rewrite some submarine server core syntax

### What is this PR for?
<!-- A few sentences describing the overall goals of the pull request's commits.
First time? Check out the contributing guide - https://submarine.apache.org/contribution/contributions.html
-->

There are some old features used in the server core now, which can be replaced to a new and safer one.

### What type of PR is it?
[ Improvement | Refactoring]

### Todos
* [x] - Examine server core code to rewrite code to use new language feature
* [x] - Rewrite some code to make the code cleaner
* [x] - Modify some code documentation.

### What is the Jira issue?
<!-- * Open an issue on Jira https://issues.apache.org/jira/browse/SUBMARINE/
* Put link here, and add [SUBMARINE-*Jira number*] in PR title, eg. `SUBMARINE-23. PR title`
-->

https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-1061?filter=allissues

### How should this be tested?
<!--
* First time? Setup Travis CI as described on https://submarine.apache.org/contribution/contributions.html#continuous-integration
* Strongly recommended: add automated unit tests for any new or changed behavior
* Outline any manual steps to test the PR here.
-->
### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: woodcutter-eric <yingchiao.chen@gmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #786 from woodcutter-eric/SUBMARINE-1061 and squashes the following commits:

89045123 [woodcutter-eric] SUBMARINE-1061. Rewrite some syntax.",https://github.com/apache/submarine/commit/d20fa007bea5968479b62d7fe362c5fbab539d3d
1975,1975.0,2149.0,apache/submarine,e588327342b860c06de40751357f41bbaf8e4e84,"SUBMARINE-1055. Use builder pattern to simplify construction of controller

### What is this PR for?
<!-- A few sentences describing the overall goals of the pull request's commits.
First time? Check out the contributing guide - https://submarine.apache.org/contribution/contributions.html
-->

Now, the construction of controller is bulky. It needs a lot of arguments when making a new instance. We may use builder design pattern to solve this problem to make code more cleaner.

### What type of PR is it?
[Improvement | Refactoring]

### Todos
* [x] - Use builder pattern to reduce the number of parameters of NewController
* [x] - Replace NewController with a higher level wrapper function
* [x] - Partition initialization logic in the creation of a controller
* [x] - Decouple event register and setup
* [x] - Add interfaces to restrict access to other internal functions

### What is the Jira issue?
<!-- * Open an issue on Jira https://issues.apache.org/jira/browse/SUBMARINE/
* Put link here, and add [SUBMARINE-*Jira number*] in PR title, eg. `SUBMARINE-23. PR title`
-->

https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-1055

### How should this be tested?
<!--
* First time? Setup Travis CI as described on https://submarine.apache.org/contribution/contributions.html#continuous-integration
* Strongly recommended: add automated unit tests for any new or changed behavior
* Outline any manual steps to test the PR here.
-->
### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: woodcutter-eric <yingchiao.chen@gmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #780 from woodcutter-eric/SUBMARINE-1055 and squashes the following commits:

9721794f [woodcutter-eric] SUBMARINE-1055. Add several builder event handler functions to internal
97caf778 [woodcutter-eric] SUBMARINE-1055. Add several builder functions to internal
3615ec98 [woodcutter-eric] SUBMARINE-1055. Fix controller builder design and typos
0093b37d [woodcutter-eric] SUBMARINE-1055. Add interfaces for controller and builder
15a75085 [woodcutter-eric] SUBMARINE-1055. Add license header for new files
53857b39 [woodcutter-eric] SUBMARINE-1055. Replace the original controller creatiion process
6467430b [woodcutter-eric] SUBMARINE-1055. Remove NewController() function
a0e4db40 [woodcutter-eric] SUBMARINE-1055. Refactor controller event handlers
453c5ba6 [woodcutter-eric] SUBMARINE-1055. Add controller builder",https://github.com/apache/submarine/commit/e588327342b860c06de40751357f41bbaf8e4e84
1976,1976.0,2150.0,apache/submarine,535770eaa1935d04d5bea13d326406e7c9286d77,"SUBMARINE-1005. Register model version when saving model.

### What is this PR for?
Migrate save model function to SubmarineClient.
Implement logic of register model in save model function.

### What type of PR is it?
Feature

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1005

### How should this be tested?
github action.
### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: jeff-901 <b07901052@ntu.edu.tw>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #772 from jeff-901/SUBMARINE-1005 and squashes the following commits:

3371b5fe [jeff-901] fix duplicate
7a6cbe91 [jeff-901] fix typo
091ae50f [jeff-901] edit document and fix test
d16c93a1 [jeff-901] fix bugs
0f4a9069 [jeff-901] fix model client
c629f25b [jeff-901] add test and remove duplicate code
b70ceedb [jeff-901] add mypy syntax
03f467e7 [jeff-901] checkstyle
e4e13834 [jeff-901] refactor alchemy_store
36631d2c [jeff-901] add save model in submarine client",https://github.com/apache/submarine/commit/535770eaa1935d04d5bea13d326406e7c9286d77
1977,1977.0,2151.0,apache/submarine,5040068d7214a46c52ba87e10e9fa64411293cf7,"SUBMARINE-1043 Refactor class name in server-core workbench database directory

### What is this PR for?
In https://issues.apache.org/jira/browse/SUBMARINE-1030 , refactored the style of directories in server-core. It needs to refactor class name in workbench database directory for unified code style.

### What type of PR is it?
[Refactoring]

### Todos
* [ ] - Task

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1043

### How should this be tested?

### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: kobe860219 <kobe860219@gmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #765 from kobe860219/SUBMARINE-1043 and squashes the following commits:

bed28c63 [kobe860219] Fix checkstyle
7b968b6e [kobe860219] [SUBMARINE-1043]. Refactor class name in server-core workbench database directory",https://github.com/apache/submarine/commit/5040068d7214a46c52ba87e10e9fa64411293cf7
1978,1978.0,2152.0,apache/submarine,7da8a7fb9bdf067a590879bf0b8b41ecda16d519,"SUBMARINE-1039. remove hadoop related modules

### What is this PR for?
We removed some packages which are no-longer in used, most of them is designed for hadoop or unix environment.

### What type of PR is it?
Refactoring

### Todos
* remove hadoop dependency
* rename maven profile which is named with hadoop
### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1039
### How should this be tested?
this PR had been passed the test in submarine-test:test-k8s and submarine-test:e2e
### Screenshots (if appropriate)
testing result of submarine-test:test-k8s
<img width=""872"" alt=""截圖 2021-10-03 下午3 41 34"" src=""https://user-images.githubusercontent.com/5687317/135744888-27e16f71-4831-42be-b0b8-fab9580300aa.png"">
submarine-test:test-e2e
<img width=""380"" alt=""截圖 2021-10-03 下午3 44 18"" src=""https://user-images.githubusercontent.com/5687317/135744914-95735fbf-fdb6-4698-a117-97c773a5388e.png"">
### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: Brandon Lin <fatallin@gmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #762 from FatalLin/SUBMARINE-1039 and squashes the following commits:

784dc67a [Brandon Lin] merge
05c2e7ac [Brandon Lin] update pom
44c8f38c [Brandon Lin] update github workflow
8eca8623 [Brandon Lin] update github workflow
52d09f85 [Brandon Lin] remove hadoop related modules",https://github.com/apache/submarine/commit/7da8a7fb9bdf067a590879bf0b8b41ecda16d519
1979,1979.0,2153.0,apache/submarine,fca5f7ffb6e6e639f62ad9251b0bed5ab9dc5e0c,"SUBMARINE-1030. Refactor database service directories and class name

### What is this PR for?
In order to unify the development style. Refactor database service directories and class name.

### What type of PR is it?
[Refactoring]

### Todos
* [ ] - Rename class name

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-1030

### How should this be tested?
https://github.com/apache/submarine/pull/759/checks?check_run_id=3719916889

### Screenshots (if appropriate)
![image](https://user-images.githubusercontent.com/48027290/134903408-9f2259bf-c284-4c98-aa86-dd2c56152045.png)
![image](https://user-images.githubusercontent.com/48027290/134903479-4d449867-b561-4bff-a26d-7d13afe9575b.png)
![image](https://user-images.githubusercontent.com/48027290/134903667-e853d65c-71fe-49c0-a41e-c249b68fda09.png)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: kobe860219 <kobe860219@gmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #759 from kobe860219/SUBMARINE-1030 and squashes the following commits:

eb312ce0 [kobe860219] Remove files automatically generated by IDE
f6fc7cc6 [kobe860219] Refactor directories",https://github.com/apache/submarine/commit/fca5f7ffb6e6e639f62ad9251b0bed5ab9dc5e0c
1980,1980.0,2154.0,apache/submarine,1682df28328462a8aafd6ef544dbf00a696b1a89,"SUBMARINE-965. Users should not have the privilege to create experiments in different namespaces

### What is this PR for?
In our multi-tenant architecture, users only can create experiments in their namespaces, but the Submarine workbench enables users to specify namespaces.
![截圖 2021-08-08 上午10 17 13](https://user-images.githubusercontent.com/20109646/128638163-c3d30a53-5e21-4460-b2a3-3ded61d49d6e.png)

This patch aims to

### What type of PR is it?
[Bug Fix]

### Todos
1. Remove the function `public void setNamespace(String namespace)` in ExperimentMeta.java
2. Update experiment RESTful API (remove the field ""namespace"" in the JSON file)
3. Add a test case to make sure whether the experiment is in the namespace specified by `ENV_NAMESPACE`.

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-965

### How should this be tested?
**Test1**
* Step1: Use submarine-operator to create a submarine service in the namespace ""submarine-user-test""
* Step2: Create an experiment, and check whether the experiment is in the namespace ""submarine-user-test"" rather than ""default"".

<img width=""1439"" alt=""截圖 2021-08-08 下午11 57 35"" src=""https://user-images.githubusercontent.com/20109646/128640083-61ffc46d-fc26-4f22-8769-8202092c6574.png"">

**Test2**
* Remove the field ""namespace"" in the Submarine workbench

### Screenshots (if appropriate)
<img width=""1439"" alt=""截圖 2021-08-08 下午11 57 35"" src=""https://user-images.githubusercontent.com/20109646/128640083-61ffc46d-fc26-4f22-8769-8202092c6574.png"">

<img width=""994"" alt=""截圖 2021-08-09 上午1 19 46"" src=""https://user-images.githubusercontent.com/20109646/128640160-58a94857-346d-4ce9-8d14-97edeb4de26e.png"">

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: Kai-Hsun Chen <b03901153@ntu.edu.tw>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #702 from kevin85421/test_yaml_entity and squashes the following commits:

4b375c4b [Kai-Hsun Chen] Update testcase
256b2579 [Kai-Hsun Chen] Add comment
9d1cddb7 [Kai-Hsun Chen] Add comment
90b0a114 [Kai-Hsun Chen] Refactor
973dacee [Kai-Hsun Chen] Refactor
b4eb4be1 [Kai-Hsun Chen] Refactor
61f74f7a [Kai-Hsun Chen] Weird
6f936569 [Kai-Hsun Chen] Fix
30fcd589 [Kai-Hsun Chen] Fix
3e7b8163 [Kai-Hsun Chen] test",https://github.com/apache/submarine/commit/1682df28328462a8aafd6ef544dbf00a696b1a89
1981,1981.0,2155.0,apache/submarine,929294341ef5c9d9a423fad6f75da3406086efec,"SUBMARINE-942. Make experiment ID consistent with TFJob and PyTorch Job

### What is this PR for?
1. Please refer to the following two JIRA issues.

   * https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-886?filter=reportedbyme
   * https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-880?filter=reportedbyme

   In this JIRA issue, we need to make the experiment ID consistent with the name of TFJob and PyTorch Job. The difference is caused by this [link](https://github.com/apache/submarine/commit/8da9f478de9323dd098d06bbd52afdda3a27ce07#diff-c1cad0951ad3663eb075d964171d74ae94a35bec2b79f8c9894030c0446a6b99R119). Update ExperimentId.java.

2. Update [IntegrationTestK8s.md](http://submarine.apache.org/docs/devDocs/IntegrationTestK8s)
    * ""submarine-server-core"" is a dependency package specified in pom.xml of test-k8s.
    * In the document [BuildFromCode.md](http://submarine.apache.org/docs/devDocs/BuildFromCode), the command to build Submarine is `mvn clean package -DskipTests`. However, the package will be installed into the local repository at **install phase**, a later phase than both **package and verify phases**.
    * Hence, we need to execute `mvn install -DskipTests` to ensure that the **test-k8s** module uses the latest ""submarine-server-core"" module.

3. Remove the field `name` in Experiment.java because the value of `name` is the same as `experimentId`.

### What type of PR is it?
[Improvement]

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-942

### How should this be tested?

### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: Kai-Hsun Chen <b03901153@ntu.edu.tw>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #683 from kevin85421/SUBMARINE-942 and squashes the following commits:

594e46ff [Kai-Hsun Chen] Remove experiment name
f051ff87 [Kai-Hsun Chen] Update IntegrationTestK8s.md
c88a384a [Kai-Hsun Chen] Refactor
b81c2daa [Kai-Hsun Chen] Refactor
495ceb32 [Kai-Hsun Chen] SUBMARINE-942. Make experiment ID consistent with TFJob and PyTorch Job
ffd2c168 [Kai-Hsun Chen] SUBMARINE-942. Make experiment ID consistent with TFJob and PyTorch Job

(cherry picked from commit 610535806c6208e53dbe0c2889cc944cf32835c5)
Signed-off-by: Kevin <pingsutw@apache.org>",https://github.com/apache/submarine/commit/929294341ef5c9d9a423fad6f75da3406086efec
1982,1982.0,2156.0,apache/submarine,610535806c6208e53dbe0c2889cc944cf32835c5,"SUBMARINE-942. Make experiment ID consistent with TFJob and PyTorch Job

### What is this PR for?
1. Please refer to the following two JIRA issues.

   * https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-886?filter=reportedbyme
   * https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-880?filter=reportedbyme

   In this JIRA issue, we need to make the experiment ID consistent with the name of TFJob and PyTorch Job. The difference is caused by this [link](https://github.com/apache/submarine/commit/8da9f478de9323dd098d06bbd52afdda3a27ce07#diff-c1cad0951ad3663eb075d964171d74ae94a35bec2b79f8c9894030c0446a6b99R119). Update ExperimentId.java.

2. Update [IntegrationTestK8s.md](http://submarine.apache.org/docs/devDocs/IntegrationTestK8s)
    * ""submarine-server-core"" is a dependency package specified in pom.xml of test-k8s.
    * In the document [BuildFromCode.md](http://submarine.apache.org/docs/devDocs/BuildFromCode), the command to build Submarine is `mvn clean package -DskipTests`. However, the package will be installed into the local repository at **install phase**, a later phase than both **package and verify phases**.
    * Hence, we need to execute `mvn install -DskipTests` to ensure that the **test-k8s** module uses the latest ""submarine-server-core"" module.

3. Remove the field `name` in Experiment.java because the value of `name` is the same as `experimentId`.

### What type of PR is it?
[Improvement]

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-942

### How should this be tested?

### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: Kai-Hsun Chen <b03901153@ntu.edu.tw>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #683 from kevin85421/SUBMARINE-942 and squashes the following commits:

594e46ff [Kai-Hsun Chen] Remove experiment name
f051ff87 [Kai-Hsun Chen] Update IntegrationTestK8s.md
c88a384a [Kai-Hsun Chen] Refactor
b81c2daa [Kai-Hsun Chen] Refactor
495ceb32 [Kai-Hsun Chen] SUBMARINE-942. Make experiment ID consistent with TFJob and PyTorch Job
ffd2c168 [Kai-Hsun Chen] SUBMARINE-942. Make experiment ID consistent with TFJob and PyTorch Job",https://github.com/apache/submarine/commit/610535806c6208e53dbe0c2889cc944cf32835c5
1983,1983.0,2157.0,apache/submarine,8da9f478de9323dd098d06bbd52afdda3a27ce07,"SUBMARINE-880. Cannot run two experiments with the same name

### What is this PR for?
We cannot run two experiments with the same name. Take experimentIT.java as an example, the frontend E2E testcase will create an experiment named ""experiment-e2e-test"". If we run this testcase twice, the workbench just shows an ""experiment-e2e-test"" rather than two.

The root cause is that the K8sSubmitter will create two PODs for an ""experiment-e2e-test"". The names of these two PODs are ""experiment-e2e-test-ps-0"" and ""experiment-e2e-test-worker-0"". Hence, when we try to create the second ""experiment-e2e-test"", K8sSubmitter will throw an exception due to duplicate POD names.

To reproduce the bug:
```bash
# Step1: Run workbench on port 8080
# Step2:
cd submarine-cloud-v2

# Step3: Create ""experiment-e2e-test"" twice
./hack/run_frontend_e2e.sh experimentIT
./hack/run_frontend_e2e.sh experimentIT

# Step4: Check Workbench: only an ""experiment-e2e-test"" exists => BUG!
```

* My solution: (Outdated)
  * The variable ""name"" indicates the name of Custom Resource (ex: tfjobs, pytorchjobs) in k8s.
  * The variable ""expName"" indicates the name of experiment.
  * ${name} = ${expName} + ""-"" + ${experimentCounter}
  * For example: an user creates an experiment ""experiment-e2e-test""  (${expName})
    * On the workbench, the experiment name is ""experiment-e2e-test"". (${expName})
    * The name of the tfjobs (a CRD) is ""experiment-e2e-test-0001"". (${name})
    * The value of the label ""submarine-experiment-name"" in the TFJob is ""experiment-e2e-test""  (${expName})
    * The names of PODs created by the TFJob ""experiment-e2e-test-0001"" are:
      ```
      experiment-e2e-test-0001-ps-0
      experiment-e2e-test-0001-worker-0
      ```

### What type of PR is it?
[Bug Fix]

### Todos
* Check ""_"" (Reference: [Link](https://blog.csdn.net/airangrong6572/article/details/101273245))

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-880

### How should this be tested?
```bash
# Step1: Run workbench on port 8080
# Step2:
cd submarine-cloud-v2

# Step3: Create ""experiment-e2e-test"" twice
./hack/run_frontend_e2e.sh experimentIT
./hack/run_frontend_e2e.sh experimentIT

# Step4: Check Workbench: two""experiment-e2e-test"" exists (Correct)
```

### Screenshots (if appropriate)
<img width=""1141"" alt=""截圖 2021-07-08 上午1 58 10"" src=""https://user-images.githubusercontent.com/20109646/124807637-969ba700-df90-11eb-95c4-17e9a1e32200.png"">
<img width=""438"" alt=""截圖 2021-07-08 上午1 59 43"" src=""https://user-images.githubusercontent.com/20109646/124807642-97343d80-df90-11eb-8841-91cd59d93500.png"">
<img width=""383"" alt=""截圖 2021-07-08 上午1 57 49"" src=""https://user-images.githubusercontent.com/20109646/124807649-98fe0100-df90-11eb-8393-e9ccbc4d0b10.png"">
<img width=""1439"" alt=""截圖 2021-07-08 上午1 58 00"" src=""https://user-images.githubusercontent.com/20109646/124807660-9ac7c480-df90-11eb-9a08-f27d27ef0e1f.png"">

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: Kai-Hsun Chen <b03901153@ntu.edu.tw>

Signed-off-by: Kai-Hsun Chen <kaihsun@apache.org>

Closes #622 from kevin85421/SUBMARINE-880 and squashes the following commits:

14fd0bc1 [Kai-Hsun Chen] Rename the functions
e82b29bc [Kai-Hsun Chen] Refactor
044317f0 [Kai-Hsun Chen] test
55369731 [Kai-Hsun Chen] Refactor
ce75ef9a [Kai-Hsun Chen] Use the experiment ID as tfjob name
038c7ae6 [Kai-Hsun Chen] Refactor
be562148 [Kai-Hsun Chen] Refactor
79126cc2 [Kai-Hsun Chen] import ExperimentMeta
d418f501 [Kai-Hsun Chen] Update
2e8421f3 [Kai-Hsun Chen] Try to figure out the root cause of integration test errors
d985db5f [Kai-Hsun Chen] Separate the experiment name from POD name",https://github.com/apache/submarine/commit/8da9f478de9323dd098d06bbd52afdda3a27ce07
1984,1984.0,2158.0,apache/submarine,b56151187685b0ef13b5a1a4d90c4d06a3602537,"SUBMARINE-921. [User] Refactor User docs

### What is this PR for?

Refactor the ""user"" page of website.

**For visualized structural changes:**

Old:
```
.
└── Users Docs/
    ├── Submarine on Kubernetes/
    │   └── ...
    ├── Submarine on Yarn/
    │   └── ...
    ├── Submarine SDK/
    │   └── ...
    └── Submarine Security/
        └── ...
```

New:

```
.
└── Users Docs/
    ├── API documentation/
    │   ├── Experiment REST API
    │   ├── Experiment Template REST API
    │   ├── Environment REST API
    │   └── Notebook REST API
    └── Submarine SDK/
        ├── Experiment Client
        ├── Model Client
        └── Tracking (deprecated)
    ├── Submarine Security/
    │   └── ...
    └── Other utilities/
        └── MLflow UI
        └── Tensorboard
```
**Details**
1. Remove ""Submarine on Yarn"" because Yarn is deprecated.
2. Rename ""Submarine on Kubernetes"" to ""API ""documentation"", categorized into four classes: ""Experiment REST API"", ""Experiment Template REST API"", ""Environment REST API"", and ""Notebook REST API"". For each API endpoint, provide spec and examples. (refer to https://docs.github.com/en/rest/reference/actions)
3. Refactor ""Submarine-SDK"", categorized into three classes: ""Experiment Client"", ""Model Client"" and ""Tracking"". For each class, provide the spec and examples. (refer to https://mlflow.org/docs/latest/python_api/mlflow.html)
4. Add ""Other utilities"" to provide the details of how to use tensorboard and mlflow UI.
5. Keep ""Submarine Security"" intact.

### What type of PR is it?
[Documentation]

### Todos
* [ ] - Task

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-921

### How should this be tested?

### Screenshots (if appropriate)

![image](https://user-images.githubusercontent.com/24364830/125229164-bd4b3c00-e308-11eb-9362-79f1253c86e3.png)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: ByronHsu <byronhsu1230@gmail.com>

Signed-off-by: byronhsu <byronhsu@apache.org>

Closes #662 from ByronHsu/refactor-user-page and squashes the following commits:

72e25380 [ByronHsu] revise gitignore to include mlflow md
5520d00a [ByronHsu] add empty pages",https://github.com/apache/submarine/commit/b56151187685b0ef13b5a1a4d90c4d06a3602537
1985,1985.0,2159.0,apache/submarine,8dec01f9aef9098223c49aea691663480b69a716,"SUBMARINE-895. Refactor GitHub Actions YAML files

### What is this PR for?
* Some GitHub Actions' YAML files are writing with different code styles and using some old version packages. Improve the code styles and update the packages.
* Add the Licence on the top of files

### What type of PR is it?
[Refactoring]

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-895

### How should this be tested?

### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: KUAN-HSUN-LI <b06209027@ntu.edu.tw>

Signed-off-by: Kai-Hsun Chen <kaihsun@apache.org>

Closes #657 from KUAN-HSUN-LI/SUBMARINE-895 and squashes the following commits:

b3d6ee98 [KUAN-HSUN-LI] fix path error
cbc7aff0 [KUAN-HSUN-LI] SUBMARINE-895. Refactor GitHub Actions' YAML files",https://github.com/apache/submarine/commit/8dec01f9aef9098223c49aea691663480b69a716
1986,1986.0,2160.0,apache/submarine,c237717e81088879bb8974719ffa3d27943a7e39,"SUBMARINE-899. ServeModel API in submarine server

### What is this PR for?
For the model saved in model registry (you can view on mlflow UI), we offer an API to serve it in the cluster. Under the hood, we create resources (i.e. pod, service, deployment, ingressroute) for the `serve` resource.
Follow the [example](https://github.com/apache/submarine/blob/65620913c8d99b774efad56939d1f3255c91c18c/dev-support/examples/nn-pytorch/readme.md) to try this new API.

### What type of PR is it?
[Feature]

### Todos
- [ ]  getServe API: get the status (e.g. ready) for the Serve resource.
- [ ] error-handling (use mlflow api to check existence)
- [ ]  deleteServeByID
    - [ ]  create ID for each serve → store in db
- [ ]  test
- [ ]  seperate serveManager from experimentManager
- [ ]  update API doc
- [ ] Serve UI

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-899

### How should this be tested?

### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: ByronHsu <byronhsu1230@gmail.com>

Signed-off-by: byronhsu <byronhsu@apache.org>

Closes #641 from ByronHsu/serve and squashes the following commits:

5f935a76 [ByronHsu] fix style
65620913 [ByronHsu] add serve example
e94608f0 [ByronHsu] refactor
2bd97eb1 [ByronHsu] refactor
776c0898 [ByronHsu] refactor
de1c08af [ByronHsu] restapi
1607cc7a [ByronHsu] k8ssubmitter create serve and delete serve
a20dfef6 [ByronHsu] add more comments
a62c6824 [ByronHsu] add readiness probe to ensure the container is up
4404f500 [ByronHsu] remove unused files
7347486c [ByronHsu] solve unconnection by middleware
8af51d67 [ByronHsu] flask server works",https://github.com/apache/submarine/commit/c237717e81088879bb8974719ffa3d27943a7e39
1987,1987.0,2161.0,apache/submarine,8d56b9bc27b9f1041b530c12c887c6e0f822bb93,"SUBMARINE-892. Remove unused files in our controller

### What is this PR for?
Currently `submarine-cloud-v2/main_test.go` is unused since it will be replace by new testing framework. `submarine-cloud-v2/pkg/k8sutil` will no longer be used since we will use NodePort service instead of port forwarding in production environment. Therefore these two files can be deleted.

### What type of PR is it?
[Refactoring]

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-892

### How should this be tested?

### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: MortalHappiness <b07901069@ntu.edu.tw>

Signed-off-by: Kai-Hsun Chen <kaihsun@apache.org>

Closes #644 from MortalHappiness/SUBMARINE-892 and squashes the following commits:

10bf9963 [MortalHappiness] SUBMARINE-892. Remove unused files in our controller",https://github.com/apache/submarine/commit/8d56b9bc27b9f1041b530c12c887c6e0f822bb93
1988,1988.0,2162.0,apache/submarine,5739c09bf1b0a6ad5169d76203a84cc778e3a56d,"SUBMARINE-891. Remove namespace function arguments when creating resources

### What is this PR for?
Currently when creating resources we pass namespace as function argument. However it is unnecessary since it can be read from submarine custom resource.

### What type of PR is it?
[Refactoring]

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-891

### How should this be tested?

### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: MortalHappiness <b07901069@ntu.edu.tw>

Signed-off-by: Kai-Hsun Chen <kaihsun@apache.org>

Closes #643 from MortalHappiness/SUBMARINE-891 and squashes the following commits:

aa36829f [MortalHappiness] SUBMARINE-891. Remove namespace function arguments when creating resources",https://github.com/apache/submarine/commit/5739c09bf1b0a6ad5169d76203a84cc778e3a56d
1989,1989.0,2163.0,apache/submarine,75275d400455587cabdcf4760c55878f5347495d,"SUBMARINE-890. Extract all resource creation spec

### What is this PR for?
Extract all resource creation spec into functions so the code is more readable.

### What type of PR is it?
[Refactoring]

### Todos
* [x] - Make controller be a standalone package
* [x] - Extract resource creation spec into functions

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-890

### How should this be tested?

### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: MortalHappiness <b07901069@ntu.edu.tw>

Signed-off-by: Kai-Hsun Chen <kaihsun@apache.org>

Closes #639 from MortalHappiness/SUBMARINE-890 and squashes the following commits:

2f34c617 [MortalHappiness] SUBMARINE-890. Extract all resource creation spec",https://github.com/apache/submarine/commit/75275d400455587cabdcf4760c55878f5347495d
1990,1990.0,2164.0,apache/submarine,1fa0a762e17ce7d8ae12c51b387dacdaa05015a7,"SUBMARINE-882. fix datadictIT

### What is this PR for?
In travis.ci, this IT will have undeterministic behavior, it is because of the original way to realize the waiting is fluent wait, but it lacks of expected condition.
The other reason of unstable behavior of this test is because of the wrong interaction with components.

https://user-images.githubusercontent.com/55401762/124241557-6e561780-db4e-11eb-8ab4-53a04ffc583e.mp4

As you can see, this drop-down list need to be hovered. But this IT clicked it. This might be the source of unstable.
So it need to be modify with the functions that use explicit wait in AbstractSubmarineIT.
Also found that the window need to set larger to prevent element from disappearing in viewpoint, which makes headless driver can not interact.
Note: the default of size of headless window maximize is (600, 800), when driver hover the target out of this area, it will cause MoveTargetOutOfBounds exception.

### What type of PR is it?
[Bug Fix | Refactoring]

### Todos

### What is the Jira issue?

https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-882

### How should this be tested?
```bash
# Step1: Run Submarine workbench on 127.0.0.1:8080 by operator
# Step2: Run testcase
cd submarine-cloud-v2

# Usage: ./hack/run_frontend_e2e.sh ${testcase}
# Example:
./hack/run_frontend_e2e.sh datadictIT
```
### Screenshots (if appropriate)

https://user-images.githubusercontent.com/55401762/124000807-8c186500-da06-11eb-8289-faf054a85650.mp4

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: noidname01 <tim983649@gmail.com>

Signed-off-by: Kai-Hsun Chen <kaihsun@apache.org>

Closes #627 from noidname01/SUBMARINE-882 and squashes the following commits:

e736ecce [noidname01] add Hover, HoverAndClick
277ff426 [noidname01] set screen bigger
b9f90cb4 [noidname01] add scroll
6fa22aa2 [noidname01] try to fix bug
e64d9ab7 [noidname01] found where unstable-moreBtn
bae44f03 [noidname01] merge with 878
b3c72257 [noidname01] add more comment to increase readability
5d22c2b1 [noidname01] datadictIT refactor
c329d788 [noidname01] datadictIT refactor",https://github.com/apache/submarine/commit/1fa0a762e17ce7d8ae12c51b387dacdaa05015a7
1991,1991.0,2165.0,apache/submarine,60f83a26b375dec79e1803a36ef83400af5e6d97,"SUBMARINE-853. [E2E] Avoid mixing implicit and explicit waits

### What is this PR for?
The selenium's official document indicates that

""Do not mix implicit and explicit waits. Doing so can cause unpredictable wait times. For example, setting an implicit wait of 10 seconds and an explicit wait of 15 seconds could cause a timeout to occur after 20 seconds.""

Hence, we need to avoid mixing implicit and explicit waits.

https://www.selenium.dev/documentation/en/webdriver/waits/

### What type of PR is it?
[Bug Fix | Improvement | Refactoring]

### Todos
* Fix testcases ignored by release 5.0

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-853

### How should this be tested?
```
# Step1: Run Submarine workbench on 127.0.0.1:8080 by operator
# Step2: Run testcase
cd submarine-cloud-v2

# Usage: ./hack/run_frontend_e2e.sh ${testcase}
# Example:
./hack/run_frontend_e2e.sh notebookIT
```

### Screenshots (if appropriate)
<img width=""728"" alt=""截圖 2021-06-14 上午2 19 57"" src=""https://user-images.githubusercontent.com/20109646/121817982-10ed4a00-ccb7-11eb-842f-61edb7c73c27.png"">

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: Kai-Hsun Chen <b03901153@ntu.edu.tw>

Signed-off-by: Kai-Hsun Chen <kaihsun@apache.org>

Closes #605 from kevin85421/SUBMARINE-853 and squashes the following commits:

564aa3ca [Kai-Hsun Chen] SUBMARINE-853. [E2E] Avoid mixing implicit and explicit waits",https://github.com/apache/submarine/commit/60f83a26b375dec79e1803a36ef83400af5e6d97
1992,1992.0,2166.0,apache/submarine,252a0e9556a78b3788437233153ac8feee636e91,"SUBMARINE-852. [E2E] Remove redundant code in E2E framework

### What is this PR for?
Because our frontend E2E framework is referred to Zeppelin, some functions for Zeppelin are redundant in Submarine.

### What type of PR is it?
[Refactoring]

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-852

### How should this be tested?
https://travis-ci.com/github/apache/submarine/builds/228807048

### Screenshots (if appropriate)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: Kai-Hsun Chen <b03901153@ntu.edu.tw>

Signed-off-by: Kai-Hsun Chen <kaihsun@apache.org>

Closes #604 from kevin85421/SUBMARINE-852 and squashes the following commits:

739d697b [Kai-Hsun Chen] SUBMARINE-852. [E2E] Remove redundant code in E2E framework",https://github.com/apache/submarine/commit/252a0e9556a78b3788437233153ac8feee636e91
1993,1993.0,2167.0,apache/submarine,d821cfdad3789558312037d6946d37086eb683e0,"SUBMARINE-802. Refactor environment list

### What is this PR for?
* Refactor the environment list.
* Add the preview environment spec button.
* Download button for environment spec.

### What type of PR is it?
[Refactoring]

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-802

### How should this be tested?
Test download case is created in e2e test.

### Screenshots (if appropriate)
![ezgif com-gif-maker](https://user-images.githubusercontent.com/38066413/116445882-f1c26680-a888-11eb-8a78-3665d81073f3.gif)

### Questions:
* Do the license files need updating? No
* Are there breaking changes for older versions? No
* Does this need new documentation? No

Author: KUAN-HSUN-LI <b06209027@ntu.edu.tw>

Signed-off-by: Liu Xun <liuxun@apache.org>

Closes #572 from KUAN-HSUN-LI/SUBMARINE-802 and squashes the following commits:

3f6a44d [KUAN-HSUN-LI] SUBMARINE-802. Delete useless folder
93e3a92 [KUAN-HSUN-LI] SUBMARINE-802. Add download environment spec test
cc25ced [KUAN-HSUN-LI] SUBMARINE-802. Refactor environment form",https://github.com/apache/submarine/commit/d821cfdad3789558312037d6946d37086eb683e0
1994,1994.0,2168.0,apache/submarine,2faebb8efd69833853f62d89b4f1fea1b1718148,"SUBMARINE-768. Use code-generator to generate API

### What is this PR for?
#### Why submarine-cloud-v2?
* Because `submarine-cloud` is outdated, `submarine-cloud-v2` is the refactored version of `submarine-cloud`. In addition, after `submarine-cloud-v2` finishes, we will replace `submarine-cloud` with `submarine-cloud-v2`.
* More information is provided in SUBMARINE-760.

#### This PR
* Use code-generator to generate API.
* code-generator Github Repo: https://github.com/kubernetes/code-generator

### What type of PR is it?
[Feature]

### Todos
* Test the generated APIs
* Set Maven
* Define CRD

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-768

### How should this be tested?
* Refer to : https://github.com/kevin85421/hadoop-submarine/blob/SUBMARINE-768/submarine-cloud-v2/README.md

### Screenshots (if appropriate)
<img width=""954"" alt=""截圖 2021-03-16 下午5 28 22"" src=""https://user-images.githubusercontent.com/20109646/111286640-5e88f500-867d-11eb-85e5-4ea359db7a65.png"">

https://user-images.githubusercontent.com/20109646/111286654-60eb4f00-867d-11eb-83bc-b7f7a1833179.mov

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? Yes
* Does this needs documentation? Yes

Author: Kai-Hsun Chen <b03901153@ntu.edu.tw>

Signed-off-by: Liu Xun <liuxun@apache.org>

Closes #539 from kevin85421/SUBMARINE-768 and squashes the following commits:

3c62713 [Kai-Hsun Chen] SUBMARINE-768. Use code-generator to generate API
7a19aa7 [Kai-Hsun Chen] SUBMARINE-768. Use code-generator to generate API
7df68b3 [Kai-Hsun Chen] SUBMARINE-768. Use code-generator to generate API",https://github.com/apache/submarine/commit/2faebb8efd69833853f62d89b4f1fea1b1718148
1995,1995.0,2169.0,apache/submarine,58fa4576ce520ac74d4dc1c9a45e0b0af870e27b,"SUBMARINE-759. Update submarine-operator.md

### What is this PR for?
The document of submarine-operator is outdated, and thus we cannot launch the submarine operator with this document.
For example,

(1) (submarine-operator.md) Kind v0.6.0 deprecates `kind get kubeconfig-path`
(2) (manifests/submarine-operator/deployment.yaml) `selector` field is necessary.
(3) (manifests/submarine-operator/deployment.yaml) Now, deployment is `apiVersion: apps/v1` rather than `extensions/v1beta1`.
(4) The .yaml files in `manifests/` are very different with the files in `helm-charts/`. Therefore, some errors will occur. For instance, there is no `configMap` in  `helm-charts/submarine/templates/submarine-server.yaml`, but a `configMap` is defined in `manifests/submarine-cluster/submarine-server.yaml`.

Hence, we need to update this document, and we should refactor this component next.

### What type of PR is it?
[Documentation]

### Todos
* Refactor submarine-operator

### What is the Jira issue?
https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-759?filter=allopenissues

### How should this be tested?

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Kai-Hsun Chen <b03901153@ntu.edu.tw>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #530 from kevin85421/SUBMARINE-759 and squashes the following commits:

1c54639e [Kai-Hsun Chen] SUBMARINE-759. Update submarine-operator.md",https://github.com/apache/submarine/commit/58fa4576ce520ac74d4dc1c9a45e0b0af870e27b
1996,1996.0,2170.0,apache/submarine,b4b1381a14c63e4fc2800f48d983317bfd875411,"SUBMARINE-712. [WEB] Refactor environment page of Workbench

### What is this PR for?
Refactor environment page as below:
![image-2021-01-19-23-49-11-883](https://user-images.githubusercontent.com/48027290/106375938-94269700-63cb-11eb-9129-3ad4ee87208d.png)

### What type of PR is it?
[Refactoring]

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-712

### How should this be tested?
https://travis-ci.org/github/kobe860219/submarine/builds/756909341

### Screenshots (if appropriate)
![environmentDemo 20210131](https://user-images.githubusercontent.com/48027290/106375980-e10a6d80-63cb-11eb-9742-1308e3028f85.gif)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: kobe860219 <kobe860219@gmail.com>

Signed-off-by: Liu Xun <liuxun@apache.org>

Closes #503 from kobe860219/SUBMARINE-712 and squashes the following commits:

3ffcae0 [kobe860219] Remove ngIf condition about submarine's default environment.
92e92d7 [kobe860219] Fix e2e
5e0a1fd [kobe860219] Fix test-e2e and proxy target
02153a3 [kobe860219] SUBMARINE-712. [WEB] Refactor environment page of Workbench
4d4fc0a [kobe860219] Add environment module and routing-module",https://github.com/apache/submarine/commit/b4b1381a14c63e4fc2800f48d983317bfd875411
1997,1997.0,2171.0,apache/submarine,ade9311f74abf41ed8867e1e76e4ee76ca24c0e1,"SUBMARINE-700. [WEB] Refactor notebook page of Workbench

### What is this PR for?
Refactor the architecture of notebook component in workbench. The new architecture is as below :

![Notebook Architecture](https://user-images.githubusercontent.com/48027290/105056481-359a1880-5aaf-11eb-9a7d-56fefac1a12b.png)

### What type of PR is it?
[Refactoring]

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-700

### How should this be tested?
https://travis-ci.org/github/kobe860219/submarine/builds/755191807

### Screenshots (if appropriate)
![notebook page demo 20210127](https://user-images.githubusercontent.com/48027290/105964193-d21a7700-60bc-11eb-9e1e-c2bf717c75f6.gif)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: kobe860219 <kobe860219@gmail.com>

Signed-off-by: Kevin <pingsutw@apache.org>

Closes #494 from kobe860219/SUBMARINE-700 and squashes the following commits:

24e25a8 [kobe860219] Fix test failure and update image
981224f [kobe860219] Prettier code
8189a95 [kobe860219] Fix interval and prettier code
d50ae4a [kobe860219] Add popconfirm
5fd746f [kobe860219] Fix architecture and form
a648e6a [kobe860219] Remove unuse css
d4e4aa3 [kobe860219] SUBMARINE-700. [WEB] Refactor notebook page of Workbench",https://github.com/apache/submarine/commit/ade9311f74abf41ed8867e1e76e4ee76ca24c0e1
1998,1998.0,2172.0,apache/submarine,6e988c77f81eda3eca5c9cb04f6b41039d2ef185,"SUBMARINE-706. [web] Refactor workbench experiment page

### What is this PR for?

The original functionality can still work fine now. I refactored the code and made these major changes:
1. Split complex components into smaller ones. In that way, it becomes easier to maintain the code. Furthermore, different pages can use the same components easily and do not need to re-write code.
2. Replace dirty trick with a more elegant method. For example, [this bug](https://github.com/apache/submarine/pull/355/files) can be fixed by a shared service between parent and child component rather than checking reload manually.

![Experiment Architecture](https://user-images.githubusercontent.com/24364830/104095135-2c9b9100-52d0-11eb-87b6-cf95e9f1761f.png)

### What type of PR is it?
[Refactoring]

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-706

### How should this be tested?

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Byron <byronhsu1230@gmail.com>

Closes #488 from ByronHsu/SUBMARINE-706 and squashes the following commits:

ab0a8bc [Byron] change delete title
36bd9bc [Byron] change delete title
ec9444a [Byron] fix license typo
a5b3ca0 [Byron] fix license
2c5e0ee [Byron] fix format
23aa3eb [Byron] refactor experiment page",https://github.com/apache/submarine/commit/6e988c77f81eda3eca5c9cb04f6b41039d2ef185
1999,1999.0,2173.0,apache/submarine,d104080a926d30bcc45ccd740f9489dd7365d0b5,"SUBMARINE-675. Sync the status of notebook

### What is this PR for?
1. The notebook REST api will return four states of notebook (creating/waiting/running/terminating) and its reason.

- creating : Users submitted the request to create notebook and its pod haven't been created.
- waiting :  Still running the operations it requires in order to complete start up: for example, pulling the container image.
- running : The container is executing without issues and readyReplicas equals to 1
- terminating : Users submitted the request to delete notebook

2. Refactoring K8sSubmitter
3. Update userdocs/k8s/api/notebook.md

### What type of PR is it?
[Improvement | Documentation | Refactoring]

### Todos
* [kobe860219  ] - Front-end : Using RxJS to do polling the status of notebook instance and adding spinner when notebook status is creating/waiting.

### What is the Jira issue?
[SUBMARINE-675](https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-675)

### How should this be tested?
[Travis CI](https://travis-ci.org/github/lowc1012/submarine/builds/747154671)

### Screenshots (if appropriate)
<img width=""1189"" alt=""image"" src=""https://user-images.githubusercontent.com/52355146/100850958-8209a480-34bf-11eb-83b3-cef183a893cd.png"">

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Ryan Lo <lowc1012@gmail.com>

Closes #468 from lowc1012/SUBMARINE-675 and squashes the following commits:

0dfe1a1 [Ryan Lo] convert to static methods
d4f89b9 [Ryan Lo] SUBMARINE-675. update
a9a4717 [Ryan Lo] SUBMARINE-675. Sync the status of notebook",https://github.com/apache/submarine/commit/d104080a926d30bcc45ccd740f9489dd7365d0b5
2000,2000.0,2174.0,apache/submarine,c360271fd35004e442c8e94c56fc70b66139cbb1,"SUBMARINE-676. Add NG-ZORRO UI component library to notebook page

### What is this PR for?
We use NG-ZORRO as the UI Component library in Workbench Web. But the form in notebook page of WEB has not been used yet. We should make the WEB interface all use uniformly.

### What type of PR is it?
[Refactoring]

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-676

### How should this be tested?
https://travis-ci.org/github/kobe860219/submarine/builds/744476551

### Screenshots (if appropriate)
![x3ie8-uk0nv](https://user-images.githubusercontent.com/48027290/99566311-b2edd200-2a07-11eb-96ea-c387bfef4ebe.gif)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: kobe860219 <kobe860219@gmail.com>

Closes #454 from kobe860219/SUBMARINE-676 and squashes the following commits:

8befc57 [kobe860219] SUBMARINE-676. Add NG-ZORRO UI component library to notebook page",https://github.com/apache/submarine/commit/c360271fd35004e442c8e94c56fc70b66139cbb1
2001,2001.0,2175.0,apache/submarine,98e361b5be79739150f4b4097b0e7d563f695fcf,"SUBMARINE-658. Rename publick-api.ts to public-api.ts

### What is this PR for?
A few sentences describing the overall goals of the pull request's commits.
First time? Check out the contributing guide - https://submarine.apache.org/contribution/contributions.html

### What type of PR is it?
[Refactoring]

### Todos
* [ ] - Task

### What is the Jira issue?

https://issues.apache.org/jira/browse/SUBMARINE-658

### How should this be tested?
* First time? Setup Travis CI as described on https://submarine.apache.org/contribution/contributions.html#continuous-integration
* Strongly recommended: add automated unit tests for any new or changed behavior
* Outline any manual steps to test the PR here.

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Hsuan Lee <hsuangm@gmail.com>

Closes #434 from hsuanxyz/SUBMARINE-658 and squashes the following commits:

ec49886 [Hsuan Lee] SUBMARINE-658. Rename publick-api.ts to public-api.ts",https://github.com/apache/submarine/commit/98e361b5be79739150f4b4097b0e7d563f695fcf
2002,2002.0,2176.0,apache/submarine,57eb259f6aebc2e1c918eff7ae13d027f0ef891d,"SUBMARINE-558. Define Swagger API for pre-defined template submission

### What is this PR for?
Make basic rest api for submi template.

Convert submitted template to experiment
post
http://localhost/V1/template/submit

### What type of PR is it?
[Bug Fix | Improvement | Feature | Documentation | Hot Fix | Refactoring]

### Todos
* [x] - API
* [x] - test

### What is the Jira issue?
https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-558

### How should this be tested?

```sh
# Register experiment template
curl -X POST -H ""Content-Type: application/json"" -d '
{
  ""name"": ""tf-mnist-test"",
  ""author"": ""author"",
  ""description"": ""This is a template to run tf-mnist\n"",
  ""parameters"": [
    {
      ""name"": ""training.learning_rate"",
      ""value"": 0.1,
      ""required"": true,
      ""description"": "" mnist learning_rate ""
    },
    {
      ""name"": ""training.batch_size"",
      ""value"": 150,
      ""required"": false,
      ""description"": ""This is batch size of training""
    }
  ],
  ""experimentSpec"": {
    ""meta"": {
      ""cmd"": ""python /var/tf_mnist/mnist_with_summaries.py --log_dir=/train/log --learning_rate={{training.learning_rate}} --batch_size={{training.batch_size}}"",
      ""name"": ""tf-mnist-template-test"",
      ""envVars"": {
        ""ENV1"": ""ENV1""
      },
      ""framework"": ""TensorFlow"",
      ""namespace"": ""default""
    },
    ""spec"": {
      ""Ps"": {
        ""replicas"": 1,
        ""resources"": ""cpu=1,memory=1024M""
      },
      ""Worker"": {
        ""replicas"": 1,
        ""resources"": ""cpu=1,memory=1024M""
      }
    },
    ""environment"": {
      ""image"": ""gcr.io/kubeflow-ci/tf-mnist-with-summaries:1.0""
    }
  }
}
' http://127.0.0.1:8080/api/v1/template
```

```sh
# Submit experiment template to experiment
curl -X POST -H ""Content-Type: application/json"" -d '
{
    ""name"": ""tf-mnist-test"",
    ""params"": {
        ""training.learning_rate"":""0.01"",
        ""training.batch_size"":""150""
    }
}
' http://127.0.0.1:8080/api/v1/template/submit
```

If the submission is successful, it will return
```json
{
    ""status"": ""OK"",
    ""code"": 200,
    ""success"": true,
    ""message"": null,
    ""result"": {
        ""experimentId"": ""experiment_1597853926000_0035"",
        ""name"": ""tf-mnist-template-test"",
        ""uid"": ""0a79d641-871e-4ba6-9e3e-eab1d4690f4e"",
        ""status"": ""Accepted"",
        ""acceptedTime"": ""2020-08-22T18:36:32.000+08:00"",
        ""createdTime"": null,
        ""runningTime"": null,
        ""finishedTime"": null,
        ""spec"": {
            ""meta"": {
                ""name"": ""tf-mnist-template-test"",
                ""namespace"": ""default"",
                ""framework"": ""TensorFlow"",
                ""cmd"": ""python /var/tf_mnist/mnist_with_summaries.py --log_dir=/train/log --learning_rate=0.01 --batch_size=150"",
                ""envVars"": {
                    ""ENV1"": ""ENV1""
                }
            },
            ""environment"": {
                ""name"": null,
                ""dockerImage"": null,
                ""kernelSpec"": null,
                ""description"": null,
                ""image"": ""gcr.io/kubeflow-ci/tf-mnist-with-summaries:1.0""
            },
            ""spec"": {
                ""Ps"": {
                    ""replicas"": 1,
                    ""resources"": ""cpu=1,memory=1024M"",
                    ""name"": null,
                    ""image"": null,
                    ""cmd"": null,
                    ""envVars"": null,
                    ""resourceMap"": {
                        ""memory"": ""1024M"",
                        ""cpu"": ""1""
                    }
                },
                ""Worker"": {
                    ""replicas"": 1,
                    ""resources"": ""cpu=1,memory=1024M"",
                    ""name"": null,
                    ""image"": null,
                    ""cmd"": null,
                    ""envVars"": null,
                    ""resourceMap"": {
                        ""memory"": ""1024M"",
                        ""cpu"": ""1""
                    }
                }
            }
        }
    },
    ""attributes"": {}
}
```

### Screenshots (if appropriate)
![image](https://user-images.githubusercontent.com/19265751/90865269-b64fce00-e3c4-11ea-8e9e-6f3a3a24c892.png)

### Questions:
* Does the licenses files need update? Yes/No
* Is there breaking changes for older versions? Yes/No
* Does this needs documentation? Yes/No

Author: JohnTing <jot.johnting@gmail.com>

Closes #382 from JohnTing/SUBMARINE-558 and squashes the following commits:

1ea2588 [JohnTing] change
e98083b [JohnTing] change
b7b6dd4 [JohnTing] ExperimentAndTemplateMixed api
eca2ec3 [JohnTing] change3
b358d3b [JohnTing] change3
6a4bad2 [JohnTing] change2
7fc82ef [JohnTing] change
27a86f3 [JohnTing] Update submarine-test/test-k8s/src/test/java/org/apache/submarine/rest/ExperimentTemplateManagerRestApiIT.java
1de1d4f [JohnTing] Update submarine-server/server-core/src/main/java/org/apache/submarine/server/experimenttemplate/ExperimentTemplateManager.java
386ff82 [JohnTing] Update submarine-server/server-core/src/main/java/org/apache/submarine/server/experimenttemplate/ExperimentTemplateManager.java
a28d1a5 [JohnTing] Update submarine-server/server-core/src/main/java/org/apache/submarine/server/experimenttemplate/ExperimentTemplateManager.java
e11a097 [JohnTing] add simple doc
64cc6a7 [JohnTing] test1
5060482 [JohnTing] Add testList, testUpdate
4b264cb [JohnTing] usable",https://github.com/apache/submarine/commit/57eb259f6aebc2e1c918eff7ae13d027f0ef891d
2003,2003.0,2177.0,apache/submarine,6b2c3a00f5cd51caf7ff70e693c3674861b8bc33,"SUBMARINE-619. Refactor Readme

### What is this PR for?
Refactor the Readme.md

### What type of PR is it?
[Improvement]

### Todos
Add some pictures to explain the workflow in Submarine
(ex: data exploration --> prototyping --> training --> monitoring --> serving)

### What is the Jira issue?
https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-619?filter=allopenissues

### How should this be tested?

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: kevin85421 <b03901153@ntu.edu.tw>

Closes #394 from kevin85421/SUBMARINE-619 and squashes the following commits:

b49fa0a [kevin85421] Update README.md
a5a9189 [kevin85421] SUBMARINE-619. Refactor Readme",https://github.com/apache/submarine/commit/6b2c3a00f5cd51caf7ff70e693c3674861b8bc33
2004,2004.0,2178.0,apache/submarine,6dec6e13f229c6bc216c785bbaed827c10cefd30,"SUBMARINE-610. [WEB] Refactor experiment.component

### What is this PR for?
Separate form in `experiment.component` to another file, and using RXJS `Subject` and `Observable` to communicate between components.

### What type of PR is it?
[Refactoring]

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-610?filter=-1

### How should this be tested?
https://github.com/wang0630/submarine/runs/1046727907

### Screenshots (if appropriate)
![Aug-30-2020 11-44-15](https://user-images.githubusercontent.com/26138982/91650772-2ee61700-eab6-11ea-91c5-f92307df8126.gif)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions?No
* Does this needs documentation? No

Author: wang0630 <j2081499@gmail.com>

Closes #388 from wang0630/SUBMARINE-610 and squashes the following commits:

f446696 [wang0630] Fix typo
71b850d [wang0630] Add todo in experimentIT.java
5692537 [wang0630] Fix clone btn
fd430c2 [wang0630] Add styling
f3ad296 [wang0630] Remove unnecessary style
7ccc16b [wang0630] Add license
0c53590 [wang0630] Add corresponding tests
ead507a [wang0630] Refactor form to individual component
2a56a29 [wang0630] Refactor form finished, check manually
982f9e9 [wang0630] Before using ViewChild
e2ce531 [wang0630] Refactor services
d011029 [wang0630] Refactor experiment page
b151a42 [wang0630] Files are organized, before launching
ce12d3c [wang0630] Before refactor component
e6962fb [wang0630] Add radio button for job types",https://github.com/apache/submarine/commit/6dec6e13f229c6bc216c785bbaed827c10cefd30
2005,2005.0,2179.0,apache/submarine,517083e79f0bbe723a585831faf74f45aeaee8ed,"SUBMARINE-559. [API] Define Swagger API for pre-defined template registration/delete, etc.

### What is this PR for?

Make basic rest api for management experiment template.

get, post, del, patch
http://localhost/V1/template

### What type of PR is it?
[Bug Fix | Improvement | Feature | Documentation | Hot Fix | Refactoring]

### Todos
* [x] - REST API
* [x] - test
* [x] - e2e test
* [x] - parameter Mapping

### What is the Jira issue?
https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-559

### How should this be tested?
* First time? Setup Travis CI as described on https://submarine.apache.org/contribution/contributions.html#continuous-integration
* Strongly recommended: add automated unit tests for any new or changed behavior
* Outline any manual steps to test the PR here.

### Screenshots (if appropriate)
![image](https://user-images.githubusercontent.com/19265751/89300101-46d6a080-d69a-11ea-92b3-795387340313.png)
![image](https://user-images.githubusercontent.com/19265751/89300112-4ccc8180-d69a-11ea-825a-782558f91aab.png)
![image](https://user-images.githubusercontent.com/19265751/89300145-581fad00-d69a-11ea-9027-032d5fd3dd81.png)
![image](https://user-images.githubusercontent.com/19265751/89300186-6372d880-d69a-11ea-97aa-fcf7d015db88.png)

![image](https://user-images.githubusercontent.com/19265751/89812094-2dd65f80-db72-11ea-9e14-50f86cf35c94.png)
![image](https://user-images.githubusercontent.com/19265751/89812153-434b8980-db72-11ea-9233-a1919940a368.png)

### Questions:
* Does the licenses files need update? Yes/No
* Is there breaking changes for older versions? Yes/No
* Does this needs documentation? Yes/No

Author: JohnTing <jot.johnting@gmail.com>

Closes #351 from JohnTing/SUBMARINE-559 and squashes the following commits:

6615be9 [JohnTing] chnge the name contained in the data
1c77b2b [JohnTing] Merge branch 'master' into SUBMARINE-559
3064b1e [JohnTing] done
096fe10 [JohnTing] parameterMapping
126cba7 [JohnTing] test2
6e53898 [JohnTing] test
2ac1b70 [JohnTing] submarine-559
f54a8e7 [JohnTing] add gitignore",https://github.com/apache/submarine/commit/517083e79f0bbe723a585831faf74f45aeaee8ed
2006,2006.0,2180.0,apache/submarine,4f685c051a8511e108738cb6a257df2cad662131,"SUBMARINE-575. [SDK] Set job_name to id in database

### What is this PR for?
In the submarine server, we set `experiment_1595332719154_0001` as id in the MySQL table.
We should also update the logging module in SDK

update include:
- Remove `job_name` in MySQL table, and set `experiment_1595332719154_0001` to id
- Automatically set worker_index when using `submarine.log_metirc` or `submarine.log_param`

### What type of PR is it?
[Refactoring]

### Todos
* [ ] - Task

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-575

### How should this be tested?
https://travis-ci.org/github/pingsutw/hadoop-submarine/builds/711362155

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Kevin Su <pingsutw@gmail.com>

Closes #356 from pingsutw/SUBMARINE-575 and squashes the following commits:

4a357ea [Kevin Su] Update get_worker_index()
f558c62 [Kevin Su] Refactor submarine core
dc81e00 [Kevin Su] auto add worker index
8b39fc7 [Kevin Su] update comment
1d26c77 [Kevin Su] Fix test failure
718ad38 [Kevin Su] Fix test failure
4143b79 [Kevin Su] Fix test failure
335768a [Kevin Su] SUBMARINE-575. [SDK] Set job_name to id in database",https://github.com/apache/submarine/commit/4f685c051a8511e108738cb6a257df2cad662131
2007,2007.0,2181.0,apache/submarine,5e8f0e90823b927ce0785e545bb83da0323d18ad,"SUBMARINE-566. [WEB] Create a new experiment through UI

### What is this PR for?
New experiment creation through UI.

### What type of PR is it
[Feature]

### Todos
* More user-feedback should be added later

### What is the Jira issue?
[SUBMARINE-566](https://issues.apache.org/jira/browse/SUBMARINE-566?filter=-1)

### How should this be tested?
https://travis-ci.com/github/wang0630/submarine/jobs/364539196

### Screenshots (if appropriate)
![first](https://user-images.githubusercontent.com/26138982/88267743-d9268e00-cd03-11ea-95d1-a07856c5c0eb.gif)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: wang0630 <j2081499@gmail.com>

Closes #354 from wang0630/SUBMARINE-566 and squashes the following commits:

f25a54b [wang0630] SUBMARINE-566. [WEB] Create a new experiment through UI
f94fa5b [wang0630] Before refactoring the e2e testing
dff392a [wang0630] Error handling finished
c64448b [wang0630] Fire the request succeed",https://github.com/apache/submarine/commit/5e8f0e90823b927ce0785e545bb83da0323d18ad
2008,2008.0,2182.0,apache/submarine,e580802d893ff2a3ebd53f022a13a727f60b3f03,"SUBMARINE-561. [SDK] Add PyTorch implementation of AFM model

### What is this PR for?
Add PyTorch implementation of Attentional Factorization Machine for CTR prediction. ([AFM](https://arxiv.org/pdf/1708.04617.pdf))
Make minor modifications to the PyTorch training flow.
Add testing for the AFM model.

### What type of PR is it?
[Improvement]

### Todos
* [ ] - Task

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-561

### How should this be tested?
[python-sdk](https://github.com/andrewhsiehth/submarine/actions/runs/169985131)
[Submarine](https://github.com/andrewhsiehth/submarine/actions/runs/169985125)

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Andrew Hsieh <andrewhsiehth@gmail.com>
Author: andrewhsiehth <andrewhsiehth@gmail.com>

Closes #346 from andrewhsiehth/SUBMARINE-561 and squashes the following commits:

0521639 [andrewhsiehth] rename afm && refactor example/pytorch folder
f98d59f [andrewhsiehth] mkdir for non-existing output directory
3057899 [andrewhsiehth] use pysubmarine-ci to auto-format
f89d070 [Andrew Hsieh] python3.6 yapf
d4d93c4 [Andrew Hsieh] try to make python3.5 happy
2929dfc [Andrew Hsieh] try to make codestyle checker happy v2
42d5091 [Andrew Hsieh] try to make codestyle checker happy
9ff2f8d [Andrew Hsieh] fix core, afm coding style
adae613 [Andrew Hsieh] fix tqdm
4facbce [Andrew Hsieh] fix conftest.py coding style
e4b3e50 [Andrew Hsieh] fix deepfm.py coding style
cb6be07 [Andrew Hsieh] fix ctr.__init__ coding style
2b4eecf [Andrew Hsieh] fix base_pytorch_model coding style
573a4e8 [Andrew Hsieh] fix fileio coding style
5d6dfc0 [Andrew Hsieh] add afm testing
827c785 [Andrew Hsieh] update conftest
b260042 [Andrew Hsieh] add afm example
a7da1c3 [Andrew Hsieh] add afm to ctr
ab7b4b7 [Andrew Hsieh] add afm
fa151e5 [Andrew Hsieh] fix deepfm
380358c [Andrew Hsieh] fix testing
3f80bc6 [Andrew Hsieh] fix fileio
7471408 [Andrew Hsieh] fix data input_fn and fileio
f57d732 [Andrew Hsieh] fix deepfm
fdcda05 [Andrew Hsieh] fix layers/core.py
ce535fc [Andrew Hsieh] fix optimizer zero_grad",https://github.com/apache/submarine/commit/e580802d893ff2a3ebd53f022a13a727f60b3f03
2009,2009.0,2183.0,apache/submarine,c9b9b32f8c320d1707acac342a20842d69644022,"SUBMARINE-507. Submarine Environment Management

### What is this PR for?
https://issues.apache.org/jira/browse/SUBMARINE-507

### What type of PR is it?
Improvement

### Todos
* [ ] - Task

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-507

### How should this be tested?
* First time? Setup Travis CI as described on https://submarine.apache.org/contribution/contributions.html#continuous-integration
* Strongly recommended: add automated unit tests for any new or changed behavior
* Outline any manual steps to test the PR here.

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? Yes/No
* Is there breaking changes for older versions? Yes/No
* Does this needs documentation? Yes/No

Author: Manikandan R <mani@caastle.com>

Closes #299 from manirajv06/SUBMARINE-507 and squashes the following commits:

c7bedbe [Manikandan R] Fixed CI failures
7826137 [Manikandan R] Fixed review comments and CI failures.
287161d [Manikandan R] Fixed review comments.
76b361c [Manikandan R] Fixed review comments. Most importantly, ensuring conda version falls between min and max version. Also, definition of environment: {} in Experiment spec has been changed. If ""image"" is available, set it as k8 container image. If ""name"" is available, fetch the environment details using name and use the details for K8 init container process.
98283c9 [Manikandan R] 1. Fixed review comments: 	a. Added EnvironmentId class to handle environmentId generation. Refactored ExperimentId class and introduced AbstractUniqueIdGenerator abstract class for both ExperimentId and EnvironmentId class. 	b. Refactored EnvironmentManager class to merge updateEnvironment and createEnvironment functionalities. 2. Added test cases for updateEnvironment flow. Used http patch api's by using appropriate version of artifacts. Made version changes for corresponding artifacts in pom.xml
6aa8fa0 [Manikandan R] Fixed review comments
25009e8 [Manikandan R] Merged anonymous/embedded environment with Named/Pre-defined environment in Single EnvironmentSpec class
f124b80 [Manikandan R] Persistence support for EnvironmentManager using Metastore (MySQL) database Refactored MyBatis related classes as part of creating SqlSession for Metastore database Rebased and resolved conflicts after merging ExperientAPI refactoring changes
895dda4 [Manikandan R] Modified environment related commands as part of K8 init containers Added EnvironmentManagerRestApiIT class for Integration Testing Added test case in JobManagerRestApiIT to ensure jobs use environment Pom dependency changes Fixed minor issues
72cdae8 [Manikandan R] Support for InMemory EnvironmentManager Developed Testcases for EnvironmentManagerRestApi based on InMemory EnvironmentManager Leveraged k8's Init containers to accomodate Environment details in k8's POC Spec Added Testcase in JobSpecParserTest to ensure k8's Init containers has expected Environment details
20a6859 [Manikandan R] SUBMARINE-507. WIP POC Patch. Patch has laid out the skeleton for early review to ensure changes are on the right direction",https://github.com/apache/submarine/commit/c9b9b32f8c320d1707acac342a20842d69644022
2010,2010.0,2184.0,apache/submarine,9de3847434bacda46385b8fd09320fa273fda070,"SUBMARINE-535. Update experiment service in workbench

### What is this PR for?
Because of SUBMARINE-499 refactors experiment spec, we should update the corresponding REST API in the experiment service.

### What type of PR is it?
[Refactoring]

### Todos
* [ ] - Task

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-535

### How should this be tested?
https://travis-ci.org/github/pingsutw/hadoop-submarine/builds/700304338

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: pingsutw <pingsutw@gmail.com>

Closes #322 from pingsutw/SUBMARINE-535 and squashes the following commits:

d84920b [pingsutw] SUBMARINE-535. Update experiment service in workbench",https://github.com/apache/submarine/commit/9de3847434bacda46385b8fd09320fa273fda070
2011,2011.0,2185.0,apache/submarine,4878dba1e2d73ff42f6bc2650342213ab3b04fc5,"SUBMARINE-499. Refactor job API to experiment API

### What is this PR for?
* Refactor the training job to experiment
* Redefined the experiment spec

### What type of PR is it?
Refactoring

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-499

### How should this be tested?

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? Yes/No
* Is there breaking changes for older versions? Yes/No
* Does this needs documentation? Yes/No

Author: Wanqiang Ji <jiwq@apache.org>

Closes #305 from jiwq/SUBMARINE-499 and squashes the following commits:

5d33955 [Wanqiang Ji] SUBMARINE-499. Refactor the job spec to experiment",https://github.com/apache/submarine/commit/4878dba1e2d73ff42f6bc2650342213ab3b04fc5
2012,2012.0,2186.0,apache/submarine,d8b1b38fcaa331cfb2aaf79b9d26012137046b92,"SUBMARINE-519. [WIP] refactor of submarine documentation

### What is this PR for?
A few sentences describing the overall goals of the pull request's commits.
First time? Check out the contributing guide - https://submarine.apache.org/contribution/contributions.html

### What type of PR is it?
[Documentation]

### Todos
* [ ] - Task

### What is the Jira issue?
* https://issues.apache.org/jira/projects/SUBMARINE/issues/SUBMARINE-519

### How should this be tested?
* First time? Setup Travis CI as described on https://submarine.apache.org/contribution/contributions.html#continuous-integration
* Strongly recommended: add automated unit tests for any new or changed behavior
* Outline any manual steps to test the PR here.

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? Yes

Author: Wangda Tan <wangda@apache.org>

Closes #303 from wangdatan/SUBMARINE-519 and squashes the following commits:

c4ca4d9 [Wangda Tan] changes ..
f268fba [Wangda Tan] Refactored structure of the doc, and removed deprecated features such as yarn service runtime
b275c4d [Wangda Tan] Update and rename README.md to user-guide.md
b571724 [Wangda Tan] Create development-guide.md
aafc786 [Wangda Tan] Update README.md for examples and roadmap.
f0e30d8 [Wangda Tan] Update Readme.md, WIP",https://github.com/apache/submarine/commit/d8b1b38fcaa331cfb2aaf79b9d26012137046b92
2013,2013.0,2187.0,apache/submarine,8c7a219683cc30fc12fe20ddf9fe7fed4748145b,"SUBMARINE-460. Enable interpreter module

### What is this PR for?
zeppelin released version 0.9-preview1, so we can enable the interpreter module for submarine.
We can test our own interpreter and `submarine-security/spark-security`,
When the `zeppelin-0.9` version is released, the zeppelin version number in the pom needs to be updated.

### What type of PR is it?
[Refactoring]

### Todos
* [ ] - Task

### What is the Jira issue?
* https://issues.apache.org/jira/browse/SUBMARINE-460

### How should this be tested?
* [CI Pass](https://travis-ci.org/github/liuxunorg/submarine/builds/695333876)

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Xun Liu <liuxun@apache.org>

Closes #306 from liuxunorg/SUBMARINE-460 and squashes the following commits:

175c0de [Xun Liu] SUBMARINE-460. Enable interpreter module",https://github.com/apache/submarine/commit/8c7a219683cc30fc12fe20ddf9fe7fed4748145b
2014,2014.0,2188.0,apache/submarine,bee4ac42f4c98a2c28f69e96e436206d1d822fcf,"SUBMARINE-485. [SDK] Add PyTorch implementation of DeepFM model

### What is this PR for?
Add PyTorch implementation of DeepFM model [DeepFM](https://arxiv.org/pdf/1703.04247.pdf).
Create subfolders for tensorflow and pytorch to separate and rearrange the code in pysubmarine.
Add testing for pytorch DeepFM.

### What type of PR is it?
[Improvement]

### Todos
* [ ] - Task

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-485

### How should this be tested?
https://github.com/andrewhsiehth/submarine/actions/runs/114998714

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Andrew Hsieh <andrewhsiehth@gmail.com>
Author: andrewhsiehth <39716613+andrewhsiehth@users.noreply.github.com>
Author: pingsutw <pingsutw@gmail.com>

Closes #300 from andrewhsiehth/SUBMARINE-485 and squashes the following commits:

2d2634e [Andrew Hsieh] Add LossKey and MetricKey
e861b76 [andrewhsiehth] Update base_pytorch_model.py
38a92bb [andrewhsiehth] Update run_deepfm.sh
6af6aed [andrewhsiehth] Update run_deepfm.sh
d3cd324 [andrewhsiehth] Update submarine-sdk/pysubmarine/submarine/ml/tensorflow/model/base_tf_model.py
5e990c4 [andrewhsiehth] Update submarine-sdk/pysubmarine/submarine/ml/tensorflow/model/base_tf_model.py
544cdb8 [andrewhsiehth] Update submarine-sdk/pysubmarine/example/pytorch/run_ctr.py
a0bc147 [pingsutw] Add license
60cc1a8 [pingsutw] Fix test failures
6586f20 [pingsutw] Fix test failures
7b83ba5 [pingsutw] Fix test failures
cf33a42 [Andrew Hsieh] Format code
4beb865 [Andrew Hsieh] Pytest
8bbaeed [Andrew Hsieh] Pytorch DeepFM test
9561be7 [Andrew Hsieh] Remove parser in BasePytorchModel
5524112 [Andrew Hsieh] Use OptimizerKey
bdf1cbd [Andrew Hsieh] Add License
54d357f [pingsutw] Refactor
d7bc074 [Andrew Hsieh] Add pytorch deepfm example
260c369 [Andrew Hsieh] Delete unnecessary files.
5f9468d [Andrew Hsieh] Add Pytorch Implementation of DeepFM model.",https://github.com/apache/submarine/commit/bee4ac42f4c98a2c28f69e96e436206d1d822fcf
2015,2015.0,2189.0,apache/submarine,b6aeed05f235b44aca33d094ae3476ccc2f4842d,"SUBMARINE-495. [WEB] Submarine experiment list/delete in workbench with Angular

### What is this PR for?
Implement list/delete experiment in workbench with Angular.
will start working on submit/edit, after submarine experiment spec is refactored.

### What type of PR is it?
[Improvement]

### Todos
* [ ] - Task

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-495

### How should this be tested?
https://travis-ci.org/github/pingsutw/hadoop-submarine/builds/685730718

### Screenshots (if appropriate)
![Untitled_-May-11_-2020-10_39-PM_1](https://user-images.githubusercontent.com/37936015/81586972-f4624c80-93e8-11ea-8a41-41e00cffe2a9.gif)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: pingsutw <pingsutw@gmail.com>

Closes #283 from pingsutw/SUBMARINE-495 and squashes the following commits:

90bde6f [pingsutw] SUBMARINE-495. [WEB] Submarine experiment list/delete in workbench with Angular",https://github.com/apache/submarine/commit/b6aeed05f235b44aca33d094ae3476ccc2f4842d
2016,2016.0,2190.0,apache/submarine,43fe75440aa1d595c1630220d7ce145ddf7efac4,"SUBMARINE-450. [SDK] Refactor ML model codebase

### What is this PR for?
refactor deepfm.py and fm.py

### What type of PR is it?
[Improvement]

### Todos
* [ ] - Task

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-450

### How should this be tested?
https://travis-ci.org/github/pingsutw/hadoop-submarine/builds/666228791
https://github.com/pingsutw/hadoop-submarine/actions/runs/62059056

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: pingsutw <pingsutw@gmail.com>

Closes #246 from pingsutw/SUBMARINE-450 and squashes the following commits:

ce57041 [pingsutw] SUBMARINE-450. [SDK] Refactor ML model codebase",https://github.com/apache/submarine/commit/43fe75440aa1d595c1630220d7ce145ddf7efac4
2017,2017.0,2191.0,apache/submarine,9f75f51205b69d5314bfbb1f1d546e8cbbd8f5c3,"SUBMARINE-448. Make Spark Security's RangerSparkPlugin static

### What is this PR for?

Now the RangerSparkPlugin is non-static and will be created and init times and times again, this should be an object, not a class in scala, to avoid high load policies decoding.

### What type of PR is it?
Refactoring
### Todos

### What is the Jira issue?

https://issues.apache.org/jira/browse/SUBMARINE-448

### How should this be tested?

existing tests

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Kent Yao <yaooqinn@hotmail.com>

Closes #242 from yaooqinn/SUBMARINE-448 and squashes the following commits:

9beaad5 [Kent Yao] SUBMARINE-448. Make RangerSparkPlugin static",https://github.com/apache/submarine/commit/9f75f51205b69d5314bfbb1f1d546e8cbbd8f5c3
2018,2018.0,2192.0,apache/submarine,8caf5d85f2ab33625eee36b0c85dfb8161ca30ac,"SUBMARINE-427. [SDK] Add Neural Factorization Machine model

### What is this PR for?
Add TensorFlow implementation of [Neural Factorization Machine](https://arxiv.org/pdf/1708.05027.pdf) model
There are some common tf layer in ctr model, put common layer to core.py
make code concise and development flexible

(will refactor deepfm and fm in next Jira ticket)

### What type of PR is it?
[Improvement]

### Todos
* [ ] - Task

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-427

### How should this be tested?
https://github.com/pingsutw/hadoop-submarine/actions/runs/58067991
https://travis-ci.org/github/pingsutw/hadoop-submarine/builds/663851273

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: pingsutw <pingsutw@gmail.com>

Closes #238 from pingsutw/SUBMARINE-427 and squashes the following commits:

5de38c4 [pingsutw] SUBMARINE-427. [SDK] Add Neural Factorization Machine model",https://github.com/apache/submarine/commit/8caf5d85f2ab33625eee36b0c85dfb8161ca30ac
2019,2019.0,2193.0,apache/submarine,58b0f6d5df423683682832b7bab9590dff9e7664,"SUBMARINE-438. Add documentation for spark security

### What is this PR for?

Add documentation for spark security plugin

### What type of PR is it?
[Bug Fix | Improvement | Feature | Documentation | Hot Fix | Refactoring]
doc
### Todos
* [ ] - Task

### What is the Jira issue?
* Open an issue on Jira https://issues.apache.org/jira/browse/SUBMARINE-438
* Put link here, and add [SUBMARINE-*Jira number*] in PR title, eg. [SUBMARINE-23]

### How should this be tested?
* First time? Setup Travis CI as described on https://submarine.apache.org/contribution/contributions.html#continuous-integration
* Strongly recommended: add automated unit tests for any new or changed behavior
* Outline any manual steps to test the PR here.
no code based change
### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? Yes

Author: Kent Yao <yaooqinn@hotmail.com>

Closes #235 from yaooqinn/SUBMARINE-438 and squashes the following commits:

fef0ab9 [Kent Yao] SUBMARINE-438. Add documentation for spark security",https://github.com/apache/submarine/commit/58b0f6d5df423683682832b7bab9590dff9e7664
2020,2020.0,2194.0,apache/submarine,40cd08109cadf50e34f8cb862a21dd7699ce9c73,"SUBMARINE-434. Refine data masking plan resolution for spark security

### What is this PR for?
Refine data masking plan resolution for spark security

Now we use parseExpression to generate alias for masked out, it is neater.

### What type of PR is it?

Refactoring

### Todos
* [ ] - Task

### What is the Jira issue?
* Open an issue on Jira https://issues.apache.org/jira/browse/SUBMARINE-434

### How should this be tested?
add tests

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Kent Yao <yaooqinn@hotmail.com>

Closes #233 from yaooqinn/SUBMARINE-434 and squashes the following commits:

a4cc16b [Kent Yao] SUBMARINE-434. Refine data masking plan resolution for spark security",https://github.com/apache/submarine/commit/40cd08109cadf50e34f8cb862a21dd7699ce9c73
2021,2021.0,2195.0,apache/submarine,687ca6203173a7b7dc92b2bc4427c6b87a3dfec3,"SUBMARINE-78. Make RemoteDirectoryManager interface more consistent

### What is this PR for?

RemoteDirectoryManager contains many methods that receive a URI.
The types are sometimes Strings, sometimes Path.
We need to make this more consistent.

### What type of PR is it?
[Improvement | Refactoring]

### What is the Jira issue?

https://issues.apache.org/jira/browse/SUBMARINE-78

### How should this be tested?

https://travis-ci.com/cchung100m/submarine/builds/152425410

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: cchung100m <cchung100m@cs.ccu.edu.tw>

Closes #214 from cchung100m/SUBMARINE-78 and squashes the following commits:

cafcb12 [cchung100m] Align parameter name
998d257 [cchung100m] Make RemoteDirectoryManager interface more consistent",https://github.com/apache/submarine/commit/687ca6203173a7b7dc92b2bc4427c6b87a3dfec3
2022,2022.0,2196.0,apache/submarine,d825f181b583631244978931314f2dabfcfbba0d,"SUBMARINE-410. Supplement submarine artifactId in pom.xml

### What is this PR for?
At present, the artifactId of some submarine modules does not contain submarine, resulting in the compiled jar file without the submarine prefix.

### What type of PR is it?
[Bug Fix | Improvement | Refactoring]

### Todos
* [ ] - Task

### What is the Jira issue?
* https://issues.apache.org/jira/browse/SUBMARINE-410

### How should this be tested?
* https://travis-ci.org/liuxunorg/submarine

### Screenshots (if appropriate)
```
find ./lib -name ""*0.4.0*.jar""
./lib/submarine-commons-metastore-0.4.0-SNAPSHOT-shade.jar
./lib/submarine-server-rpc-0.4.0-SNAPSHOT.jar
./lib/submarine-commons-cluster-0.4.0-SNAPSHOT-shade.jar
./lib/submarine-commons-rpc-0.4.0-SNAPSHOT.jar
./lib/submarine-server-api-0.4.0-SNAPSHOT.jar
./lib/submarine-submitter-yarn-0.4.0-SNAPSHOT.jar
./lib/submarine-commons-utils-0.4.0-SNAPSHOT.jar
./lib/submarine-commons-runtime-0.4.0-SNAPSHOT.jar
./lib/submarine-server-core-0.4.0-SNAPSHOT.jar
./lib/submitter/k8s/submarine-server-api-0.4.0-SNAPSHOT.jar
./lib/submitter/k8s/submarine-commons-utils-0.4.0-SNAPSHOT.jar
./lib/submitter/k8s/submarine-submitter-k8s-0.4.0-SNAPSHOT.jar
./lib/submitter/yarn/submarine-submitter-yarn-0.4.0-SNAPSHOT-shade.jar
./lib/submarine-client-0.4.0-SNAPSHOT.jar
```

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Xun Liu <liuxun@apache.org>

Closes #209 from liuxunorg/SUBMARINE-410 and squashes the following commits:

aa560b4 [Xun Liu] SUBMARINE-410. Supplement submarine artifactId in pom.xml",https://github.com/apache/submarine/commit/d825f181b583631244978931314f2dabfcfbba0d
2023,2023.0,2197.0,apache/submarine,33a165950b7cff23fb1be69674011136a99fc98e,"SUBMARINE-406. optimize travis

### What is this PR for?
1. Test cases are not fully covered in travis, and there is a problem of repeated tests. So we need to optimize and refactor travis test cases.
2. Remove duplicate testing tasks in travis.
3. Reduced test task time in travis.

### What type of PR is it?
[Improvement | Refactoring]

### What is the Jira issue?
* https://issues.apache.org/jira/browse/SUBMARINE-406

### How should this be tested?
* https://travis-ci.org/liuxunorg/submarine/builds/659562164

### Screenshots (if appropriate)
![image](https://user-images.githubusercontent.com/3677382/76154902-1c021380-611f-11ea-8298-7880a3cda7bb.png)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Xun Liu <liuxun@apache.org>

Closes #207 from liuxunorg/SUBMARINE-406 and squashes the following commits:

fba7d8c [Xun Liu] SUBMARINE-406. optimize travis",https://github.com/apache/submarine/commit/33a165950b7cff23fb1be69674011136a99fc98e
2024,2024.0,2198.0,apache/submarine,6988a50894c1f7eba65a5ace6a4bd55ad2e8ca4f,"SUBMARINE-407. Change module name e2e to test-e2e

### What is this PR for?
In order to unify the module naming, the e2e module needs to be renamed test-e2e

### What type of PR is it?
Refactoring

### Todos
* [ ] - Task

### What is the Jira issue?
* https://issues.apache.org/jira/browse/SUBMARINE-407

### How should this be tested?
* https://travis-ci.org/liuxunorg/submarine/builds/659422038
### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? Yes

Author: Xun Liu <liuxun@apache.org>

Closes #205 from liuxunorg/SUBMARINE-407 and squashes the following commits:

6eb67f3 [Xun Liu] SUBMARINE-407. Change module name e2e to test-e2e",https://github.com/apache/submarine/commit/6988a50894c1f7eba65a5ace6a4bd55ad2e8ca4f
2025,2025.0,2199.0,apache/submarine,66c063060aae036338d57aa8f6eafbb4c03ed591,"SUBMARINE-381. Temporarily disable interpreter module

### What is this PR for?
1. Temporarily disable the interpreter module
submarine currently depends the zeppelin-0.9.0-SNAPSHORT version of the interpreter,
Perform python syntax execution.
As zeppelin is ready to officially release version 0.9, the zeppelin-0.9.0-SNAPSHORT version of the interpreter has been removed from the apache mvn repo.
Therefore, the submarine needs to temporarily block the submarine-interpreter. Otherwise, in travis, it will fail because it cannot download the zeppelin-0.9.0-SNAPSHORT interpreter.
After zeppelin 0.9 is released, it will be reintroduced.

2. Fixed travis failure problem

### What type of PR is it?
[Refactoring]

### Todos
* [ ] - Task

### What is the Jira issue?
* https://issues.apache.org/jira/browse/SUBMARINE-381

### How should this be tested?
* https://travis-ci.org/liuxunorg/submarine/builds/648053292

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Xun Liu <liuxun@apache.org>

Closes #176 from liuxunorg/SUBMARINE-381 and squashes the following commits:

1989286 [Xun Liu] 1
dd460ce [Xun Liu] SUBAMRINE-381. Temporarily disable the interpreter module",https://github.com/apache/submarine/commit/66c063060aae036338d57aa8f6eafbb4c03ed591
2026,2026.0,2200.0,apache/submarine,7dba2360d8c3e9a005f1b31666801c5bf9b8d34b,"SUBMARINE-373. Upgrade cluster module dependent library

### What is this PR for?
The atomix raft library used by the submarine cluster module is version 3.0,
Need to know the list of all servers ip in the cluster to create a cluster.

In the k8s environment, since the IP of the POD is not fixed, we need to upgrade to the atomix-3.1.0 + version and create a cluster through broadcast discovery.

### What type of PR is it?
[Refactoring]

### Todos
* [ ] - Create a cluster through broadcast discovery.

### What is the Jira issue?
* https://issues.apache.org/jira/browse/SUBMARINE-373

### How should this be tested?
* https://travis-ci.org/liuxunorg/submarine/builds/645828692

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Xun Liu <liuxun@apache.org>

Closes #172 from liuxunorg/SUBMARINE-373 and squashes the following commits:

55addda [Xun Liu] relocation
43c3667 [Xun Liu] fixed exclude netty problem
197c86f [Xun Liu] SUBMARINE-373. Upgrade cluster module dependent library version",https://github.com/apache/submarine/commit/7dba2360d8c3e9a005f1b31666801c5bf9b8d34b
2027,2027.0,2201.0,apache/submarine,e8d6727b9a00f3c8a157a935e7cf5dde465814e0,"SUBMARINE-338. Enable integration tests in travis.

### What is this PR for?
There are some issues in current integration tests.

1. Submarine server has used angular frontend already by default. The integration tests are supposed to adjust according to this change.
2. To run integration tests, we need to install firefox browser and start submarine server in advance.
3. To run integration tests, we need to use the command of ""mvn verify"" instead of ""mvn test"".

### What type of PR is it?
Improvement

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-338

### How should this be tested?
https://travis-ci.org/yuanzac/hadoop-submarine/builds/635242563?utm_source=github_status&utm_medium=notification

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Zac Zhou <zhouquan@apache.org>

Closes #146 from yuanzac/topic/SUBMARINE-338 and squashes the following commits:

2696e75 [Zac Zhou] SUBMARINE-338. Refactor e2e code.
870e724 [Zac Zhou] SUBMARINE-338. Enable integration tests in travis.",https://github.com/apache/submarine/commit/e8d6727b9a00f3c8a157a935e7cf5dde465814e0
2028,2028.0,2202.0,apache/submarine,c864c4dd208c3f4b37afe1962a9883026326d3ea,"[Submarine-339] Separate SubmarineConfVars from SubmarineConfiguration

### What is this PR for?
SubmarineConfiguration becomes larger and larger. Hence, to facilitate the management of configuration items, I separate the class SubmarineConfVars from the class SubmarineConfiguration.

### What type of PR is it?
[Refactoring]

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-339

### How should this be tested?
It will be tested by Travis.

### Screenshots (if appropriate)
https://travis-ci.org/apache/submarine/builds/636675316?utm_source=github_status&utm_medium=notification

### Questions:
* Does the licenses files need to be updated? No
* Are there breaking changes for older versions? No
* Does this needs documentation? No

Author: kevin85421 <b03901153@ntu.edu.tw>

Closes #151 from kevin85421/SUBMARINE-339 and squashes the following commits:

885d409 [kevin85421] [SUBMARINE-339] Separate SubmarineConfVars from SubmarineConfiguration
e37765d [kevin85421] [SUBMARINE-339] Separate SubmarineConfVars from SubmarineConfiguration
7306645 [kevin85421] [SUBMARINE-339] Separate SubmarineConfVars from SubmarineConfiguration",https://github.com/apache/submarine/commit/c864c4dd208c3f4b37afe1962a9883026326d3ea
2029,2029.0,2203.0,apache/submarine,61340cda4b05071a44896116f08ee7cf0938b8df,"SUBMARINE-340. Add submarine database dockerfile

### What is this PR for?
In order to enable submarine to support deployment in k8s,
We need to enable each service of submarine to be deployed independently.
The problem that jira solves is the ability to install the submarine table structure and initialization data into mysql.
Allows users to run submarine's database service with only one command.
like.,
```
docker run -it -p 3306:3306 -d --name s1 -e MYSQL_ROOT_PASSWORD=password apache/submarine:database-0.3.0-SNAPSHOT
```

### What type of PR is it?
[Refactoring]

### Todos
* [ ] - Task

### What is the Jira issue?
* https://issues.apache.org/jira/browse/SUBMARINE-340

### How should this be tested?
* https://travis-ci.org/liuxunorg/submarine/builds/635299028

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? Yes

Author: Xun Liu <liuxun@apache.org>

Closes #147 from liuxunorg/SUBMARINE-340 and squashes the following commits:

fd1c1a5 [Xun Liu] Fixed version error.
b39a156 [Xun Liu] SUBMARINE-340. Add submarine database dockerfile",https://github.com/apache/submarine/commit/61340cda4b05071a44896116f08ee7cf0938b8df
2030,2030.0,2204.0,apache/submarine,bdaf829db77f390f58b5824714acacf3b36d18d8,"SUBMARINE-68. Add tests to FileSystemOperations class

### What is this PR for?
Adding tests to `FileSystemOperations` class and also performed some minor refactor in the test infrastructure.

### What type of PR is it?
Refactoring

### Todos
* [ ] - new UTs should pass

### What is the Jira issue?
[SUBMARINE-68](https://issues.apache.org/jira/browse/SUBMARINE-68)

### How should this be tested?
* Only the new UTs should pass.

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Adam Antal <adam.antal@cloudera.com>

Closes #111 from adamantal/SUBMARINE-68 and squashes the following commits:

7ac717c [Adam Antal] Fix checkstyle error.
33a43ca [Adam Antal] SUBMARINE-68. Add tests to FileSystemOperations class",https://github.com/apache/submarine/commit/bdaf829db77f390f58b5824714acacf3b36d18d8
2031,2031.0,2205.0,apache/submarine,9d753323d3944d0160fa86eb464b87affbfd52dd,"SUBMARINE-305. Rename test classes in submitter-yarnservice to conform Code style

### What is this PR for?
Renaming test classes in submitter-yarnservice submodule to conform code style.

### What type of PR is it?
Refactoring

### Todos
* [ ] - The unit tests should pass as before the patch.

### What is the Jira issue?
* [SUBMARINE-305](SUBMARINE-305)

### How should this be tested?
* No further testing is needed besides Travis.

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Adam Antal <adam.antal@cloudera.com>

Closes #113 from adamantal/SUBMARINE-305 and squashes the following commits:

112c99f [Adam Antal] SUBMARINE-305. Rename test classes in submitter-yarnservice to conform Code style",https://github.com/apache/submarine/commit/9d753323d3944d0160fa86eb464b87affbfd52dd
2032,2032.0,2206.0,apache/submarine,510bfefe2e841117c52376e450cfcf3774b9c9b6,"SUBMARINE-60. Remove stubServiceClient from YarnServiceUtils

### What is this PR for?
Remove stubServiceClient from YarnServiceUtils and introduce a Factory based injecting solution. (See jira for further details)

### What type of PR is it?
Refactoring

### Todos
* [ ] - Check whether the refactored test passes.

### What is the Jira issue?
* https://issues.apache.org/jira/browse/SUBMARINE-60

### How should this be tested?
* No need for integration testing, just the UTs.

### Screenshots (if appropriate)
-

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Adam Antal <adam.antal@cloudera.com>

Closes #96 from adamantal/SUBMARINE-60 and squashes the following commits:

adb6e62 [Adam Antal] SUBMARINE-60. Remove stubServiceClient from YarnServiceUtils",https://github.com/apache/submarine/commit/510bfefe2e841117c52376e450cfcf3774b9c9b6
2033,2033.0,2207.0,apache/submarine,1b45252ff1a6f294686e2132c0b05122c6691b88,"SUBMARINE-298. Use yarn registry replace taobao registry

### What is this PR for?
Travis build workbench-web failed caused by cnpm(taobao npm) registry, replace to yarn registry

### What type of PR is it?
Refactoring

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-298ml

### How should this be tested?
https://travis-ci.org/lleohao/hadoop-submarine/builds/616295837

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: lleohao <lleohao@hotmail.com>

Closes #102 from lleohao/SUBMARINE-298 and squashes the following commits:

2ffb772 [lleohao] [SUBMARINE-298] refactor: use yarn registry replace taobao registry",https://github.com/apache/submarine/commit/1b45252ff1a6f294686e2132c0b05122c6691b88
2034,2034.0,2208.0,apache/submarine,4374f2034ed0dadb7755a942eec522fc322cf569,"SUBMARINE-293. Refactoring submarine server rest test framework

### What is this PR for?
Provides a way to actually run the submarin server REST service and test the rest interface in the test case.
This provides a realistic runtime environment to test whether each REST interface is working correctly.

### What type of PR is it?
[Refactoring]

### What is the Jira issue?
* https://issues.apache.org/jira/browse/SUBMARINE-293

### How should this be tested?
* [CI Pass](https://travis-ci.org/liuxunorg/submarine/builds/615024635)

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Xun Liu <liuxun@apache.org>

Closes #98 from liuxunorg/SUBMARINE-293 and squashes the following commits:

399be2b [Xun Liu] Change to GitHttpRequest
fc10476 [Xun Liu] SUBMARINE-293. Refactoring submarine server rest test framework",https://github.com/apache/submarine/commit/4374f2034ed0dadb7755a942eec522fc322cf569
2035,2035.0,2209.0,apache/submarine,0030a1b71ca600e64df8eea746eb259e65151a01,"SUBMARINE-294. Unified submarine jar package name prefix

### What is this PR for?
1. Now many submarine modules, the generated jar package, is not submarine as the prefix of the package name, it is not easy to distinguish when packaged and released.
So you need to use submarine as a prefix for the package name.
2. Refactoring submarine-dist module

### What type of PR is it?
Refactoring

### Todos
* [ ] - Task

### What is the Jira issue?
* https://issues.apache.org/jira/browse/SUBMARINE-294

### How should this be tested?
* [](https://travis-ci.org/liuxunorg/submarine)

### Screenshots (if appropriate)
```
|____bin
| |____common.sh
| |____submarine-daemon.sh
| |____submarine-env.sh
| |____webapps
|____conf
| |____log4j.properties
| |____log4j.properties.template
| |____submarine-env.sh.template
| |____submarine-site.xml
| |____submarine-site.xml.template
|____lib
| |____interpreter
| | |____python
| | | |____submarine-python-interpreter-0.3.0-SNAPSHOT-shade.jar
| | |____spark
| | | |____scala-2.11
| | | | |____spark-scala-2.11-0.9.0-SNAPSHOT.jar
| | | |____submarine-spark-interpreter-0.3.0-SNAPSHOT-shade.jar
| |____j2objc-annotations-1.1.jar
| |____submarine-client-0.3.0-SNAPSHOT.jar
| |____submarine-commons-cluster-0.3.0-SNAPSHOT.jar
| |____submarine-commons-runtime-0.3.0-SNAPSHOT.jar
| |____submarine-commons-utils-0.3.0-SNAPSHOT.jar
| |____submarine-server-core-0.3.0-SNAPSHOT.jar
| |____submitter
| | |____submarine-submitter-k8s-0.3.0-SNAPSHOT.jar
| | |____submarine-submitter-yarn-0.3.0-SNAPSHOT.jar
| | |____tony-core-0.3.21.jar
| |____validation-api-1.1.0.Final.jar
| |____websocket-servlet-9.4.18.v20190429.jar
|____LICENSE
|____licenses
| |____LICENSE-asm.txt
| |____LICENSE-slf4j.txt
| |____LICENSE-tony.txt
|____NOTICE
|____submarine-all-0.3.0-SNAPSHOT-hadoop-2.9.jar
|____workbench-web.war
```

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Xun Liu <liuxun@apache.org>

Closes #94 from liuxunorg/SUBMARINE-294 and squashes the following commits:

2175784 [Xun Liu] SUBMARINE-294. Unified package named submarine",https://github.com/apache/submarine/commit/0030a1b71ca600e64df8eea746eb259e65151a01
2036,2036.0,2210.0,apache/submarine,51192a8f50d99249fdf3847b8f766e2effa0dcc7,"SUBMARINE-292. Merge workbench server into submarine server

### What is this PR for?
Now submarine has 2 services, submarine server and workbench server. These two services have no conflicts.
Originally divided into two services, it is for the development of sub-modules, easy to develop.
But this way
1. Users need to maintain two service processes, which increases the cost of use and maintenance of users and administrators.
2. Because we need to be able to run the service on multiple resource scheduling systems(YARN/K8s/Docker), the two services create the complexity of the launcher module.
So, now the service in the workbench server is migrated to the submarine server. But the code for the workbench server remains the same.

### What type of PR is it?
Refactoring

### Todos
* [ ] [SUBMARINE-293](https://issues.apache.org/jira/browse/SUBMARINE-293) - Add submarine server rest test case

### What is the Jira issue?
* https://issues.apache.org/jira/browse/SUBMARINE-292

### How should this be tested?
* [CI Pass](https://travis-ci.org/liuxunorg/submarine/builds/613280558)

### Screenshots (if appropriate)
```
|____bin
| |____common.sh
| |____submarine-daemon.sh
| |____submarine-env.sh
|____commons-runtime-0.3.0-SNAPSHOT.jar
|____conf
| |____log4j.properties
| |____log4j.properties.template
| |____submarine-env.sh.template
| |____submarine-site.xml
| |____submarine-site.xml.template
|____lib
| |____bcpg-jdk15on-1.61.jar
| |____bcpkix-jdk15on-1.61.jar
| |____hk2-utils-2.5.0-b42.jar
| |____interpreter
| | |____python
| | | |____python-interpreter-0.3.0-SNAPSHOT-shade.jar
| | |____spark
| | | |____scala-2.11
| | | | |____spark-scala-2.11-0.9.0-SNAPSHOT.jar
| | | |____spark-interpreter-0.3.0-SNAPSHOT-shade.jar
| |____j2objc-annotations-1.1.jar
| |____jackson-annotations-2.9.10.jar
| |____websocket-server-9.4.18.v20190429.jar
| |____workbench
| | |____workbench-web.war
|____LICENSE
|____licenses
| |____LICENSE-asm.txt
| |____LICENSE-hamcrest.txt
| |____LICENSE-slf4j.txt
| |____LICENSE-tony.txt
|____logs
| |____submarine.log
|____NOTICE
|____server
|____submarine-all-0.3.0-SNAPSHOT-hadoop-2.9.jar
|____submarine-client-0.3.0-SNAPSHOT.jar
|____submitter-yarn-0.3.0-SNAPSHOT.jar
|____tony-core-0.3.21.jar
```

### Questions:
* Does the licenses files need update? Yes/No
* Is there breaking changes for older versions? Yes/No
* Does this needs documentation? Yes/No

Author: Xun Liu <liuxun@apache.org>

Closes #93 from liuxunorg/SUBMARINE-292 and squashes the following commits:

aa5508b [Xun Liu] Fixed some issue.
47f30da [Xun Liu] SUBMARINE-292. Merge workbench server into submarine server",https://github.com/apache/submarine/commit/51192a8f50d99249fdf3847b8f766e2effa0dcc7
2037,2037.0,2211.0,apache/submarine,aae0380151f79c7e93f8a05ab1b979d3c4c5ef9b,"SUBMARINE-66. Improve TF config env JSON generator + tests

### What is this PR for?
* The goal is to update the TensorFlow config generation. Also some of the tests were doing some manual JSON thing which is not very maintainable - it is also changed to a more flexible one using jackson-databind

### What type of PR is it?
* Refactoring | Test

### Todos
* [x] - Travis checks
* [x] - New tests should pass

### What is the Jira issue?
* [SUBMARINE-66](https://issues.apache.org/jira/browse/SUBMARINE-66)

### How should this be tested?
* Only the new UTs should pass.

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? Yes
  * We should probably add jackson-module-jaxb-annotations?
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Adam Antal <adam.antal@cloudera.com>

Closes #91 from adamantal/SUBMARINE-66 and squashes the following commits:

268e7e4 [Adam Antal] Renaming setUp to setup in TensorFlowConfigEnvGeneratorTest
ed3b220 [Adam Antal] SUBMARINE-66. Improve TF config env JSON generator + tests",https://github.com/apache/submarine/commit/aae0380151f79c7e93f8a05ab1b979d3c4c5ef9b
2038,2038.0,2212.0,apache/submarine,d2045ce9e484c51da270f57b1bf7fc98c187c522,"SUBMARINE-67. Add tests to Localizer class

### What is this PR for?
The goal is to add tests for the Localizer class. Also the class itself has been refactored a bit (methods from `handleLocalizations` have been decoupled).

### What type of PR is it?
Refactoring | Test

### Todos
No TODOs.

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-67

### How should this be tested?
* No integration tests is needed.
* The new unit tests should pass.

### Screenshots (if appropriate)
Not needed.

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Adam Antal <adam.antal@cloudera.com>

Closes #64 from adamantal/SUBMARINE-67 and squashes the following commits:

f07b599 [Adam Antal] SUBMARINE-67. Add tests to Localizer class",https://github.com/apache/submarine/commit/d2045ce9e484c51da270f57b1bf7fc98c187c522
2039,2039.0,2213.0,apache/submarine,595e0e4f7d3097acf2917e01abd227d241334923,"Bump nimbus-jose-jwt from 4.41.1 to 7.9

Bumps [nimbus-jose-jwt](https://bitbucket.org/connect2id/nimbus-jose-jwt) from 4.41.1 to 7.9.
<details>
<summary>Changelog</summary>

*Sourced from [nimbus-jose-jwt's changelog](https://bitbucket.org/connect2id/nimbus-jose-jwt/src/master/CHANGELOG.txt).*

> version 1.0 (2012-03-01)
> 	* First version based on the OpenInfoCard JWT, JWS and JWE code base.
>
> version 1.1 (2012-03-06)
> 	* Introduces type-safe enumeration of the JSON Web Algorithms (JWA).
> 	* Refactors the JWT class.
>
> version 1.2 (2012-03-08)
> 	* Moves JWS and JWE code into separate classes.
>
> version 1.3 (2012-03-09)
> 	* Switches to Apache Commons Codec for Base64URL encoding and decoding
> 	* Consolidates the crypto utilities within the package.
> 	* Introduces a JWT content serialiser class.
>
> version 1.4 (2012-03-09)
> 	* Refactoring of JWT class and JUnit tests.
>
> version 1.5 (2012-03-18)
> 	* Switches to JSON Smart for JSON serialisation and parsing.
> 	* Introduces claims set class with JSON objects, string, Base64URL and
> 	  byte array views.
>
> version 1.6 (2012-03-20)
> 	* Creates class for representing, serialising and parsing JSON Web Keys
> 	  (JWK).
> 	* Introduces separate class for representing JWT headers.
>
> version 1.7 (2012-04-01)
> 	* Introduces separate classes for plain, JWS and JWE headers.
> 	* Introduces separate classes for plain, signed and encrypted JWTs.
> 	* Removes the JWTContent class.
> 	* Removes password-based (PE820) encryption support.
>
> version 1.8 (2012-04-03)
> 	* Adds support for the ZIP JWE header parameter.
> 	* Removes unsupported algorithms from the JWA enumeration.
>
> version 1.9 (2012-04-03)
> 	* Renames JWEHeader.{get|set}EncryptionAlgorithm() to
> 	  JWEHeader.{get|set}EncryptionMethod().
>
> version 1.9.1 (2012-04-03)
> 	* Upgrades JSON Smart JAR to 1.1.1.
>
> version 1.10 (2012-04-14)
> 	* Introduces serialize() method to base abstract JWT class.
>
> version 1.11 (2012-05-13)
> 	* JWT.serialize() throws checked JWTException instead of
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`10dce4f`](https://bitbucket.org/connect2id/nimbus-jose-jwt/commits/10dce4f52d13f515ed20d48b94447d00b6b8fd6f) b64 works with JWTClaimsSet
- [`40b1fcf`](https://bitbucket.org/connect2id/nimbus-jose-jwt/commits/40b1fcfe368c6eb0eabd3ed61ba8e102e2a00d9c) Adds new static X509CertUtils.parseWithException methods
- [`805fce1`](https://bitbucket.org/connect2id/nimbus-jose-jwt/commits/805fce19a78544524a316c7bbb6568e25b41b9f3) [maven-release-plugin] prepare release 7.6
- [`1a72c5f`](https://bitbucket.org/connect2id/nimbus-jose-jwt/commits/1a72c5fa8d2f0c44d39f7ad9d2418e6c7f3e5efa) [maven-release-plugin] prepare for next development iteration
- [`af733f9`](https://bitbucket.org/connect2id/nimbus-jose-jwt/commits/af733f963cc1e98949604c6776d22ccfd2cd66b7) Changes JWSObject#serialize(boolean) method signature (iss [#320](https://bitbucket.org/connect2id/nimbus-jose-jwt/issues/320))
- [`d752e17`](https://bitbucket.org/connect2id/nimbus-jose-jwt/commits/d752e177482d0bf3c42325731c3588dfe5958c03) Merge branch 'fixB64'
- [`3fa65f3`](https://bitbucket.org/connect2id/nimbus-jose-jwt/commits/3fa65f3e2c51d8158b0f63b789d031db0ebc7a9b) Change log for 7.7
- [`1abe7c2`](https://bitbucket.org/connect2id/nimbus-jose-jwt/commits/1abe7c2ac5addbbefb5b3a061ff7e9c6df40ffa1) [maven-release-plugin] prepare release 7.7
- [`dd19a71`](https://bitbucket.org/connect2id/nimbus-jose-jwt/commits/dd19a712b2b8c0f7c64cb6678cbf96f97d81553e) [maven-release-plugin] prepare for next development iteration
- [`7f4dbc0`](https://bitbucket.org/connect2id/nimbus-jose-jwt/commits/7f4dbc02f30147806cda74fea5127346c2704523) Issue [#325](https://bitbucket.org/connect2id/nimbus-jose-jwt/issues/325) Enhancement: Add an optional proxy support to the DefaultResourceR...
- Additional commits viewable in [compare view](https://bitbucket.org/connect2id/nimbus-jose-jwt/branches/compare/7.9..4.41.1)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=com.nimbusds:nimbus-jose-jwt&package-manager=maven&previous-version=4.41.1&new-version=7.9)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `dependabot rebase` will rebase this PR
- `dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `dependabot merge` will merge this PR after your CI passes on it
- `dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `dependabot cancel merge` will cancel a previously requested merge and block automerging
- `dependabot reopen` will reopen this PR if it is closed
- `dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/apache/submarine/network/alerts).

</details>

Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

Closes #71 from dependabot[bot]/dependabot/maven/com.nimbusds-nimbus-jose-jwt-7.9 and squashes the following commits:

0e6cd9f [dependabot[bot]] Bump nimbus-jose-jwt from 4.41.1 to 7.9",https://github.com/apache/submarine/commit/595e0e4f7d3097acf2917e01abd227d241334923
2040,2040.0,2214.0,apache/submarine,b12ca6780bc57d96abcdad38b01cce0a591a4b78,"SUBMARINE-264. Delete unused libthrift dependency

### What is this PR for?
The libthrift library is now included in the project, but it is not used.
Submarine will use the gRPC framework to communicate later.
and delete unused libthrift dependency.

### What type of PR is it?
[Refactoring]

### What is the Jira issue?
* https://issues.apache.org/jira/browse/SUBMARINE-264

### How should this be tested?
* [CI pass](https://travis-ci.org/liuxunorg/hadoop-submarine/builds/603954727)

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions?  No
* Does this needs documentation? No

Author: Xun Liu <liuxun@apache.org>

Closes #67 from liuxunorg/SUBMARINE-264 and squashes the following commits:

44f1c5b [Xun Liu] SUBMARINE-264. Delete unused libthrift dependency",https://github.com/apache/submarine/commit/b12ca6780bc57d96abcdad38b01cce0a591a4b78
2041,2041.0,2215.0,apache/submarine,ebad135c1e44bc75f76c41fbaaeece87ed65d144,"SUBMARINE-255. [PoC] Rename the submitter package name

### What is this PR for?
1. rename the package `org.apache.submarine.runtime.tony` to `org.apache.submarine.server.submitter.yarn`
2. rename the package `org.apache.submarine.runtime.yarnservice` to `org.apache.submarine.server.submitter.yarnservice`
3. update the conf in mini-submarine
4. update the mini-submarine's doc

### What type of PR is it?
[Refactoring]

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-255

### How should this be tested?
https://travis-ci.org/jiwq/hadoop-submarine/builds/601290863

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Wanqiang Ji <wanqiang.ji@gmail.com>

Closes #57 from jiwq/SUBMARINE-255 and squashes the following commits:

c67db3c [Wanqiang Ji] SUBMARINE-255. [PoC] Rename the submitter package name",https://github.com/apache/submarine/commit/ebad135c1e44bc75f76c41fbaaeece87ed65d144
2042,2042.0,2216.0,apache/submarine,15c18b004aab4376107d3830b85f969c91d25ef9,"SUBMARINE-241. Workbench web ng

### What is this PR for?
Develop Web Framework with Angular and Ng-zero
Init project and add user module ( login and regisiter )

### What type of PR is it?
[Feature]

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-241

### How should this be tested?
No test

### Screenshots (if appropriate)
![image](https://user-images.githubusercontent.com/12764126/67159475-c0a1d580-f377-11e9-865e-d934a6bf9be3.png)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: lleohao <lleohao@hotmail.com>

Closes #58 from lleohao/workbench-web-ng and squashes the following commits:

52b819a [lleohao] [SUBMARINE-241] refactor: translate to english
7b6c726 [lleohao] [SUBMARINE-241] fix: fix package error
c529061 [lleohao] [SUBMARINE-241] feat: LocalStorageService add error log
bda54d7 [lleohao] [SUBMARINE-241] refactor: change register title
b5228a8 [lleohao] [SUBMARINE-241] refactor: translate to english
884c46e [lleohao] [SUBMARINE-241] refactor: remove unused pom config
0cb5548 [lleohao] [SUBMARINE-241] refactor: update copyright
db779a4 [lleohao] SUBMARINE-241. Fix workbench-web-ng pom error
d7edee3 [lleohao] SUBMARINE-241. Fix rat check
49dd692 [lleohao] SUBMARINE-241. Add workbench-web-ng LICENSE
3908d06 [lleohao] SUBMARINE-241. Remove commit lint
fa4041d [lleohao] SUBMARINE-241. Add login page and auth guard
5a0d1b5 [lleohao] feat: init angular project",https://github.com/apache/submarine/commit/15c18b004aab4376107d3830b85f969c91d25ef9
2043,2043.0,2217.0,apache/submarine,28303effe989397587978cde49f3c12ae7a10704,"SUBMARINE-249. Submarine commons utils module

### What is this PR for?
There are some shared classes in the submarine system, such as submarine-configure, network utils. This module can be reused.

### What type of PR is it?
[Refactoring]

### What is the Jira issue?
* https://issues.apache.org/jira/browse/SUBMARINE-249

### How should this be tested?
* [CI Pass](https://travis-ci.org/liuxunorg/hadoop-submarine/builds/599583779)

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Xun Liu <liuxun@apache.org>

Closes #54 from liuxunorg/SUBMARINE-249 and squashes the following commits:

c02bcc0 [Xun Liu] SUBMARINE-249. Submarine commons utils module",https://github.com/apache/submarine/commit/28303effe989397587978cde49f3c12ae7a10704
2044,2044.0,2218.0,apache/submarine,90284bde3be5e05f44f4efd2f560c70132fe8646,"SUBMARINE-172. [PoC] Split the core module to client and server module

### What is this PR for?
PoC for the SUBMARINE-154 design. Design doc link: https://docs.google.com/document/d/1vCjt2z3DoagfeaVQV0nfyWqSYLymoP53rDcPcz-YcSc

### What type of PR is it?
[Refactoring]

### Todos

### What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-172

### How should this be tested?
https://travis-ci.org/jiwq/hadoop-submarine/builds/597733767

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Wanqiang Ji <wanqiang.ji@gmail.com>

Closes #48 from jiwq/SUBMARINE-172 and squashes the following commits:

cfc64d9 [Wanqiang Ji] SUBMARINE-172. [PoC] Split the core module to client and server module",https://github.com/apache/submarine/commit/90284bde3be5e05f44f4efd2f560c70132fe8646
2045,2045.0,2219.0,apache/submarine,e17397caaef792f930447e7361aeea65550aeac5,"[SUBMARINE-211] Integrated Submarine workbench team manager web & server

### What is this PR for?
The submarine team manager is independently developed.
Integration of front-end pages and back-end services is required.

### What type of PR is it?
[Refactoring]

### What is the Jira issue?
* https://issues.apache.org/jira/browse/SUBMARINE-211

### How should this be tested?
* [CI Pass](https://travis-ci.org/liuxunorg/hadoop-submarine/builds/592117183)

### Screenshots (if appropriate)
![team-web-server](https://user-images.githubusercontent.com/3677382/65981603-0ae81300-e4ac-11e9-91f4-cb01fbe527da.gif)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? No

Author: Xun Liu <liuxun@apache.org>

Closes #30 from liuxunorg/SUBMARINE-211 and squashes the following commits:

7e94bad [Xun Liu] [SUBMARINE-211] Integrated Submarine team manager web & server",https://github.com/apache/submarine/commit/e17397caaef792f930447e7361aeea65550aeac5
2046,2046.0,2220.0,apache/submarine,54c2d5cf78221bceab31ab829f0ee85afbc3002a,"[SUBMARINE-201] Modify module name submairne-web\server to workbench-web\server

### What is this PR for?
1. In fact, the submarine-server just the server of Submarine workbench's server.
not server of the submarine.

2. submarine will add new module `submarine-server`, It's real submarine server.

Therefore, we need to change the module name.
1. submarine-server -> workbench-server
2. submarine-web -> workbench-web

### What type of PR is it?
[Refactoring]

### What is the Jira issue?
* https://issues.apache.org/jira/browse/SUBMARINE-201

### How should this be tested?
* [CI Pass](https://travis-ci.org/liuxunorg/hadoop-submarine/builds/590302172)

### Screenshots (if appropriate)

### Questions:
* Does the licenses files need update? No
* Is there breaking changes for older versions? No
* Does this needs documentation? Yes

Author: Xun Liu <liuxun@apache.org>

Closes #18 from liuxunorg/SUBMARINE-201 and squashes the following commits:

c3b33a1 [Xun Liu] [SUBMARINE-201] Modify submairne-web\submairne-server to workbench-web\workbench-server 1. In fact, the submarine-server just the server of submarine-workbench's server. not server of the submarine.",https://github.com/apache/submarine/commit/54c2d5cf78221bceab31ab829f0ee85afbc3002a
2047,2047.0,2221.0,apache/submarine,96c8fb3dd475e591fa894fd48cd1c6cb73962af7,"[SUBMARINE-182] Refactoring QueryResult class (#70)

What is this PR for?
Submarine server put QueryResult into JsonResponse, return to Submarine web front-end.

QueryResult java class is template class,

public class QueryResult<T> {
  private List<T> records;
  private long total;
now, QueryResult.java has a problem; records is List.

every return JsonResponse, Submarine web front-end always received a list object.
QueryResult param is , but records are List. The two are not uniform.
So, I think we need to change

  private List<T> records;
TO

  private T records;
What type of PR is it?
Refactoring

What is the Jira issue?
https://issues.apache.org/jira/browse/SUBMARINE-182

How should this be tested?
CI Pass

Screenshots (if appropriate)
Questions:
Does the licenses files need update? Yes/No
Is there breaking changes for older versions? Yes/No
Does this needs documentation? Yes/No",https://github.com/apache/submarine/commit/96c8fb3dd475e591fa894fd48cd1c6cb73962af7
2048,2048.0,2222.0,jtablesaw/tablesaw,93f7dd53f172e855b8ea8a9ba56bcb256c271d70,"Saw enhancements (#824)

* Metadata enhancements

Added equals and hashcode to ColumnMetaData (fixing equals bug in TableMetaData)

Added several methods to TableMetaData that describe the table represented by the Saw file.

Renamed several methods to make them more consistent with the analogous methods in Table and/or Relation

These methods make it easy to reason about the table without having to load it into memory.

Added Test class TableMetadataTest.

* Added comments

* Convert IOException to UncheckedIOException

Tired of handling IOException in all my code

* bug fixes and debugging code

* wip regarding liveness bug

* fixed up faux equals()

* cleanup of test output

* Added methods to instantiate Date/Time Cols using primitive arrays

* Added a method to allow more efficient table creation when you know the cols are good.

* Restructuring and performance enhancements

More work remaining

* reverting earlier changes to naming of accessors in SAW code

Jackson is looking for standard getter syntax in deciding what to serialize

* removed equals methods and update tests

* remove hashcodes

* more cleanup

* doc cleanup

* cleanup

* Create SawReadRequest.java

* experimenting with encryption

* refactoring the interface

* created draft document

* refactoring

* continued refactoring

* more refactoring

* Refactored Metadat file

plus minor cleanup

* Removed Selections from Reader

Too much work for now

* More refactoring

* added support for column projection

* made compression optional

* Cleanup. Added EncryptionType to SawMetadata as a placeholder only

We don't currently support encrypting the data, but might in the future

* cleanup

* More cleanup

* moved doc where it belongs",https://github.com/jtablesaw/tablesaw/commit/93f7dd53f172e855b8ea8a9ba56bcb256c271d70
2049,2049.0,2223.0,jtablesaw/tablesaw,f9582e8a8dfe6d27a7b92d332197ff77a8c8c8f8,"Speed up Joins (#562)

* Fix Inner Join when one table has a single column

* Improve performance of Joins

* Refactor join code

* Do not mutate original tables. Refactor righ join ordering logic

* Avoid where when when adding rows in an outer join. Where makes an unnecessary copy of the data.

* Make Codacy fixes

* Clean up comment formatting. Add helper method for building indexes

* Rename local variables",https://github.com/jtablesaw/tablesaw/commit/f9582e8a8dfe6d27a7b92d332197ff77a8c8c8f8
2050,2050.0,2224.0,jtablesaw/tablesaw,01abf193ef3d93319ee0452b480f16bbc942ac6a,"Fixes toString exception when columns are not same size. (#497)

* Fixes toString exception when columns are not same size.
Adds method for padding with missing values.

* Fixed testToStringColumnsWithVaryingSizes to make Codacy happy.

* Suggestion using a bomb (defined in a constant) for representing too
short columns.
Also provides two methods for padding, one padding just the table itself
and one that pads (table and columns) and adds columns.

* Forgot the test.

* Removed padding methods, just fix toString throwing Exception issue.

* Refactored.",https://github.com/jtablesaw/tablesaw/commit/01abf193ef3d93319ee0452b480f16bbc942ac6a
2051,2051.0,2225.0,jtablesaw/tablesaw,5619743a35baff5d42f69063b42d132f9355601a,"feat(FWF): Add fixed width file IO (#449)

* refactor(FWF): Update FWF read options

resolve #449

* refactor(FWF): Update Fixed width reader

resolve #449

* fix(FWF): Remove dead code

resolve #449

* fix(FWF): Remove unused code

fix coding style
resolve #449

* fix(FWF): fixedWidthWriterSettings smell

fix coding style
resolve #449

* fix(FixedWidthWriter): skipIgnoreSettings name

resolve #449",https://github.com/jtablesaw/tablesaw/commit/5619743a35baff5d42f69063b42d132f9355601a
2052,2052.0,2226.0,jtablesaw/tablesaw,fb0526af92107a23be473391a1112f1f5e1ce4d1,"Add JSON reader support (#452)

* Add JSON reader support

* Make detectColumnTypes protected

* Make column type not specific to CSV

* Refactor out ColumnTypeDetector from CsvReader

* Simplify addRows signature

* Minor addRows simplification

* Code reduction for header names

* Consolidate code using input

* Refactor out duplicated code

* Make printColumnTypes work with non-file input types

* Minor cleanup / bug fix

* Remove intermediate CSV representation in html reading

* Json reading without intermediate CSV step

* Minor cleanup

* Fix a TODO",https://github.com/jtablesaw/tablesaw/commit/fb0526af92107a23be473391a1112f1f5e1ce4d1
2053,2053.0,2227.0,jtablesaw/tablesaw,4026a7c852ed961e2a1de93d1ef60b154921d153,Add sorting on negative indices + some refactoring (#422),https://github.com/jtablesaw/tablesaw/commit/4026a7c852ed961e2a1de93d1ef60b154921d153
2054,2054.0,2228.0,jtablesaw/tablesaw,222c8578bf045447eff6b1699c6bbfbf60e2f0de,"removed BOM handling class. Univocity handles BOM chars
Added a test for BOM Handling
Refactored CsvReader so it avoids reading an input file into memory when passed a reader or stream,  if the column types are also provided as options",https://github.com/jtablesaw/tablesaw/commit/222c8578bf045447eff6b1699c6bbfbf60e2f0de
2055,2055.0,2229.0,jtablesaw/tablesaw,1d4bff746249908a11a94028f3647484be817eec,fix bug in performance test and slight refactoring in csv read,https://github.com/jtablesaw/tablesaw/commit/1d4bff746249908a11a94028f3647484be817eec
2056,2056.0,2230.0,jtablesaw/tablesaw,54c80924de3f7921888a2c89ad0f3e50528d0f18,"some refactoring, plus added support for a Float subtype, plus addressed some code review issues",https://github.com/jtablesaw/tablesaw/commit/54c80924de3f7921888a2c89ad0f3e50528d0f18
2057,2057.0,2231.0,jtablesaw/tablesaw,a956c7f1f6da2fd1744521ef113d0fafce2d7ae5,refactored code,https://github.com/jtablesaw/tablesaw/commit/a956c7f1f6da2fd1744521ef113d0fafce2d7ae5
2058,2058.0,2232.0,jtablesaw/tablesaw,7074ae1cb3a416646aa0e3f899a0d7ba62ad34c0,minor refactoring,https://github.com/jtablesaw/tablesaw/commit/7074ae1cb3a416646aa0e3f899a0d7ba62ad34c0
2059,2059.0,2233.0,jtablesaw/tablesaw,46def085b242995f9fe761ec55f32598eb376ac3,"Refactored table copying, and duplicate dropping by moving work to the column type

Includes a test for dropDuplicateRows() and a couple other test enhancements.
Includes performance improvement (memory mostly) in table copying.",https://github.com/jtablesaw/tablesaw/commit/46def085b242995f9fe761ec55f32598eb376ac3
2060,2060.0,2234.0,jtablesaw/tablesaw,08984f7b56067078fb2076586c8910cbc1dae34c,a little cleanup on type utils after refactoring,https://github.com/jtablesaw/tablesaw/commit/08984f7b56067078fb2076586c8910cbc1dae34c
2061,2061.0,2235.0,jtablesaw/tablesaw,39b74735e54e28117e4fb3168c970e7878e917ef,refactoring of column type specific parsing into column types,https://github.com/jtablesaw/tablesaw/commit/39b74735e54e28117e4fb3168c970e7878e917ef
2062,2062.0,2236.0,jtablesaw/tablesaw,9b50f72329d7b15dc6e3baf26f7d2292b6c01bd5,Partial implementation of parser refactoring,https://github.com/jtablesaw/tablesaw/commit/9b50f72329d7b15dc6e3baf26f7d2292b6c01bd5
2063,2063.0,2237.0,jtablesaw/tablesaw,9e9815ef0a745670eac95915e5fc3cb935a17b7e,experimental reworking of parser code related to column type refactoring. partial,https://github.com/jtablesaw/tablesaw/commit/9e9815ef0a745670eac95915e5fc3cb935a17b7e
2064,2064.0,2238.0,jtablesaw/tablesaw,f3486de52906af12266d21d69799671b6c8fe721,refactoring to expose figures from the Simple API classes,https://github.com/jtablesaw/tablesaw/commit/f3486de52906af12266d21d69799671b6c8fe721
2065,2065.0,2239.0,jtablesaw/tablesaw,fb47e31dbe481ab79be7a3b61de97b895dd1ba43,refactoring bar plots,https://github.com/jtablesaw/tablesaw/commit/fb47e31dbe481ab79be7a3b61de97b895dd1ba43
2066,2066.0,2240.0,jtablesaw/tablesaw,b50b8c8defab1ffd17c2f4f33c22539454365107,Refactoring viz documenation,https://github.com/jtablesaw/tablesaw/commit/b50b8c8defab1ffd17c2f4f33c22539454365107
2067,2067.0,2241.0,jtablesaw/tablesaw,8f1f9ad3b0c7c25b02adf5d5e81bf11cdefab5ad,"Aggregation refactoring, prior to removing the old aggregation code.",https://github.com/jtablesaw/tablesaw/commit/8f1f9ad3b0c7c25b02adf5d5e81bf11cdefab5ad
2068,2068.0,2242.0,jtablesaw/tablesaw,657ed09111f6604e6c300e7db9abe9603d4b2224,"Partial refactoring of AggregateFunction so that it can be used for non-numeric columns

removed agg(double[] doubles) from the interface. The remaining method takes a column as argument.",https://github.com/jtablesaw/tablesaw/commit/657ed09111f6604e6c300e7db9abe9603d4b2224
2069,2069.0,2243.0,jtablesaw/tablesaw,d4c017921b8ab189de655daca714b8091b94b41e,Refactoring selection operations for table and columns.,https://github.com/jtablesaw/tablesaw/commit/d4c017921b8ab189de655daca714b8091b94b41e
2070,2070.0,2244.0,jtablesaw/tablesaw,6c0944ad802cbd2e178e91158e6d9e5a51455731,"restored some summarization functionality (#270)

Removed ability to select multiple columns for summarization during refactoring. This restores a variation on the original.",https://github.com/jtablesaw/tablesaw/commit/6c0944ad802cbd2e178e91158e6d9e5a51455731
2071,2071.0,2245.0,jtablesaw/tablesaw,8962cc66fb23740f3ff5779183a5443077cdd589,refactoring datetime column code,https://github.com/jtablesaw/tablesaw/commit/8962cc66fb23740f3ff5779183a5443077cdd589
2072,2072.0,2246.0,jtablesaw/tablesaw,002c6359d9acce0d029001860e7b9d109af909de,updated example to compile with refactored Selection class,https://github.com/jtablesaw/tablesaw/commit/002c6359d9acce0d029001860e7b9d109af909de
2073,2073.0,2247.0,jtablesaw/tablesaw,16612c3f269c9a4059f080b229bc415278c9cb24,"Version1 (#260)

* removed smile module and updated plot

* partial refactoring for v1

* more refactoring

* renaming columns

* finished column renaming.
finished migrating BooleanColumn

* finished migrating DateColumn

* finished migrating datetimecolumn

* finished migrating NumberColumn

* finished migrating StringColumn

* finished migrating columns

* migrated the code for table filtering

* migrated io, joining, indexing, sorting, splitting

* finished migrating core

* all tests pass

* updated documentation

* fixed pom version issue

* updated travis.yml jdk version

* fixed pom version issue

* fixed pom version issue again

* merged ben's most recent changes to branch

* minor cleanup",https://github.com/jtablesaw/tablesaw/commit/16612c3f269c9a4059f080b229bc415278c9cb24
2074,2074.0,2248.0,jtablesaw/tablesaw,11b2de497f58f62b2e001d2656d67c8dc9a47cef,"refactoring of generic column subtraction into NumericColumn class and extension to the Short, Int, & Float column types.",https://github.com/jtablesaw/tablesaw/commit/11b2de497f58f62b2e001d2656d67c8dc9a47cef
2075,2075.0,2249.0,jtablesaw/tablesaw,542db531380db4580aac184a180ee104080570c3,"Refactor (#210)

Refactoring",https://github.com/jtablesaw/tablesaw/commit/542db531380db4580aac184a180ee104080570c3
2076,2076.0,2250.0,jtablesaw/tablesaw,a8b7b3c0d97f9ccf6129b0756dec9e8544f94ba1,column renaming and similar refactoring,https://github.com/jtablesaw/tablesaw/commit/a8b7b3c0d97f9ccf6129b0756dec9e8544f94ba1
2077,2077.0,2251.0,jtablesaw/tablesaw,3e094407e49b4847aeb58e673d46482547dd3606,refactored the calculation of column widths so that it's easier to get for an individual column,https://github.com/jtablesaw/tablesaw/commit/3e094407e49b4847aeb58e673d46482547dd3606
2078,2078.0,2252.0,jtablesaw/tablesaw,6244a430ccb07c1254fd2495c16afaee21f54caf,"refactored columnMetaData and tableMetaData, moving them to storage package",https://github.com/jtablesaw/tablesaw/commit/6244a430ccb07c1254fd2495c16afaee21f54caf
2079,2079.0,2253.0,fiji/Trainable_Segmentation,a838ebaf6fd3eaafc1b42c47d31174c3046f645f,"FeatureStack3D: isolate ImageScience routines

This refactoring will make it easier to externalize the ImageScience
logic, so that it becomes optional for the core workings of TWS.",https://github.com/fiji/Trainable_Segmentation/commit/a838ebaf6fd3eaafc1b42c47d31174c3046f645f
2080,2080.0,2254.0,fiji/Trainable_Segmentation,08bbad06c7023686aeb42fa07b58f676ae8d2c64,"FeatureStack: isolate ImageScience routines

This refactoring will make it easier to externalize the ImageScience
logic, so that it becomes optional for the core workings of TWS.",https://github.com/fiji/Trainable_Segmentation/commit/08bbad06c7023686aeb42fa07b58f676ae8d2c64
2081,2081.0,2255.0,fiji/Trainable_Segmentation,89ac6a1865082030d2165bc2301dbe4fcd9bad24,"Avoid fully qualified imagescience references

Since we only use the ImageScience Image class, and not other Image
classes (in particular, java.awt.Image), we can import the ImageScience
Image class in the imports section and refer to it by its short name.

This reason for doing this is to make subsequent refactoring simpler.",https://github.com/fiji/Trainable_Segmentation/commit/89ac6a1865082030d2165bc2301dbe4fcd9bad24
2082,2082.0,2256.0,fiji/Trainable_Segmentation,752235e95b5ffb5f45d0f3a3c2d39b7be37b5794,Balanced Random Forest: refactored GiniFunction in order to increase the spped. The inner class AttributeClassPair is now extern and the comparator is static.,https://github.com/fiji/Trainable_Segmentation/commit/752235e95b5ffb5f45d0f3a3c2d39b7be37b5794
2083,2083.0,2257.0,Waikato/weka-trunk,7c9f6f283250975716cb4030e9844ca71ab8a9b5,"Some refactoring. Also added Knowledge Flow step.

git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@14767 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/7c9f6f283250975716cb4030e9844ca71ab8a9b5
2084,2084.0,2258.0,Waikato/weka-trunk,760be3601bcde03a4037c2e4a36476a05e5acd1e,"Refactored enormous evaluateModel() method into a slightly less enormous method that is hopefully a bit easier to understand. The behaviour of the margin output has changed: it is now based on whatever is uses as the test data. Previously, it was always based on the training set. The behaviour of the percent-split option has changed in that it is now consistent with the Explorer: the model that is shown is based on the entire training set, not just the training split. 

Some things still need checking and possibly fixing:

# xml file input and output
# xml options
# Cost-based stuff
# InputMappedClassifier
# missing values in weighted averagees
# threshold curve data

git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@14446 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/760be3601bcde03a4037c2e4a36476a05e5acd1e
2085,2085.0,2259.0,Waikato/weka-trunk,6a2574af3c264093e8d861b3ee4da3389ab1fd74,"Code refactoring and clean-up. More options. Bug fix: last mini batch was skipped in instance-based dataset iterators.

git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@14342 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/6a2574af3c264093e8d861b3ee4da3389ab1fd74
2086,2086.0,2260.0,Waikato/weka-trunk,fd1d02b621f17844247199f69aab40213fab23d5,"Updated build_package script. Refactored BaseSparkJobConfig in order to make the mechanism for handling the runtime libraries more flexible

git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@13709 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/fd1d02b621f17844247199f69aab40213fab23d5
2087,2087.0,2261.0,Waikato/weka-trunk,1e99c2ea9bb8f08f8146cf84019afdb561eca2d7,"Refactoring of Dataset into AbstractDataset

git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@12254 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/1e99c2ea9bb8f08f8146cf84019afdb561eca2d7
2088,2088.0,2262.0,Waikato/weka-trunk,c1cf8b6da097e27dedd929c5308f9fb3b8bfa81b,"Refactoring of Dataset into AbstractDataset

git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@12253 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/c1cf8b6da097e27dedd929c5308f9fb3b8bfa81b
2089,2089.0,2263.0,Waikato/weka-trunk,f229179bb55e98398ab999449b5a7546ff4a5114,"Refactored dictionary construction and vectorization logic out of StringToWordVector and into weka.core.DictionaryBuilder. Added routines to save and load dictionarys from DictionaryBuilder in either plain text or binary serialized format. Also has routines to aggregate dictionaries. Once a dictionary has been constructed or loaded, DictionaryBuilder can vectorize incoming instances in a streaming fashion. Added a FixedDictionaryStringToWordVector filter that can take advantage of this by using a pre-constructed dictionary to work in streaming environments. Added a DictionarySaver in weka.core.converters that can accept instance batches or streams in order to create and save a dictionary.

git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@12074 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/f229179bb55e98398ab999449b5a7546ff4a5114
2090,2090.0,2264.0,Waikato/weka-trunk,28e417fb90af587c4d2eee54e7d82704d4939ebd,"Refactored the code that updates cross-validation results into a separate method so that client code that trains attribute selection schemes externally can use this class to update/compute those results

git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@11942 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/28e417fb90af587c4d2eee54e7d82704d4939ebd
2091,2091.0,2265.0,Waikato/weka-trunk,b2af8f4756f341eb821671c911df420e96420499,"Refactored NumericAttributeBinData out of ChartUtils and into its own class in weka.core.stats

git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@10930 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/b2af8f4756f341eb821671c911df420e96420499
2092,2092.0,2266.0,Waikato/weka-trunk,42c91fd4772c40ce133a4eb0417873a4ec198a31,"Refactored stats classes out of CSVToARFFHeaderMapTask into separate classes in weka.core.stats

git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@10927 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/42c91fd4772c40ce133a4eb0417873a4ec198a31
2093,2093.0,2267.0,Waikato/weka-trunk,6bf713cf10d1d7b9f564cd14aacf428ae5959fd3,"Refactored stats classes out of CSVToARFFHeaderMapTask into separate classes in weka.core.stats

git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@10926 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/6bf713cf10d1d7b9f564cd14aacf428ae5959fd3
2094,2094.0,2268.0,Waikato/weka-trunk,e50375290ed7d77fd80982bdbd687f3123bfb0e7,"Updated with changes relating to additional summary attribute information, chart generation, code cleanups and the refactoring of the randomly shuffled data chunk job out into its own job class

git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@10906 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/e50375290ed7d77fd80982bdbd687f3123bfb0e7
2095,2095.0,2269.0,Waikato/weka-trunk,12210cbf86d474bef0f1e31ab85f7c83a9f62512,"Refactored match, replace and transform logic out of SubstringLabeler and SubstringReplacer

git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@10383 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/12210cbf86d474bef0f1e31ab85f7c83a9f62512
2096,2096.0,2270.0,Waikato/weka-trunk,7f0f98b05aba60e0f525e945f261faadc47032b3,"Updated to reflect the refactoring in attribute selection


git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@4360 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/7f0f98b05aba60e0f525e945f261faadc47032b3
2097,2097.0,2271.0,Waikato/weka-trunk,da924804c4c4e4cbd5e5ca08287e09dea3641cf0,"Refactored to convert SubsetEvaluator and AttributeEvaluator from abstract classes to interfaces


git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@4359 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/da924804c4c4e4cbd5e5ca08287e09dea3641cf0
2098,2098.0,2272.0,Waikato/weka-trunk,ebf175aef7fc4a166d7ed220444a69ed7c941107,"Changes to reflect the refactoring of hashKey out of DecisionTable


git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@3822 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/ebf175aef7fc4a166d7ed220444a69ed7c941107
2099,2099.0,2273.0,Waikato/weka-trunk,887ee521e7c3f0dc76294b31a7e3690a11db8ca5,"Refactored hashKey out of DecisionTable into its own class. Reduces the number of dependencies for other classes that make use of hashKey (such as SimpleKMeans).


git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@3821 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/887ee521e7c3f0dc76294b31a7e3690a11db8ca5
2100,2100.0,2274.0,Waikato/weka-trunk,91d47dba8dc6ef255d1861f760ee49d7718ff171,"This class has shifted packages.

It was previously packaged as filters.TimeSeriesTranslateFilter

The changelog prior to shifting was:

----------------------------
revision 1.10
date: 2001/03/14 00:59:23;  author: ml;  state: Exp;  lines: +17 -1
Prepended GPL headers and removed scripts directory.
----------------------------
revision 1.9
date: 2001/02/08 00:10:45;  author: trigg;  state: Exp;  lines: +3 -3
Changed filter use to no longer use deprecated methods
----------------------------
revision 1.8
date: 2001/01/26 01:16:23;  author: trigg;  state: Exp;  lines: +5 -4
Cleaned up exception handling of filters: using the newly defined
core exceptions, and other exceptions where appropriate.
----------------------------
revision 1.7
date: 2001/01/16 23:08:38;  author: trigg;  state: Exp;  lines: +9 -344
Fixed string handling.
Fixed a couple of minor bugs found during unit testing.
----------------------------
revision 1.6
date: 2000/12/19 20:49:39;  author: trigg;  state: Exp;  lines: +2 -10
Refactored some common code out into Range.java
----------------------------
revision 1.5
date: 2000/12/10 00:58:49;  author: trigg;  state: Exp;  lines: +8 -9
Huge cleanup here. Filters now work safely with string attributes. Previously,
Bad Things would happen and the string values would get lost or point
to the wrong strings when passing through filters.

There is one case (not applicable all known filters) yet to handle,
see comments in Filter.inputFormat.
----------------------------
revision 1.4
date: 2000/10/31 00:33:39;  author: mhall;  state: Exp;  lines: +2 -14
Removed GPL headers.
----------------------------
revision 1.3
date: 2000/02/23 18:05:48;  author: eibe;  state: Exp;  lines: +10 -8
Added support for sparse data.
----------------------------
revision 1.2
date: 1999/12/24 02:37:50;  author: trigg;  state: Exp;  lines: +14 -1
- Modified tiptext/about handling for gui. Started adding this info to
filters.
----------------------------
revision 1.1
date: 1999/07/09 05:36:15;  author: trigg;  state: Exp;
- Added in all my dev code for experiment architecture, gui, and a couple
  of new filters. Adjusted Makefiles accordingly.
=============================================================================


git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@1314 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/91d47dba8dc6ef255d1861f760ee49d7718ff171
2101,2101.0,2275.0,Waikato/weka-trunk,5c1f1137e1f4c120f06878e6ca263f64ce75d30d,"This class has shifted packages.

It was previously packaged as filters.AttributeFilter

The changelog prior to shifting was:

----------------------------
revision 1.17
date: 2001/08/30 23:15:24;  author: trigg;  state: Exp;  lines: +3 -3
Autofixed some more javadoc warnings.
----------------------------
revision 1.16
date: 2001/03/14 00:59:21;  author: ml;  state: Exp;  lines: +17 -1
Prepended GPL headers and removed scripts directory.
----------------------------
revision 1.15
date: 2001/02/08 00:10:44;  author: trigg;  state: Exp;  lines: +4 -4
Changed filter use to no longer use deprecated methods
----------------------------
revision 1.14
date: 2001/01/26 01:16:23;  author: trigg;  state: Exp;  lines: +4 -5
Cleaned up exception handling of filters: using the newly defined
core exceptions, and other exceptions where appropriate.
----------------------------
revision 1.13
date: 2001/01/16 23:08:38;  author: trigg;  state: Exp;  lines: +3 -5
Fixed string handling.
Fixed a couple of minor bugs found during unit testing.
----------------------------
revision 1.12
date: 2001/01/08 19:20:18;  author: trigg;  state: Exp;  lines: +26 -7
Updated to work safely with string attributes, and any bugs found during
writing of JUnit tests fixed.
----------------------------
revision 1.11
date: 2000/12/19 20:49:38;  author: trigg;  state: Exp;  lines: +3 -23
Refactored some common code out into Range.java
----------------------------
revision 1.10
date: 2000/12/10 00:58:49;  author: trigg;  state: Exp;  lines: +9 -10
Huge cleanup here. Filters now work safely with string attributes. Previously,
Bad Things would happen and the string values would get lost or point
to the wrong strings when passing through filters.

There is one case (not applicable all known filters) yet to handle,
see comments in Filter.inputFormat.
----------------------------
revision 1.9
date: 2000/10/31 00:33:38;  author: mhall;  state: Exp;  lines: +2 -14
Removed GPL headers.
----------------------------
revision 1.8
date: 2000/03/30 21:54:59;  author: mhall;  state: Exp;  lines: +2 -2
Fixed inputFormat so that attributes are copied rather than just a reference
to them.
----------------------------
revision 1.7
date: 2000/02/23 18:05:48;  author: eibe;  state: Exp;  lines: +6 -2
Added support for sparse data.
----------------------------
revision 1.6
date: 2000/02/17 07:34:33;  author: trigg;  state: Exp;  lines: +13 -1
Made attribute lists look a little nicer
----------------------------
revision 1.5
date: 1999/12/24 02:37:50;  author: trigg;  state: Exp;  lines: +40 -1
- Modified tiptext/about handling for gui. Started adding this info to
filters.
----------------------------
revision 1.4
date: 1999/12/08 22:21:27;  author: trigg;  state: Exp;  lines: +4 -7
- Changed to use Instance.toDoubleArray rather than calling setValue
all the time -- vast speedup during filtering (especially when the number of
attributes is high).
----------------------------
revision 1.3
date: 1999/05/04 00:38:00;  author: trigg;  state: Exp;  lines: +2 -2
- Code tidying
----------------------------
revision 1.2
date: 1999/05/02 22:07:57;  author: trigg;  state: Exp;  lines: +16 -20
- Changed System.exit()'s to throw new Error()'s.
----------------------------
revision 1.1
date: 1999/04/29 04:14:25;  author: trigg;  state: Exp;
- DeleteFilter --> AttributeFilter
AttributeFilter puts selected attributes in the order they were entered
on the command line, so it can be used for attribute re-ordering.

- SelectFilter --> InstanceFilter

- Class attribute assignment has been removed from the filters themselves,
  as this is a property of the input instances rather than the filters. For
  command line use there is a generic option (-c) for setting the class.
=============================================================================


git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@1308 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/5c1f1137e1f4c120f06878e6ca263f64ce75d30d
2102,2102.0,2276.0,Waikato/weka-trunk,97e1a7441f3cbb52f6e1e505426b6c9bfdffbe10,"This class has shifted packages.

It was previously packaged as filters.NumericTransformFilter

The changelog prior to shifting was:

----------------------------
revision 1.14
date: 2001/08/30 23:15:25;  author: trigg;  state: Exp;  lines: +3 -3
Autofixed some more javadoc warnings.
----------------------------
revision 1.13
date: 2001/03/14 00:59:22;  author: ml;  state: Exp;  lines: +17 -1
Prepended GPL headers and removed scripts directory.
----------------------------
revision 1.12
date: 2001/02/08 00:10:44;  author: trigg;  state: Exp;  lines: +4 -4
Changed filter use to no longer use deprecated methods
----------------------------
revision 1.11
date: 2001/01/26 01:16:23;  author: trigg;  state: Exp;  lines: +16 -15
Cleaned up exception handling of filters: using the newly defined
core exceptions, and other exceptions where appropriate.
----------------------------
revision 1.10
date: 2001/01/12 03:21:02;  author: trigg;  state: Exp;  lines: +22 -18
Fixed passing through of string attribute values correctly.
----------------------------
revision 1.9
date: 2000/12/19 20:49:38;  author: trigg;  state: Exp;  lines: +2 -8
Refactored some common code out into Range.java
----------------------------
revision 1.8
date: 2000/12/10 00:58:49;  author: trigg;  state: Exp;  lines: +7 -8
Huge cleanup here. Filters now work safely with string attributes. Previously,
Bad Things would happen and the string values would get lost or point
to the wrong strings when passing through filters.

There is one case (not applicable all known filters) yet to handle,
see comments in Filter.inputFormat.
----------------------------
revision 1.7
date: 2000/10/31 00:33:39;  author: mhall;  state: Exp;  lines: +2 -14
Removed GPL headers.
----------------------------
revision 1.6
date: 2000/09/13 05:28:08;  author: trigg;  state: Exp;  lines: +18 -3
Added a default transform method, so this filter can be used from
the GUI.
----------------------------
revision 1.5
date: 2000/02/23 18:05:48;  author: eibe;  state: Exp;  lines: +6 -2
Added support for sparse data.
----------------------------
revision 1.4
date: 1999/12/24 02:37:50;  author: trigg;  state: Exp;  lines: +14 -1
- Modified tiptext/about handling for gui. Started adding this info to
filters.
----------------------------
revision 1.3
date: 1999/05/04 00:38:04;  author: trigg;  state: Exp;  lines: +2 -2
- Code tidying
----------------------------
revision 1.2
date: 1999/04/28 23:47:14;  author: trigg;  state: Exp;  lines: +15 -23
- Code tidying up.
----------------------------
revision 1.1
date: 1999/04/20 04:26:52;  author: ml;  state: Exp;
branches:  1.1.1;
Initial revision
----------------------------
revision 1.1.1.1
date: 1999/04/20 04:26:52;  author: ml;  state: Exp;  lines: +0 -0
Initial import
=============================================================================


git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@1306 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/97e1a7441f3cbb52f6e1e505426b6c9bfdffbe10
2103,2103.0,2277.0,Waikato/weka-trunk,b7d1256b9282aa15619775757bb4e71243e7c43b,"This class has shifted packages.

It was previously packaged as filters.FirstOrderFilter

The changelog prior to shifting was:

----------------------------
revision 1.15
date: 2001/10/04 01:43:03;  author: trigg;  state: Exp;  lines: +2 -2
Fixed for date attributes.
----------------------------
revision 1.14
date: 2001/08/30 23:15:24;  author: trigg;  state: Exp;  lines: +3 -3
Autofixed some more javadoc warnings.
----------------------------
revision 1.13
date: 2001/03/14 00:59:22;  author: ml;  state: Exp;  lines: +17 -1
Prepended GPL headers and removed scripts directory.
----------------------------
revision 1.12
date: 2001/02/08 00:10:44;  author: trigg;  state: Exp;  lines: +4 -4
Changed filter use to no longer use deprecated methods
----------------------------
revision 1.11
date: 2001/01/26 01:16:23;  author: trigg;  state: Exp;  lines: +9 -8
Cleaned up exception handling of filters: using the newly defined
core exceptions, and other exceptions where appropriate.
----------------------------
revision 1.10
date: 2001/01/08 19:20:19;  author: trigg;  state: Exp;  lines: +40 -26
Updated to work safely with string attributes, and any bugs found during
writing of JUnit tests fixed.
----------------------------
revision 1.9
date: 2000/12/19 20:49:38;  author: trigg;  state: Exp;  lines: +2 -10
Refactored some common code out into Range.java
----------------------------
revision 1.8
date: 2000/12/10 00:58:49;  author: trigg;  state: Exp;  lines: +9 -10
Huge cleanup here. Filters now work safely with string attributes. Previously,
Bad Things would happen and the string values would get lost or point
to the wrong strings when passing through filters.

There is one case (not applicable all known filters) yet to handle,
see comments in Filter.inputFormat.
----------------------------
revision 1.7
date: 2000/10/31 00:33:39;  author: mhall;  state: Exp;  lines: +2 -14
Removed GPL headers.
----------------------------
revision 1.6
date: 2000/02/23 18:05:48;  author: eibe;  state: Exp;  lines: +11 -9
Added support for sparse data.
----------------------------
revision 1.5
date: 1999/12/24 02:37:50;  author: trigg;  state: Exp;  lines: +14 -1
- Modified tiptext/about handling for gui. Started adding this info to
filters.
----------------------------
revision 1.4
date: 1999/05/04 00:38:02;  author: trigg;  state: Exp;  lines: +2 -2
- Code tidying
----------------------------
revision 1.3
date: 1999/05/02 22:08:00;  author: trigg;  state: Exp;  lines: +18 -23
- Changed System.exit()'s to throw new Error()'s.
----------------------------
revision 1.2
date: 1999/04/28 23:47:12;  author: trigg;  state: Exp;  lines: +14 -32
- Code tidying up.
----------------------------
revision 1.1
date: 1999/04/20 04:26:51;  author: ml;  state: Exp;
branches:  1.1.1;
Initial revision
----------------------------
revision 1.1.1.1
date: 1999/04/20 04:26:51;  author: ml;  state: Exp;  lines: +0 -0
Initial import
=============================================================================


git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@1300 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/b7d1256b9282aa15619775757bb4e71243e7c43b
2104,2104.0,2278.0,Waikato/weka-trunk,040b6f68a71a64a4e79d30ef75444c1c8b51fe33,"This class has shifted packages and been split in several parts.

It was previously packaged as filters.DiscretizeFilter

The changelog prior to shifting was:

----------------------------
revision 1.18
date: 2001/12/20 19:39:51;  author: rkirkby;  state: Exp;  lines: +1 -2
Very minor fix - removed a duplicate line.
----------------------------
revision 1.17
date: 2001/08/30 23:15:24;  author: trigg;  state: Exp;  lines: +3 -3
Autofixed some more javadoc warnings.
----------------------------
revision 1.16
date: 2001/04/05 05:20:43;  author: eibe;  state: Exp;  lines: +131 -29
Implemented equal frequency binning and got rid of a bug in the option handling.
----------------------------
revision 1.15
date: 2001/03/14 00:59:21;  author: ml;  state: Exp;  lines: +17 -1
Prepended GPL headers and removed scripts directory.
----------------------------
revision 1.14
date: 2001/02/08 00:10:44;  author: trigg;  state: Exp;  lines: +4 -4
Changed filter use to no longer use deprecated methods
----------------------------
revision 1.13
date: 2001/01/26 01:16:23;  author: trigg;  state: Exp;  lines: +22 -30
Cleaned up exception handling of filters: using the newly defined
core exceptions, and other exceptions where appropriate.
----------------------------
revision 1.12
date: 2001/01/08 19:20:18;  author: trigg;  state: Exp;  lines: +26 -16
Updated to work safely with string attributes, and any bugs found during
writing of JUnit tests fixed.
----------------------------
revision 1.11
date: 2000/12/19 20:49:38;  author: trigg;  state: Exp;  lines: +2 -10
Refactored some common code out into Range.java
----------------------------
revision 1.10
date: 2000/12/10 00:58:49;  author: trigg;  state: Exp;  lines: +35 -37
Huge cleanup here. Filters now work safely with string attributes. Previously,
Bad Things would happen and the string values would get lost or point
to the wrong strings when passing through filters.

There is one case (not applicable all known filters) yet to handle,
see comments in Filter.inputFormat.
----------------------------
revision 1.9
date: 2000/10/31 00:33:38;  author: mhall;  state: Exp;  lines: +2 -14
Removed GPL headers.
----------------------------
revision 1.8
date: 2000/02/23 18:05:48;  author: eibe;  state: Exp;  lines: +6 -2
Added support for sparse data.
----------------------------
revision 1.7
date: 1999/12/24 02:37:50;  author: trigg;  state: Exp;  lines: +111 -21
- Modified tiptext/about handling for gui. Started adding this info to
filters.
----------------------------
revision 1.6
date: 1999/12/14 22:36:47;  author: trigg;  state: Exp;  lines: +11 -13
- Speedup during instance conversion
----------------------------
revision 1.5
date: 1999/05/04 00:38:00;  author: trigg;  state: Exp;  lines: +2 -2
- Code tidying
----------------------------
revision 1.4
date: 1999/05/02 22:07:58;  author: trigg;  state: Exp;  lines: +49 -62
- Changed System.exit()'s to throw new Error()'s.
----------------------------
revision 1.3
date: 1999/04/29 04:14:26;  author: trigg;  state: Exp;  lines: +15 -68
- DeleteFilter --> AttributeFilter
AttributeFilter puts selected attributes in the order they were entered
on the command line, so it can be used for attribute re-ordering.

- SelectFilter --> InstanceFilter

- Class attribute assignment has been removed from the filters themselves,
  as this is a property of the input instances rather than the filters. For
  command line use there is a generic option (-c) for setting the class.
----------------------------
revision 1.2
date: 1999/04/28 23:47:11;  author: trigg;  state: Exp;  lines: +65 -90
- Code tidying up.
----------------------------
revision 1.1
date: 1999/04/20 04:26:48;  author: ml;  state: Exp;
branches:  1.1.1;
Initial revision
----------------------------
revision 1.1.1.1
date: 1999/04/20 04:26:48;  author: ml;  state: Exp;  lines: +0 -0
Initial import
=============================================================================


git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@1299 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/040b6f68a71a64a4e79d30ef75444c1c8b51fe33
2105,2105.0,2279.0,Waikato/weka-trunk,922e730ba0576a15271cefd9ee827ea702f94e9d,"This class has shifted packages.

It was previously packaged as filters.CopyAttributesFilter

The changelog prior to shifting was:

----------------------------
revision 1.11
date: 2001/08/30 23:15:24;  author: trigg;  state: Exp;  lines: +3 -3
Autofixed some more javadoc warnings.
----------------------------
revision 1.10
date: 2001/03/14 00:59:21;  author: ml;  state: Exp;  lines: +17 -1
Prepended GPL headers and removed scripts directory.
----------------------------
revision 1.9
date: 2001/02/08 00:10:44;  author: trigg;  state: Exp;  lines: +4 -4
Changed filter use to no longer use deprecated methods
----------------------------
revision 1.8
date: 2001/01/26 01:16:23;  author: trigg;  state: Exp;  lines: +4 -5
Cleaned up exception handling of filters: using the newly defined
core exceptions, and other exceptions where appropriate.
----------------------------
revision 1.7
date: 2001/01/08 19:20:18;  author: trigg;  state: Exp;  lines: +26 -5
Updated to work safely with string attributes, and any bugs found during
writing of JUnit tests fixed.
----------------------------
revision 1.6
date: 2000/12/19 20:49:38;  author: trigg;  state: Exp;  lines: +2 -10
Refactored some common code out into Range.java
----------------------------
revision 1.5
date: 2000/12/10 00:58:49;  author: trigg;  state: Exp;  lines: +9 -10
Huge cleanup here. Filters now work safely with string attributes. Previously,
Bad Things would happen and the string values would get lost or point
to the wrong strings when passing through filters.

There is one case (not applicable all known filters) yet to handle,
see comments in Filter.inputFormat.
----------------------------
revision 1.4
date: 2000/10/31 00:33:38;  author: mhall;  state: Exp;  lines: +2 -14
Removed GPL headers.
----------------------------
revision 1.3
date: 2000/02/23 18:05:48;  author: eibe;  state: Exp;  lines: +9 -8
Added support for sparse data.
----------------------------
revision 1.2
date: 1999/12/24 02:37:50;  author: trigg;  state: Exp;  lines: +41 -1
- Modified tiptext/about handling for gui. Started adding this info to
filters.
----------------------------
revision 1.1
date: 1999/07/09 05:36:15;  author: trigg;  state: Exp;
- Added in all my dev code for experiment architecture, gui, and a couple
  of new filters. Adjusted Makefiles accordingly.
=============================================================================


git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@1298 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/922e730ba0576a15271cefd9ee827ea702f94e9d
2106,2106.0,2280.0,Waikato/weka-trunk,59ec8608cf8fce307b2c24d68b19b6840ec37e0e,"This class has shifted packages and been split in several parts.

It was previously packaged as filters.DiscretizeFilter

The changelog prior to shifting was:

----------------------------
revision 1.18
date: 2001/12/20 19:39:51;  author: rkirkby;  state: Exp;  lines: +1 -2
Very minor fix - removed a duplicate line.
----------------------------
revision 1.17
date: 2001/08/30 23:15:24;  author: trigg;  state: Exp;  lines: +3 -3
Autofixed some more javadoc warnings.
----------------------------
revision 1.16
date: 2001/04/05 05:20:43;  author: eibe;  state: Exp;  lines: +131 -29
Implemented equal frequency binning and got rid of a bug in the option handling.
----------------------------
revision 1.15
date: 2001/03/14 00:59:21;  author: ml;  state: Exp;  lines: +17 -1
Prepended GPL headers and removed scripts directory.
----------------------------
revision 1.14
date: 2001/02/08 00:10:44;  author: trigg;  state: Exp;  lines: +4 -4
Changed filter use to no longer use deprecated methods
----------------------------
revision 1.13
date: 2001/01/26 01:16:23;  author: trigg;  state: Exp;  lines: +22 -30
Cleaned up exception handling of filters: using the newly defined
core exceptions, and other exceptions where appropriate.
----------------------------
revision 1.12
date: 2001/01/08 19:20:18;  author: trigg;  state: Exp;  lines: +26 -16
Updated to work safely with string attributes, and any bugs found during
writing of JUnit tests fixed.
----------------------------
revision 1.11
date: 2000/12/19 20:49:38;  author: trigg;  state: Exp;  lines: +2 -10
Refactored some common code out into Range.java
----------------------------
revision 1.10
date: 2000/12/10 00:58:49;  author: trigg;  state: Exp;  lines: +35 -37
Huge cleanup here. Filters now work safely with string attributes. Previously,
Bad Things would happen and the string values would get lost or point
to the wrong strings when passing through filters.

There is one case (not applicable all known filters) yet to handle,
see comments in Filter.inputFormat.
----------------------------
revision 1.9
date: 2000/10/31 00:33:38;  author: mhall;  state: Exp;  lines: +2 -14
Removed GPL headers.
----------------------------
revision 1.8
date: 2000/02/23 18:05:48;  author: eibe;  state: Exp;  lines: +6 -2
Added support for sparse data.
----------------------------
revision 1.7
date: 1999/12/24 02:37:50;  author: trigg;  state: Exp;  lines: +111 -21
- Modified tiptext/about handling for gui. Started adding this info to
filters.
----------------------------
revision 1.6
date: 1999/12/14 22:36:47;  author: trigg;  state: Exp;  lines: +11 -13
- Speedup during instance conversion
----------------------------
revision 1.5
date: 1999/05/04 00:38:00;  author: trigg;  state: Exp;  lines: +2 -2
- Code tidying
----------------------------
revision 1.4
date: 1999/05/02 22:07:58;  author: trigg;  state: Exp;  lines: +49 -62
- Changed System.exit()'s to throw new Error()'s.
----------------------------
revision 1.3
date: 1999/04/29 04:14:26;  author: trigg;  state: Exp;  lines: +15 -68
- DeleteFilter --> AttributeFilter
AttributeFilter puts selected attributes in the order they were entered
on the command line, so it can be used for attribute re-ordering.

- SelectFilter --> InstanceFilter

- Class attribute assignment has been removed from the filters themselves,
  as this is a property of the input instances rather than the filters. For
  command line use there is a generic option (-c) for setting the class.
----------------------------
revision 1.2
date: 1999/04/28 23:47:11;  author: trigg;  state: Exp;  lines: +65 -90
- Code tidying up.
----------------------------
revision 1.1
date: 1999/04/20 04:26:48;  author: ml;  state: Exp;
branches:  1.1.1;
Initial revision
----------------------------
revision 1.1.1.1
date: 1999/04/20 04:26:48;  author: ml;  state: Exp;  lines: +0 -0
Initial import
=============================================================================


git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@1289 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/59ec8608cf8fce307b2c24d68b19b6840ec37e0e
2107,2107.0,2281.0,Waikato/weka-trunk,b28bcfbdb97400412f28a78699f2ab9acfdc1297,"Refactored some common code out into Range.java


git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@875 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/b28bcfbdb97400412f28a78699f2ab9acfdc1297
2108,2108.0,2282.0,Waikato/weka-trunk,3e07401210f5c843d00c3fdede45b524bedb24a0,"Partial refactoring of the main evaluation routine.


git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@836 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/3e07401210f5c843d00c3fdede45b524bedb24a0
2109,2109.0,2283.0,Waikato/weka-trunk,26d268fdde7c99b1ebd6465625a6e956dbfca6d4,"Refactored some code out into a separate method.


git-svn-id: https://svn.cms.waikato.ac.nz/svn/weka/trunk@758 e0a1b77d-ad91-4216-81b1-defd5f83fa92",https://github.com/Waikato/weka-trunk/commit/26d268fdde7c99b1ebd6465625a6e956dbfca6d4
2110,2110.0,2284.0,vespa-engine/vespa,238c518f06c48e1ca751e567fe51b7dd6a313720,"Refactor, cleanup",https://github.com/vespa-engine/vespa/commit/238c518f06c48e1ca751e567fe51b7dd6a313720
2111,2111.0,2285.0,vespa-engine/vespa,1641255efaca1da2e8bb534d8ce4f2f37cae0f67,refactor LogctlSpec and use List for deterministic ordering,https://github.com/vespa-engine/vespa/commit/1641255efaca1da2e8bb534d8ce4f2f37cae0f67
2112,2112.0,2286.0,vespa-engine/vespa,5831e7054430d261b48446934aca771b962b269e,"refactor binding extraction, with caching",https://github.com/vespa-engine/vespa/commit/5831e7054430d261b48446934aca771b962b269e
2113,2113.0,2287.0,vespa-engine/vespa,5989ea10466c9d0946eae9babad92832d0b6aff9,"Merge pull request #26082 from vespa-engine/balder/refactor-grouping-test

Modernize grouping test.",https://github.com/vespa-engine/vespa/commit/5989ea10466c9d0946eae9babad92832d0b6aff9
2114,2114.0,2288.0,vespa-engine/vespa,21a4d3c623ef93dc4ed37758fde1d7e0b493e998,Minor code refactoring and layout changes.,https://github.com/vespa-engine/vespa/commit/21a4d3c623ef93dc4ed37758fde1d7e0b493e998
2115,2115.0,2289.0,vespa-engine/vespa,820d83848c480086f54b53cc973c3383728a17d0,Fix some fallouts after clion refactoring,https://github.com/vespa-engine/vespa/commit/820d83848c480086f54b53cc973c3383728a17d0
2116,2116.0,2290.0,vespa-engine/vespa,78a42e1cf9735f58e7f204f34e0cb2bd7c1a3674,Refactor endpoint verification during deployments,https://github.com/vespa-engine/vespa/commit/78a42e1cf9735f58e7f204f34e0cb2bd7c1a3674
2117,2117.0,2291.0,vespa-engine/vespa,b536ab147d2610dcd3664a2b4742fb4e7a6569fd,"Refactor with abstract parent, and make name() non-optional",https://github.com/vespa-engine/vespa/commit/b536ab147d2610dcd3664a2b4742fb4e7a6569fd
2118,2118.0,2292.0,vespa-engine/vespa,e26883a3602b9adbab2ec03d015cce55bae2bc2f,"Merge pull request #25722 from vespa-engine/hmusum/file-registry-refactoring

Hmusum/file registry refactoring",https://github.com/vespa-engine/vespa/commit/e26883a3602b9adbab2ec03d015cce55bae2bc2f
2119,2119.0,2293.0,vespa-engine/vespa,019ca2a22da2272777db804023203847ef43282e,"* refactor to get just one method for struct reading
* also, use two simple arrays instead of arraylist of tuples",https://github.com/vespa-engine/vespa/commit/019ca2a22da2272777db804023203847ef43282e
2120,2120.0,2294.0,vespa-engine/vespa,4527658be765161c203e0364daf1b0b46973841d,"Refactor, no functional changes",https://github.com/vespa-engine/vespa/commit/4527658be765161c203e0364daf1b0b46973841d
2121,2121.0,2295.0,vespa-engine/vespa,89cb0e8a41caf684a46c6180a9fc3ad518f78a5b,"actually follow the spec for java ""properties"" format

* filter out various ""interactive shell"" variables
* refactor to get the effective environment",https://github.com/vespa-engine/vespa/commit/89cb0e8a41caf684a46c6180a9fc3ad518f78a5b
2122,2122.0,2296.0,vespa-engine/vespa,3a714a605df786a3194b31d469b61a8e8971b6d9,Refactor,https://github.com/vespa-engine/vespa/commit/3a714a605df786a3194b31d469b61a8e8971b6d9
2123,2123.0,2297.0,vespa-engine/vespa,08b09b27b506c0277241e931ef5ac2756dd302e8,Refactor: Pass and use NodeList,https://github.com/vespa-engine/vespa/commit/08b09b27b506c0277241e931ef5ac2756dd302e8
2124,2124.0,2298.0,vespa-engine/vespa,40202e160b8b3a386b840d045b58899a3f206105,"Merge pull request #24580 from vespa-engine/havardpe/refactor-filter-search-creation

use common algorithms for filter creation",https://github.com/vespa-engine/vespa/commit/40202e160b8b3a386b840d045b58899a3f206105
2125,2125.0,2299.0,vespa-engine/vespa,27f3a824c6fce4a829a36e7834abeb087afeba7b,"Merge pull request #24587 from vespa-engine/revert-24554-arnej/refactor-find-vespa-user

Revert ""move FindVespaUser(), add FindVespaUidAndGid()""",https://github.com/vespa-engine/vespa/commit/27f3a824c6fce4a829a36e7834abeb087afeba7b
2126,2126.0,2300.0,vespa-engine/vespa,86d3b77eeb45d79e35b1698e2f9962b2f36c19c7,"Merge pull request #24554 from vespa-engine/arnej/refactor-find-vespa-user

move FindVespaUser(), add FindVespaUidAndGid()",https://github.com/vespa-engine/vespa/commit/86d3b77eeb45d79e35b1698e2f9962b2f36c19c7
2127,2127.0,2301.0,vespa-engine/vespa,bc47bdeb2655a8767a8887420fae864c8cc9cd0b,"Merge pull request #24390 from vespa-engine/revert-24368-hmusum/refactor-cleanup-of-file-references

Revert ""Refactor cleanup of file references""",https://github.com/vespa-engine/vespa/commit/bc47bdeb2655a8767a8887420fae864c8cc9cd0b
2128,2128.0,2302.0,vespa-engine/vespa,309a3095298d16abd8a969cbc61abadc7fa0c6ea,"Revert ""Refactor cleanup of file references""",https://github.com/vespa-engine/vespa/commit/309a3095298d16abd8a969cbc61abadc7fa0c6ea
2129,2129.0,2303.0,vespa-engine/vespa,57b587d07c464a407745b4557b28b912571e7dfe,"Merge pull request #24368 from vespa-engine/hmusum/refactor-cleanup-of-file-references

Refactor cleanup of file references",https://github.com/vespa-engine/vespa/commit/57b587d07c464a407745b4557b28b912571e7dfe
2130,2130.0,2304.0,vespa-engine/vespa,36bc9cc2d6d01746c42e3041d4e2f000ebb4a7dd,"Merge pull request #24366 from vespa-engine/geirst/datastore-refactor

Refactor Datastore to hide implementation details",https://github.com/vespa-engine/vespa/commit/36bc9cc2d6d01746c42e3041d4e2f000ebb4a7dd
2131,2131.0,2305.0,vespa-engine/vespa,34895c80c6095634944656f9ec107f8c686e5387,"Merge pull request #24364 from vespa-engine/geirst/datastore-buffer-state-refactor

Hide more details inside BufferState and reduce external API on Buffe…",https://github.com/vespa-engine/vespa/commit/34895c80c6095634944656f9ec107f8c686e5387
2132,2132.0,2306.0,vespa-engine/vespa,fda27850b20c56d789ecfed6e2cdf8445ff714de,"Merge pull request #24340 from vespa-engine/geirst/refactor-datastore-buffer-stats-handling

Move tracking of datastore buffer statistics to separate classes.",https://github.com/vespa-engine/vespa/commit/fda27850b20c56d789ecfed6e2cdf8445ff714de
2133,2133.0,2307.0,vespa-engine/vespa,90d17790473d3de2583b4e60b7e31f986d7bb9a2,"Merge pull request #24298 from vespa-engine/hmusum/refactor-bootstrap

Hmusum/refactor bootstrap [run-systemtest]",https://github.com/vespa-engine/vespa/commit/90d17790473d3de2583b4e60b7e31f986d7bb9a2
2134,2134.0,2308.0,vespa-engine/vespa,639aed00c4f4587dc93489bb50916f9d4639b58a,"refactor to ensure ""-bin"" is always added",https://github.com/vespa-engine/vespa/commit/639aed00c4f4587dc93489bb50916f9d4639b58a
2135,2135.0,2309.0,vespa-engine/vespa,a4141f8564378037f2c1261a39ef6734e41eed79,"Merge pull request #24260 from vespa-engine/geirst/array-store-support-for-type-mappers

Refactor ArrayStore to support generic type id to array size mappers.",https://github.com/vespa-engine/vespa/commit/a4141f8564378037f2c1261a39ef6734e41eed79
2136,2136.0,2310.0,vespa-engine/vespa,2381228f5f732282510adfe03f51d52341c618dd,"Refactor ArrayStore to support generic type id to array size mappers.

The default type mapper uses a 1-to-1 mapping between type id and array size for small arrays.",https://github.com/vespa-engine/vespa/commit/2381228f5f732282510adfe03f51d52341c618dd
2137,2137.0,2311.0,vespa-engine/vespa,adab677d1e10eb1157ba3cf0b56a4fdfea0da0a7,minor fixes and refactoring,https://github.com/vespa-engine/vespa/commit/adab677d1e10eb1157ba3cf0b56a4fdfea0da0a7
2138,2138.0,2312.0,vespa-engine/vespa,6a1da6ee3568b6473373d837b70761593958094a,"more compatibility

* refactor setting of environment variables
* and add some more common env vars
* check and/or set some old (compatibiliy) variables",https://github.com/vespa-engine/vespa/commit/6a1da6ee3568b6473373d837b70761593958094a
2139,2139.0,2313.0,vespa-engine/vespa,587f3301e1bf7d896a91c5cd5e86b55b20477e2b,"Merge pull request #24157 from vespa-engine/geirst/searchsummary-refactor

Misc refactoring in searchsummary code",https://github.com/vespa-engine/vespa/commit/587f3301e1bf7d896a91c5cd5e86b55b20477e2b
2140,2140.0,2314.0,vespa-engine/vespa,0bf612ad7f44520fb19e27f55f31419cbf102851,"Merge pull request #24099 from vespa-engine/geirst/refactor-modernize-cpp

Refactor and modernize C++ code in searchsummary",https://github.com/vespa-engine/vespa/commit/0bf612ad7f44520fb19e27f55f31419cbf102851
2141,2141.0,2315.0,vespa-engine/vespa,a5fbb5b41765fa12ea8da3cb6f7837325d3bb3d9,"be more careful about splunk start/stop

* validate the configurable splunk-home
* do stopping via C++ program instead of shell command
* some refactoring of C++ code as well",https://github.com/vespa-engine/vespa/commit/a5fbb5b41765fa12ea8da3cb6f7837325d3bb3d9
2142,2142.0,2316.0,vespa-engine/vespa,d944b733f5596aba6141f88288bbc5bb8baa1af2,"Merge pull request #23985 from vespa-engine/update-stale-comments

Update stale comments after refactoring the code.",https://github.com/vespa-engine/vespa/commit/d944b733f5596aba6141f88288bbc5bb8baa1af2
2143,2143.0,2317.0,vespa-engine/vespa,62ed862f1f66350173a8e0606d2e5f25fab83b93,Update stale comments after refactoring the code.,https://github.com/vespa-engine/vespa/commit/62ed862f1f66350173a8e0606d2e5f25fab83b93
2144,2144.0,2318.0,vespa-engine/vespa,44980f2e321659a88fb394e7e83fcd2f6b8cb430,"Add factory functions for creating capability requirement filters

Refactor existing request access filter creation to use these.",https://github.com/vespa-engine/vespa/commit/44980f2e321659a88fb394e7e83fcd2f6b8cb430
2145,2145.0,2319.0,vespa-engine/vespa,8bba638ca93da728b9604ec828ae0457514c5bc6,"Merge pull request #23738 from vespa-engine/balder/implement-decay-over-time

- Refactor to allow for different decay method.",https://github.com/vespa-engine/vespa/commit/8bba638ca93da728b9604ec828ae0457514c5bc6
2146,2146.0,2320.0,vespa-engine/vespa,26d3b4061d1cb12d59f6eafe48774434793325c3,Minor refactoring of method for waiting for no master fleetcontroller,https://github.com/vespa-engine/vespa/commit/26d3b4061d1cb12d59f6eafe48774434793325c3
2147,2147.0,2321.0,vespa-engine/vespa,591909a0ceaf0de0d89f2aeb0d60d36dbe2a0a62,"- Refactor to allow for different decay method.
- Implement decay over constant time in addition to over requests.
- Default is decay over 500 requests, and 5.0s if you choose to decay over time.",https://github.com/vespa-engine/vespa/commit/591909a0ceaf0de0d89f2aeb0d60d36dbe2a0a62
2148,2148.0,2322.0,vespa-engine/vespa,68995ca7956eb6f6715afec3b07594188e52f8af,Minor refactoring of method for waiting for no master fleetcontroller,https://github.com/vespa-engine/vespa/commit/68995ca7956eb6f6715afec3b07594188e52f8af
2149,2149.0,2323.0,vespa-engine/vespa,7c257dc514b91d1887af483ac56e44210c8ca64a,"Merge pull request #23638 from vespa-engine/hmusum/validate-file-extension-for-app-files-6

Refactor validate file extension for app files",https://github.com/vespa-engine/vespa/commit/7c257dc514b91d1887af483ac56e44210c8ca64a
2150,2150.0,2324.0,vespa-engine/vespa,b0fdd9f2e8885ed21cbf584d6e3b1218ba6ae4d2,"Merge pull request #23620 from vespa-engine/freva/refactor

Fix download button",https://github.com/vespa-engine/vespa/commit/b0fdd9f2e8885ed21cbf584d6e3b1218ba6ae4d2
2151,2151.0,2325.0,vespa-engine/vespa,35b76f6daf216b3d6e158576b05e4e914d58ae13,"Merge pull request #23619 from vespa-engine/freva/refactor

Refactor querybuilder",https://github.com/vespa-engine/vespa/commit/35b76f6daf216b3d6e158576b05e4e914d58ae13
2152,2152.0,2326.0,vespa-engine/vespa,0338d4a7e4011ca93bfeb768c99ac930d3075bf4,"Merge pull request #23435 from vespa-engine/geirst/refactor-distance-closeness-tests

Share fixture classes used by distance and closeness unit tests.",https://github.com/vespa-engine/vespa/commit/0338d4a7e4011ca93bfeb768c99ac930d3075bf4
2153,2153.0,2327.0,vespa-engine/vespa,e7d9fe8f34de567fa257e203f636431c6e3de10f,"Merge pull request #23397 from vespa-engine/geirst/closeness-distance-features-refactor

Refactor shared code between closeness and distance features.",https://github.com/vespa-engine/vespa/commit/e7d9fe8f34de567fa257e203f636431c6e3de10f
2154,2154.0,2328.0,vespa-engine/vespa,848f046a4878ec17276bd25524d50e87ed55383d,"Refactor shared code between closeness and distance features.

This is in preparation for using DistanceCalculator when raw score is not available.",https://github.com/vespa-engine/vespa/commit/848f046a4878ec17276bd25524d50e87ed55383d
2155,2155.0,2329.0,vespa-engine/vespa,cc95d8d155bc689cf0e7fab15271bb795554da8b,"Merge pull request #23383 from vespa-engine/geirst/distance-calculator-validation

Refactor validation code for setting up a distance calculator for re-…",https://github.com/vespa-engine/vespa/commit/cc95d8d155bc689cf0e7fab15271bb795554da8b
2156,2156.0,2330.0,vespa-engine/vespa,a7ab4ec6149b691f4a3cf2241f70aa66f0b72861,Refactor validation code for setting up a distance calculator for re-use in rank features.,https://github.com/vespa-engine/vespa/commit/a7ab4ec6149b691f4a3cf2241f70aa66f0b72861
2157,2157.0,2331.0,vespa-engine/vespa,b8e236091b22552fc0dea58ff1a038831b42a81d,"Merge pull request #23344 from vespa-engine/geirst/common-code-to-access-query-values

Refactor out code used to lookup a query value for re-use other places.",https://github.com/vespa-engine/vespa/commit/b8e236091b22552fc0dea58ff1a038831b42a81d
2158,2158.0,2332.0,vespa-engine/vespa,27d554bdc150f26fab89c25dcd0d93e82bbaf248,Refactor out code used to lookup a query value for re-use other places.,https://github.com/vespa-engine/vespa/commit/27d554bdc150f26fab89c25dcd0d93e82bbaf248
2159,2159.0,2333.0,vespa-engine/vespa,bacbace97d8e54aa2e4a3ac9a5be34a826e12b9e,"Refactor Capability(Set) and add more testing

Hide all nitty-gritty details of how capabilities map to internal
bit set positions by making more of Capability private and only
allowing CapabilitySet to see how the sausages are made. Move all
bit set functionality to CapabilitySet, where it really belongs.",https://github.com/vespa-engine/vespa/commit/bacbace97d8e54aa2e4a3ac9a5be34a826e12b9e
2160,2160.0,2334.0,vespa-engine/vespa,2edc796a4aae38fb6d468a69600da9ba07254fa5,"Merge pull request #23277 from vespa-engine/geirst/refactor-out-distance-calculator-class

Refactor out class to calculate the distance between attribute tensor…",https://github.com/vespa-engine/vespa/commit/2edc796a4aae38fb6d468a69600da9ba07254fa5
2161,2161.0,2335.0,vespa-engine/vespa,503e7815b43ada394d58ac6f6697ab767650683e,"Refactor out class to calculate the distance between attribute tensor and query tensor.

This will be re-used by distance and closeness rank features.",https://github.com/vespa-engine/vespa/commit/503e7815b43ada394d58ac6f6697ab767650683e
2162,2162.0,2336.0,vespa-engine/vespa,41e3d0dd97603c5bcb13844c2cd2f7f7472ba266,"Merge pull request #23257 from vespa-engine/toregge/refactor-summarymap-derive

Refactor SummaryMap.derive().",https://github.com/vespa-engine/vespa/commit/41e3d0dd97603c5bcb13844c2cd2f7f7472ba266
2163,2163.0,2337.0,vespa-engine/vespa,0852c946819396008e8939f23b182d4623d70e7a,Refactor SummaryMap.derive().,https://github.com/vespa-engine/vespa/commit/0852c946819396008e8939f23b182d4623d70e7a
2164,2164.0,2338.0,vespa-engine/vespa,8d8b96b3620f4de369bed60a9c19b6a5fc8b0e95,Refactor: Pull tracing into its own class,https://github.com/vespa-engine/vespa/commit/8d8b96b3620f4de369bed60a9c19b6a5fc8b0e95
2165,2165.0,2339.0,vespa-engine/vespa,1281b338df996727bbf97ce9c18bf438b8be4a72,Refactor JUnitRunner for testability,https://github.com/vespa-engine/vespa/commit/1281b338df996727bbf97ce9c18bf438b8be4a72
2166,2166.0,2340.0,vespa-engine/vespa,27e019f602da01ac331a535b7fbfd49190f1b761,Refactor tests,https://github.com/vespa-engine/vespa/commit/27e019f602da01ac331a535b7fbfd49190f1b761
2167,2167.0,2341.0,vespa-engine/vespa,ce8e0f1425667f487182539cd9922a0cbb15133f,Refactor tests,https://github.com/vespa-engine/vespa/commit/ce8e0f1425667f487182539cd9922a0cbb15133f
2168,2168.0,2342.0,vespa-engine/vespa,2d0a77e003cf0cdfaf619d62af90ba0fb0aac710,"use atomic operations to propagate bits and bitvector size

minor refactoring due to adding load/store word functions",https://github.com/vespa-engine/vespa/commit/2d0a77e003cf0cdfaf619d62af90ba0fb0aac710
2169,2169.0,2343.0,vespa-engine/vespa,494129237f9e693314769aef4fe9e7fd7c1bc406,"Merge pull request #22128 from vespa-engine/hmusum/config-proxy-refactoring-1

Use Optional for getConfig/resolveConfig calls",https://github.com/vespa-engine/vespa/commit/494129237f9e693314769aef4fe9e7fd7c1bc406
2170,2170.0,2344.0,vespa-engine/vespa,7ac6ebd9fc7c3f1b42d374565149aec25fb61550,"Merge pull request #21998 from vespa-engine/balder/refactor-to-favor-hot-path

Refactor to optimize for hot path.",https://github.com/vespa-engine/vespa/commit/7ac6ebd9fc7c3f1b42d374565149aec25fb61550
2171,2171.0,2345.0,vespa-engine/vespa,04ec819f7891737b64dd88c85044392d5fc85284,refactor after review,https://github.com/vespa-engine/vespa/commit/04ec819f7891737b64dd88c85044392d5fc85284
2172,2172.0,2346.0,vespa-engine/vespa,858c67f8a3cdae524344e6cbb22f6581c4352966,"Refactor to optimize for hot path.
No reason to count characters when you already now there can only be one.
Nor is there any reason to check for surrogates when there can be none.",https://github.com/vespa-engine/vespa/commit/858c67f8a3cdae524344e6cbb22f6581c4352966
2173,2173.0,2347.0,vespa-engine/vespa,e9219b176aa3e3c791dfef78f924a39bdc321958,minor modernization / refactoring,https://github.com/vespa-engine/vespa/commit/e9219b176aa3e3c791dfef78f924a39bdc321958
2174,2174.0,2348.0,vespa-engine/vespa,7b64d618dc6def24bd4d424714b4004f7640e871,refactor big method into helper class,https://github.com/vespa-engine/vespa/commit/7b64d618dc6def24bd4d424714b4004f7640e871
2175,2175.0,2349.0,vespa-engine/vespa,d7a5a862966e408de4999718bab4162e06158937,"setup from new doctype array

* unit test everything that was in the old unit test
* note: unit test is pragmatic for now
* the new configureDocTypes function should probably be
  refactored into a helper class",https://github.com/vespa-engine/vespa/commit/d7a5a862966e408de4999718bab4162e06158937
2176,2176.0,2350.0,vespa-engine/vespa,d8325551d8e84599bc6ef6ad2c14f83d82490a73,"Merge pull request #21878 from vespa-engine/mpolden/cli-auth0-rewrite

Refactor and test auth0 package",https://github.com/vespa-engine/vespa/commit/d8325551d8e84599bc6ef6ad2c14f83d82490a73
2177,2177.0,2351.0,vespa-engine/vespa,8d85938bfcbb86e6fb720c01f543b0f0e6f07037,Refactor and test auth0 package,https://github.com/vespa-engine/vespa/commit/8d85938bfcbb86e6fb720c01f543b0f0e6f07037
2178,2178.0,2352.0,vespa-engine/vespa,34cf5db6ceeb838f1850558984cbe5e06d63870f,"Merge pull request #21757 from vespa-engine/vekterli/fix-visitor-mgr-test-tsan-deadlock-warning

Fix visitor manager test TSan mutex inversion warning and refactor deadline handling [run-systemtest]",https://github.com/vespa-engine/vespa/commit/34cf5db6ceeb838f1850558984cbe5e06d63870f
2179,2179.0,2353.0,vespa-engine/vespa,9aeff921406eb238bedf0210803b1bea441030aa,Clean up and refactor visitor management code,https://github.com/vespa-engine/vespa/commit/9aeff921406eb238bedf0210803b1bea441030aa
2180,2180.0,2354.0,vespa-engine/vespa,9be87dcfc81d88b7aa5df918047ba3ab977b6c3f,"Fix visitor manager test TSan mutex inversion warning and refactor deadline handling

Defer starting main message dispatch thread until test has enqueued a message
that will be immediately timed out. Avoids having to depend on taking an
internal mutex in the test to prevent racing with queue handoffs. Taking
said mutex triggered a mutex order inversion warning in TSan.

Also refactor visitor queue deadline handling by moving to a strongly typed
time point. This removes some manual unit scaling arithmetic that did not
appear to be entirely correct in the first place.",https://github.com/vespa-engine/vespa/commit/9be87dcfc81d88b7aa5df918047ba3ab977b6c3f
2181,2181.0,2355.0,vespa-engine/vespa,f5b958de6c8473dc7e09a6675af4c63d504827d8,simplify after refactoring,https://github.com/vespa-engine/vespa/commit/f5b958de6c8473dc7e09a6675af4c63d504827d8
2182,2182.0,2356.0,vespa-engine/vespa,3a0fad1f0a1506397754c417daf3fc255b0f98a8,"Merge pull request #21592 from vespa-engine/arnej/refactor-type-extraction

Arnej/refactor type extraction",https://github.com/vespa-engine/vespa/commit/3a0fad1f0a1506397754c417daf3fc255b0f98a8
2183,2183.0,2357.0,vespa-engine/vespa,2e05df2de19c2d5b87befa2ee6c4fd182dcb5630,"Merge pull request #21555 from vespa-engine/mpolden/refactor

Refactor cmd package to eliminate package-level state",https://github.com/vespa-engine/vespa/commit/2e05df2de19c2d5b87befa2ee6c4fd182dcb5630
2184,2184.0,2358.0,vespa-engine/vespa,c1b4b2a8feb522b7f3a9ea7eb0f06ff4e8c890ba,Refactor cmd package to eliminate package-level state,https://github.com/vespa-engine/vespa/commit/c1b4b2a8feb522b7f3a9ea7eb0f06ff4e8c890ba
2185,2185.0,2359.0,vespa-engine/vespa,9be60dfb9b24a8c222a63343ad480e6f40d5aa47,"handle already-resolved StructDataType also

* handle Temporary struct as before
* handle a ""real"" StructDataType more directly
* refactor common code into a lambda",https://github.com/vespa-engine/vespa/commit/9be60dfb9b24a8c222a63343ad480e6f40d5aa47
2186,2186.0,2360.0,vespa-engine/vespa,25522c23874c34679729ea46ce2a3ad8e8612a45,refactor with helper parent class,https://github.com/vespa-engine/vespa/commit/25522c23874c34679729ea46ce2a3ad8e8612a45
2187,2187.0,2361.0,vespa-engine/vespa,3d159ee87f54409f0df2e306e698bb1381ec7365,"- Use common tranport for TlsClient.
- Also refactor to simplify unit tests.",https://github.com/vespa-engine/vespa/commit/3d159ee87f54409f0df2e306e698bb1381ec7365
2188,2188.0,2362.0,vespa-engine/vespa,80bf8df285a1ecf1f5f253eeb4e49f600fcbad9a,"Merge pull request #21210 from vespa-engine/mpolden/better-error-handling

Refactor Vespa CLI error handling",https://github.com/vespa-engine/vespa/commit/80bf8df285a1ecf1f5f253eeb4e49f600fcbad9a
2189,2189.0,2363.0,vespa-engine/vespa,88e4d177ebd95613ed87fe7fa9575aad0656056b,Refactor error handling,https://github.com/vespa-engine/vespa/commit/88e4d177ebd95613ed87fe7fa9575aad0656056b
2190,2190.0,2364.0,vespa-engine/vespa,1ccd43e405bcbeae4fe1dda27847868312b15263,"Merge pull request #21170 from vespa-engine/havardpe/refactor-test-code

refactor out common code",https://github.com/vespa-engine/vespa/commit/1ccd43e405bcbeae4fe1dda27847868312b15263
2191,2191.0,2365.0,vespa-engine/vespa,f9c536e0b9dbf71a68a57e08ebe94084ae366be8,"refactor out common code

also test with new probe_model",https://github.com/vespa-engine/vespa/commit/f9c536e0b9dbf71a68a57e08ebe94084ae366be8
2192,2192.0,2366.0,vespa-engine/vespa,4d2166ee39ed6c79ea2568041eb3ef809bf53791,Refactor to avoid code duplication.,https://github.com/vespa-engine/vespa/commit/4d2166ee39ed6c79ea2568041eb3ef809bf53791
2193,2193.0,2367.0,vespa-engine/vespa,d1d19bbb3ae7f1d39a56624c45347b437c1fcb19,"Merge pull request #20966 from vespa-engine/balder/reduce-code-duplication-for-write

Refactor to reduce code duplication for write path.",https://github.com/vespa-engine/vespa/commit/d1d19bbb3ae7f1d39a56624c45347b437c1fcb19
2194,2194.0,2368.0,vespa-engine/vespa,67837c8bbd9583a0b0cdd388436328a4b8649362,Refactor to reduce code duplication for write path.,https://github.com/vespa-engine/vespa/commit/67837c8bbd9583a0b0cdd388436328a4b8649362
2195,2195.0,2369.0,vespa-engine/vespa,65f52f88b1fc452aff7c99739f0e32b35a3a6be4,"Merge pull request #20955 from vespa-engine/balder/reduce-code-duplication-for-read

Refactor to reduce code duplication.",https://github.com/vespa-engine/vespa/commit/65f52f88b1fc452aff7c99739f0e32b35a3a6be4
2196,2196.0,2370.0,vespa-engine/vespa,8298c4ad7edd117892aa99c17949269ad0f8024c,Refactor to reduce code duplication.,https://github.com/vespa-engine/vespa/commit/8298c4ad7edd117892aa99c17949269ad0f8024c
2197,2197.0,2371.0,vespa-engine/vespa,6a7fbb1dc9b77bb9ebbbc8083ccd426bf0be8624,refactor,https://github.com/vespa-engine/vespa/commit/6a7fbb1dc9b77bb9ebbbc8083ccd426bf0be8624
2198,2198.0,2372.0,vespa-engine/vespa,d42f6e63436472264fc6335f7247605ad77b9a9d,"Merge pull request #20829 from vespa-engine/hmusum/refactor-tests

Hmusum/refactor tests [run-systemtest]",https://github.com/vespa-engine/vespa/commit/d42f6e63436472264fc6335f7247605ad77b9a9d
2199,2199.0,2373.0,vespa-engine/vespa,abed5b3bc94d3985dc591dee52f8e7eb08847efc,Refactor and simplify,https://github.com/vespa-engine/vespa/commit/abed5b3bc94d3985dc591dee52f8e7eb08847efc
2200,2200.0,2374.0,vespa-engine/vespa,a0fa1048ba798b6b7efbd26a882c64c783dd4c01,"Merge pull request #20769 from vespa-engine/toregge/refactor-tracking-of-active-disk-indexes

Refactor tracking of active disk indexes.",https://github.com/vespa-engine/vespa/commit/a0fa1048ba798b6b7efbd26a882c64c783dd4c01
2201,2201.0,2375.0,vespa-engine/vespa,bd8b40d91afed3ed566677385d7c11643825e4b2,Refactor tracking of active disk indexes.,https://github.com/vespa-engine/vespa/commit/bd8b40d91afed3ed566677385d7c11643825e4b2
2202,2202.0,2376.0,vespa-engine/vespa,46f6734372751c52b70b005e6ae25316525e554b,"Merge pull request #20682 from vespa-engine/toregge/refactor-field-merger

Refactor field merger.",https://github.com/vespa-engine/vespa/commit/46f6734372751c52b70b005e6ae25316525e554b
2203,2203.0,2377.0,vespa-engine/vespa,0867ac297c706bf962c2154ba2425f3a2ba2fa88,"Merge pull request #20686 from vespa-engine/revert-20685-revert-20679-balder/refactor-docentry

Revert ""Revert ""Balder/refactor docentry""""",https://github.com/vespa-engine/vespa/commit/0867ac297c706bf962c2154ba2425f3a2ba2fa88
2204,2204.0,2378.0,vespa-engine/vespa,776a02c236bb78b64d6bb7643f4a5acf2ab0f1e1,"Revert ""Revert ""Balder/refactor docentry""""",https://github.com/vespa-engine/vespa/commit/776a02c236bb78b64d6bb7643f4a5acf2ab0f1e1
2205,2205.0,2379.0,vespa-engine/vespa,499d884cefeac2a4f5dc071814d1a64ddc249875,"Merge pull request #20685 from vespa-engine/revert-20679-balder/refactor-docentry

Revert ""Balder/refactor docentry""",https://github.com/vespa-engine/vespa/commit/499d884cefeac2a4f5dc071814d1a64ddc249875
2206,2206.0,2380.0,vespa-engine/vespa,7152fe6fd7782fc453ce0a6cf87ea0cc4ed89c3b,"Revert ""Balder/refactor docentry""",https://github.com/vespa-engine/vespa/commit/7152fe6fd7782fc453ce0a6cf87ea0cc4ed89c3b
2207,2207.0,2381.0,vespa-engine/vespa,bbebf2d205e181db1f28a297e4a96a08323a2c27,"Merge pull request #20679 from vespa-engine/balder/refactor-docentry

Balder/refactor docentry",https://github.com/vespa-engine/vespa/commit/bbebf2d205e181db1f28a297e4a96a08323a2c27
2208,2208.0,2382.0,vespa-engine/vespa,d4463837e5e6ccbfd3ece320f6a399ff2b1376b4,Refactor field merger.,https://github.com/vespa-engine/vespa/commit/d4463837e5e6ccbfd3ece320f6a399ff2b1376b4
2209,2209.0,2383.0,vespa-engine/vespa,f987d5642c69a0134e1fc8b2b87f0142160a68b0,"Merge pull request #20582 from vespa-engine/balder/refactor-and-speedup-handlevalue

- Refactor and speedup MetricParser.handleValue.",https://github.com/vespa-engine/vespa/commit/f987d5642c69a0134e1fc8b2b87f0142160a68b0
2210,2210.0,2384.0,vespa-engine/vespa,22f954fafad86a2bd04955bda99d1b8f312f9d81,"- Refactor and speedup MetricParser.handleValue.
- Only use streaming jackson parsing
- Aggregate hash codes to make unique dimension keys.",https://github.com/vespa-engine/vespa/commit/22f954fafad86a2bd04955bda99d1b8f312f9d81
2211,2211.0,2385.0,vespa-engine/vespa,b04cb1a7473be306f2ccf5c319a930500995e505,"Merge pull request #20477 from vespa-engine/revert-20366-revert-20350-hmusum/config-subscription-refactoring-part-5

Reapply ""Config subscription refactoring part 5""",https://github.com/vespa-engine/vespa/commit/b04cb1a7473be306f2ccf5c319a930500995e505
2212,2212.0,2386.0,vespa-engine/vespa,2da6a5d405d9df1cc88a755735c47a0b74546f14,"Log JVM GC options to deploy log

Refactor and prepare for validating JVM options. Logging only for now
to see what is actually in use in hosted Vespa",https://github.com/vespa-engine/vespa/commit/2da6a5d405d9df1cc88a755735c47a0b74546f14
2213,2213.0,2387.0,vespa-engine/vespa,415b8df2bab22b597cdaefb8133c009eff026dd1,Merge branch 'master' into revert-20366-revert-20350-hmusum/config-subscription-refactoring-part-5,https://github.com/vespa-engine/vespa/commit/415b8df2bab22b597cdaefb8133c009eff026dd1
2214,2214.0,2388.0,vespa-engine/vespa,bc117aa5fd1aaa54ae8c86c103899bc81b5d481f,Merge branch 'master' into revert-20366-revert-20350-hmusum/config-subscription-refactoring-part-5,https://github.com/vespa-engine/vespa/commit/bc117aa5fd1aaa54ae8c86c103899bc81b5d481f
2215,2215.0,2389.0,vespa-engine/vespa,b6a476ea1f7b5f07710e62d7fb00142503289c04,"Merge pull request #20459 from vespa-engine/balder/refactor-operation-counting

Move operation counting out to separate class",https://github.com/vespa-engine/vespa/commit/b6a476ea1f7b5f07710e62d7fb00142503289c04
2216,2216.0,2390.0,vespa-engine/vespa,9ed631e3af71e1e91743faa1745f93b45b3c5cec,"Merge pull request #20458 from vespa-engine/revert-20453-revert-20448-hmusum/refactor-config-proxy

Reapply ""Hmusum/refactor config proxy"" [run-systemtest]",https://github.com/vespa-engine/vespa/commit/9ed631e3af71e1e91743faa1745f93b45b3c5cec
2217,2217.0,2391.0,vespa-engine/vespa,3fca6584773338c6166c1f3016f384f834e97426,"Revert ""Revert ""Hmusum/refactor config proxy [run-systemtest]""""",https://github.com/vespa-engine/vespa/commit/3fca6584773338c6166c1f3016f384f834e97426
2218,2218.0,2392.0,vespa-engine/vespa,c99b914f967b392cc72cba021f47fc18aea3f009,"Merge pull request #20453 from vespa-engine/revert-20448-hmusum/refactor-config-proxy

Revert ""Hmusum/refactor config proxy [run-systemtest]""",https://github.com/vespa-engine/vespa/commit/c99b914f967b392cc72cba021f47fc18aea3f009
2219,2219.0,2393.0,vespa-engine/vespa,134121cc3b046de15c5ba4360c84586eb8fe0836,"Revert ""Hmusum/refactor config proxy [run-systemtest]""",https://github.com/vespa-engine/vespa/commit/134121cc3b046de15c5ba4360c84586eb8fe0836
2220,2220.0,2394.0,vespa-engine/vespa,f2885492b5b7637b69c5284a65070c0b5202b42c,"Merge pull request #20448 from vespa-engine/hmusum/refactor-config-proxy

Hmusum/refactor config proxy [run-systemtest]",https://github.com/vespa-engine/vespa/commit/f2885492b5b7637b69c5284a65070c0b5202b42c
2221,2221.0,2395.0,vespa-engine/vespa,65c26f63261639575911dcda9a5d43dfcf7ebb04,"- Separate encoding and actual persitence of the transaction log.
- Refactor in preparation of multithreaded encode.",https://github.com/vespa-engine/vespa/commit/65c26f63261639575911dcda9a5d43dfcf7ebb04
2222,2222.0,2396.0,vespa-engine/vespa,c85d5d3ab13b01fd9f66629b5439bb488afd168c,"Revert ""Revert ""Config subscription refactoring, part 5 [run-systemtest]""""",https://github.com/vespa-engine/vespa/commit/c85d5d3ab13b01fd9f66629b5439bb488afd168c
2223,2223.0,2397.0,vespa-engine/vespa,e69ad799a335618eaf098bcdaab15f16220c78af,"Merge pull request #20366 from vespa-engine/revert-20350-hmusum/config-subscription-refactoring-part-5

Revert ""Config subscription refactoring, part 5 [run-systemtest]""",https://github.com/vespa-engine/vespa/commit/e69ad799a335618eaf098bcdaab15f16220c78af
2224,2224.0,2398.0,vespa-engine/vespa,1583971111661c5edb1170309a61c485c102f95b,"Revert ""Config subscription refactoring, part 5 [run-systemtest]""",https://github.com/vespa-engine/vespa/commit/1583971111661c5edb1170309a61c485c102f95b
2225,2225.0,2399.0,vespa-engine/vespa,e466832157da463459ee4e65ba8c83119c6a39e6,"Merge pull request #20350 from vespa-engine/hmusum/config-subscription-refactoring-part-5

Config subscription refactoring, part 5 [run-systemtest]",https://github.com/vespa-engine/vespa/commit/e466832157da463459ee4e65ba8c83119c6a39e6
2226,2226.0,2400.0,vespa-engine/vespa,dd8b7bd82a0327e6d4c1c7a08e3aa7625d475354,"Merge pull request #20345 from vespa-engine/hmusum/config-subscription-refactoring-part-4

Minor cleanup of ConfigSource in subscriptions [run-systemtest]",https://github.com/vespa-engine/vespa/commit/dd8b7bd82a0327e6d4c1c7a08e3aa7625d475354
2227,2227.0,2401.0,vespa-engine/vespa,7ba1844cc7eb58886a1926ba14642ab2854decbd,Extract RoutingPolicyList and refactor,https://github.com/vespa-engine/vespa/commit/7ba1844cc7eb58886a1926ba14642ab2854decbd
2228,2228.0,2402.0,vespa-engine/vespa,b9fe86b6f81c4da88a0d5db9abc000849ab3e296,"Merge pull request #20271 from vespa-engine/arnej/refactor-document-type-manager-configurer

Arnej/refactor document type manager configurer",https://github.com/vespa-engine/vespa/commit/b9fe86b6f81c4da88a0d5db9abc000849ab3e296
2229,2229.0,2403.0,vespa-engine/vespa,142423294621e37c2d41606d4e364296660e5c52,refactor for better readability and robustness,https://github.com/vespa-engine/vespa/commit/142423294621e37c2d41606d4e364296660e5c52
2230,2230.0,2404.0,vespa-engine/vespa,f1bdb9ea29174848d18c3b732929ed44ae00f356,refactor so config application can have some internal state,https://github.com/vespa-engine/vespa/commit/f1bdb9ea29174848d18c3b732929ed44ae00f356
2231,2231.0,2405.0,vespa-engine/vespa,e116905c40bfee307f107f09ae56b15366646d43,"Merge pull request #20244 from vespa-engine/geirst/refactor-setup-of-shared-thread-executors

Refactor setup of thread executors that are shared across all documen…",https://github.com/vespa-engine/vespa/commit/e116905c40bfee307f107f09ae56b15366646d43
2232,2232.0,2406.0,vespa-engine/vespa,716ea48965fa5533afce70ad6edadb4fda47612f,"Refactor setup of thread executors that are shared across all document dbs.

This is in preparation of a shared field writer executor.",https://github.com/vespa-engine/vespa/commit/716ea48965fa5533afce70ad6edadb4fda47612f
2233,2233.0,2407.0,vespa-engine/vespa,dfcf411bacc993d20ff293c9e4c2ae101f357a6f,"Merge pull request #20188 from vespa-engine/hmusum/config-tests-refactoring

Hmusum/config tests refactoring",https://github.com/vespa-engine/vespa/commit/dfcf411bacc993d20ff293c9e4c2ae101f357a6f
2234,2234.0,2408.0,vespa-engine/vespa,a64ef8e0e938e51dfdf85d788eafa1f4803bde28,"Merge pull request #20121 from vespa-engine/mpolden/routing-refactor

Configure all routing variants through a RoutingContext",https://github.com/vespa-engine/vespa/commit/a64ef8e0e938e51dfdf85d788eafa1f4803bde28
2235,2235.0,2409.0,vespa-engine/vespa,460b115fd8cad64536715597ef4fa8af5bd4fe14,"Refactor, no funtional changes",https://github.com/vespa-engine/vespa/commit/460b115fd8cad64536715597ef4fa8af5bd4fe14
2236,2236.0,2410.0,vespa-engine/vespa,4864a7297b0301a786eef684c5f579e629926b58,"Merge pull request #19944 from vespa-engine/mpolden/refactor-endpoint-methods

Refactor endpoint methods",https://github.com/vespa-engine/vespa/commit/4864a7297b0301a786eef684c5f579e629926b58
2237,2237.0,2411.0,vespa-engine/vespa,996866ef40c42e1d6c26bc5be47eaf099d9f4bfd,"Merge pull request #19908 from vespa-engine/havardpe/refactor-to-reduce-duplication

refactor code to reduce duplication",https://github.com/vespa-engine/vespa/commit/996866ef40c42e1d6c26bc5be47eaf099d9f4bfd
2238,2238.0,2412.0,vespa-engine/vespa,3d41d24539d816c97f37052180c0ace16ba6cf8b,"refactor code to reduce duplication

add let the resolver be more const",https://github.com/vespa-engine/vespa/commit/3d41d24539d816c97f37052180c0ace16ba6cf8b
2239,2239.0,2413.0,vespa-engine/vespa,216dc455d2f712dc3266fa39f0f4e769ea8e1ab4,"Merge pull request #19829 from vespa-engine/hmusum/minor-config-server-bootstrap-refactoring

Simplify and log number of redeploy threads [run-systemtest]",https://github.com/vespa-engine/vespa/commit/216dc455d2f712dc3266fa39f0f4e769ea8e1ab4
2240,2240.0,2414.0,vespa-engine/vespa,25bcb14624f29d0bed3399c8fd83a935fbb3482b,Add a note about refactoring in the plugin's description,https://github.com/vespa-engine/vespa/commit/25bcb14624f29d0bed3399c8fd83a935fbb3482b
2241,2241.0,2415.0,vespa-engine/vespa,7e8239694d2ed95d6e0f4c77249c0b7892afb0a1,"Merge pull request #19629 from vespa-engine/hmusum/refactor-file-downloads

Refactor file downloads, retry fewer times",https://github.com/vespa-engine/vespa/commit/7e8239694d2ed95d6e0f4c77249c0b7892afb0a1
2242,2242.0,2416.0,vespa-engine/vespa,8b65d8a6a47cfef806cd44c3c59e8e14d71c90b9,"Merge pull request #19596 from vespa-engine/revert-19590-balder/unify-and-simplify-more-async-operations

Revert ""- Refactor and use CatchResult in the PersistenceEngine in preparatio…""",https://github.com/vespa-engine/vespa/commit/8b65d8a6a47cfef806cd44c3c59e8e14d71c90b9
2243,2243.0,2417.0,vespa-engine/vespa,b66bb8b16e238b8b0219ccc8f6327bad7f7b8abd,"Revert ""- Refactor and use CatchResult in the PersistenceEngine in preparatio…""",https://github.com/vespa-engine/vespa/commit/b66bb8b16e238b8b0219ccc8f6327bad7f7b8abd
2244,2244.0,2418.0,vespa-engine/vespa,c17331af2280acf18d78d92ce5e3e7071edaf7d1,"Merge pull request #19590 from vespa-engine/balder/unify-and-simplify-more-async-operations

- Refactor and use CatchResult in the PersistenceEngine in preparatio…",https://github.com/vespa-engine/vespa/commit/c17331af2280acf18d78d92ce5e3e7071edaf7d1
2245,2245.0,2419.0,vespa-engine/vespa,98a41274aace2131b34dad2faf253aa506d313c7,- Refactor and use CatchResult in the PersistenceEngine in preparation for making more moretaions async.,https://github.com/vespa-engine/vespa/commit/98a41274aace2131b34dad2faf253aa506d313c7
2246,2246.0,2420.0,vespa-engine/vespa,6263c9bec9f2655d0388d3d2933fb079f4a79381,Minore refactoring,https://github.com/vespa-engine/vespa/commit/6263c9bec9f2655d0388d3d2933fb079f4a79381
2247,2247.0,2421.0,vespa-engine/vespa,471db5f7a1bc16bd5e8be9b80a5f06ee28967b16,"Merge pull request #19502 from vespa-engine/revert-19496-revert-19485-revert-18572-ogronnesby/billing-service

Revert ""Revert ""Revert ""Billing refactoring and cleanup""""""",https://github.com/vespa-engine/vespa/commit/471db5f7a1bc16bd5e8be9b80a5f06ee28967b16
2248,2248.0,2422.0,vespa-engine/vespa,292ba88e1a7254982deb5894248109b539e6ee1f,"Revert ""Revert ""Revert ""Billing refactoring and cleanup""""""",https://github.com/vespa-engine/vespa/commit/292ba88e1a7254982deb5894248109b539e6ee1f
2249,2249.0,2423.0,vespa-engine/vespa,b96801ba355506890fbd16d7b1270d09746911ef,"Merge pull request #19496 from vespa-engine/revert-19485-revert-18572-ogronnesby/billing-service

Revert ""Revert ""Billing refactoring and cleanup""""",https://github.com/vespa-engine/vespa/commit/b96801ba355506890fbd16d7b1270d09746911ef
2250,2250.0,2424.0,vespa-engine/vespa,5e9f649da988f171e34952f6626096dbd4c2093b,"Revert ""Revert ""Billing refactoring and cleanup""""",https://github.com/vespa-engine/vespa/commit/5e9f649da988f171e34952f6626096dbd4c2093b
2251,2251.0,2425.0,vespa-engine/vespa,631ed5f120380a0599129b41d43f33fc718dbed1,"Merge pull request #19485 from vespa-engine/revert-18572-ogronnesby/billing-service

Revert ""Billing refactoring and cleanup""",https://github.com/vespa-engine/vespa/commit/631ed5f120380a0599129b41d43f33fc718dbed1
2252,2252.0,2426.0,vespa-engine/vespa,5d65869d6e99489d22cc273be1f7562d19f45dbb,"Revert ""Billing refactoring and cleanup""",https://github.com/vespa-engine/vespa/commit/5d65869d6e99489d22cc273be1f7562d19f45dbb
2253,2253.0,2427.0,vespa-engine/vespa,c54d87ce2c18bdd929e15942d39ce8cc33cd7087,"Merge pull request #18572 from vespa-engine/ogronnesby/billing-service

Billing refactoring and cleanup",https://github.com/vespa-engine/vespa/commit/c54d87ce2c18bdd929e15942d39ce8cc33cd7087
2254,2254.0,2428.0,vespa-engine/vespa,b3932b8ef0b3204cb59c0aad4e5a2ffb6ff083ae,"Merge pull request #19479 from vespa-engine/hmusum/connection-pool-refactoring-2

Remove getSupervisor() from ConnectionPool interface [run-systemtest]",https://github.com/vespa-engine/vespa/commit/b3932b8ef0b3204cb59c0aad4e5a2ffb6ff083ae
2255,2255.0,2429.0,vespa-engine/vespa,ea08d7248870ad9c49448cc9e1b1dbf83fe91a8d,"Merge pull request #19461 from vespa-engine/hmusum/connection-pool-refactoring

Reuse supervisor when we have one [run-systemtest]",https://github.com/vespa-engine/vespa/commit/ea08d7248870ad9c49448cc9e1b1dbf83fe91a8d
2256,2256.0,2430.0,vespa-engine/vespa,4b837462afa5ae9adbebc10c226637ae04e05007,"Merge pull request #19452 from vespa-engine/bjorncs/jetty-async-listener

Refactor async completion logic for read and write path [run-systemtest]",https://github.com/vespa-engine/vespa/commit/4b837462afa5ae9adbebc10c226637ae04e05007
2257,2257.0,2431.0,vespa-engine/vespa,79a55aeadac600f8f2e32ed17b9832854bf851e7,"Refactor async completion logic for read and write path

Ensure that failure from request read, write or async context correctly terminates request processing.",https://github.com/vespa-engine/vespa/commit/79a55aeadac600f8f2e32ed17b9832854bf851e7
2258,2258.0,2432.0,vespa-engine/vespa,972c8fdf7312161c134f402a618cde06f13e1a45,"Merge pull request #19440 from vespa-engine/hmusum/config-subscription-refactoring-part-3

Refactor so that logic is in nextConfig() [run-systemtest]",https://github.com/vespa-engine/vespa/commit/972c8fdf7312161c134f402a618cde06f13e1a45
2259,2259.0,2433.0,vespa-engine/vespa,1ae463dc5a1c9ff89687f45cce01ce7087ffe4e6,"Refactor so that logic is in nextConfig()

Only other change is that we no longer call peek() and return early
if there is nothing in queue, I cannot see any reason for that.",https://github.com/vespa-engine/vespa/commit/1ae463dc5a1c9ff89687f45cce01ce7087ffe4e6
2260,2260.0,2434.0,vespa-engine/vespa,5d24ada77e0f61eca8b0c66e13de02c868ce9147,"Merge pull request #19422 from vespa-engine/hmusum/config-subscription-refactoring-part-1

Hmusum/config subscription refactoring part 1 [run-systemtest]",https://github.com/vespa-engine/vespa/commit/5d24ada77e0f61eca8b0c66e13de02c868ce9147
2261,2261.0,2435.0,vespa-engine/vespa,cd818461f360b504f0e4d2c5e3c99722a9b5508f,"Refactor some logging, no functional changes",https://github.com/vespa-engine/vespa/commit/cd818461f360b504f0e4d2c5e3c99722a9b5508f
2262,2262.0,2436.0,vespa-engine/vespa,bdcfb72c99bc1313801e10ba87612cd0e364644a,"Merge pull request #19363 from vespa-engine/balder/pull-reading-of-nodes-further-out

Refactor and read nodes from node repo further out.",https://github.com/vespa-engine/vespa/commit/bdcfb72c99bc1313801e10ba87612cd0e364644a
2263,2263.0,2437.0,vespa-engine/vespa,9d768c33c6a66f393978cd3119bef0a2e4db5f69,Refactor to separate happy and hard path.,https://github.com/vespa-engine/vespa/commit/9d768c33c6a66f393978cd3119bef0a2e4db5f69
2264,2264.0,2438.0,vespa-engine/vespa,b353bc0de2c09598cf16c3b28f05caa10619837d,Refactor and read nodes from node repo further out.,https://github.com/vespa-engine/vespa/commit/b353bc0de2c09598cf16c3b28f05caa10619837d
2265,2265.0,2439.0,vespa-engine/vespa,fcef59615fc2735e0663f36e285b8a79105a1dd4,"Merge pull request #19253 from vespa-engine/balder/refactor-clusterstate-to-avoid-checking-type-everywhere

Refactor cluster state to avoid checking NodeType everywhere and redu…",https://github.com/vespa-engine/vespa/commit/fcef59615fc2735e0663f36e285b8a79105a1dd4
2266,2266.0,2440.0,vespa-engine/vespa,4b34c59a9439d3b62259e9712f55543ed7068f34,Refactor cluster state to avoid checking NodeType everywhere and reduce code duplication.,https://github.com/vespa-engine/vespa/commit/4b34c59a9439d3b62259e9712f55543ed7068f34
2267,2267.0,2441.0,vespa-engine/vespa,b0f91ec4a095b504de59ac32a7a56e4c70f72725,"Merge pull request #19209 from vespa-engine/geirst/refactor-tracking-of-cluster-state-and-distribution

Use BucketSpaceStateMap to track cluster state and distribution in th…",https://github.com/vespa-engine/vespa/commit/b0f91ec4a095b504de59ac32a7a56e4c70f72725
2268,2268.0,2442.0,vespa-engine/vespa,ef7854b61b38c6b1c1bd671b0c8e6d76554ce354,Refactor to separate classes,https://github.com/vespa-engine/vespa/commit/ef7854b61b38c6b1c1bd671b0c8e6d76554ce354
2269,2269.0,2443.0,vespa-engine/vespa,b9b2d10776ded0d34a2f0b944d3edba972114b5c,"Merge pull request #19166 from vespa-engine/toregge/add-bmcluster-library-pass5

Refactor BmFeeder to reduce code duplication.",https://github.com/vespa-engine/vespa/commit/b9b2d10776ded0d34a2f0b944d3edba972114b5c
2270,2270.0,2444.0,vespa-engine/vespa,f27be3bb0ff96b7ee6ab9117a92dbdd3f39dbc91,Refactor BmFeeder to reduce code duplication.,https://github.com/vespa-engine/vespa/commit/f27be3bb0ff96b7ee6ab9117a92dbdd3f39dbc91
2271,2271.0,2445.0,vespa-engine/vespa,6a7a6e1987c0de4ce9d2375473414e573d8e985f,"Merge pull request #19125 from vespa-engine/geirst/refactor-files-with-generic-headers

Refactor to represent files with a generic header in a new class [run-systemtest]",https://github.com/vespa-engine/vespa/commit/6a7a6e1987c0de4ce9d2375473414e573d8e985f
2272,2272.0,2446.0,vespa-engine/vespa,dcc1c4f1c1fb93ccfb8a1f30cdd9eeb62799a298,"Refactor to represent files with a generic header in a new class.

Also move DIRECT I/O alignment setting to a common place.",https://github.com/vespa-engine/vespa/commit/dcc1c4f1c1fb93ccfb8a1f30cdd9eeb62799a298
2273,2273.0,2447.0,vespa-engine/vespa,44c672b40e31043b8e717abe229718511ec8e2bf,Refactor port number assignment.,https://github.com/vespa-engine/vespa/commit/44c672b40e31043b8e717abe229718511ec8e2bf
2274,2274.0,2448.0,vespa-engine/vespa,752bfd9eb3750383470013b146ae7afbcd972f30,Refactor configuration,https://github.com/vespa-engine/vespa/commit/752bfd9eb3750383470013b146ae7afbcd972f30
2275,2275.0,2449.0,vespa-engine/vespa,12719a163b427eaae91473e5c8dad169acc58b97,"Merge pull request #19033 from vespa-engine/balder/refactor-metric-aggregation-for-readability

Balder/refactor metric aggregation for readability",https://github.com/vespa-engine/vespa/commit/12719a163b427eaae91473e5c8dad169acc58b97
2276,2276.0,2450.0,vespa-engine/vespa,e94825d50e0f2828f100da891a7a25860ed24700,Refactor metric aggregation in preparation for inline metric handling.,https://github.com/vespa-engine/vespa/commit/e94825d50e0f2828f100da891a7a25860ed24700
2277,2277.0,2451.0,vespa-engine/vespa,6cebfce1c3c817719ef6d5b06f8988b833c14b0d,Refactor to prepare for computeIfAbsent.,https://github.com/vespa-engine/vespa/commit/6cebfce1c3c817719ef6d5b06f8988b833c14b0d
2278,2278.0,2452.0,vespa-engine/vespa,1a506104aec23f261142bb36fbf8b67eee75122f,"Merge pull request #18891 from vespa-engine/mpolden/vespa-cli-cloud

Refactor deploy command to support cloud",https://github.com/vespa-engine/vespa/commit/1a506104aec23f261142bb36fbf8b67eee75122f
2279,2279.0,2453.0,vespa-engine/vespa,a71f4959d95c45c0c3282f7cf54b39c561ccf74f,Refactor deploy to support cloud,https://github.com/vespa-engine/vespa/commit/a71f4959d95c45c0c3282f7cf54b39c561ccf74f
2280,2280.0,2454.0,vespa-engine/vespa,78599e4d5669f1d6d354ee1fcc1106dd4ead63f5,"refactor common code -> addToMap/removeFromMap

* note: extra RemovedData struct is mainly useful
  to avoid warnings from -Winline (pragma was not
  completely successful in suppressing these).",https://github.com/vespa-engine/vespa/commit/78599e4d5669f1d6d354ee1fcc1106dd4ead63f5
2281,2281.0,2455.0,vespa-engine/vespa,4db1a2342f93ecc79d606b5433de4b1cd8c76fd3,"update after review

* MappingMonitorListener -> MappingMonitorOwner
* construct with factory
* RpcMappingMonitor always has an owner
* refactor common lookup into active() method",https://github.com/vespa-engine/vespa/commit/4db1a2342f93ecc79d606b5433de4b1cd8c76fd3
2282,2282.0,2456.0,vespa-engine/vespa,ce7b0fab632bb4c4332777ab4ce40bf47e136f79,Refactor for readability and maintenance.,https://github.com/vespa-engine/vespa/commit/ce7b0fab632bb4c4332777ab4ce40bf47e136f79
2283,2283.0,2457.0,vespa-engine/vespa,debfe5b96901a1fa2c30a5a284733817af45727f,"Merge pull request #18711 from vespa-engine/balder/avoid-multiple-lookups

Refactor to avoid multiple hash lookups and code bloat.",https://github.com/vespa-engine/vespa/commit/debfe5b96901a1fa2c30a5a284733817af45727f
2284,2284.0,2458.0,vespa-engine/vespa,f2a55a06c41377c4ff2d5ab1cc98738e4e547f94,Refactor to avoid multiple hash lookups and code bloat.,https://github.com/vespa-engine/vespa/commit/f2a55a06c41377c4ff2d5ab1cc98738e4e547f94
2285,2285.0,2459.0,vespa-engine/vespa,8943580a6167fda820e64a283966ed81101bf9fc,Refactor creation of config request,https://github.com/vespa-engine/vespa/commit/8943580a6167fda820e64a283966ed81101bf9fc
2286,2286.0,2460.0,vespa-engine/vespa,7e8a78afef9702419bdc5ad38b3a33247276fb56,"rename and refactor

* make a proper Accumulator class
* rename some internal variables",https://github.com/vespa-engine/vespa/commit/7e8a78afef9702419bdc5ad38b3a33247276fb56
2287,2287.0,2461.0,vespa-engine/vespa,f93f5c60a753bf177daa1944cc5fef2afec0f227,"refactor and cleanup

* add RPC api to check connectivity
* start PeerCheck directly from RPCHooks
* let CheckCompletionHandler do just completion
* allocate PeerCheck and CheckCompletionHandler inside parent request
* revert last changes in Cmd and Manager",https://github.com/vespa-engine/vespa/commit/f93f5c60a753bf177daa1944cc5fef2afec0f227
2288,2288.0,2462.0,vespa-engine/vespa,a1d1be5ec41fb72ec2cba4552f40a5bbb4834aac,"Merge pull request #18013 from vespa-engine/arnej/refactor-sentinel-startup

Arnej/refactor sentinel startup",https://github.com/vespa-engine/vespa/commit/a1d1be5ec41fb72ec2cba4552f40a5bbb4834aac
2289,2289.0,2463.0,vespa-engine/vespa,67bb1c87dff25ff69162db26ae80b7bc6bbf3d4c,refactor out common code,https://github.com/vespa-engine/vespa/commit/67bb1c87dff25ff69162db26ae80b7bc6bbf3d4c
2290,2290.0,2464.0,vespa-engine/vespa,58c6c0405e588908df90801e69ed7931ddc577e9,refactor out common code,https://github.com/vespa-engine/vespa/commit/58c6c0405e588908df90801e69ed7931ddc577e9
2291,2291.0,2465.0,vespa-engine/vespa,522921bb67d5b7b28809aa544135fe20360e00d8,"Merge pull request #17860 from vespa-engine/geirst/distributor-stripe-refactor-7

Reduce direct use of DistributorStripeComponent.",https://github.com/vespa-engine/vespa/commit/522921bb67d5b7b28809aa544135fe20360e00d8
2292,2292.0,2466.0,vespa-engine/vespa,a4e1bdcf857daa21b0c6b7d40ad13f48260a946d,"Ensure we do not call legacy `getConfig()` in common code paths

Also unconditionally update top-level Distributor's own config snapshot
so that it can be used for legacy code paths as well. Would ideally
remove all usages of legacy `getConfig()`, but we need to refactor
how unit tests sneakily inject config changes first.",https://github.com/vespa-engine/vespa/commit/a4e1bdcf857daa21b0c6b7d40ad13f48260a946d
2293,2293.0,2467.0,vespa-engine/vespa,22b54e93e5014826943faf723746b3d45e8dfe1b,"Merge pull request #17694 from vespa-engine/geirst/distributor-stripe-refactor-6

Distributor stripe refactor 6",https://github.com/vespa-engine/vespa/commit/22b54e93e5014826943faf723746b3d45e8dfe1b
2294,2294.0,2468.0,vespa-engine/vespa,7146aa115de988978f9f7d36e6030fd8e949b05c,"Merge pull request #17640 from vespa-engine/geirst/bucket-db-updater-refactor-2

Bucket db updater refactor 2",https://github.com/vespa-engine/vespa/commit/7146aa115de988978f9f7d36e6030fd8e949b05c
2295,2295.0,2469.0,vespa-engine/vespa,e2e062e2f1115ef201d802e0997d03677fbbd1c3,"Merge pull request #17605 from vespa-engine/geirst/bucket-db-updater-refactor-1

Remove processing of single bucket info replies.",https://github.com/vespa-engine/vespa/commit/e2e062e2f1115ef201d802e0997d03677fbbd1c3
2296,2296.0,2470.0,vespa-engine/vespa,dbf15114b4505e0d4ebe6ad5263685d64619f0b8,"Merge pull request #17562 from vespa-engine/geirst/distributor-stripe-refactor-5

Make DistributorStripe aware of whether it uses legacy mode or not an…",https://github.com/vespa-engine/vespa/commit/dbf15114b4505e0d4ebe6ad5263685d64619f0b8
2297,2297.0,2471.0,vespa-engine/vespa,b66e6cd43bc38cdae1ad41a850fe1e9a78c3a994,"Merge pull request #17553 from vespa-engine/geirst/distributor-stripe-refactor-4

Distributor stripe refactor 4",https://github.com/vespa-engine/vespa/commit/b66e6cd43bc38cdae1ad41a850fe1e9a78c3a994
2298,2298.0,2472.0,vespa-engine/vespa,3410aa89214638e462ecfa72ce3e93fe4aa38c7d,"Merge pull request #17543 from vespa-engine/geirst/distributor-stripe-refactor-3

Decouple DistributorStripe from StorageLink.",https://github.com/vespa-engine/vespa/commit/3410aa89214638e462ecfa72ce3e93fe4aa38c7d
2299,2299.0,2473.0,vespa-engine/vespa,50fe282683d3e17daabd4a513f93fd3de1c303e2,Refactor node-repository filters,https://github.com/vespa-engine/vespa/commit/50fe282683d3e17daabd4a513f93fd3de1c303e2
2300,2300.0,2474.0,vespa-engine/vespa,f68eb711c70700d94abfc8c511f92dadd28052a6,"Merge pull request #17336 from vespa-engine/toregge/refactor-compaction-decisions

Add CompactionStrategy methods to determine if compaction should be performed.",https://github.com/vespa-engine/vespa/commit/f68eb711c70700d94abfc8c511f92dadd28052a6
2301,2301.0,2475.0,vespa-engine/vespa,02f56edcb96817ed95462935f85428d6036d5514,Refactor,https://github.com/vespa-engine/vespa/commit/02f56edcb96817ed95462935f85428d6036d5514
2302,2302.0,2476.0,vespa-engine/vespa,761b6a4ad95b6832d6ac9f7b8f4d8f3b336ea217,Refactor,https://github.com/vespa-engine/vespa/commit/761b6a4ad95b6832d6ac9f7b8f4d8f3b336ea217
2303,2303.0,2477.0,vespa-engine/vespa,f002fda6a7470b5360024df0a66ea3f89c1e7abe,Refactor,https://github.com/vespa-engine/vespa/commit/f002fda6a7470b5360024df0a66ea3f89c1e7abe
2304,2304.0,2478.0,vespa-engine/vespa,05ba0b8d7d76727fcefbd5b670b187081fe5d0f2,Refactor,https://github.com/vespa-engine/vespa/commit/05ba0b8d7d76727fcefbd5b670b187081fe5d0f2
2305,2305.0,2479.0,vespa-engine/vespa,5952a324edca0939fbab3ea9939e16ef509fd40f,Refactor,https://github.com/vespa-engine/vespa/commit/5952a324edca0939fbab3ea9939e16ef509fd40f
2306,2306.0,2480.0,vespa-engine/vespa,1a6256ca5af8353ba257e32535edb5670307df7a,Refactor,https://github.com/vespa-engine/vespa/commit/1a6256ca5af8353ba257e32535edb5670307df7a
2307,2307.0,2481.0,vespa-engine/vespa,444c3b28b18d168a6721b2a4bf46a0a7b27d2cf4,Refactor,https://github.com/vespa-engine/vespa/commit/444c3b28b18d168a6721b2a4bf46a0a7b27d2cf4
2308,2308.0,2482.0,vespa-engine/vespa,50bec9bb93ec7502313decc1c82fd41efdfac06b,"Merge pull request #17113 from vespa-engine/geirst/distributor-stripe-refactor-2

Distributor stripe refactor 2",https://github.com/vespa-engine/vespa/commit/50bec9bb93ec7502313decc1c82fd41efdfac06b
2309,2309.0,2483.0,vespa-engine/vespa,c0a479e4ae5a46b566e3fc7b1ac4c16da5e9f8d5,"Merge pull request #17101 from vespa-engine/geirst/distributor-stripe-refactor-1

Distributor stripe refactor 1",https://github.com/vespa-engine/vespa/commit/c0a479e4ae5a46b566e3fc7b1ac4c16da5e9f8d5
2310,2310.0,2484.0,vespa-engine/vespa,3bcb78fd70ad0307183f9689c3dc05840d30a775,"Merge pull request #17097 from vespa-engine/bratseth/node-repo-owns-metricsdb

Refactor: Let the node repo own the metrics db",https://github.com/vespa-engine/vespa/commit/3bcb78fd70ad0307183f9689c3dc05840d30a775
2311,2311.0,2485.0,vespa-engine/vespa,2fa625568fb3e619c0b58f3a23eb0b61748b2811,Refactor: Let the node repo own the metrics db,https://github.com/vespa-engine/vespa/commit/2fa625568fb3e619c0b58f3a23eb0b61748b2811
2312,2312.0,2486.0,vespa-engine/vespa,841d8fd3093b4794eaedb6fcfd29b2ab152f618a,"Merge pull request #17013 from vespa-engine/geirst/bucket-db-updater-refactoring

Bucket db updater refactoring",https://github.com/vespa-engine/vespa/commit/841d8fd3093b4794eaedb6fcfd29b2ab152f618a
2313,2313.0,2487.0,vespa-engine/vespa,758d9769de677f9edc09e53f6af2c3147e55b1d0,"Merge pull request #16690 from vespa-engine/geirst/refactor-datastore-classes

Refactor datastore classes",https://github.com/vespa-engine/vespa/commit/758d9769de677f9edc09e53f6af2c3147e55b1d0
2314,2314.0,2488.0,vespa-engine/vespa,a782d867784893696b3f505f547b9ccc1a5fcf2b,"Merge pull request #16469 from vespa-engine/balder/refactor-mover

Refactor to splitt out work that can be done in separate thread.",https://github.com/vespa-engine/vespa/commit/a782d867784893696b3f505f547b9ccc1a5fcf2b
2315,2315.0,2489.0,vespa-engine/vespa,2225e0c537b16e0364db60614a5a50594af955e2,"Merge pull request #16459 from vespa-engine/hmusum/minor-refactoring

There is just one tenant listener, remove list",https://github.com/vespa-engine/vespa/commit/2225e0c537b16e0364db60614a5a50594af955e2
2316,2316.0,2490.0,vespa-engine/vespa,7cde1032d8c8dcf7e8a37ea477015e5c331fb56f,Refactor to splitt out work that can be done in separate thread.,https://github.com/vespa-engine/vespa/commit/7cde1032d8c8dcf7e8a37ea477015e5c331fb56f
2317,2317.0,2491.0,vespa-engine/vespa,893e6266501b37228d243460796d086219e79420,"Merge pull request #16453 from vespa-engine/revert-16447-revert-16443-bratseth/node-repo-refactor-2

Revert ""Revert ""Move node operations into a separate class""""",https://github.com/vespa-engine/vespa/commit/893e6266501b37228d243460796d086219e79420
2318,2318.0,2492.0,vespa-engine/vespa,1244489c52a1c0c06f0cb47bf7835f8981a19e65,"Merge pull request #16447 from vespa-engine/revert-16443-bratseth/node-repo-refactor-2

Revert ""Move node operations into a separate class""",https://github.com/vespa-engine/vespa/commit/1244489c52a1c0c06f0cb47bf7835f8981a19e65
2319,2319.0,2493.0,vespa-engine/vespa,1389953ae49ccef274c037b2916e96a99ebde892,"Merge pull request #16443 from vespa-engine/bratseth/node-repo-refactor-2

Move node operations into a separate class",https://github.com/vespa-engine/vespa/commit/1389953ae49ccef274c037b2916e96a99ebde892
2320,2320.0,2494.0,vespa-engine/vespa,0193fea01d91cde1be6fe6e92b93e5d100c030a9,"Merge pull request #16428 from vespa-engine/bratseth/node-repo-refactor

Bratseth/node repo refactor",https://github.com/vespa-engine/vespa/commit/0193fea01d91cde1be6fe6e92b93e5d100c030a9
2321,2321.0,2495.0,vespa-engine/vespa,0e5959f756feb6f0883388215152772fa5d8181f,"Merge pull request #16390 from vespa-engine/arnej/refactor-sparse-merge-optimiser

Arnej/refactor sparse merge optimiser",https://github.com/vespa-engine/vespa/commit/0e5959f756feb6f0883388215152772fa5d8181f
2322,2322.0,2496.0,vespa-engine/vespa,93c41aee15d82cc4ccc2b6cb7bab29ee5734c6cb,"Merge pull request #16387 from vespa-engine/balder/refactor-bucketmove-unittest

Refactor test for easier reuse.",https://github.com/vespa-engine/vespa/commit/93c41aee15d82cc4ccc2b6cb7bab29ee5734c6cb
2323,2323.0,2497.0,vespa-engine/vespa,8224095b228cfa64c61baf3d7c152f9817d7e399,Refactor test for easier reuse.,https://github.com/vespa-engine/vespa/commit/8224095b228cfa64c61baf3d7c152f9817d7e399
2324,2324.0,2498.0,vespa-engine/vespa,ad290b1171641a1c2a6ea8f16c3995deefb77ed6,Refactor to allow more flex in reacting to documents received,https://github.com/vespa-engine/vespa/commit/ad290b1171641a1c2a6ea8f16c3995deefb77ed6
2325,2325.0,2499.0,vespa-engine/vespa,47985d0aa7aebb49abbcbbea9d81cbf4007e8f00,"Merge pull request #16348 from vespa-engine/balder/refactor-bucketmove-job

Factor out the scan iterator from the BucketMoveJob.",https://github.com/vespa-engine/vespa/commit/47985d0aa7aebb49abbcbbea9d81cbf4007e8f00
2326,2326.0,2500.0,vespa-engine/vespa,aba7dec14e8cb4cbd6c93a78b42f857246ff854b,"Merge pull request #16230 from vespa-engine/revert-16219-revert-16203-mortent/queue-operations

Reapply ""Refactor LogfileHandler [run-systemtests]""",https://github.com/vespa-engine/vespa/commit/aba7dec14e8cb4cbd6c93a78b42f857246ff854b
2327,2327.0,2501.0,vespa-engine/vespa,b8def152dc84486f8ab4ffb74d3482c8e01153b0,"Revert ""Revert ""Refactor LogfileHandler [run-systemtests]""""",https://github.com/vespa-engine/vespa/commit/b8def152dc84486f8ab4ffb74d3482c8e01153b0
2328,2328.0,2502.0,vespa-engine/vespa,efbb4d48580d62f6e4550f0ea6921ea0cb3736c0,"Merge pull request #16219 from vespa-engine/revert-16203-mortent/queue-operations

Revert ""Refactor LogfileHandler [run-systemtests]""",https://github.com/vespa-engine/vespa/commit/efbb4d48580d62f6e4550f0ea6921ea0cb3736c0
2329,2329.0,2503.0,vespa-engine/vespa,e63726c06546e9701539face3aeeb09da8e134f3,"Revert ""Refactor LogfileHandler [run-systemtests]""",https://github.com/vespa-engine/vespa/commit/e63726c06546e9701539face3aeeb09da8e134f3
2330,2330.0,2504.0,vespa-engine/vespa,80a329ba15c6b1cde5d12239b5b7c568156bdb65,"Merge pull request #16203 from vespa-engine/mortent/queue-operations

Refactor LogfileHandler [run-systemtests]",https://github.com/vespa-engine/vespa/commit/80a329ba15c6b1cde5d12239b5b7c568156bdb65
2331,2331.0,2505.0,vespa-engine/vespa,f8fac9eb7c578eabab5d7a9a6fbbfd93e4b3b496,Finish refactoring,https://github.com/vespa-engine/vespa/commit/f8fac9eb7c578eabab5d7a9a6fbbfd93e4b3b496
2332,2332.0,2506.0,vespa-engine/vespa,7d252bb4f6f85cbfda2eb04b5da765fab7b5d933,"Merge pull request #15800 from vespa-engine/hmusum/refactor-and-document-verify-working-zookeeper

Refactor code and document code to verify that ZooKeeper is working",https://github.com/vespa-engine/vespa/commit/7d252bb4f6f85cbfda2eb04b5da765fab7b5d933
2333,2333.0,2507.0,vespa-engine/vespa,e752af8a5e6b462caed8faaeff0aafa30417c912,Refactor code and document code to verify that ZooKeeper is working,https://github.com/vespa-engine/vespa/commit/e752af8a5e6b462caed8faaeff0aafa30417c912
2334,2334.0,2508.0,vespa-engine/vespa,fefcc6ec9e6e3934527ef38952773cf616d2e26f,"Merge pull request #15727 from vespa-engine/hmusum/refactor-reconfigurer

Refactor code into module that does not depend on zookeeper",https://github.com/vespa-engine/vespa/commit/fefcc6ec9e6e3934527ef38952773cf616d2e26f
2335,2335.0,2509.0,vespa-engine/vespa,b0f74766d1b2af781d93da7d2ad89c89c8e9825b,Refactor to prepare for mving more code to zokeeper-server-common,https://github.com/vespa-engine/vespa/commit/b0f74766d1b2af781d93da7d2ad89c89c8e9825b
2336,2336.0,2510.0,vespa-engine/vespa,9e82c2c81e161a1cd449456d5f8ba797762ecdcd,Merge branch 'master' into hmusum/refactor-reconfigurer,https://github.com/vespa-engine/vespa/commit/9e82c2c81e161a1cd449456d5f8ba797762ecdcd
2337,2337.0,2511.0,vespa-engine/vespa,7e7b7c72b7ca4131f6f29efa0f9d63f857d9f369,Merge branch 'master' into hmusum/refactor-reconfigurer,https://github.com/vespa-engine/vespa/commit/7e7b7c72b7ca4131f6f29efa0f9d63f857d9f369
2338,2338.0,2512.0,vespa-engine/vespa,607dbfedf2fbf8a2bddb5ffb1e23c796eb92dd5f,Refactor mock to simplify Curator constructors,https://github.com/vespa-engine/vespa/commit/607dbfedf2fbf8a2bddb5ffb1e23c796eb92dd5f
2339,2339.0,2513.0,vespa-engine/vespa,a03e8cd857ccd0fce1e6f97b1b8ad50832c8b9a0,"minor refactoring:

* have a static const empty_label in FastSparseMap
  (may be useful more places)
* avoid re-computing num_mapped_dims needlessly",https://github.com/vespa-engine/vespa/commit/a03e8cd857ccd0fce1e6f97b1b8ad50832c8b9a0
2340,2340.0,2514.0,vespa-engine/vespa,17a344730bca802521110c56c37f47ed16965a03,"refactor, simplify, and cleanup",https://github.com/vespa-engine/vespa/commit/17a344730bca802521110c56c37f47ed16965a03
2341,2341.0,2515.0,vespa-engine/vespa,4f7ffda7695a582da2aba8b8db31ce3369ad0387,Refactor tenant related methods out in separate class - LOC is too damn high,https://github.com/vespa-engine/vespa/commit/4f7ffda7695a582da2aba8b8db31ce3369ad0387
2342,2342.0,2516.0,vespa-engine/vespa,ae99f6bd8f0c28ae24fd814c9ee164de86b649b8,"Merge pull request #15014 from vespa-engine/geirst/refactor-filestormanager-tests

Refactor filestormanager tests",https://github.com/vespa-engine/vespa/commit/ae99f6bd8f0c28ae24fd814c9ee164de86b649b8
2343,2343.0,2517.0,vespa-engine/vespa,56f9d32c4d5ef275a128d8f5cb1025f7834ddd58,"Merge pull request #14902 from vespa-engine/hmusum/refactor

Simplify session code",https://github.com/vespa-engine/vespa/commit/56f9d32c4d5ef275a128d8f5cb1025f7834ddd58
2344,2344.0,2518.0,vespa-engine/vespa,12e06ccac5c4758ea505d80db2866d2b0420cf45,"Merge pull request #14843 from vespa-engine/hmusum/refactor-sessionrepo-2

Refactor session repo, part 2",https://github.com/vespa-engine/vespa/commit/12e06ccac5c4758ea505d80db2866d2b0420cf45
2345,2345.0,2519.0,vespa-engine/vespa,d0fc26fe48170b80392b422157f39a72d4be7ec2,Merge branch 'master' into hmusum/refactor-sessionrepo-2,https://github.com/vespa-engine/vespa/commit/d0fc26fe48170b80392b422157f39a72d4be7ec2
2346,2346.0,2520.0,vespa-engine/vespa,bf2a252921595a9c7d76a75c5583bb76b30e0d10,"Merge pull request #14831 from vespa-engine/hmusum/refactor-sessionrepo-take-2

Refactor session repo, take 2",https://github.com/vespa-engine/vespa/commit/bf2a252921595a9c7d76a75c5583bb76b30e0d10
2347,2347.0,2521.0,vespa-engine/vespa,12895da5969bc194656955e97363441d8edbc8cf,"Merge pull request #14820 from vespa-engine/revert-14749-hmusum/refactor-sessionrepo

Revert ""Refactor session repo""",https://github.com/vespa-engine/vespa/commit/12895da5969bc194656955e97363441d8edbc8cf
2348,2348.0,2522.0,vespa-engine/vespa,c8bc6f6caedd17d562472470a5ca86f64331d4c3,"Revert ""Refactor session repo""",https://github.com/vespa-engine/vespa/commit/c8bc6f6caedd17d562472470a5ca86f64331d4c3
2349,2349.0,2523.0,vespa-engine/vespa,0b815761bbffe06b9fdb3ae73a76470a655d5fa6,"Merge pull request #14749 from vespa-engine/hmusum/refactor-sessionrepo

Refactor session repo",https://github.com/vespa-engine/vespa/commit/0b815761bbffe06b9fdb3ae73a76470a655d5fa6
2350,2350.0,2524.0,vespa-engine/vespa,c2ae38b9706a85760c5d3abbe527eaca01294fcc,"Deadlock detection

Just before Lock.acquire() is invoked, the locks within the process is queried
to see if a ""deadlock"" will occur: The current thread waiting to acquire lock
path P1, which is held by thread T1 waiting on acquiring a lock at path P2,
etc, until a thread is waiting for a lock held by the current thread.

Even without this PR the deadlock would resolve itself automatically because
all locks are acquired with timeouts.  However, this PR 1. resolves the
deadlock immediately, and 2. leaves a log trace (hopefully from the exception)
to allow us to refactor code to avoid such deadlocks.",https://github.com/vespa-engine/vespa/commit/c2ae38b9706a85760c5d3abbe527eaca01294fcc
2351,2351.0,2525.0,vespa-engine/vespa,fe475aa4bf3c42d3e0a83caa35f8d6b370bc9eef,"minor refactoring after review

* collapse and rename with() methods of DenseCoords
* rename some variables
* add comment describing AddressHandler helper class
* include tensor types in error logging messages",https://github.com/vespa-engine/vespa/commit/fe475aa4bf3c42d3e0a83caa35f8d6b370bc9eef
2352,2352.0,2526.0,vespa-engine/vespa,5341ecd273471ebed963e652c03be587ef85892e,"Merge pull request #14717 from vespa-engine/revert-14711-revert-14690-hmusum/refactor-RemoteSession-take-3

Reapply ""Move code out of RemoteSesion""",https://github.com/vespa-engine/vespa/commit/5341ecd273471ebed963e652c03be587ef85892e
2353,2353.0,2527.0,vespa-engine/vespa,c6fbed88b5c65d40daf3af4eea31c9b22c2b61e5,"Merge pull request #14711 from vespa-engine/revert-14690-hmusum/refactor-RemoteSession-take-3

Revert ""Move code out of RemoteSesion""",https://github.com/vespa-engine/vespa/commit/c6fbed88b5c65d40daf3af4eea31c9b22c2b61e5
2354,2354.0,2528.0,vespa-engine/vespa,04a612ee4b9d9fc6b206f160c305b337f62df911,"Merge pull request #14690 from vespa-engine/hmusum/refactor-RemoteSession-take-3

Move code out of RemoteSesion",https://github.com/vespa-engine/vespa/commit/04a612ee4b9d9fc6b206f160c305b337f62df911
2355,2355.0,2529.0,vespa-engine/vespa,58c15afd3ea77235e2ea26f4baa2e171574dd3b6,"Merge pull request #14689 from vespa-engine/arnej/restore-lost-reserve

lost a reserve() call in last refactoring",https://github.com/vespa-engine/vespa/commit/58c15afd3ea77235e2ea26f4baa2e171574dd3b6
2356,2356.0,2530.0,vespa-engine/vespa,3f67ec9476d43cbe5c3f54cebe658aa8d6295e15,lost a reserve() call in last refactoring,https://github.com/vespa-engine/vespa/commit/3f67ec9476d43cbe5c3f54cebe658aa8d6295e15
2357,2357.0,2531.0,vespa-engine/vespa,188521786cb0d181acf31122ba3803572f86c322,"Merge pull request #14675 from vespa-engine/hmusum/refactor-tests-3

Add timeout to cluster controller test",https://github.com/vespa-engine/vespa/commit/188521786cb0d181acf31122ba3803572f86c322
2358,2358.0,2532.0,vespa-engine/vespa,a80b6cb19619821ce4d354aff12937d2b4557919,"Merge pull request #14662 from vespa-engine/hmusum/refactor-file-downloading

Refactor file downloading",https://github.com/vespa-engine/vespa/commit/a80b6cb19619821ce4d354aff12937d2b4557919
2359,2359.0,2533.0,vespa-engine/vespa,574b67881df1e48c21069dba9bd59ad1a3dc2670,minor refactoring,https://github.com/vespa-engine/vespa/commit/574b67881df1e48c21069dba9bd59ad1a3dc2670
2360,2360.0,2534.0,vespa-engine/vespa,9c90d3aaed422af9ecf41e2da34866ee7c26ee5c,"Merge pull request #14463 from vespa-engine/hmusum/configserver-refactoring-29

Create remote session in addLocalSession() only when it does not exist",https://github.com/vespa-engine/vespa/commit/9c90d3aaed422af9ecf41e2da34866ee7c26ee5c
2361,2361.0,2535.0,vespa-engine/vespa,b632540821ed7c3657b93f926aa8719f1d7fc9e1,refactor without TypeMeta,https://github.com/vespa-engine/vespa/commit/b632540821ed7c3657b93f926aa8719f1d7fc9e1
2362,2362.0,2536.0,vespa-engine/vespa,d42778200c3412123d1be81c3209102573c973e0,"Merge pull request #14385 from vespa-engine/hmusum/configserver-refactoring-28

Simplify session state watcher",https://github.com/vespa-engine/vespa/commit/d42778200c3412123d1be81c3209102573c973e0
2363,2363.0,2537.0,vespa-engine/vespa,6ba482ddc41bfaa9b34ae66b641bcdf452c86792,"Merge pull request #14374 from vespa-engine/balder/refactor-for-better-visibility

Reduce visibility to avoid having to see everything.",https://github.com/vespa-engine/vespa/commit/6ba482ddc41bfaa9b34ae66b641bcdf452c86792
2364,2364.0,2538.0,vespa-engine/vespa,d3a5658487cb19a3046fe09915b52555b57ca586,"Merge pull request #14363 from vespa-engine/revert-14335-revert-14330-revert-14308-hmusum/refactor-RemoteSession-take-2

Revert ""Move code from RemoteSession to SessionRepository, take 3""",https://github.com/vespa-engine/vespa/commit/d3a5658487cb19a3046fe09915b52555b57ca586
2365,2365.0,2539.0,vespa-engine/vespa,43db01fa344bc2fedfe25ab9477e3e5cebf1005f,"Merge pull request #14335 from vespa-engine/revert-14330-revert-14308-hmusum/refactor-RemoteSession-take-2

Move code from RemoteSession to SessionRepository, take 3",https://github.com/vespa-engine/vespa/commit/43db01fa344bc2fedfe25ab9477e3e5cebf1005f
2366,2366.0,2540.0,vespa-engine/vespa,48a4b9c05e03da3ec9a0e9f4cc94c4b58016aefe,"Merge pull request #14330 from vespa-engine/revert-14308-hmusum/refactor-RemoteSession-take-2

Revert "" Move code from RemoteSession to SessionRepository, take 2""",https://github.com/vespa-engine/vespa/commit/48a4b9c05e03da3ec9a0e9f4cc94c4b58016aefe
2367,2367.0,2541.0,vespa-engine/vespa,b02d16733146c0cfc835ef5b652a51214492e7af,"Merge pull request #14308 from vespa-engine/hmusum/refactor-RemoteSession-take-2

 Move code from RemoteSession to SessionRepository, take 2",https://github.com/vespa-engine/vespa/commit/b02d16733146c0cfc835ef5b652a51214492e7af
2368,2368.0,2542.0,vespa-engine/vespa,83055dea12c08827567214f4aa08b5183ac8f795,"- Remove unused close() method.
- Refactor error reporting.",https://github.com/vespa-engine/vespa/commit/83055dea12c08827567214f4aa08b5183ac8f795
2369,2369.0,2543.0,vespa-engine/vespa,b95ad7d58de6aa1149fb921cc6464d8309420828,"Merge pull request #14205 from vespa-engine/tgm/reestructure-python-deploy

refactor VespaCloud code",https://github.com/vespa-engine/vespa/commit/b95ad7d58de6aa1149fb921cc6464d8309420828
2370,2370.0,2544.0,vespa-engine/vespa,861307b411c5fa663181719d8568be1f3d63a2b7,"Merge pull request #14204 from vespa-engine/revert-14190-hmusum/refactor-RemoteSession

Revert ""Move code from RemoteSession to SessionRepository""",https://github.com/vespa-engine/vespa/commit/861307b411c5fa663181719d8568be1f3d63a2b7
2371,2371.0,2545.0,vespa-engine/vespa,6a5bde7032c6641426725b65b934e99fb2410e68,refactor VespaCloud code,https://github.com/vespa-engine/vespa/commit/6a5bde7032c6641426725b65b934e99fb2410e68
2372,2372.0,2546.0,vespa-engine/vespa,75d75ab1b8cc0e1d61603439582a7bd3be3847f1,"Merge pull request #14190 from vespa-engine/hmusum/refactor-RemoteSession

Move code from RemoteSession to SessionRepository",https://github.com/vespa-engine/vespa/commit/75d75ab1b8cc0e1d61603439582a7bd3be3847f1
2373,2373.0,2547.0,vespa-engine/vespa,01f8f6e448869439f242760feddf0110504a2f7f,"Do not create an extra OsgiImpl instance.

- This simplification became possible after a previous refactoring",https://github.com/vespa-engine/vespa/commit/01f8f6e448869439f242760feddf0110504a2f7f
2374,2374.0,2548.0,vespa-engine/vespa,5b2248ed030d2427443712e80569857016cb858e,Refactor and test,https://github.com/vespa-engine/vespa/commit/5b2248ed030d2427443712e80569857016cb858e
2375,2375.0,2549.0,vespa-engine/vespa,5fa4c0b53645b86537fd4441144f30f86c15a930,"Merge pull request #14096 from vespa-engine/balder/cleanup-prior-inflight-lid-handling

Some cleanup and refactoring.",https://github.com/vespa-engine/vespa/commit/5fa4c0b53645b86537fd4441144f30f86c15a930
2376,2376.0,2550.0,vespa-engine/vespa,34c1338b258334b2f3827c45a90e1fcb89eb1098,Some cleanup and refactoring.,https://github.com/vespa-engine/vespa/commit/34c1338b258334b2f3827c45a90e1fcb89eb1098
2377,2377.0,2551.0,vespa-engine/vespa,ec906d21cbbcc913a26f6b871e02fd5ab6c09c01,"Merge pull request #14093 from vespa-engine/hmusum/configserver-refactoring-27

Config server refactoring, part 27",https://github.com/vespa-engine/vespa/commit/ec906d21cbbcc913a26f6b871e02fd5ab6c09c01
2378,2378.0,2552.0,vespa-engine/vespa,be4d955b8bc9ab94d8ed1b72b03d5a112e196da2,Follow up of PR comment with renaming and refactoring.,https://github.com/vespa-engine/vespa/commit/be4d955b8bc9ab94d8ed1b72b03d5a112e196da2
2379,2379.0,2553.0,vespa-engine/vespa,a9775442179fd17067cd351051d803920c0d74fc,"Merge pull request #14024 from vespa-engine/hmusum/configserver-refactoring-26

Code cleanup, no functional changes",https://github.com/vespa-engine/vespa/commit/a9775442179fd17067cd351051d803920c0d74fc
2380,2380.0,2554.0,vespa-engine/vespa,67cbce2b676e9341306b99624ab63d865afd934b,"Merge pull request #13974 from vespa-engine/hmusum/configserver-refactoring-25-take-2

Simplify tests (stop using low-level code to setup test environment, take 2",https://github.com/vespa-engine/vespa/commit/67cbce2b676e9341306b99624ab63d865afd934b
2381,2381.0,2555.0,vespa-engine/vespa,48cba469cc16e1e2aad7d67e6fe213133b9a2fcd,"Merge pull request #13972 from vespa-engine/revert-13961-hmusum/configserver-refactoring-25

Revert ""Simplify tests (stop using low-level code to setup test environment)""",https://github.com/vespa-engine/vespa/commit/48cba469cc16e1e2aad7d67e6fe213133b9a2fcd
2382,2382.0,2556.0,vespa-engine/vespa,b01035f3ac8e1986f3e6053611757830978a660e,"Merge pull request #13961 from vespa-engine/hmusum/configserver-refactoring-25

Simplify tests (stop using low-level code to setup test environment)",https://github.com/vespa-engine/vespa/commit/b01035f3ac8e1986f3e6053611757830978a660e
2383,2383.0,2557.0,vespa-engine/vespa,fb30d3667ab506976c776817aa3451f97ceed83a,"Merge pull request #13944 from vespa-engine/hmusum/configserver-refactoring-24

Config server refactoring, use new file distribution mocks",https://github.com/vespa-engine/vespa/commit/fb30d3667ab506976c776817aa3451f97ceed83a
2384,2384.0,2558.0,vespa-engine/vespa,80ff9faa96b23bc56353c7233ad659655a8b0dd8,"Merge pull request #13925 from vespa-engine/gjoranv/container-refactoring

Gjoranv/container refactoring",https://github.com/vespa-engine/vespa/commit/80ff9faa96b23bc56353c7233ad659655a8b0dd8
2385,2385.0,2559.0,vespa-engine/vespa,bd3f944be9191e364d97a7f4438c712bce837582,refactor unit test,https://github.com/vespa-engine/vespa/commit/bd3f944be9191e364d97a7f4438c712bce837582
2386,2386.0,2560.0,vespa-engine/vespa,9debffd31d309a7fe4062241a731d5722f4199e0,refactor and require unit for distance,https://github.com/vespa-engine/vespa/commit/9debffd31d309a7fe4062241a731d5722f4199e0
2387,2387.0,2561.0,vespa-engine/vespa,5fc7cc737144fc27ed7de2761a2f041750c949c7,"refactor more, add optional field name parsing",https://github.com/vespa-engine/vespa/commit/5fc7cc737144fc27ed7de2761a2f041750c949c7
2388,2388.0,2562.0,vespa-engine/vespa,42a328d165fb48f800b9cba556b8d24d4759d609,refactor geo location parsing,https://github.com/vespa-engine/vespa/commit/42a328d165fb48f800b9cba556b8d24d4759d609
2389,2389.0,2563.0,vespa-engine/vespa,44dac005fd113c0a07ce1e0a11335c3e431925bd,"Merge pull request #13882 from vespa-engine/refactor-BundleMapper

Refactor bundle mapper",https://github.com/vespa-engine/vespa/commit/44dac005fd113c0a07ce1e0a11335c3e431925bd
2390,2390.0,2564.0,vespa-engine/vespa,34417e03d05e5754ad7946582296171b1c9cb5e5,"Merge pull request #13858 from vespa-engine/container-refactoring

Container refactoring",https://github.com/vespa-engine/vespa/commit/34417e03d05e5754ad7946582296171b1c9cb5e5
2391,2391.0,2565.0,vespa-engine/vespa,c595d62a06070f9f4463641c40e5b9aa59cbb932,Refactor to avoid deadlock due to trying to aquire a lock you already hold. Also reduce number of calls to getDiskBloat/getDiskFootPrint,https://github.com/vespa-engine/vespa/commit/c595d62a06070f9f4463641c40e5b9aa59cbb932
2392,2392.0,2566.0,vespa-engine/vespa,88099bec32481b83b41f3966c2a88ebf4034f1fe,"clean up various issues with ParseItem class

* SimpleQueryStack only used for one unit test, move it there
* Actual instances of ParseItem also only used for same unit test.
  Split out the object representation into a separate
  SimpleQueryStackItem class in the unit test directory.
* give location ITEM_LOCATION_TERM instead of overloading NUMTERM
* ParseItem::ITEM_PAREN never used for anything, remove it
* add comment for removal of PAREN enum in prelude/query/Item.java
* refactor flag handling with one method per flag",https://github.com/vespa-engine/vespa/commit/88099bec32481b83b41f3966c2a88ebf4034f1fe
2393,2393.0,2567.0,vespa-engine/vespa,509d414ab4ce332f6d3d23703a1acec7002ef68e,"Merge pull request #13829 from vespa-engine/hmusum/configserver-refactoring-23

Use a switch statement and cover all statuses",https://github.com/vespa-engine/vespa/commit/509d414ab4ce332f6d3d23703a1acec7002ef68e
2394,2394.0,2568.0,vespa-engine/vespa,737663e0fdfce5dc671aeed15a9cc79b2fe29f77,"Merge pull request #13817 from vespa-engine/hmusum/configserver-refactoring-22

Config server refactoring, part 22",https://github.com/vespa-engine/vespa/commit/737663e0fdfce5dc671aeed15a9cc79b2fe29f77
2395,2395.0,2569.0,vespa-engine/vespa,b4825ad2f4f874f4675b35c86c19ca4bf96ff241,refactor __repr__ as a python expression,https://github.com/vespa-engine/vespa/commit/b4825ad2f4f874f4675b35c86c19ca4bf96ff241
2396,2396.0,2570.0,vespa-engine/vespa,566d9a7d5cf2df8e3a0746522c5f0936977a3b8f,"Merge pull request #13795 from vespa-engine/hmusum/configserver-refactoring-21

Config server refactoring, part 21",https://github.com/vespa-engine/vespa/commit/566d9a7d5cf2df8e3a0746522c5f0936977a3b8f
2397,2397.0,2571.0,vespa-engine/vespa,ce642db2fe673d25c2634b7e7f3c23d9012d7e6a,"Merge pull request #13790 from vespa-engine/hmusum/configserver-refactoring-20

Config server refactoring, part 20, simplify tests, remove mock handler",https://github.com/vespa-engine/vespa/commit/ce642db2fe673d25c2634b7e7f3c23d9012d7e6a
2398,2398.0,2572.0,vespa-engine/vespa,56a3e1d3d11f6ab4762c1141781472b55ebff157,"Merge pull request #13759 from vespa-engine/hmusum/configserver-refactoring-19

Config server refactoring, part 19",https://github.com/vespa-engine/vespa/commit/56a3e1d3d11f6ab4762c1141781472b55ebff157
2399,2399.0,2573.0,vespa-engine/vespa,8b4b46eaaa01f022a5dd075dc6a88a01664f135a,"Minor refactoring, no functional changes",https://github.com/vespa-engine/vespa/commit/8b4b46eaaa01f022a5dd075dc6a88a01664f135a
2400,2400.0,2574.0,vespa-engine/vespa,8ee130dd15f0eac592f33ba80535a31bea2eb0e5,"Merge pull request #13727 from vespa-engine/hmusum/configserver-refactoring-16

Config server refactoring, remove TenantHandlerProvider",https://github.com/vespa-engine/vespa/commit/8ee130dd15f0eac592f33ba80535a31bea2eb0e5
2401,2401.0,2575.0,vespa-engine/vespa,1b7958527aa2cc2289f556b8b1dde954a9b581f8,"Merge pull request #13694 from vespa-engine/mpolden/refactor-alias

Support multiple types of alias targets",https://github.com/vespa-engine/vespa/commit/1b7958527aa2cc2289f556b8b1dde954a9b581f8
2402,2402.0,2576.0,vespa-engine/vespa,8a3502f7f399c3891f83d61452af9999e838ca6b,"Merge pull request #13690 from vespa-engine/hmusum/configserver-refactoring-15

Config server refactoring, part 15, simplify tenant code",https://github.com/vespa-engine/vespa/commit/8a3502f7f399c3891f83d61452af9999e838ca6b
2403,2403.0,2577.0,vespa-engine/vespa,f8ca44ae9570a3e5241ad64a3d62334cd4877ff6,"Merge pull request #13652 from vespa-engine/hmusum/configserver-refactoring-14

Config server refactoring, part 14",https://github.com/vespa-engine/vespa/commit/f8ca44ae9570a3e5241ad64a3d62334cd4877ff6
2404,2404.0,2578.0,vespa-engine/vespa,549528c9de2aa47e7e6b5d240aea4e3b53b8b8b7,"Merge pull request #13649 from vespa-engine/hmusum/configserver-refactoring-13-take-2

Create local session after maintainer has downloaded application package",https://github.com/vespa-engine/vespa/commit/549528c9de2aa47e7e6b5d240aea4e3b53b8b8b7
2405,2405.0,2579.0,vespa-engine/vespa,7583a8eb1aaee7093cf46f61f159e186dd4c716f,"Merge pull request #13648 from vespa-engine/revert-13636-hmusum/configserver-refactoring-13

Revert ""Merge watcher classes for sessions into one class""",https://github.com/vespa-engine/vespa/commit/7583a8eb1aaee7093cf46f61f159e186dd4c716f
2406,2406.0,2580.0,vespa-engine/vespa,561d1c9c20538dd2d6d095616b64aaf124560f4f,"Merge pull request #13636 from vespa-engine/hmusum/configserver-refactoring-13

Merge watcher classes for sessions into one class",https://github.com/vespa-engine/vespa/commit/561d1c9c20538dd2d6d095616b64aaf124560f4f
2407,2407.0,2581.0,vespa-engine/vespa,5b6d5916c999069ac5097e18ef755f713e98f411,Merge branch 'master' into hmusum/configserver-refactoring-13,https://github.com/vespa-engine/vespa/commit/5b6d5916c999069ac5097e18ef755f713e98f411
2408,2408.0,2582.0,vespa-engine/vespa,2b5ce5b72ecf246439a850368fc8a52395c22057,"Merge pull request #13621 from vespa-engine/hmusum/configserver-refactoring-12

Handle no active session existing",https://github.com/vespa-engine/vespa/commit/2b5ce5b72ecf246439a850368fc8a52395c22057
2409,2409.0,2583.0,vespa-engine/vespa,f9be44201661bb12c5999cd2329ccea28817e246,refactor task data into common base class,https://github.com/vespa-engine/vespa/commit/f9be44201661bb12c5999cd2329ccea28817e246
2410,2410.0,2584.0,vespa-engine/vespa,e55f4b911fd3dab1270514edc99b5e3d3a086833,"Merge pull request #13611 from vespa-engine/hmusum/configserver-refactoring-11

Config server refactoring, part 11",https://github.com/vespa-engine/vespa/commit/e55f4b911fd3dab1270514edc99b5e3d3a086833
2411,2411.0,2585.0,vespa-engine/vespa,4292e676ac6c4345e8cad39d6a16dc689e5c0383,"Merge pull request #13607 from vespa-engine/geirst/refactor-attribute-writer-tests

Refactor attribute writer tests",https://github.com/vespa-engine/vespa/commit/4292e676ac6c4345e8cad39d6a16dc689e5c0383
2412,2412.0,2586.0,vespa-engine/vespa,f23863f6f7698d4fc34392c59977447988a86754,"Merge pull request #13582 from vespa-engine/hmusum/configserver-refactoring-10

Rewrite tests to use less low-level code",https://github.com/vespa-engine/vespa/commit/f23863f6f7698d4fc34392c59977447988a86754
2413,2413.0,2587.0,vespa-engine/vespa,63c73eeee717cf71ce7eb9323827a2053b44985e,"Merge pull request #13559 from vespa-engine/hmusum/configserver-refactoring-9

Config server refactoring, part 9",https://github.com/vespa-engine/vespa/commit/63c73eeee717cf71ce7eb9323827a2053b44985e
2414,2414.0,2588.0,vespa-engine/vespa,f11b31bc437ffc5920b432c37ca2c5d154d98c72,"Refactor deletion of local session

* Move delete method to SessionRepository
* Move test to ApplicationRepositoryTest",https://github.com/vespa-engine/vespa/commit/f11b31bc437ffc5920b432c37ca2c5d154d98c72
2415,2415.0,2589.0,vespa-engine/vespa,62728231905e839bf3b6199a3165407cd0cfa7e1,Merge branch 'master' into hmusum/configserver-refactoring-9,https://github.com/vespa-engine/vespa/commit/62728231905e839bf3b6199a3165407cd0cfa7e1
2416,2416.0,2590.0,vespa-engine/vespa,641c6d9eaed3b163488984e59048122fb6f131b6,"Merge pull request #13544 from vespa-engine/revert-13543-revert-13534-musum/configserver-refactoring-8

Reapply ""Merge SessionFactory into SessionRepository""",https://github.com/vespa-engine/vespa/commit/641c6d9eaed3b163488984e59048122fb6f131b6
2417,2417.0,2591.0,vespa-engine/vespa,52d797113dc572be0a5fe76e5d6267a890721c61,"Merge pull request #13543 from vespa-engine/revert-13534-musum/configserver-refactoring-8

Revert ""Merge SessionFactory into SessionRepository""",https://github.com/vespa-engine/vespa/commit/52d797113dc572be0a5fe76e5d6267a890721c61
2418,2418.0,2592.0,vespa-engine/vespa,1f866e2ed6685495004fd70662eecd03737fbd8b,"Merge pull request #13534 from vespa-engine/musum/configserver-refactoring-8

Merge SessionFactory into SessionRepository",https://github.com/vespa-engine/vespa/commit/1f866e2ed6685495004fd70662eecd03737fbd8b
2419,2419.0,2593.0,vespa-engine/vespa,9fc05281d6a79c26efe04edeb7604300f0c05845,Refactor - no funcntional changes,https://github.com/vespa-engine/vespa/commit/9fc05281d6a79c26efe04edeb7604300f0c05845
2420,2420.0,2594.0,vespa-engine/vespa,3d1b445b10f70771cf7a4bce1ba2d285c553f930,"Merge pull request #13530 from vespa-engine/musum/configserver-refactoring-7-take-2

Config server refactoring, part 7, take 2",https://github.com/vespa-engine/vespa/commit/3d1b445b10f70771cf7a4bce1ba2d285c553f930
2421,2421.0,2595.0,vespa-engine/vespa,a7cb1b8c340a01b8982a02c1633ce610e8312020,"Merge pull request #13529 from vespa-engine/revert-13520-musum/configserver-refactoring-7

Revert ""Config server refactoring, part 7""",https://github.com/vespa-engine/vespa/commit/a7cb1b8c340a01b8982a02c1633ce610e8312020
2422,2422.0,2596.0,vespa-engine/vespa,aa1e49f7fde2b9f82f31e8745381d5ff4391f822,"Revert ""Config server refactoring, part 7""",https://github.com/vespa-engine/vespa/commit/aa1e49f7fde2b9f82f31e8745381d5ff4391f822
2423,2423.0,2597.0,vespa-engine/vespa,aeaa8a7a2807560817810cca76801f0a14ece4e9,"Merge pull request #13520 from vespa-engine/musum/configserver-refactoring-7

Config server refactoring, part 7",https://github.com/vespa-engine/vespa/commit/aeaa8a7a2807560817810cca76801f0a14ece4e9
2424,2424.0,2598.0,vespa-engine/vespa,dd3c0afdf60219a83320e07165294b7e108b5b11,Merge branch 'master' into musum/configserver-refactoring-7,https://github.com/vespa-engine/vespa/commit/dd3c0afdf60219a83320e07165294b7e108b5b11
2425,2425.0,2599.0,vespa-engine/vespa,4368171fdc096a02e76e7d88000fccdf46b2d540,"Merge pull request #13495 from vespa-engine/hmusum/configserver-refactoring-7

Use explicit arguments to constructor instead of going through compon…",https://github.com/vespa-engine/vespa/commit/4368171fdc096a02e76e7d88000fccdf46b2d540
2426,2426.0,2600.0,vespa-engine/vespa,4c7a62d81082a1e63613b3e3864ba4b9c17be292,Refactor MultiAttrDFW in preparation to support filtering of matched elements.,https://github.com/vespa-engine/vespa/commit/4c7a62d81082a1e63613b3e3864ba4b9c17be292
2427,2427.0,2601.0,vespa-engine/vespa,8cb9e85e810b2e1bc7dcd55fcb9c96858c44720f,"Merge pull request #13489 from vespa-engine/musum/configserver-refactoring-6

Config server refactoring, part 6",https://github.com/vespa-engine/vespa/commit/8cb9e85e810b2e1bc7dcd55fcb9c96858c44720f
2428,2428.0,2602.0,vespa-engine/vespa,666937accf21ddffd88d023abd99033e2fadc3bc,"Merge pull request #13470 from vespa-engine/musum/configserver-refactoring-5

Move more methods up to Session class",https://github.com/vespa-engine/vespa/commit/666937accf21ddffd88d023abd99033e2fadc3bc
2429,2429.0,2603.0,vespa-engine/vespa,4b40bf440c8620654c75bc3e548157ef2609bffd,"Merge pull request #13454 from vespa-engine/musum/configserver-refactoring-5

Get rid of RemoteSessionFactory",https://github.com/vespa-engine/vespa/commit/4b40bf440c8620654c75bc3e548157ef2609bffd
2430,2430.0,2604.0,vespa-engine/vespa,8a17802a5f8046cca98127cda03356a66e7cf07e,Merge branch 'master' into musum/configserver-refactoring-5,https://github.com/vespa-engine/vespa/commit/8a17802a5f8046cca98127cda03356a66e7cf07e
2431,2431.0,2605.0,vespa-engine/vespa,0929684eb4a265bed96c20961a45477b286af032,"Merge pull request #13464 from vespa-engine/musum/configserver-refactoring-4-take-2-part-2

configserver refactoring 4, take 2, part 2",https://github.com/vespa-engine/vespa/commit/0929684eb4a265bed96c20961a45477b286af032
2432,2432.0,2606.0,vespa-engine/vespa,ca1eda221760e116cbb5c926e26ee35cd8546095,"Merge pull request #13463 from vespa-engine/musum/configserver-refactoring-4-take-2

Move some session methods to superclass",https://github.com/vespa-engine/vespa/commit/ca1eda221760e116cbb5c926e26ee35cd8546095
2433,2433.0,2607.0,vespa-engine/vespa,b7bd76ee804cbf42ad17162bc1156c11df22d908,"Merge pull request #13462 from vespa-engine/revert-13452-musum/configserver-refactoring-4

Revert ""Config server refactoring, part 4""",https://github.com/vespa-engine/vespa/commit/b7bd76ee804cbf42ad17162bc1156c11df22d908
2434,2434.0,2608.0,vespa-engine/vespa,8931d080cd774c51edcb69002f3d0457407cdf01,"Revert ""Config server refactoring, part 4""",https://github.com/vespa-engine/vespa/commit/8931d080cd774c51edcb69002f3d0457407cdf01
2435,2435.0,2609.0,vespa-engine/vespa,fdc4350398029fbffbed3c0498380589a73571d7,"Merge pull request #13452 from vespa-engine/musum/configserver-refactoring-4

Config server refactoring, part 4",https://github.com/vespa-engine/vespa/commit/fdc4350398029fbffbed3c0498380589a73571d7
2436,2436.0,2610.0,vespa-engine/vespa,c6d09d87eefaf4e5d35626f83b1967c520d8a4ee,"Merge pull request #13442 from vespa-engine/musum/configserver-refactoring-3

configserver refactoring, part 3",https://github.com/vespa-engine/vespa/commit/c6d09d87eefaf4e5d35626f83b1967c520d8a4ee
2437,2437.0,2611.0,vespa-engine/vespa,ba68a595d6b8da3f91a14853cc73a5a263811743,"Merge pull request #13426 from vespa-engine/musum/configserver-refactoring-2

Get rid of SessionContext",https://github.com/vespa-engine/vespa/commit/ba68a595d6b8da3f91a14853cc73a5a263811743
2438,2438.0,2612.0,vespa-engine/vespa,01b28baa634e2e6c1b9e6830df74a9fd6f208e04,"Merge pull request #13419 from vespa-engine/musum/configserver-refactoring-1

Refactoring",https://github.com/vespa-engine/vespa/commit/01b28baa634e2e6c1b9e6830df74a9fd6f208e04
2439,2439.0,2613.0,vespa-engine/vespa,204834dca35a0bea619c1211a4bb09a472f18fa7,"Refactoring

* Remove flag source from SessionContext, not needed
* Minror refactoring to make code clearer in SessionFactoryImpl",https://github.com/vespa-engine/vespa/commit/204834dca35a0bea619c1211a4bb09a472f18fa7
2440,2440.0,2614.0,vespa-engine/vespa,409693b97750d60e3be4b9a216bbc5c9d9def4ab,refactor tests,https://github.com/vespa-engine/vespa/commit/409693b97750d60e3be4b9a216bbc5c9d9def4ab
2441,2441.0,2615.0,vespa-engine/vespa,009dccdef0dfe4fdf9fd17d5e938fc2877bb537f,Refactor,https://github.com/vespa-engine/vespa/commit/009dccdef0dfe4fdf9fd17d5e938fc2877bb537f
2442,2442.0,2616.0,vespa-engine/vespa,68709adeaefb2641974fc1e5d951e99254f001dd,Refactor and simplify range checking.,https://github.com/vespa-engine/vespa/commit/68709adeaefb2641974fc1e5d951e99254f001dd
2443,2443.0,2617.0,vespa-engine/vespa,d389b0e2519a139dc9103a22702be175698262d8,"Add support for aggregating over B-tree keys

This complements the existing support for aggregating over values.

Let aggregate calculator specify whether it expects to be invoked
with keys or values.

In the current implementation there is some code duplication
that could have been removed by using e.g. tag dispatch, but
this is a pragmatic choice intended to guarantee these changes
do not introduce any performance regressions for existing
code using value aggregation. Can be refactored later once we
have a functional baseline with this for both keys and values.",https://github.com/vespa-engine/vespa/commit/d389b0e2519a139dc9103a22702be175698262d8
2444,2444.0,2618.0,vespa-engine/vespa,a3cb09f37cef3595776eff9884042ab534b08eed,"Merge pull request #12955 from vespa-engine/gjoranv/bundle-loader-refactor-and-unit-test

Gjoranv/bundle loader refactor and unit test",https://github.com/vespa-engine/vespa/commit/a3cb09f37cef3595776eff9884042ab534b08eed
2445,2445.0,2619.0,vespa-engine/vespa,2eb79dd21aa2f4c43a306b3261d7783bc386a8d9,Refactor SystemCtlTester more in-line with YumTester,https://github.com/vespa-engine/vespa/commit/2eb79dd21aa2f4c43a306b3261d7783bc386a8d9
2446,2446.0,2620.0,vespa-engine/vespa,79ed3f35ea8bd7ca8e671676fad510f2976f0e87,"Merge pull request #12815 from vespa-engine/hmusum/refactor-filedistribution-1

Refactor filedistribution 1",https://github.com/vespa-engine/vespa/commit/79ed3f35ea8bd7ca8e671676fad510f2976f0e87
2447,2447.0,2621.0,vespa-engine/vespa,6bd0cc7db0f292a017dd7aca745507e6e00b1cd8,"Use CompletableFuture

Minor refactoring, add test for getting file while downloading",https://github.com/vespa-engine/vespa/commit/6bd0cc7db0f292a017dd7aca745507e6e00b1cd8
2448,2448.0,2622.0,vespa-engine/vespa,52da682578a517bdd29f047e4b1f030b95926d91,Minor refactoring,https://github.com/vespa-engine/vespa/commit/52da682578a517bdd29f047e4b1f030b95926d91
2449,2449.0,2623.0,vespa-engine/vespa,ba3655caf05be3b5a97a2fbc129f4cd5cc2bfc03,"Merge pull request #12728 from vespa-engine/hmusum/refactor-tests-2

Refactor",https://github.com/vespa-engine/vespa/commit/ba3655caf05be3b5a97a2fbc129f4cd5cc2bfc03
2450,2450.0,2624.0,vespa-engine/vespa,68932a94c33a40f4e6910e3e9ec9f92fefa39d75,"Refactor

Try to not create instances for every tests unless necesary
Simplify asserts a bit",https://github.com/vespa-engine/vespa/commit/68932a94c33a40f4e6910e3e9ec9f92fefa39d75
2451,2451.0,2625.0,vespa-engine/vespa,4e34e8f2cc9258f9e2f08ec9f2e334a01eeaacc9,"Refactor Http to be thread-safe and more easily mutable

Guard access to internal state with monitor. Make access control field mutable.
Make null return value in getters explicit with Optional in return type.
Take filter chains in constructor. Simplify modifications to http bindings.",https://github.com/vespa-engine/vespa/commit/4e34e8f2cc9258f9e2f08ec9f2e334a01eeaacc9
2452,2452.0,2626.0,vespa-engine/vespa,6e725e88b10d424ff5f96ba702124033fdc86733,add reference and refactor,https://github.com/vespa-engine/vespa/commit/6e725e88b10d424ff5f96ba702124033fdc86733
2453,2453.0,2627.0,vespa-engine/vespa,b37ede37fd837c2f7af12950ce78eb4dd2a5a9c2,Refactor assignment of single rotation,https://github.com/vespa-engine/vespa/commit/b37ede37fd837c2f7af12950ce78eb4dd2a5a9c2
2454,2454.0,2628.0,vespa-engine/vespa,61b09ca3ef94afef2f7ef59c78178b6514a3e80b,refactor common test code to reduce duplication,https://github.com/vespa-engine/vespa/commit/61b09ca3ef94afef2f7ef59c78178b6514a3e80b
2455,2455.0,2629.0,vespa-engine/vespa,84c28041c2a4abb12f0e8834220719c61761fc12,refactor to avoid code duplication,https://github.com/vespa-engine/vespa/commit/84c28041c2a4abb12f0e8834220719c61761fc12
2456,2456.0,2630.0,vespa-engine/vespa,4cdb2a814c8c980fbc0ec18cf294d425a51fd934,"Merge pull request #12359 from vespa-engine/arnej/refactor-make-node-for-document

refactor to reuse make_node_for_document",https://github.com/vespa-engine/vespa/commit/4cdb2a814c8c980fbc0ec18cf294d425a51fd934
2457,2457.0,2631.0,vespa-engine/vespa,13ebfaeb8380ca11fdb7473770bf40cd6abdd4aa,refactor to reuse make_node_for_document,https://github.com/vespa-engine/vespa/commit/13ebfaeb8380ca11fdb7473770bf40cd6abdd4aa
2458,2458.0,2632.0,vespa-engine/vespa,f778c6865f31b16b0837954c854fff811389b18f,"Add metrics/v2 handler

- Add new config so that hostname and role can be added to output
- Refactor tests to avoid duplicating code",https://github.com/vespa-engine/vespa/commit/f778c6865f31b16b0837954c854fff811389b18f
2459,2459.0,2633.0,vespa-engine/vespa,2a7f13ab9f019586fc38275735ead7ad02afbd54,"Merge pull request #12067 from vespa-engine/andreer/endpoint-certificate-refactor

refactor application certificate -> endpoint certificate",https://github.com/vespa-engine/vespa/commit/2a7f13ab9f019586fc38275735ead7ad02afbd54
2460,2460.0,2634.0,vespa-engine/vespa,fd7647ce1d4048e93e93112d173b67e04599a428,refactor application certificate -> endpoint certificate,https://github.com/vespa-engine/vespa/commit/fd7647ce1d4048e93e93112d173b67e04599a428
2461,2461.0,2635.0,vespa-engine/vespa,bb74faa5f2e56c930db1ec06ebf912e5b316c087,"Add ReadableAttributeVector accessor to IAttributeManager

Provides a unified interface for fetching both regular as well as
imported attributes. Exposing `ReadableAttributeVector` instead of
raw `AttributeVector` instances enforces that all access is done via
appropriate acquired read guards.

Refactor document selection processing code to use the new interface
in order to prepare for imported field support in selections.",https://github.com/vespa-engine/vespa/commit/bb74faa5f2e56c930db1ec06ebf912e5b316c087
2462,2462.0,2636.0,vespa-engine/vespa,b4793a390bddf73fda1e9b5668619bcb518bd2a2,"Merge pull request #11960 from vespa-engine/arnej/refactor-hnsw-algo-only

refactor and unify",https://github.com/vespa-engine/vespa/commit/b4793a390bddf73fda1e9b5668619bcb518bd2a2
2463,2463.0,2637.0,vespa-engine/vespa,18c9460fc391a11592796dac3d63e02fab343c5f,"refactor and unify

* also: rename QueueEntry -> HnswHit
* add statistics
* add removeDoc implementation
* add hnsw-wrap (not compiled) for comparison",https://github.com/vespa-engine/vespa/commit/18c9460fc391a11592796dac3d63e02fab343c5f
2464,2464.0,2638.0,vespa-engine/vespa,db8398109702b1af78a8b613e31741fece882ce9,Rename and refactor away code duplication,https://github.com/vespa-engine/vespa/commit/db8398109702b1af78a8b613e31741fece882ce9
2465,2465.0,2639.0,vespa-engine/vespa,c1c9bf7c8981c0664a9469a0da24276d232298c9,"Merge pull request #11864 from vespa-engine/revert-11862-revert-11842-andreer/endpoint-certificate-refactoring

Reapply ""accept and store json endpoint cert metadata on deploy""",https://github.com/vespa-engine/vespa/commit/c1c9bf7c8981c0664a9469a0da24276d232298c9
2466,2466.0,2640.0,vespa-engine/vespa,144e14fa53177458883a98c07e7709aa8cdae9e5,"Merge pull request #11862 from vespa-engine/revert-11842-andreer/endpoint-certificate-refactoring

Revert ""accept and store json endpoint cert metadata on deploy""",https://github.com/vespa-engine/vespa/commit/144e14fa53177458883a98c07e7709aa8cdae9e5
2467,2467.0,2641.0,vespa-engine/vespa,5ee42fd430e45766def38d1c0d412781e393f2e2,"Merge pull request #11842 from vespa-engine/andreer/endpoint-certificate-refactoring

accept and store json endpoint cert metadata on deploy",https://github.com/vespa-engine/vespa/commit/5ee42fd430e45766def38d1c0d412781e393f2e2
2468,2468.0,2642.0,vespa-engine/vespa,e66e0ba2ccd2b973a13eff8645af66073eba31ed,"accept and store json endpoint cert metadata on deploy

also refactor from tlsSecretKeys -> several ""endpoint certificate"" classes",https://github.com/vespa-engine/vespa/commit/e66e0ba2ccd2b973a13eff8645af66073eba31ed
2469,2469.0,2643.0,vespa-engine/vespa,c4341ca86ce65e7702d5358f41fbe0e678c9379d,Refactor and hash,https://github.com/vespa-engine/vespa/commit/c4341ca86ce65e7702d5358f41fbe0e678c9379d
2470,2470.0,2644.0,vespa-engine/vespa,ddbec469b6877ce66900a33ecac07866ac19b499,"Always add container port 4443 in hosted Vespa

- Refactor HostedSslConnectorFactory constructors to expose static factory methods instead.
- Modify ContainerModelBuilder to always add hosted Vespa connector (based on presence of TlsSecrets).",https://github.com/vespa-engine/vespa/commit/ddbec469b6877ce66900a33ecac07866ac19b499
2471,2471.0,2645.0,vespa-engine/vespa,c5b953d3d2b061dbab8537209c6ddedb1c02cf14,add some statistics and refactor,https://github.com/vespa-engine/vespa/commit/c5b953d3d2b061dbab8537209c6ddedb1c02cf14
2472,2472.0,2646.0,vespa-engine/vespa,cf0cced3466d9facb79deba4e31a5ef962d57191,"Always add container port 4443 in hosted Vespa

- Refactor HostedSslConnectorFactory constructors to expose static factory methods instead.
- Modify ContainerModelBuilder to always add hosted Vespa connector (based on presence of TlsSecrets).",https://github.com/vespa-engine/vespa/commit/cf0cced3466d9facb79deba4e31a5ef962d57191
2473,2473.0,2647.0,vespa-engine/vespa,a1965885a22238c3eb9370c2532a90b302e954f5,"Always add container port 4443 in hosted Vespa

- Refactor HostedSslConnectorFactory constructors to expose static factory methods instead.
- Modify ContainerModelBuilder to always add hosted Vespa connector (based on presence of TlsSecrets).",https://github.com/vespa-engine/vespa/commit/a1965885a22238c3eb9370c2532a90b302e954f5
2474,2474.0,2648.0,vespa-engine/vespa,191ce2603d4d95e907b05ad64ec0a48ff858fe8c,Refactor forceTrigger job computation,https://github.com/vespa-engine/vespa/commit/191ce2603d4d95e907b05ad64ec0a48ff858fe8c
2475,2475.0,2649.0,vespa-engine/vespa,2730ee3558a30be3b8d4efb378dab583677baab0,Remove TODO and refactor control flow,https://github.com/vespa-engine/vespa/commit/2730ee3558a30be3b8d4efb378dab583677baab0
2476,2476.0,2650.0,vespa-engine/vespa,2462ef3a0dce6fcd4a0b04c0ee76e44531f31395,Refactor sparse parsing,https://github.com/vespa-engine/vespa/commit/2462ef3a0dce6fcd4a0b04c0ee76e44531f31395
2477,2477.0,2651.0,vespa-engine/vespa,d20739f64a81a2940a944b896ffbee5f8ca7f224,Refactor tester code to create cloud tenants,https://github.com/vespa-engine/vespa/commit/d20739f64a81a2940a944b896ffbee5f8ca7f224
2478,2478.0,2652.0,vespa-engine/vespa,28d27fa91931502f69104a7ad82a67623d161e86,"Read prod test and steps tags, and some refactoring",https://github.com/vespa-engine/vespa/commit/28d27fa91931502f69104a7ad82a67623d161e86
2479,2479.0,2653.0,vespa-engine/vespa,d6b95e82f078cd6cf3b2597d1b659169db2c618d,"Merge pull request #11452 from vespa-engine/bratseth/maintenance-refactor

Bratseth/maintenance refactor",https://github.com/vespa-engine/vespa/commit/d6b95e82f078cd6cf3b2597d1b659169db2c618d
2480,2480.0,2654.0,vespa-engine/vespa,c6b549825b7495b08d243cab5d54578d60dac91f,"Refactor config generation, no functional changes",https://github.com/vespa-engine/vespa/commit/c6b549825b7495b08d243cab5d54578d60dac91f
2481,2481.0,2655.0,vespa-engine/vespa,151f6db70eb865ee55ae5b9ddd8a628f0788a673,"Merge pull request #11439 from vespa-engine/geirst/refactor-streaming-search-code

Refactor streaming search code",https://github.com/vespa-engine/vespa/commit/151f6db70eb865ee55ae5b9ddd8a628f0788a673
2482,2482.0,2656.0,vespa-engine/vespa,dc9e53f2916813591198912b36ede01470a948d9,refactor and check with non-null tensor,https://github.com/vespa-engine/vespa/commit/dc9e53f2916813591198912b36ede01470a948d9
2483,2483.0,2657.0,vespa-engine/vespa,1e688268d9b55dcd3387c99d6d53c0b7a3c92201,Refactor flag data operations into separate methods,https://github.com/vespa-engine/vespa/commit/1e688268d9b55dcd3387c99d6d53c0b7a3c92201
2484,2484.0,2658.0,vespa-engine/vespa,c5bbe54167ae455f7cd0e6d78a8e763dbc11d8ef,"Merge pull request #11275 from vespa-engine/hmusum/refactor-tests

Refactor tests, no functional changes",https://github.com/vespa-engine/vespa/commit/c5bbe54167ae455f7cd0e6d78a8e763dbc11d8ef
2485,2485.0,2659.0,vespa-engine/vespa,c30d9588b4ed7b1b1c387ecd35e970e90188ad68,"Refactor tests, no functional changes",https://github.com/vespa-engine/vespa/commit/c30d9588b4ed7b1b1c387ecd35e970e90188ad68
2486,2486.0,2660.0,vespa-engine/vespa,94e4ff6524f95d27af39dd475a1f58bb0d28205e,Refactor Athenz mocking in ApplicationApiTest,https://github.com/vespa-engine/vespa/commit/94e4ff6524f95d27af39dd475a1f58bb0d28205e
2487,2487.0,2661.0,vespa-engine/vespa,45787a61e460e63a3cf3cae98891e545a72ae71b,"Merge pull request #11191 from vespa-engine/havardpe/fast-forest-experiments

fast forest refactoring and experimentation",https://github.com/vespa-engine/vespa/commit/45787a61e460e63a3cf3cae98891e545a72ae71b
2488,2488.0,2662.0,vespa-engine/vespa,3018ff30938c797d47b8c9dbd55e57d3f037aa10,fast forest refactoring and experimentation,https://github.com/vespa-engine/vespa/commit/3018ff30938c797d47b8c9dbd55e57d3f037aa10
2489,2489.0,2663.0,vespa-engine/vespa,d1ec7b663b51ad2013f38d7ee03fbf2e3aa677c3,Refactor ConfigServerRestExecutorImpl,https://github.com/vespa-engine/vespa/commit/d1ec7b663b51ad2013f38d7ee03fbf2e3aa677c3
2490,2490.0,2664.0,vespa-engine/vespa,f966b8ff891e835972866865453dc54d5c2a858a,"Merge pull request #11000 from vespa-engine/hmusum/minor-refactoring

Minor refactoring, no functional changes",https://github.com/vespa-engine/vespa/commit/f966b8ff891e835972866865453dc54d5c2a858a
2491,2491.0,2665.0,vespa-engine/vespa,15c2736314ff5c94a695124ab271f1e046060029,Refactor: Skew computation independent of node prioritization,https://github.com/vespa-engine/vespa/commit/15c2736314ff5c94a695124ab271f1e046060029
2492,2492.0,2666.0,vespa-engine/vespa,374847489805f5a38ec7ed58ead3363745f42972,"Minor refactoring, no functional changes",https://github.com/vespa-engine/vespa/commit/374847489805f5a38ec7ed58ead3363745f42972
2493,2493.0,2667.0,vespa-engine/vespa,cfb1ae9d80940c1867b4f4a096d51045ea5ec397,Refactoring,https://github.com/vespa-engine/vespa/commit/cfb1ae9d80940c1867b4f4a096d51045ea5ec397
2494,2494.0,2668.0,vespa-engine/vespa,d8bd2760ff133bad54edf036b34ab454ef23129c,"Temporary developer role for deploy keys, and refactor unit test",https://github.com/vespa-engine/vespa/commit/d8bd2760ff133bad54edf036b34ab454ef23129c
2495,2495.0,2669.0,vespa-engine/vespa,5fc8b1739bd5e98e193f9bcbb43af790def7582d,Don't use MetricsProxyContainer for port number. Synchronize methods. Refactoring,https://github.com/vespa-engine/vespa/commit/5fc8b1739bd5e98e193f9bcbb43af790def7582d
2496,2496.0,2670.0,vespa-engine/vespa,bc74e0b10794deccb2e13b748220d7e5604bd964,"Merge pull request #10445 from vespa-engine/geirst/enum-store-refactor-2

Collapse EnumStoreBase into EnumStoreT in preparation for replacing u…",https://github.com/vespa-engine/vespa/commit/bc74e0b10794deccb2e13b748220d7e5604bd964
2497,2497.0,2671.0,vespa-engine/vespa,bae1efe6ef89764dc6340bdd70999e070cac0f89,"Merge pull request #10440 from vespa-engine/geirst/enum-store-refactor

Add interface for an enum store.",https://github.com/vespa-engine/vespa/commit/bae1efe6ef89764dc6340bdd70999e070cac0f89
2498,2498.0,2672.0,vespa-engine/vespa,bd65431ca39696ec242d63e4d378bae1a333e0c9,"Merge pull request #10433 from vespa-engine/geirst/refactor-enum-store-dictionary

Refactor enum store dictionary",https://github.com/vespa-engine/vespa/commit/bd65431ca39696ec242d63e4d378bae1a333e0c9
2499,2499.0,2673.0,vespa-engine/vespa,a2b6b426ae851b1dcc54337987694ef65981985d,Refactor private key serialization tests,https://github.com/vespa-engine/vespa/commit/a2b6b426ae851b1dcc54337987694ef65981985d
2500,2500.0,2674.0,vespa-engine/vespa,dc26f9d29a3b1fcff67c5a2104385cf7b60ff192,"Refactor, no semantic changes.",https://github.com/vespa-engine/vespa/commit/dc26f9d29a3b1fcff67c5a2104385cf7b60ff192
2501,2501.0,2675.0,vespa-engine/vespa,d7fd47c7f7165a4ae40b33e675338a5ed412e1b2,"Merge pull request #10193 from vespa-engine/arnej/refactor-requestor-api-5

retry: refactor requestor api",https://github.com/vespa-engine/vespa/commit/d7fd47c7f7165a4ae40b33e675338a5ed412e1b2
2502,2502.0,2676.0,vespa-engine/vespa,211cb30e6a61fa5aa0a43ad8e09239492e9cab18,"retry: refactor requestor api

* add and switch to API for explicitly allocating network ports
* remove now-unused getPortSuffixes
* remove now-unused requiresConsecutivePorts
* remove now-unused reservePortPrepended",https://github.com/vespa-engine/vespa/commit/211cb30e6a61fa5aa0a43ad8e09239492e9cab18
2503,2503.0,2677.0,vespa-engine/vespa,17f7d93b65dd1705be9c34026ba5505ca5d278fb,"Merge pull request #10188 from vespa-engine/revert-10150-arnej/refactor-requestor-api-4

Revert ""Arnej/refactor requestor api 4""",https://github.com/vespa-engine/vespa/commit/17f7d93b65dd1705be9c34026ba5505ca5d278fb
2504,2504.0,2678.0,vespa-engine/vespa,d0e5d87988013462ef4399c8eba9dd2bf8c2203e,"Revert ""Arnej/refactor requestor api 4""",https://github.com/vespa-engine/vespa/commit/d0e5d87988013462ef4399c8eba9dd2bf8c2203e
2505,2505.0,2679.0,vespa-engine/vespa,f735026061973cfa811f797b5ae522e96fb3980a,"Merge pull request #10150 from vespa-engine/arnej/refactor-requestor-api-4

Arnej/refactor requestor api 4",https://github.com/vespa-engine/vespa/commit/f735026061973cfa811f797b5ae522e96fb3980a
2506,2506.0,2680.0,vespa-engine/vespa,87dd83bd3b8965e2e71502f38870826945eaaa32,"Merge pull request #10110 from vespa-engine/olaa/resourcesnapshot-change

Refactoring resource metering",https://github.com/vespa-engine/vespa/commit/87dd83bd3b8965e2e71502f38870826945eaaa32
2507,2507.0,2681.0,vespa-engine/vespa,850bda1b8afb91f81170b664e8fcd82d1faa5c35,Refactoring resource metering,https://github.com/vespa-engine/vespa/commit/850bda1b8afb91f81170b664e8fcd82d1faa5c35
2508,2508.0,2682.0,vespa-engine/vespa,d87c742c40cdf2f6d242ad61cae189be63e720db,"Log embedded packages that are presumably unnecessary

(included in both compile scoped jars and provided jars)

* Add methods and refactor to facilitate this feature.",https://github.com/vespa-engine/vespa/commit/d87c742c40cdf2f6d242ad61cae189be63e720db
2509,2509.0,2683.0,vespa-engine/vespa,285ccc5c3f47561a0223ed7067771e1c960ee87a,minor: refactoring and comments,https://github.com/vespa-engine/vespa/commit/285ccc5c3f47561a0223ed7067771e1c960ee87a
2510,2510.0,2684.0,vespa-engine/vespa,21bcc11e62f4bceb2e0b2e8810494c0dc7528ac0,"Merge pull request #10029 from vespa-engine/hmusum/config-proxy-refactoring-2

Hmusum/config proxy refactoring 2",https://github.com/vespa-engine/vespa/commit/21bcc11e62f4bceb2e0b2e8810494c0dc7528ac0
2511,2511.0,2685.0,vespa-engine/vespa,47f335325e45bf5dfcf9821f2107dbd2bdfcdbed,Merge branch 'master' into hmusum/config-proxy-refactoring-2,https://github.com/vespa-engine/vespa/commit/47f335325e45bf5dfcf9821f2107dbd2bdfcdbed
2512,2512.0,2686.0,vespa-engine/vespa,01c34c59290b3e10c08462f05872113c51b57625,"Merge pull request #10016 from vespa-engine/hmusum/config-proxy-refactoring-1

Refactoring, no functional changes",https://github.com/vespa-engine/vespa/commit/01c34c59290b3e10c08462f05872113c51b57625
2513,2513.0,2687.0,vespa-engine/vespa,f4275608419676d227ac0997e4562fe6b71b8002,"Refactor to shorten ContainerModelBuilderTest

* Move jvm args tests into new subclass
* Move test logger to ContainerModelBuilderTestBase for reuse",https://github.com/vespa-engine/vespa/commit/f4275608419676d227ac0997e4562fe6b71b8002
2514,2514.0,2688.0,vespa-engine/vespa,2a68cfb9cc5b78ca20efa54854661915ed0b4a64,"Refactoring, no functional changes

Untangle class hierarchy a bit, move ClientUpdater code into RpcConfigSourceClient.
Remove a complicated and unnecessary unit test in ProxyServerTest that depended on mocks behaving correctly.",https://github.com/vespa-engine/vespa/commit/2a68cfb9cc5b78ca20efa54854661915ed0b4a64
2515,2515.0,2689.0,vespa-engine/vespa,80e799e7a78739c9c1bae604e54cf3d89ccb8e7d,"Stop replacing service/application id from setExtraMetrics packets

* Add tests and refactor RpcMetricsTest",https://github.com/vespa-engine/vespa/commit/80e799e7a78739c9c1bae604e54cf3d89ccb8e7d
2516,2516.0,2690.0,vespa-engine/vespa,cbf46af0fe1afbcefc53dd91bf8cdc4708b1a476,"Merge pull request #9972 from vespa-engine/musum/minor-refactoring

Minor refactoring, move into separate package",https://github.com/vespa-engine/vespa/commit/cbf46af0fe1afbcefc53dd91bf8cdc4708b1a476
2517,2517.0,2691.0,vespa-engine/vespa,5df759bdf58c48e2cacfad58e9a948e536be6d2b,"Minor refactoring, move into separate package",https://github.com/vespa-engine/vespa/commit/5df759bdf58c48e2cacfad58e9a948e536be6d2b
2518,2518.0,2692.0,vespa-engine/vespa,901655db854a60455b42dc489a5e38820a3b67c0,Refactor,https://github.com/vespa-engine/vespa/commit/901655db854a60455b42dc489a5e38820a3b67c0
2519,2519.0,2693.0,vespa-engine/vespa,840ddab2e6e3b2e243960b9bea8ff7051963a4c2,Refactor out solving without soft constraints,https://github.com/vespa-engine/vespa/commit/840ddab2e6e3b2e243960b9bea8ff7051963a4c2
2520,2520.0,2694.0,vespa-engine/vespa,fdc6a48fe913de5f5a84c6eb42123543c1d2ee46,refactor,https://github.com/vespa-engine/vespa/commit/fdc6a48fe913de5f5a84c6eb42123543c1d2ee46
2521,2521.0,2695.0,vespa-engine/vespa,c1512b3aefddc923b3a34775d9ab177e6338e856,Refactor to better show the intention of reducability.,https://github.com/vespa-engine/vespa/commit/c1512b3aefddc923b3a34775d9ab177e6338e856
2522,2522.0,2696.0,vespa-engine/vespa,cbbb7fee23052f78295e2687f153903422add9e2,Refactoring only,https://github.com/vespa-engine/vespa/commit/cbbb7fee23052f78295e2687f153903422add9e2
2523,2523.0,2697.0,vespa-engine/vespa,980abeff7aabe62a4f8d8c5fe314d3b654f8fdad,"add a daemon thread doing regular maintenance

* also, refactor test implementation",https://github.com/vespa-engine/vespa/commit/980abeff7aabe62a4f8d8c5fe314d3b654f8fdad
2524,2524.0,2698.0,vespa-engine/vespa,129db9665cc37ee74fde9a4b3649b3811bc76476,"Merge pull request #9548 from vespa-engine/toregge/refactor-term-field-match-data-tagging

Refactor tagging of TermFieldMatchData",https://github.com/vespa-engine/vespa/commit/129db9665cc37ee74fde9a4b3649b3811bc76476
2525,2525.0,2699.0,vespa-engine/vespa,02a609771b48d46270e3c0a90bf8a7c0656143b5,"Refactor tagging of TermFieldMatchData regarding which features are
needed by feature executors.",https://github.com/vespa-engine/vespa/commit/02a609771b48d46270e3c0a90bf8a7c0656143b5
2526,2526.0,2700.0,vespa-engine/vespa,8c2e456fbd41b09b6bacc09562f58befe2d28c56,"Merge pull request #9512 from vespa-engine/toregge/refactor-handle-recorder

Refactor handle recorder.",https://github.com/vespa-engine/vespa/commit/8c2e456fbd41b09b6bacc09562f58befe2d28c56
2527,2527.0,2701.0,vespa-engine/vespa,aaaab3708a6faa16b0577058ffdb2908943c58ff,Refactor handle recorder.,https://github.com/vespa-engine/vespa/commit/aaaab3708a6faa16b0577058ffdb2908943c58ff
2528,2528.0,2702.0,vespa-engine/vespa,92eb53f4954f17ab560b25dbf33be7b80343a453,"Merge pull request #9473 from vespa-engine/gjoranv/refactor-ports

Gjoranv/refactor ports",https://github.com/vespa-engine/vespa/commit/92eb53f4954f17ab560b25dbf33be7b80343a453
2529,2529.0,2703.0,vespa-engine/vespa,b238903f95f5b45b1443390b0f84ef4960fd88f5,"Allow built-in config definitions without 'com.yahoo' prefix.

- The hardcoded package prefix prevented lookup of producers
  for configs without the prefix.
+ Fix and refactor to use the already resolved builder class
  instead Config(Definition)Key.",https://github.com/vespa-engine/vespa/commit/b238903f95f5b45b1443390b0f84ef4960fd88f5
2530,2530.0,2704.0,vespa-engine/vespa,9d309b2ec8db1868d3695e8f9fc36ce763e8926c,Refactoring,https://github.com/vespa-engine/vespa/commit/9d309b2ec8db1868d3695e8f9fc36ce763e8926c
2531,2531.0,2705.0,vespa-engine/vespa,374e887730cde235d857129fde20c00d14009faf,"Merge pull request #9304 from vespa-engine/geirst/posting-list-benchmark-refactor-2

Geirst/posting list benchmark refactor 2",https://github.com/vespa-engine/vespa/commit/374e887730cde235d857129fde20c00d14009faf
2532,2532.0,2706.0,vespa-engine/vespa,1aad5e00519896846066fe525ab61f77f98f9049,Refactor out some common code,https://github.com/vespa-engine/vespa/commit/1aad5e00519896846066fe525ab61f77f98f9049
2533,2533.0,2707.0,vespa-engine/vespa,c98ce8216c6a7076b0a7b94fe360b5bb6f679cf6,"Merge pull request #9283 from vespa-engine/geirst/posting-list-benchmark-refactor

Geirst/posting list benchmark refactor",https://github.com/vespa-engine/vespa/commit/c98ce8216c6a7076b0a7b94fe360b5bb6f679cf6
2534,2534.0,2708.0,vespa-engine/vespa,1715733a1242d073a354947d3a5013e8c961790d,Refactor into createKeyFactory() method,https://github.com/vespa-engine/vespa/commit/1715733a1242d073a354947d3a5013e8c961790d
2535,2535.0,2709.0,vespa-engine/vespa,dd219ffd3416e1a752c50d92dfb8461e4689510a,"Merge pull request #9245 from vespa-engine/geirst/docid-and-features-refactor

Geirst/docid and features refactor",https://github.com/vespa-engine/vespa/commit/dd219ffd3416e1a752c50d92dfb8461e4689510a
2536,2536.0,2710.0,vespa-engine/vespa,87a8437a628310373d9db95b4ca66a9e968e8870,Refactor into separate method,https://github.com/vespa-engine/vespa/commit/87a8437a628310373d9db95b4ca66a9e968e8870
2537,2537.0,2711.0,vespa-engine/vespa,907158959c159904c3f4d20274c565806746ac15,Refactor to allow for lazy decode.,https://github.com/vespa-engine/vespa/commit/907158959c159904c3f4d20274c565806746ac15
2538,2538.0,2712.0,vespa-engine/vespa,f34177114c35ddc82de44de76e1033e8053714ca,"Merge pull request #9177 from vespa-engine/geirst/diskindex-refactor-1

Add more class comments + style changes.",https://github.com/vespa-engine/vespa/commit/f34177114c35ddc82de44de76e1033e8053714ca
2539,2539.0,2713.0,vespa-engine/vespa,96952b4ff22c09b9e14587c2f71e6bc3f478e187,"Merge pull request #9168 from vespa-engine/toregge/refactor-skip-info-calculation

Refactor skip info calculation.",https://github.com/vespa-engine/vespa/commit/96952b4ff22c09b9e14587c2f71e6bc3f478e187
2540,2540.0,2714.0,vespa-engine/vespa,bbdf3752be98218477ea1b3665a90d278a87996e,"Merge pull request #9164 from vespa-engine/geirst/memoryindex-refactor-5

Geirst/memoryindex refactor 5",https://github.com/vespa-engine/vespa/commit/bbdf3752be98218477ea1b3665a90d278a87996e
2541,2541.0,2715.0,vespa-engine/vespa,732bc407e28badee400be6f1a9c7737c55f8331f,Refactor skip info calculation.,https://github.com/vespa-engine/vespa/commit/732bc407e28badee400be6f1a9c7737c55f8331f
2542,2542.0,2716.0,vespa-engine/vespa,a9e3a26a04f795c20b4ed6ca3f8731b3fbcbe73f,"Merge pull request #9110 from vespa-engine/geirst/memoryindex-refactor-4

Add and improve class comments.",https://github.com/vespa-engine/vespa/commit/a9e3a26a04f795c20b4ed6ca3f8731b3fbcbe73f
2543,2543.0,2717.0,vespa-engine/vespa,ba57ce4f60d88b511c0388057c823b126702b0a3,"Merge pull request #9090 from vespa-engine/geirst/memoryindex-refactor-3

Geirst/memoryindex refactor 3.",https://github.com/vespa-engine/vespa/commit/ba57ce4f60d88b511c0388057c823b126702b0a3
2544,2544.0,2718.0,vespa-engine/vespa,93eca67ec28ab536c0cb84c9786bef206dd8cf7d,"Merge pull request #9065 from vespa-engine/geirst/memoryindex-refactor-2

Geirst/memoryindex refactor 2",https://github.com/vespa-engine/vespa/commit/93eca67ec28ab536c0cb84c9786bef206dd8cf7d
2545,2545.0,2719.0,vespa-engine/vespa,d9391e832e4f0c5e87000a49eac72b017631e5a7,Misc cleanup and refactoring,https://github.com/vespa-engine/vespa/commit/d9391e832e4f0c5e87000a49eac72b017631e5a7
2546,2546.0,2720.0,vespa-engine/vespa,bfd1b9ec19f522ef3985de887e9a6ec13d355913,"Add support for global endpoint names in public system

Refactors the existing name building to more easily support all the different
variants.",https://github.com/vespa-engine/vespa/commit/bfd1b9ec19f522ef3985de887e9a6ec13d355913
2547,2547.0,2721.0,vespa-engine/vespa,2c51937708c1a2a56840a6d84711505a0a0ed049,"Merge pull request #9056 from vespa-engine/geirst/memoryindex-refactor-1

Geirst/memoryindex refactor 1",https://github.com/vespa-engine/vespa/commit/2c51937708c1a2a56840a6d84711505a0a0ed049
2548,2548.0,2722.0,vespa-engine/vespa,f26cb7110330be17582c7e23812e43f608626392,"Refactor utility codec functions to build on top of each other

Also move protobuf includes out to a dedicated header file that hides
the various cozy GCC warning suppressions we need for the `protoc`-
generated code.",https://github.com/vespa-engine/vespa/commit/f26cb7110330be17582c7e23812e43f608626392
2549,2549.0,2723.0,vespa-engine/vespa,11285c5b014ef3a5730b264a4e6476d69517ebfc,"Merge pull request #9040 from vespa-engine/hmusum/fix-config-model-inconsistency-2

Minor refactoring, and some renaming",https://github.com/vespa-engine/vespa/commit/11285c5b014ef3a5730b264a4e6476d69517ebfc
2550,2550.0,2724.0,vespa-engine/vespa,f8051b6bdfba8676e0e9365e8d7b258b71cac226,"Minor refactoring, and some renaming",https://github.com/vespa-engine/vespa/commit/f8051b6bdfba8676e0e9365e8d7b258b71cac226
2551,2551.0,2725.0,vespa-engine/vespa,92501fc951e68adc377b15cb903d781ae71e2630,"Merge pull request #8856 from vespa-engine/geirst/logd-refactoring

Geirst/logd refactoring",https://github.com/vespa-engine/vespa/commit/92501fc951e68adc377b15cb903d781ae71e2630
2552,2552.0,2726.0,vespa-engine/vespa,a956595258e7d04ab34eab840b84595ccc6b6036,Non-functional refactorings.,https://github.com/vespa-engine/vespa/commit/a956595258e7d04ab34eab840b84595ccc6b6036
2553,2553.0,2727.0,vespa-engine/vespa,e5b87d5304e2d35417ddff6334acd128b78c25d8,"Merge pull request #8832 from vespa-engine/geirst/more-datastore-refactoring

Rename data store getBufferEntry() -> getEntry() and change it to tak...",https://github.com/vespa-engine/vespa/commit/e5b87d5304e2d35417ddff6334acd128b78c25d8
2554,2554.0,2728.0,vespa-engine/vespa,51af873dcda5da2ee5790bbdaf42d1141abc0a52,"refactor HostPorts usage

* instead of inheriting from HostPorts, make HostResource
  own an instance of it and redirect usage via ports() method.",https://github.com/vespa-engine/vespa/commit/51af873dcda5da2ee5790bbdaf42d1141abc0a52
2555,2555.0,2729.0,vespa-engine/vespa,697808ba81c452ce25e9b4357dd1741b971fd459,"Merge pull request #8638 from vespa-engine/mpolden/cleanup

Refactor alias name generation",https://github.com/vespa-engine/vespa/commit/697808ba81c452ce25e9b4357dd1741b971fd459
2556,2556.0,2730.0,vespa-engine/vespa,624e049cb2ea320656c175bd4d35fab0b9d71fe3,"rewrite port allocation

* refactor port allocation into its own class
* add and use PortFinder to reuse saved allocations
* remove superfluous PortReservation class
* this should (hopefully) not change the actual port allocations,
  even when saved allocations are not present.",https://github.com/vespa-engine/vespa/commit/624e049cb2ea320656c175bd4d35fab0b9d71fe3
2557,2557.0,2731.0,vespa-engine/vespa,5caf454d6123d824f1a7dc702a139f91da85dec5,Refactor alias name generation,https://github.com/vespa-engine/vespa/commit/5caf454d6123d824f1a7dc702a139f91da85dec5
2558,2558.0,2732.0,vespa-engine/vespa,a3a8b89a8066b352972c894730fa2b9fcbc72098,"Minor refactoring, and some renaming",https://github.com/vespa-engine/vespa/commit/a3a8b89a8066b352972c894730fa2b9fcbc72098
2559,2559.0,2733.0,vespa-engine/vespa,516e052217bdd71fcb30ed954fbe47094ccf6e91,Refactoring of relevance metric tracking,https://github.com/vespa-engine/vespa/commit/516e052217bdd71fcb30ed954fbe47094ccf6e91
2560,2560.0,2734.0,vespa-engine/vespa,f0352c8c527ed03c7bc82ba22aaeee14d38ef516,"Merge pull request #8513 from vespa-engine/geirst/refactor-document-tensor-update-unit-tests

Geirst/refactor document tensor update unit tests",https://github.com/vespa-engine/vespa/commit/f0352c8c527ed03c7bc82ba22aaeee14d38ef516
2561,2561.0,2735.0,vespa-engine/vespa,8093256a133616d810bc583d64c6603a4117a504,"Merge pull request #8470 from vespa-engine/mpolden/refactor-routing-policy-maintainer

Refactor RoutingPolicyMaintainer",https://github.com/vespa-engine/vespa/commit/8093256a133616d810bc583d64c6603a4117a504
2562,2562.0,2736.0,vespa-engine/vespa,00d3c6b51494855b525ccb1084d0d65b8f8457cb,Refactor test,https://github.com/vespa-engine/vespa/commit/00d3c6b51494855b525ccb1084d0d65b8f8457cb
2563,2563.0,2737.0,vespa-engine/vespa,e263492cbe9c97a13def5d10334a7138db625d83,"Merge pull request #8446 from vespa-engine/geirst/refactor-tensor-unit-tests

Create common test function for creating a tensor using default tenso…",https://github.com/vespa-engine/vespa/commit/e263492cbe9c97a13def5d10334a7138db625d83
2564,2564.0,2738.0,vespa-engine/vespa,e65f658045f276fa506a7d8e2e49bc8ccd908276,"Merge pull request #8406 from vespa-engine/freva/node-repo-refactor

Node repo refactor",https://github.com/vespa-engine/vespa/commit/e65f658045f276fa506a7d8e2e49bc8ccd908276
2565,2565.0,2739.0,vespa-engine/vespa,e35fce93ac3579e432f7ed510d9baa74f37ee5ec,"Merge pull request #8390 from vespa-engine/geirst/refactor-attribute-updater-unit-tests

Geirst/refactor attribute updater unit tests",https://github.com/vespa-engine/vespa/commit/e35fce93ac3579e432f7ed510d9baa74f37ee5ec
2566,2566.0,2740.0,vespa-engine/vespa,3a10bc1a5b78eb08ac59dd2b1eed8e02a67c489d,minor refactoring of document serialization,https://github.com/vespa-engine/vespa/commit/3a10bc1a5b78eb08ac59dd2b1eed8e02a67c489d
2567,2567.0,2741.0,vespa-engine/vespa,531da90c97ccbf89027da9cc04c9da445166507d,Remove TODO comment that was leftover from previous refactoring,https://github.com/vespa-engine/vespa/commit/531da90c97ccbf89027da9cc04c9da445166507d
2568,2568.0,2742.0,vespa-engine/vespa,06dabad421c8ad354f05670b568b1f6a5bb0f68a,minor refactoring of document serialization,https://github.com/vespa-engine/vespa/commit/06dabad421c8ad354f05670b568b1f6a5bb0f68a
2569,2569.0,2743.0,vespa-engine/vespa,7697c2cb156101dccf7eb1edaaa97fd0c4c3739c,Remove TODO comment that was leftover from previous refactoring,https://github.com/vespa-engine/vespa/commit/7697c2cb156101dccf7eb1edaaa97fd0c4c3739c
2570,2570.0,2744.0,vespa-engine/vespa,9bd782588f75b6a90fe08d60678b1819182f8ae3,"Merge pull request #8086 from vespa-engine/toregge/refactor-imported-field-in-config-model

Add subclasses of ImportedField to better keep track of simple fields",https://github.com/vespa-engine/vespa/commit/9bd782588f75b6a90fe08d60678b1819182f8ae3
2571,2571.0,2745.0,vespa-engine/vespa,8f9594a7219835c3540b1cc40ec835838b147bbb,"Merge pull request #7924 from vespa-engine/hmusum/avoid-tests-writing-to-module-directory

Refactor to avoid writing test data to module directory",https://github.com/vespa-engine/vespa/commit/8f9594a7219835c3540b1cc40ec835838b147bbb
2572,2572.0,2746.0,vespa-engine/vespa,7bce09f5e9a5afdd7156eab4196ea4cbf102cad6,Refactor to avoid writing test data to module directory,https://github.com/vespa-engine/vespa/commit/7bce09f5e9a5afdd7156eab4196ea4cbf102cad6
2573,2573.0,2747.0,vespa-engine/vespa,80e5f0a300d251573dfa774f4e594899e324baef,"- Decouple index config from ProtonConfig.
- Decouple grow config from Protonconfig.
No semantic changes, just refactoring.",https://github.com/vespa-engine/vespa/commit/80e5f0a300d251573dfa774f4e594899e324baef
2574,2574.0,2748.0,vespa-engine/vespa,3bcc130a874ff19359ee25bd7ce0b29b815291da,Refactor methods to static for easier testing.,https://github.com/vespa-engine/vespa/commit/3bcc130a874ff19359ee25bd7ce0b29b815291da
2575,2575.0,2749.0,vespa-engine/vespa,4ab17a2abf972fe0892469f3e0205acc21e24975,Refactor to extract a method.,https://github.com/vespa-engine/vespa/commit/4ab17a2abf972fe0892469f3e0205acc21e24975
2576,2576.0,2750.0,vespa-engine/vespa,7ae381e07c315af1bb52aadddbfeceb43ef975a4,Refactor some methods to static.,https://github.com/vespa-engine/vespa/commit/7ae381e07c315af1bb52aadddbfeceb43ef975a4
2577,2577.0,2751.0,vespa-engine/vespa,d3d97e192d05227c9614aab9e880d8f06eab66da,Refactor for easier testing.,https://github.com/vespa-engine/vespa/commit/d3d97e192d05227c9614aab9e880d8f06eab66da
2578,2578.0,2752.0,vespa-engine/vespa,19e7b1b2de9b16c9f9f4454155eaac8ddada43d3,Refactor to make coverage testable and test it.,https://github.com/vespa-engine/vespa/commit/19e7b1b2de9b16c9f9f4454155eaac8ddada43d3
2579,2579.0,2753.0,vespa-engine/vespa,a132de97ff01f9496a276eba334bc1c17c941d77,"Merge pull request #7554 from vespa-engine/ollivir/dispatcher-cleanup

Java dispatcher refactoring and cluster monitoring improvements",https://github.com/vespa-engine/vespa/commit/a132de97ff01f9496a276eba334bc1c17c941d77
2580,2580.0,2754.0,vespa-engine/vespa,8b8d3b2de3f5f92af37ec68b0ff5768fbae341b3,Java dispatcher refactoring and cluster monitoring improvements,https://github.com/vespa-engine/vespa/commit/8b8d3b2de3f5f92af37ec68b0ff5768fbae341b3
2581,2581.0,2755.0,vespa-engine/vespa,b04d5cf8899eefa65cbc0112404e72285959cba8,"Merge pull request #7458 from vespa-engine/balder/produce-start-config-in-container-cluster

Refactor: Move qrstart config generation from ContainerSearh to Conta…",https://github.com/vespa-engine/vespa/commit/b04d5cf8899eefa65cbc0112404e72285959cba8
2582,2582.0,2756.0,vespa-engine/vespa,f99c5ee981cac149023f9ba1c04e947ae2a3ab2a,Refactor: Move qrstart config generation from ContainerSearh to ContainerCluster.,https://github.com/vespa-engine/vespa/commit/f99c5ee981cac149023f9ba1c04e947ae2a3ab2a
2583,2583.0,2757.0,vespa-engine/vespa,c1c5842611dbb3643f374946a8d6107246c13f5b,Refactor for testability.,https://github.com/vespa-engine/vespa/commit/c1c5842611dbb3643f374946a8d6107246c13f5b
2584,2584.0,2758.0,vespa-engine/vespa,9ab734145093fe978ec09af3f30d87845b857323,Refactor: No separate string accessors,https://github.com/vespa-engine/vespa/commit/9ab734145093fe978ec09af3f30d87845b857323
2585,2585.0,2759.0,vespa-engine/vespa,66058ea16d4ce72ec3a57c6c1b2e14a232d3899f,Refactor: Don't reparse,https://github.com/vespa-engine/vespa/commit/66058ea16d4ce72ec3a57c6c1b2e14a232d3899f
2586,2586.0,2760.0,vespa-engine/vespa,e9bf13c3cbeaa351c973281bc57767d97d8db04a,Refactor: Eagerly parse first and second phase,https://github.com/vespa-engine/vespa/commit/e9bf13c3cbeaa351c973281bc57767d97d8db04a
2587,2587.0,2761.0,vespa-engine/vespa,da8b4b3b9b5d197f9f2e6b4da9f33b111a32f0c6,Refactor: macro -> function,https://github.com/vespa-engine/vespa/commit/da8b4b3b9b5d197f9f2e6b4da9f33b111a32f0c6
2588,2588.0,2762.0,vespa-engine/vespa,9853b3f674bda90615e78649693ff9b2a3a6ec63,Refactor: macro -> function,https://github.com/vespa-engine/vespa/commit/9853b3f674bda90615e78649693ff9b2a3a6ec63
2589,2589.0,2763.0,vespa-engine/vespa,769aec13c58050c6e4edffcbb0f8bfc82d12cb30,Refactor: macro -> function,https://github.com/vespa-engine/vespa/commit/769aec13c58050c6e4edffcbb0f8bfc82d12cb30
2590,2590.0,2764.0,vespa-engine/vespa,493adba229cc53c5766b0b63060562d6256abdd8,Refactor: macro -> function,https://github.com/vespa-engine/vespa/commit/493adba229cc53c5766b0b63060562d6256abdd8
2591,2591.0,2765.0,vespa-engine/vespa,e2bc647f01162d7b5f0886337f308a9be6629a40,Refactor: Macro -> RankingExpressionFunction,https://github.com/vespa-engine/vespa/commit/e2bc647f01162d7b5f0886337f308a9be6629a40
2592,2592.0,2766.0,vespa-engine/vespa,347db07eb16da7ff3a4b2cac676caa932e8136dc,Refactor: Construct using ExpressionFunction,https://github.com/vespa-engine/vespa/commit/347db07eb16da7ff3a4b2cac676caa932e8136dc
2593,2593.0,2767.0,vespa-engine/vespa,5a6f9b703f228a6bb5565d5e680f22a3e3059ff0,Refactor: Expose function,https://github.com/vespa-engine/vespa/commit/5a6f9b703f228a6bb5565d5e680f22a3e3059ff0
2594,2594.0,2768.0,vespa-engine/vespa,688812e215e1e85d7d486344dc433fd24caa43c2,Refactor: Use ExpressionFunction,https://github.com/vespa-engine/vespa/commit/688812e215e1e85d7d486344dc433fd24caa43c2
2595,2595.0,2769.0,vespa-engine/vespa,b5531d333794b647e8a56ee88dd07e0ccf860404,Refactory: Remove mutations,https://github.com/vespa-engine/vespa/commit/b5531d333794b647e8a56ee88dd07e0ccf860404
2596,2596.0,2770.0,vespa-engine/vespa,ef8e4859e80c58035c3416c1fa8f24fd2d5af21d,Refactor: Initialize all macros state at once,https://github.com/vespa-engine/vespa/commit/ef8e4859e80c58035c3416c1fa8f24fd2d5af21d
2597,2597.0,2771.0,vespa-engine/vespa,94d17a924f45b7f5fe76038f081de9638e1dcedd,Refactor,https://github.com/vespa-engine/vespa/commit/94d17a924f45b7f5fe76038f081de9638e1dcedd
2598,2598.0,2772.0,vespa-engine/vespa,029ed1bba2c00771d914f98d3aa38a64822473c7,Refactor test,https://github.com/vespa-engine/vespa/commit/029ed1bba2c00771d914f98d3aa38a64822473c7
2599,2599.0,2773.0,vespa-engine/vespa,3fd4b8469091254ca37f5f139725d603f57004e7,Refactor,https://github.com/vespa-engine/vespa/commit/3fd4b8469091254ca37f5f139725d603f57004e7
2600,2600.0,2774.0,vespa-engine/vespa,4ca726bd303ff8ddd59e823bb6ecc2016615791c,Refactor,https://github.com/vespa-engine/vespa/commit/4ca726bd303ff8ddd59e823bb6ecc2016615791c
2601,2601.0,2775.0,vespa-engine/vespa,bd90229a30ee1c8206d758ac38b7dbea6215032b,Refactor test,https://github.com/vespa-engine/vespa/commit/bd90229a30ee1c8206d758ac38b7dbea6215032b
2602,2602.0,2776.0,vespa-engine/vespa,2bef9bcf98928aea7366af5c4df2a7de1c71c5dc,Refactor test,https://github.com/vespa-engine/vespa/commit/2bef9bcf98928aea7366af5c4df2a7de1c71c5dc
2603,2603.0,2777.0,vespa-engine/vespa,e5fedf20729be081f80f23f9f458ebe465e1c194,Refactor test,https://github.com/vespa-engine/vespa/commit/e5fedf20729be081f80f23f9f458ebe465e1c194
2604,2604.0,2778.0,vespa-engine/vespa,bb4a0112dcb2f708ad64c550668a0842face9559,Refactor,https://github.com/vespa-engine/vespa/commit/bb4a0112dcb2f708ad64c550668a0842face9559
2605,2605.0,2779.0,vespa-engine/vespa,0ca09ff48a5d35211bd751115e4ea809c54955c2,Refactor,https://github.com/vespa-engine/vespa/commit/0ca09ff48a5d35211bd751115e4ea809c54955c2
2606,2606.0,2780.0,vespa-engine/vespa,6b55c5fb628e07d9e8fab55e977a8c55df93b27e,"refactor, add support for compressed files",https://github.com/vespa-engine/vespa/commit/6b55c5fb628e07d9e8fab55e977a8c55df93b27e
2607,2607.0,2781.0,vespa-engine/vespa,55b5c8c7c4b14303dfffb9ad017fd6bcea40e9b9,Refactor test and prepare for injecting constants,https://github.com/vespa-engine/vespa/commit/55b5c8c7c4b14303dfffb9ad017fd6bcea40e9b9
2608,2608.0,2782.0,vespa-engine/vespa,940f3ca5c4852f13e94fc3665c03a38323b4fec4,"Merge pull request #6731 from vespa-engine/toregge/minor-attributenode-refactoring

Minor AttributeNode refactoring",https://github.com/vespa-engine/vespa/commit/940f3ca5c4852f13e94fc3665c03a38323b4fec4
2609,2609.0,2783.0,vespa-engine/vespa,f5d8efe54f7abe001d59ef923d46dccc1aa6b8fb,"Merge pull request #6714 from vespa-engine/toregge/refactor-attribute-node-replacement

Refactor replacement of grouping expression attribute nodes.",https://github.com/vespa-engine/vespa/commit/f5d8efe54f7abe001d59ef923d46dccc1aa6b8fb
2610,2610.0,2784.0,vespa-engine/vespa,fc1fa2035825f3b9551bfb0401ab4849a83bf151,Refactor replacement of grouping expression attribute nodes.,https://github.com/vespa-engine/vespa/commit/fc1fa2035825f3b9551bfb0401ab4849a83bf151
2611,2611.0,2785.0,vespa-engine/vespa,ed3923c95484e57e4eac43c25e985512ca3aa645,Track refactoring,https://github.com/vespa-engine/vespa/commit/ed3923c95484e57e4eac43c25e985512ca3aa645
2612,2612.0,2786.0,vespa-engine/vespa,66b8b332874136f95fff1290dbd7b7001e4a9398,Refactor and remove duplication,https://github.com/vespa-engine/vespa/commit/66b8b332874136f95fff1290dbd7b7001e4a9398
2613,2613.0,2787.0,vespa-engine/vespa,9e4ab54d1347cd1012342e85bcb78ea64bcc35dc,Refactor param extraction.,https://github.com/vespa-engine/vespa/commit/9e4ab54d1347cd1012342e85bcb78ea64bcc35dc
2614,2614.0,2788.0,vespa-engine/vespa,a26e1f94ce2f8963a013ada1f9765cd7cd397aec,refactor to accept any number of args,https://github.com/vespa-engine/vespa/commit/a26e1f94ce2f8963a013ada1f9765cd7cd397aec
2615,2615.0,2789.0,vespa-engine/vespa,730ab265223d24c63026e5287a4f4d346b3dac7e,"Merge pull request #6479 from vespa-engine/balder/refactor-diversity-for-reuse

Balder/refactor diversity for reuse",https://github.com/vespa-engine/vespa/commit/730ab265223d24c63026e5287a4f4d346b3dac7e
2616,2616.0,2790.0,vespa-engine/vespa,611d541bb06a168848371ab36959201cd5e766c5,"Merge pull request #6443 from vespa-engine/musum/minor-refactoring-of-tests

Minor refactoring of tests",https://github.com/vespa-engine/vespa/commit/611d541bb06a168848371ab36959201cd5e766c5
2617,2617.0,2791.0,vespa-engine/vespa,db3f0d09ab21e6134432027702e4e1caabc3ba59,Minor refactoring of tests,https://github.com/vespa-engine/vespa/commit/db3f0d09ab21e6134432027702e4e1caabc3ba59
2618,2618.0,2792.0,vespa-engine/vespa,1ee08f736d5db4b8ef05fc91518dd155748ca42a,refactor to look more like java version,https://github.com/vespa-engine/vespa/commit/1ee08f736d5db4b8ef05fc91518dd155748ca42a
2619,2619.0,2793.0,vespa-engine/vespa,25f474220ff02040bd84702e8dadfdb8ac0065ae,"refactor to avoid code duplication

* also minimize diff from original version",https://github.com/vespa-engine/vespa/commit/25f474220ff02040bd84702e8dadfdb8ac0065ae
2620,2620.0,2794.0,vespa-engine/vespa,03f71b36ce970a0207108702e4d1b6bf9b1fcabb,Refactor out normal distributed random generator,https://github.com/vespa-engine/vespa/commit/03f71b36ce970a0207108702e4d1b6bf9b1fcabb
2621,2621.0,2795.0,vespa-engine/vespa,84bac783dd9a5ee5a76db09ab4e7070d90364656,"Merge pull request #6111 from vespa-engine/lesters/revert-revert-onnx

Refactor ONNX and TF import to use same code base",https://github.com/vespa-engine/vespa/commit/84bac783dd9a5ee5a76db09ab4e7070d90364656
2622,2622.0,2796.0,vespa-engine/vespa,0bf235c481d24d627c82901a84bef585fe84bbb2,"Refactor ONNX and TF import to use same code base

This reverts commit 681963959794b47102d1a1cf72f215c72b0e2b51.",https://github.com/vespa-engine/vespa/commit/0bf235c481d24d627c82901a84bef585fe84bbb2
2623,2623.0,2797.0,vespa-engine/vespa,62ae46a58d9501ad60431634f374b3cfa2856a48,"Merge pull request #6106 from vespa-engine/revert-6046-lesters/refactor-onnx-tensorflow-import

Revert ""Refactor ONNX and TF import to use same code base""",https://github.com/vespa-engine/vespa/commit/62ae46a58d9501ad60431634f374b3cfa2856a48
2624,2624.0,2798.0,vespa-engine/vespa,681963959794b47102d1a1cf72f215c72b0e2b51,"Revert ""Refactor ONNX and TF import to use same code base""",https://github.com/vespa-engine/vespa/commit/681963959794b47102d1a1cf72f215c72b0e2b51
2625,2625.0,2799.0,vespa-engine/vespa,240176d60c44507f4e6733c7512620e80554c8de,"Merge pull request #6046 from vespa-engine/lesters/refactor-onnx-tensorflow-import

Refactor ONNX and TF import to use same code base",https://github.com/vespa-engine/vespa/commit/240176d60c44507f4e6733c7512620e80554c8de
2626,2626.0,2800.0,vespa-engine/vespa,624de94bb94a7cfe571bc6db4441b152c86daf6d,Refactor ONNX and TF import to use same code base,https://github.com/vespa-engine/vespa/commit/624de94bb94a7cfe571bc6db4441b152c86daf6d
2627,2627.0,2801.0,vespa-engine/vespa,293b7f898c22e67dccf64e48d62909d71e4aa896,"Make health client wo using it

This PR should not have any functional changes.

 - Make a synthetic ApplicationInfo for the config server and ""activate"" it
   during bootstrap.
 - Make an ApplicationInstanceGenerator that converts an ApplicationInfo
   to an ApplicationInstance. Used by ModelGenerator.
 - Make a ""DuperModel"" that combines the SuperModel (deployed apps) with
   the set of synthetic apps.
 - Prefer health over Slobrok service status, if available (!= NOT_CHECKED).

Health monitoring is structured as:
 - A manager responsible for adding and removing applications
 - An ApplicationHealthMonitor responsible for all monitoring for a given app
 - A HealthMonitor responsible for monitoring the health of a single service
 - A HealthClient responsible for issuing health requests to fixed endpoint

Some of the lower-level health monitoring is not entirely finished, as it
depends on refactoring of an athenz dependency tbd later.",https://github.com/vespa-engine/vespa/commit/293b7f898c22e67dccf64e48d62909d71e4aa896
2628,2628.0,2802.0,vespa-engine/vespa,23463e351097acc353dbfd2153a50b6cb8907df4,"Merge pull request #6006 from vespa-engine/arnej/refactor-hasFieldsField

move all hasFieldsField handling inside the FieldConsumer",https://github.com/vespa-engine/vespa/commit/23463e351097acc353dbfd2153a50b6cb8907df4
2629,2629.0,2803.0,vespa-engine/vespa,8c2db62342f378c70db71406b535caf7d38a916e,Refactor creation of ConfigServerDB,https://github.com/vespa-engine/vespa/commit/8c2db62342f378c70db71406b535caf7d38a916e
2630,2630.0,2804.0,vespa-engine/vespa,6cd4e8945facda874bf1ada7ea8694c2c633f9da,"Merge pull request #5978 from vespa-engine/hmusum/refactor-filedistribution-factory

Minor refactoring",https://github.com/vespa-engine/vespa/commit/6cd4e8945facda874bf1ada7ea8694c2c633f9da
2631,2631.0,2805.0,vespa-engine/vespa,544769d2f70bf239459e3e1f2a11295e431ff2da,"Minor refactoring

* Create supervisor when needed
* Do not use finalize(), transport thread is a daemon thread, so
  it should not be necessary
* Remove unused method",https://github.com/vespa-engine/vespa/commit/544769d2f70bf239459e3e1f2a11295e431ff2da
2632,2632.0,2806.0,vespa-engine/vespa,f2e79f8a844a3a61e099f1e93152d7f32020f42a,"Merge pull request #5961 from vespa-engine/hmusum/refactory-intervals-for-config-server-maintainers

Minor refactoring of how we set interval for maintainers",https://github.com/vespa-engine/vespa/commit/f2e79f8a844a3a61e099f1e93152d7f32020f42a
2633,2633.0,2807.0,vespa-engine/vespa,906982344549f89b57326b52aa7d1dec793452f6,Minor refactoring of how we set interval for maintainers,https://github.com/vespa-engine/vespa/commit/906982344549f89b57326b52aa7d1dec793452f6
2634,2634.0,2808.0,vespa-engine/vespa,69aae49a30dc657dfa5a603701ffe4ad231ea92f,Refactored to allow iteration over matching elements.,https://github.com/vespa-engine/vespa/commit/69aae49a30dc657dfa5a603701ffe4ad231ea92f
2635,2635.0,2809.0,vespa-engine/vespa,8026fff81e084e02e6dcee34d663348ddabbcc7e,"Merge pull request #5870 from vespa-engine/hmusum/refactor-test

Refactor tests",https://github.com/vespa-engine/vespa/commit/8026fff81e084e02e6dcee34d663348ddabbcc7e
2636,2636.0,2810.0,vespa-engine/vespa,cea387edfcfe7b700a8eb927ddf618cb2dfb8269,"Refactor tests

Avoid using low-level stuff, remove test ignored for many years
add some convenience methods for deploying to app repo",https://github.com/vespa-engine/vespa/commit/cea387edfcfe7b700a8eb927ddf618cb2dfb8269
2637,2637.0,2811.0,vespa-engine/vespa,cf80ff1b7ce08cd3fdfd8c789de45da02ffba5c9,"Merge pull request #5849 from vespa-engine/geirst/refactor-document-selection-integration-in-searchcore

Geirst/refactor document selection integration in searchcore",https://github.com/vespa-engine/vespa/commit/cf80ff1b7ce08cd3fdfd8c789de45da02ffba5c9
2638,2638.0,2812.0,vespa-engine/vespa,a1fa1d1dc64937a59a96f4609e4cb4ce4269142e,Refactor entity parsing from getInstanceIdentity,https://github.com/vespa-engine/vespa/commit/a1fa1d1dc64937a59a96f4609e4cb4ce4269142e
2639,2639.0,2813.0,vespa-engine/vespa,b6f17ee7d40cf443b689736c8c1fa3309bbdc2e9,Refactor CachedSelect by adding Session class with functions to check whether we match selection expr.,https://github.com/vespa-engine/vespa/commit/b6f17ee7d40cf443b689736c8c1fa3309bbdc2e9
2640,2640.0,2814.0,vespa-engine/vespa,18d6d1da2c340114e9bf1936904f3e5639a5003c,"Merge pull request #5841 from vespa-engine/hmusum/refactor-create-session

Minor refactoring to creating session",https://github.com/vespa-engine/vespa/commit/18d6d1da2c340114e9bf1936904f3e5639a5003c
2641,2641.0,2815.0,vespa-engine/vespa,38a866b090f95d1266e1e2b4a1d65e1f093bb5e8,Minor refactoring to creating session,https://github.com/vespa-engine/vespa/commit/38a866b090f95d1266e1e2b4a1d65e1f093bb5e8
2642,2642.0,2816.0,vespa-engine/vespa,d7ec114976a4e5816a272aea25dbb2e13717fb92,"Merge pull request #5726 from vespa-engine/jvenstad/DO-unified

Refactoring",https://github.com/vespa-engine/vespa/commit/d7ec114976a4e5816a272aea25dbb2e13717fb92
2643,2643.0,2817.0,vespa-engine/vespa,e166ab3d91aa585d294f96ef300c7a83043e57eb,Div refactoring,https://github.com/vespa-engine/vespa/commit/e166ab3d91aa585d294f96ef300c7a83043e57eb
2644,2644.0,2818.0,vespa-engine/vespa,ffe98fb6393899242d1e3facc3e35a0cbcd5fb7e,Refactor system upgrade test helpers,https://github.com/vespa-engine/vespa/commit/ffe98fb6393899242d1e3facc3e35a0cbcd5fb7e
2645,2645.0,2819.0,vespa-engine/vespa,b58cbe68e30c37cb67e4eb18e3a7a29a12722f1a,"handle VESPA_CONFIGSERVERS

* also some refactoring
* also, make C++ code (in defaults) handle same variable variants,
  like services__addr_configserver
* also, update some error messages to indicate that VESPA_CONFIGSERVERS
  is the variable we expected to use",https://github.com/vespa-engine/vespa/commit/b58cbe68e30c37cb67e4eb18e3a7a29a12722f1a
2646,2646.0,2820.0,vespa-engine/vespa,fa819874cf6a02f2cdcc8839af4ef311953f45e4,"Merge pull request #5565 from vespa-engine/arnej/remember-deploystate-less

refactor, saving just the state we need to",https://github.com/vespa-engine/vespa/commit/fa819874cf6a02f2cdcc8839af4ef311953f45e4
2647,2647.0,2821.0,vespa-engine/vespa,65b6b13547ee0778fa66cc24619b44cabed9e3d3,"refactor, saving just the state we need to

* avoid caching DeployState since we want to free those resources
  after the model is completely built.",https://github.com/vespa-engine/vespa/commit/65b6b13547ee0778fa66cc24619b44cabed9e3d3
2648,2648.0,2822.0,vespa-engine/vespa,03c85e623faa223eaae368ff0f049b4c8186dc75,redirect target is only available for nat table - refactor to split the two,https://github.com/vespa-engine/vespa/commit/03c85e623faa223eaae368ff0f049b4c8186dc75
2649,2649.0,2823.0,vespa-engine/vespa,009169e1f7afc4bd6b8ae4e8260789cc4452ef88,"Refactoring, no real changes",https://github.com/vespa-engine/vespa/commit/009169e1f7afc4bd6b8ae4e8260789cc4452ef88
2650,2650.0,2824.0,vespa-engine/vespa,af0f1a92e8f74a6de63dd9c95f23147e7a476df1,"Merge pull request #5464 from vespa-engine/mpolden/refactor-tenant

Refactor tenant",https://github.com/vespa-engine/vespa/commit/af0f1a92e8f74a6de63dd9c95f23147e7a476df1
2651,2651.0,2825.0,vespa-engine/vespa,d6cabc38ba3255663184b15eacb5bf9903c42c98,"Refactor tenant

* Split tenant types into separate classes
* Stop using TenantId internally in controller-server
* Test variations of invalid tenant names and normalization",https://github.com/vespa-engine/vespa/commit/d6cabc38ba3255663184b15eacb5bf9903c42c98
2652,2652.0,2826.0,vespa-engine/vespa,9ac0fd457ab33ed5c602c5a3fbdd3881eae4f99e,minor refactoring,https://github.com/vespa-engine/vespa/commit/9ac0fd457ab33ed5c602c5a3fbdd3881eae4f99e
2653,2653.0,2827.0,vespa-engine/vespa,1b78af9b70773ef4f7c64779f5c78dc516040b87,Refactor test,https://github.com/vespa-engine/vespa/commit/1b78af9b70773ef4f7c64779f5c78dc516040b87
2654,2654.0,2828.0,vespa-engine/vespa,2005e5dd57b2bafd1150917560da8066b39d64f7,Refactor only,https://github.com/vespa-engine/vespa/commit/2005e5dd57b2bafd1150917560da8066b39d64f7
2655,2655.0,2829.0,vespa-engine/vespa,db18ddbeb1342ac9726061b570bd61fe69cf5526,Update tests after IPAddresses refactoring and do prefixtranslation on byte granularity,https://github.com/vespa-engine/vespa/commit/db18ddbeb1342ac9726061b570bd61fe69cf5526
2656,2656.0,2830.0,vespa-engine/vespa,3777557b0069026d0ba5ace3ff66fca6c7354d92,Refactor,https://github.com/vespa-engine/vespa/commit/3777557b0069026d0ba5ace3ff66fca6c7354d92
2657,2657.0,2831.0,vespa-engine/vespa,58cef4ed623166635bd0afe07a8175c2ff5ec3dc,"Merge pull request #5118 from vespa-engine/lesters/rename-tensorflow-constants

Refactor TensorFlow import and add dimension renaming.",https://github.com/vespa-engine/vespa/commit/58cef4ed623166635bd0afe07a8175c2ff5ec3dc
2658,2658.0,2832.0,vespa-engine/vespa,b1f46fcd0495dbce905fb8b7318781f4cf5965a7,Refactor TensorFlow import and add dimension renaming.,https://github.com/vespa-engine/vespa/commit/b1f46fcd0495dbce905fb8b7318781f4cf5965a7
2659,2659.0,2833.0,vespa-engine/vespa,f7abcc6d88f26cc07ca2e5f8c39345edf30b2a61,"Merge pull request #5094 from vespa-engine/mortent/reapply-ckms-2

refactor athenz id provider and add SIA provider",https://github.com/vespa-engine/vespa/commit/f7abcc6d88f26cc07ca2e5f8c39345edf30b2a61
2660,2660.0,2834.0,vespa-engine/vespa,5b148b6f4eec2380757b5cc8c3dfa1cd3e2eecb4,"Merge pull request #5092 from vespa-engine/revert-5075-mortent/reapply-ckms

Revert ""Refactor identityprovider. Add SiaIdentityProvider""",https://github.com/vespa-engine/vespa/commit/5b148b6f4eec2380757b5cc8c3dfa1cd3e2eecb4
2661,2661.0,2835.0,vespa-engine/vespa,1ec2db1684e5f1ca0e50364c9741fdfa1e135503,"Revert ""Refactor identityprovider. Add SiaIdentityProvider""",https://github.com/vespa-engine/vespa/commit/1ec2db1684e5f1ca0e50364c9741fdfa1e135503
2662,2662.0,2836.0,vespa-engine/vespa,988c15bdbee69b93aaad6982c8b51e8058bff2de,"Merge pull request #5075 from vespa-engine/mortent/reapply-ckms

Refactor identityprovider. Add SiaIdentityProvider",https://github.com/vespa-engine/vespa/commit/988c15bdbee69b93aaad6982c8b51e8058bff2de
2663,2663.0,2837.0,vespa-engine/vespa,6d7b65adfcd1e918da8173dab25bf701074f3cdc,"Merge pull request #5072 from vespa-engine/revert-4984-mortent/ckms

Revert ""Refactor identityprovider. Add SiaIdentityProvider""",https://github.com/vespa-engine/vespa/commit/6d7b65adfcd1e918da8173dab25bf701074f3cdc
2664,2664.0,2838.0,vespa-engine/vespa,957325fa8ea36022f79df52378d0623f3f488783,"Revert ""Refactor identityprovider. Add SiaIdentityProvider""",https://github.com/vespa-engine/vespa/commit/957325fa8ea36022f79df52378d0623f3f488783
2665,2665.0,2839.0,vespa-engine/vespa,2ecdfefd5616743f62691f64a517ab787d6f0c10,"Merge pull request #4984 from vespa-engine/mortent/ckms

Refactor identityprovider. Add SiaIdentityProvider",https://github.com/vespa-engine/vespa/commit/2ecdfefd5616743f62691f64a517ab787d6f0c10
2666,2666.0,2840.0,vespa-engine/vespa,a11b3156a4e104ca5f908946e9f0b6105c32b9b4,Refactor,https://github.com/vespa-engine/vespa/commit/a11b3156a4e104ca5f908946e9f0b6105c32b9b4
2667,2667.0,2841.0,vespa-engine/vespa,93d6928d040c17deda2d075e01b6686b2c15fe33,Refactor identityprovider. Add SiaIdentityProvider,https://github.com/vespa-engine/vespa/commit/93d6928d040c17deda2d075e01b6686b2c15fe33
2668,2668.0,2842.0,vespa-engine/vespa,4f55d543f0569d992a21f69b4b3c1309790de74d,"Merge pull request #4991 from vespa-engine/arnej/co-locate-dot-product-tests

refactor dot product test",https://github.com/vespa-engine/vespa/commit/4f55d543f0569d992a21f69b4b3c1309790de74d
2669,2669.0,2843.0,vespa-engine/vespa,e27b4915529572bd568e2ca4bb81307d33f8123f,refactor dot product test,https://github.com/vespa-engine/vespa/commit/e27b4915529572bd568e2ca4bb81307d33f8123f
2670,2670.0,2844.0,vespa-engine/vespa,d7f2611dadd3e450addbd58922d23883925ea2fb,"Refactoring, no functional changes",https://github.com/vespa-engine/vespa/commit/d7f2611dadd3e450addbd58922d23883925ea2fb
2671,2671.0,2845.0,vespa-engine/vespa,8aec10e053614a2cdc6459eaca41913a0dfe306f,Refactor uri creation logic into separate method,https://github.com/vespa-engine/vespa/commit/8aec10e053614a2cdc6459eaca41913a0dfe306f
2672,2672.0,2846.0,vespa-engine/vespa,752f5b5b3d7bb0726c45b38cf580b93c4916dc60,Refactor extraction of visit parameters from HTTP request parameters,https://github.com/vespa-engine/vespa/commit/752f5b5b3d7bb0726c45b38cf580b93c4916dc60
2673,2673.0,2847.0,vespa-engine/vespa,cd4df20c0a72920b37a6a23de0014909d366dcb0,"Merge pull request #4788 from vespa-engine/lesters/support-tf-dropout

Refactor tensorflow import and add dropout test",https://github.com/vespa-engine/vespa/commit/cd4df20c0a72920b37a6a23de0014909d366dcb0
2674,2674.0,2848.0,vespa-engine/vespa,089a765734b1791995510e97a0852bd7a89b3c0b,Refactor tensorflow import and add dropout test,https://github.com/vespa-engine/vespa/commit/089a765734b1791995510e97a0852bd7a89b3c0b
2675,2675.0,2849.0,vespa-engine/vespa,40cecc0924fbfe50cfd942935dc4de5715829bf7,Refactor calculation of buffer allocation.,https://github.com/vespa-engine/vespa/commit/40cecc0924fbfe50cfd942935dc4de5715829bf7
2676,2676.0,2850.0,vespa-engine/vespa,31b00d9cdbba6081c18dce9e2dae76c33e580557,Refactor: Rename,https://github.com/vespa-engine/vespa/commit/31b00d9cdbba6081c18dce9e2dae76c33e580557
2677,2677.0,2851.0,vespa-engine/vespa,880149e6380a52edb089d59752a8fd4ea669e400,Refactor: Move state to helper,https://github.com/vespa-engine/vespa/commit/880149e6380a52edb089d59752a8fd4ea669e400
2678,2678.0,2852.0,vespa-engine/vespa,a0f6d44333202731d07139ba6f0256dd4443da78,Refactor: Extract test helper logic,https://github.com/vespa-engine/vespa/commit/a0f6d44333202731d07139ba6f0256dd4443da78
2679,2679.0,2853.0,vespa-engine/vespa,b54f86da25e5183fc45d1d5f1620eb6394d7aca0,"Merge pull request #4726 from vespa-engine/hmusum/refactor-prepare

Refactor prepare handler",https://github.com/vespa-engine/vespa/commit/b54f86da25e5183fc45d1d5f1620eb6394d7aca0
2680,2680.0,2854.0,vespa-engine/vespa,9a505ce1c97ae50ade73db004d9ae6d4e83a4752,"Refactor prepare handler

Move more stuff into business layer, no functional changes",https://github.com/vespa-engine/vespa/commit/9a505ce1c97ae50ade73db004d9ae6d4e83a4752
2681,2681.0,2855.0,vespa-engine/vespa,d9e17187fe49f662520d282c38e5cf779cbb8195,Refactor (no functional changes),https://github.com/vespa-engine/vespa/commit/d9e17187fe49f662520d282c38e5cf779cbb8195
2682,2682.0,2856.0,vespa-engine/vespa,a2433d41489b18bd2f1e785cd9dd15a30e609857,Refactor Packet and read of TLS.,https://github.com/vespa-engine/vespa/commit/a2433d41489b18bd2f1e785cd9dd15a30e609857
2683,2683.0,2857.0,vespa-engine/vespa,b661c7801794ad9cf989595c9ce68a684bde0d44,"Merge pull request #4358 from vespa-engine/bjorncs/fix

Fix invalid id bug introduced after recent refactoring",https://github.com/vespa-engine/vespa/commit/b661c7801794ad9cf989595c9ce68a684bde0d44
2684,2684.0,2858.0,vespa-engine/vespa,6cd083305fbb31158bb24cc0bc5ac8dcbb43cefb,Fix invalid id bug introduced after recent refactoring,https://github.com/vespa-engine/vespa/commit/6cd083305fbb31158bb24cc0bc5ac8dcbb43cefb
2685,2685.0,2859.0,vespa-engine/vespa,746556112b390e7f428b5c8c51353fcffd914f64,"review follow-up

* bug fix PointMap::operator< and use ""for"" loop
* construct aggregators from samples only
* use generation counter instead of timestamps to ensure correct ordering
* add ""noexcept"" to signal strong exception guarantees
* handle out-of-order metric type checks
* ensure ticker thread is stopped in destructor
* change TickerThread::stop() to only do its work once, as
  calling stop() twice crashed for some strange reason
* refactor CurrentSamples extraction
* move time-handling to tick()
* ensure we do not have concurrent tick()s running
* simpler time handling",https://github.com/vespa-engine/vespa/commit/746556112b390e7f428b5c8c51353fcffd914f64
2686,2686.0,2860.0,vespa-engine/vespa,2634665462f58cb5219ffe226b7f9e192350e0af,"update metrics library after review

* Fix PointMap comparison bug and style.
* Rename ReAllocBunch to StableStore, and GC its unused lookup method.
  Rename method apply -> for_each
* Rename CounterIncrement -> Counter::Increment
  and GaugeMeasurement -> Gauge::Measurement
* Rename PointMapBacking -> PointMap::BackingMap
* Make single-argument constructors explicit.
* Do not use actual time in dummy.
* Rename mergeWithMap -> mergeFromSamples, and do some refactoring of it.
* Refactor opaque handle implementation into its own class
* Copy strings into snapshot, do not refer to strings owned elsewhere.
* Refactor _pointMaps code into new PointMapCollection class
* Split aggregators into their own files, move Bucket into its own files,
  and rename files for CurrentSamples.
* Make Counter and Gauge only hold the MetricName and supply an
  empty Point via default argument instead.
* Split out StableStore test, and test for pointer equality.
* Separate out ticker thread, and arrange for fast stop.
* Use less swap.
* Add totalSnapshot() facility.",https://github.com/vespa-engine/vespa/commit/2634665462f58cb5219ffe226b7f9e192350e0af
2687,2687.0,2861.0,vespa-engine/vespa,1420382a5c16f08cb854d58b2c29b485f51f7f9e,Refactor,https://github.com/vespa-engine/vespa/commit/1420382a5c16f08cb854d58b2c29b485f51f7f9e
2688,2688.0,2862.0,vespa-engine/vespa,5a24610fab32f9df42f3fec475ea72cd67ae9d49,Refactor out duplicate code,https://github.com/vespa-engine/vespa/commit/5a24610fab32f9df42f3fec475ea72cd67ae9d49
2689,2689.0,2863.0,vespa-engine/vespa,9d94f97af8c026ed1e647a9eb0acd55a0e4be8c5,"Set sessions path correctly in test constructor

No functional changes, some other minor refactorings",https://github.com/vespa-engine/vespa/commit/9d94f97af8c026ed1e647a9eb0acd55a0e4be8c5
2690,2690.0,2864.0,vespa-engine/vespa,7c6b77534b607c6123956ad5cb04f1bf82812b93,Fix tests after refactor,https://github.com/vespa-engine/vespa/commit/7c6b77534b607c6123956ad5cb04f1bf82812b93
2691,2691.0,2865.0,vespa-engine/vespa,1cf79e2d108a14a77c9c378d478e469030ab00c6,"Merge pull request #4026 from vespa-engine/jvenstad/deployment-stuff-cleanup

Name changes, minor refactoring, should be non-functional only",https://github.com/vespa-engine/vespa/commit/1cf79e2d108a14a77c9c378d478e469030ab00c6
2692,2692.0,2866.0,vespa-engine/vespa,8a45a58af8275760a30a88cd1de1b609844b07d8,"Name changes, minor refactoring, should be non-functional only",https://github.com/vespa-engine/vespa/commit/8a45a58af8275760a30a88cd1de1b609844b07d8
2693,2693.0,2867.0,vespa-engine/vespa,34c8cd72f3c9d54873e2f204c41875d3633864a4,Refactor testing,https://github.com/vespa-engine/vespa/commit/34c8cd72f3c9d54873e2f204c41875d3633864a4
2694,2694.0,2868.0,vespa-engine/vespa,648a78cd05b269b74cbb819e8d8ed9c7110e8b50,"Merge pull request #3977 from vespa-engine/mortent/identity-provider-read-secret

Read key from secretstore, refactor config",https://github.com/vespa-engine/vespa/commit/648a78cd05b269b74cbb819e8d8ed9c7110e8b50
2695,2695.0,2869.0,vespa-engine/vespa,fd194925b4b0f9fabea24d783d2114e57aa42069,"Read key from secretstore, refactor config",https://github.com/vespa-engine/vespa/commit/fd194925b4b0f9fabea24d783d2114e57aa42069
2696,2696.0,2870.0,vespa-engine/vespa,f42e4731d2ae872137fbd1f2684c083fc71608e6,"Merge pull request #3965 from vespa-engine/havardpe/unify-conformance-test-format

unify conformance test format, refactor code and update spec",https://github.com/vespa-engine/vespa/commit/f42e4731d2ae872137fbd1f2684c083fc71608e6
2697,2697.0,2871.0,vespa-engine/vespa,d57042c88c3d68dbb9bd0f391fb981ccd2358247,"unify conformance test format, refactor code and update spec",https://github.com/vespa-engine/vespa/commit/d57042c88c3d68dbb9bd0f391fb981ccd2358247
2698,2698.0,2872.0,vespa-engine/vespa,53f55c1ad067b077e7487c7a691f4b73dd8e872a,Refactor identity as config producer,https://github.com/vespa-engine/vespa/commit/53f55c1ad067b077e7487c7a691f4b73dd8e872a
2699,2699.0,2873.0,vespa-engine/vespa,e5e197ec9390033da499cebfb68ba92ac74cb17b,Refactored deployment issues >_<,https://github.com/vespa-engine/vespa/commit/e5e197ec9390033da499cebfb68ba92ac74cb17b
2700,2700.0,2874.0,vespa-engine/vespa,141768384af166828c96193d9bd09187f08272a7,refactor child startup,https://github.com/vespa-engine/vespa/commit/141768384af166828c96193d9bd09187f08272a7
2701,2701.0,2875.0,vespa-engine/vespa,3dc13e6f5ef96379fbde2a5aff67bf07444be236,Refactor to use ThreadingServiceConfig.,https://github.com/vespa-engine/vespa/commit/3dc13e6f5ef96379fbde2a5aff67bf07444be236
2702,2702.0,2876.0,vespa-engine/vespa,c23ad27a8c6fe1d8c868f71c069322e44d0cffc6,Refactor to use ThreadingServiceConfig.,https://github.com/vespa-engine/vespa/commit/c23ad27a8c6fe1d8c868f71c069322e44d0cffc6
2703,2703.0,2877.0,vespa-engine/vespa,577922cb7f9f1a7a8770f32bfcd732890cc62cd1,"Merge pull request #3685 from vespa-engine/arnej/refactor-sig-catch

Arnej/refactor sig catch",https://github.com/vespa-engine/vespa/commit/577922cb7f9f1a7a8770f32bfcd732890cc62cd1
2704,2704.0,2878.0,vespa-engine/vespa,68be3728309ab82c817f4308c5a3b7d1decfd8e9,Refactor cost APIs and modelling - this is a breaking change,https://github.com/vespa-engine/vespa/commit/68be3728309ab82c817f4308c5a3b7d1decfd8e9
2705,2705.0,2879.0,vespa-engine/vespa,877d4c1ea464b3e6495cf3cea33813c5dc942d5e,Refactor ControllerTester,https://github.com/vespa-engine/vespa/commit/877d4c1ea464b3e6495cf3cea33813c5dc942d5e
2706,2706.0,2880.0,vespa-engine/vespa,07145ad5ee9cc0f6d1bef0c76fd93a1053d9dde2,"enable re-using termwise bitvectors in second phase

detach match data from rank program and refactor match loop
re-use bitvector in termwise search if range is the same",https://github.com/vespa-engine/vespa/commit/07145ad5ee9cc0f6d1bef0c76fd93a1053d9dde2
2707,2707.0,2881.0,vespa-engine/vespa,3f3c65cc510d26a7146e8814e30cd31a2ee886b6,"let match tools own rank_program and search
allows re-using query with new rank programs where possible
refactor match loop to handle externally owned query
refactor match loop iterator inlining for optimized blacklisting",https://github.com/vespa-engine/vespa/commit/3f3c65cc510d26a7146e8814e30cd31a2ee886b6
2708,2708.0,2882.0,vespa-engine/vespa,3becce0d598f6bfb470da1bcbf26c19bcc14d6e4,Refactor deferred version task completion to take in version explicitly,https://github.com/vespa-engine/vespa/commit/3becce0d598f6bfb470da1bcbf26c19bcc14d6e4
2709,2709.0,2883.0,vespa-engine/vespa,0c7af1343cec5ca95e338ce83dda158f123e72dc,"Merge pull request #3269 from vespa-engine/toregge/refactor-gid-to-lid-change-handler-usage

Toregge/refactor gid to lid change handler usage",https://github.com/vespa-engine/vespa/commit/0c7af1343cec5ca95e338ce83dda158f123e72dc
2710,2710.0,2884.0,vespa-engine/vespa,5cc377f38e47f7cdbff7a661267293ef3ca14f3e,"Merge pull request #3233 from vespa-engine/hmusum/refactor-schema-validation

Refactor schema validation setup",https://github.com/vespa-engine/vespa/commit/5cc377f38e47f7cdbff7a661267293ef3ca14f3e
2711,2711.0,2885.0,vespa-engine/vespa,6450f3fbf69d22b123a3ff26702364c8046f7240,"Refactor schema validation setup
* Try to avoid hardcoding and having to specify version several times
* Make sure to only copy schema files once",https://github.com/vespa-engine/vespa/commit/6450f3fbf69d22b123a3ff26702364c8046f7240
2712,2712.0,2886.0,vespa-engine/vespa,237865038f13701e47199c6474ce82a90ffb0706,"- Use C++11 for loops.
- Detangle some includes and include what you need.
- Refactor to subclass to avoid code duplication.
- Add config for compression too.
- V1 up to 142, V2 above.",https://github.com/vespa-engine/vespa/commit/237865038f13701e47199c6474ce82a90ffb0706
2713,2713.0,2887.0,vespa-engine/vespa,e3837198ab1a8fc9c3e08d6169e7bad4da57e59c,"Merge pull request #3193 from vespa-engine/toregge/refactor-posting-list-search-context

Toregge/refactor posting list search context",https://github.com/vespa-engine/vespa/commit/e3837198ab1a8fc9c3e08d6169e7bad4da57e59c
2714,2714.0,2888.0,vespa-engine/vespa,5aaaa2295c72dc8aab12bb7ae05c107f133c2124,"Merge pull request #3176 from vespa-engine/bratseth/refactor-character-filtering

Factor out string filtering method",https://github.com/vespa-engine/vespa/commit/5aaaa2295c72dc8aab12bb7ae05c107f133c2124
2715,2715.0,2889.0,vespa-engine/vespa,18475e4b5a769053a67c3e7bb18be08ae43f306d,"Refactor test to prepare for adding more bundles.

+ Rename methods to make comments redundant.",https://github.com/vespa-engine/vespa/commit/18475e4b5a769053a67c3e7bb18be08ae43f306d
2716,2716.0,2890.0,vespa-engine/vespa,c5f38e1ffc92a056964ab83737a077616c07bf70,DRY refactor in buffered and raw computation,https://github.com/vespa-engine/vespa/commit/c5f38e1ffc92a056964ab83737a077616c07bf70
2717,2717.0,2891.0,vespa-engine/vespa,a7ac2ea7f1e500529ead48edcaae3978f8c5f9f0,Refactor tests to remove duplicate code.,https://github.com/vespa-engine/vespa/commit/a7ac2ea7f1e500529ead48edcaae3978f8c5f9f0
2718,2718.0,2892.0,vespa-engine/vespa,13ab32446140b3f69b6f7a32c70464889959a7e1,Refactoring,https://github.com/vespa-engine/vespa/commit/13ab32446140b3f69b6f7a32c70464889959a7e1
2719,2719.0,2893.0,vespa-engine/vespa,6dd58aca8b714b9768802b7b83164a120e946621,Minor refactoring and cleanup (only),https://github.com/vespa-engine/vespa/commit/6dd58aca8b714b9768802b7b83164a120e946621
2720,2720.0,2894.0,vespa-engine/vespa,038cdfcd2bedf74ae41040c4462c5b75ba15d73d,Refactor nodeprioritizer,https://github.com/vespa-engine/vespa/commit/038cdfcd2bedf74ae41040c4462c5b75ba15d73d
2721,2721.0,2895.0,vespa-engine/vespa,45d8bdd375bd744c3d4d143c9c9d0f5d9d62219d,"Summer interns/node verification (#3025)

* Fixed wrong case in file name

* Interfacespeed string to double converting moved out to new function

* Changed names and refactored SpecVerifier

* Changed disk type from boolean to enum

* Made HostURLGenerator tests and renamed one variable in specVerifier

* Added test for SpecVerifier

* added tests in some spec classes and a check for Ipv6 when retrieving from nodeRepo

* Added tests for verifySpec

* Hardwareverifier changed name to HardwareBenchmarker and som refactoring in this class

* More tests. Made methods in SpecVerifier static

* Fixed CommandExecutor

* added configserver URL retriver

* Fixed resource path names

* Moved pinging to spec verification. Deleted Client and Server classes from hardware verification. Created TerminationController

* Added tests for buildNodeInfoUrl

* Calls static function without object instance  instance in HostURLGeneratorTest

* umount is now sudo

* Changed BenchmarkResults attributes to primitives

* Added more tests

* added tests for HardwareBenckmarker and TerminationController

* Change of name

* Reformatted code

* Removed done TODOs

* Changed parameters of Diskbenchmark",https://github.com/vespa-engine/vespa/commit/45d8bdd375bd744c3d4d143c9c9d0f5d9d62219d
2722,2722.0,2896.0,vespa-engine/vespa,7f1bc047bd72f2249c5d06fb368245a94083cb5a,"Merge pull request #3024 from yahoo/hmusum/refactor-configserver-tests-1

Minor refactoring of tests",https://github.com/vespa-engine/vespa/commit/7f1bc047bd72f2249c5d06fb368245a94083cb5a
2723,2723.0,2897.0,vespa-engine/vespa,e97ac3f26481a5fc6a26b7fc9f17d4ae90141c9b,Minor refactoring of tests,https://github.com/vespa-engine/vespa/commit/e97ac3f26481a5fc6a26b7fc9f17d4ae90141c9b
2724,2724.0,2898.0,vespa-engine/vespa,929a44e999bbaae9600753aea1a8335a9facd69e,"Merge pull request #2980 from yahoo/hmusum/config-proxy-test-refactoring

Delete Helper class (move code to ConfigTester)",https://github.com/vespa-engine/vespa/commit/929a44e999bbaae9600753aea1a8335a9facd69e
2725,2725.0,2899.0,vespa-engine/vespa,f47431033d153605a083e955a990b5310fabf949,"Merge pull request #2974 from yahoo/gjoranv/cleanup-LeafNodeVector

Refactor LeafNodeVector",https://github.com/vespa-engine/vespa/commit/f47431033d153605a083e955a990b5310fabf949
2726,2726.0,2900.0,vespa-engine/vespa,08cb10529409f97a8b2ff56e7d398436419c53fa,"Refactor LeafNodeVector

- Remove unnecessary ctor.
- Create unmodifiable list in ctor to reflect that the data
  is now immutable.
- Remove defaultNode field.",https://github.com/vespa-engine/vespa/commit/08cb10529409f97a8b2ff56e7d398436419c53fa
2727,2727.0,2901.0,vespa-engine/vespa,fb31d0acd29beb5f13bdf2dab8e2b656d2f74779,"Merge pull request #2959 from yahoo/hmusum/config-proxy-refactoring

Move code that puts config in cache",https://github.com/vespa-engine/vespa/commit/fb31d0acd29beb5f13bdf2dab8e2b656d2f74779
2728,2728.0,2902.0,vespa-engine/vespa,2793b35d6886dc35b01779b43db7e281e1502dcb,"Merge pull request #2931 from yahoo/hmusum/refactor-activation-tests

Refactor tests into one class",https://github.com/vespa-engine/vespa/commit/2793b35d6886dc35b01779b43db7e281e1502dcb
2729,2729.0,2903.0,vespa-engine/vespa,9bc073e8256d97dc7eccbdb3579eb5a65670cddd,"Refactor tests into one class
* There is only one version of api, no need for base class",https://github.com/vespa-engine/vespa/commit/9bc073e8256d97dc7eccbdb3579eb5a65670cddd
2730,2730.0,2904.0,vespa-engine/vespa,172ec0ad9ae3f49569c8f5151459d77f3a1a4916,Refactor and simplify test functions.,https://github.com/vespa-engine/vespa/commit/172ec0ad9ae3f49569c8f5151459d77f3a1a4916
2731,2731.0,2905.0,vespa-engine/vespa,19a2da5fc2ace7079171e280da21e49d5a4ad149,"Merge pull request #2828 from yahoo/toregge/minor-refactor-btreenode

Toregge/minor refactor btreenode",https://github.com/vespa-engine/vespa/commit/19a2da5fc2ace7079171e280da21e49d5a4ad149
2732,2732.0,2906.0,vespa-engine/vespa,89d9cf538fa4e81bdab33d4fe1f9d2aff94c92db,Refactor logic for generating config into separate method,https://github.com/vespa-engine/vespa/commit/89d9cf538fa4e81bdab33d4fe1f9d2aff94c92db
2733,2733.0,2907.0,vespa-engine/vespa,a533bd755946dd741a2b88d3a81f30f789fa1555,"Merge pull request #2814 from yahoo/arnej/refactor-vespa-home

Arnej/refactor vespa home",https://github.com/vespa-engine/vespa/commit/a533bd755946dd741a2b88d3a81f30f789fa1555
2734,2734.0,2908.0,vespa-engine/vespa,9d0ac1796ba5fdbdbc61c4c3a2a18ebcfa07b02d,"Merge pull request #2740 from yahoo/toregge/refactor-zcposting-iterator

Introduce helper classes for skip info byte streams used by",https://github.com/vespa-engine/vespa/commit/9d0ac1796ba5fdbdbc61c4c3a2a18ebcfa07b02d
2735,2735.0,2909.0,vespa-engine/vespa,0d0e6ca025d9e0e3420fe3852406ff29f38d0a57,"Merge pull request #2752 from yahoo/gjoranv/refactor-instance-resolver2

Remove last known usage of the default ctor on config classes.",https://github.com/vespa-engine/vespa/commit/0d0e6ca025d9e0e3420fe3852406ff29f38d0a57
2736,2736.0,2910.0,vespa-engine/vespa,85c711b2eb22cb91eed465ae4953529ead99ea03,"Merge pull request #2749 from yahoo/revert-2728-gjoranv/refactor-instance-resolver

Revert ""Remove last known usage of the default ctor on config classes.""",https://github.com/vespa-engine/vespa/commit/85c711b2eb22cb91eed465ae4953529ead99ea03
2737,2737.0,2911.0,vespa-engine/vespa,9f8ab958124c48917b73f3054923d81e54fd29a9,"Merge pull request #2728 from yahoo/gjoranv/refactor-instance-resolver

Remove last known usage of the default ctor on config classes.",https://github.com/vespa-engine/vespa/commit/9f8ab958124c48917b73f3054923d81e54fd29a9
2738,2738.0,2912.0,vespa-engine/vespa,7923d9ac1ed454ce82e7cde800042b4a411d62c3,"Merge pull request #2669 from yahoo/arnej/rewrite-start-cbinaries

refactor",https://github.com/vespa-engine/vespa/commit/7923d9ac1ed454ce82e7cde800042b4a411d62c3
2739,2739.0,2913.0,vespa-engine/vespa,b15d9e5c54c15bf49b64adf43449f78dab7b1238,"refactor

* rewrite to make further changes easier
* also: avoid /home/y references",https://github.com/vespa-engine/vespa/commit/b15d9e5c54c15bf49b64adf43449f78dab7b1238
2740,2740.0,2914.0,vespa-engine/vespa,439bc3fef0b6ce3ec5cee9ed85e61a8a50dc1bdf,"Merge pull request #2608 from yahoo/gjoranv/refactor-vespa-metric-set

Refactor VespaMetricSet to have a MetricSet instead of be one.",https://github.com/vespa-engine/vespa/commit/439bc3fef0b6ce3ec5cee9ed85e61a8a50dc1bdf
2741,2741.0,2915.0,vespa-engine/vespa,b378461c27eae77ff70ba13f03890522b7c43275,Refactor VespaMetricSet to have a MetricSet instead of be one.,https://github.com/vespa-engine/vespa/commit/b378461c27eae77ff70ba13f03890522b7c43275
2742,2742.0,2916.0,vespa-engine/vespa,0aec20ed8585ebe0399eb1f7173ebbd1419616d9,"Merge pull request #2519 from yahoo/smorgrav/groupprepare_refactor

GroupPrepare refactoring - extract innerclass",https://github.com/vespa-engine/vespa/commit/0aec20ed8585ebe0399eb1f7173ebbd1419616d9
2743,2743.0,2917.0,vespa-engine/vespa,1a5a822bcbf20dc88325f7eb47b495099d7ff8cd,Replace NodeList with the refactored NodeAllocation class,https://github.com/vespa-engine/vespa/commit/1a5a822bcbf20dc88325f7eb47b495099d7ff8cd
2744,2744.0,2918.0,vespa-engine/vespa,e1831a2dedfaef5e85c2dcca30505c4f87a5dcd6,refactor nextUrl(),https://github.com/vespa-engine/vespa/commit/e1831a2dedfaef5e85c2dcca30505c4f87a5dcd6
2745,2745.0,2919.0,vespa-engine/vespa,40e1b9fb8fdebb4471839c2393b0c04d55d60cfb,refactor loop for url reading,https://github.com/vespa-engine/vespa/commit/40e1b9fb8fdebb4471839c2393b0c04d55d60cfb
2746,2746.0,2920.0,vespa-engine/vespa,54e4075b5d67786422c99f3e306ebc4fd36faec3,"fix FileReader bugs

* Reset() and SetFilePos() should flush old buffer
* make GetFilePos() work immediately after SetFilePos()
* refactor Reset() to use SetFilePos()
* refactor FindNewLine() to use GetFilePos()
* remove useless GetBufPos()",https://github.com/vespa-engine/vespa/commit/54e4075b5d67786422c99f3e306ebc4fd36faec3
2747,2747.0,2921.0,vespa-engine/vespa,b3233b95c6f0c26d03b7cdf6686138507fb940b5,"Merge pull request #2404 from yahoo/geirst/refactor-searchlib-docstore-code-and-tests

Geirst/refactor searchlib docstore code and tests",https://github.com/vespa-engine/vespa/commit/b3233b95c6f0c26d03b7cdf6686138507fb940b5
2748,2748.0,2922.0,vespa-engine/vespa,3ca3de958c755f9787421efa597163345f713e03,Refactor out common duplicated code.,https://github.com/vespa-engine/vespa/commit/3ca3de958c755f9787421efa597163345f713e03
2749,2749.0,2923.0,vespa-engine/vespa,1a20d96588960c7f81941c80965ebcb9942d906d,"Merge pull request #2192 from yahoo/hmusum/config-proxy-refactoring

Hmusum/config proxy refactoring",https://github.com/vespa-engine/vespa/commit/1a20d96588960c7f81941c80965ebcb9942d906d
2750,2750.0,2924.0,vespa-engine/vespa,fbf084f74b6de6c2269ef9e66af473cc6687b44f,Refactor fixture setup into separate methods for better readability,https://github.com/vespa-engine/vespa/commit/fbf084f74b6de6c2269ef9e66af473cc6687b44f
2751,2751.0,2925.0,vespa-engine/vespa,53096709d6f73f4f6b015ad591b3d9a7832d8a80,Refactor fixture setup into separate methods for better readability,https://github.com/vespa-engine/vespa/commit/53096709d6f73f4f6b015ad591b3d9a7832d8a80
2752,2752.0,2926.0,vespa-engine/vespa,0a0670c449c7da08727e767c2000a08f1ec15563,Refactor parameters for predicate attributes.,https://github.com/vespa-engine/vespa/commit/0a0670c449c7da08727e767c2000a08f1ec15563
2753,2753.0,2927.0,vespa-engine/vespa,154ae552cfc899678006fceb856e885792ab243c,Refactor out extraction of attribute name from attribute flush target name.,https://github.com/vespa-engine/vespa/commit/154ae552cfc899678006fceb856e885792ab243c
2754,2754.0,2928.0,vespa-engine/vespa,e2e94f66e0faf5acb80e4831be6ec784d96b9e42,Adjust error messages and refactor unit test.,https://github.com/vespa-engine/vespa/commit/e2e94f66e0faf5acb80e4831be6ec784d96b9e42
2755,2755.0,2929.0,vespa-engine/vespa,831c6c1add0639a41ccffa642779ac68d1d2ecbe,"Merge pull request #2063 from yahoo/vekterli/refactor-and-unify-array-dot-product-executor-creation

Refactor array DotProductExecutor creation into one function",https://github.com/vespa-engine/vespa/commit/831c6c1add0639a41ccffa642779ac68d1d2ecbe
2756,2756.0,2930.0,vespa-engine/vespa,08863048507ba3e258163fe21ecc0ea8af23142e,Refactor array DotProductExecutor creation into one function,https://github.com/vespa-engine/vespa/commit/08863048507ba3e258163fe21ecc0ea8af23142e
2757,2757.0,2931.0,vespa-engine/vespa,ed969742b0d356ae76ab9bc1e30964cb824fa153,"Merge pull request #2041 from yahoo/hmusum/refactor-configserver-shuffling

Randomize before using config server hosts",https://github.com/vespa-engine/vespa/commit/ed969742b0d356ae76ab9bc1e30964cb824fa153
2758,2758.0,2932.0,vespa-engine/vespa,8834c4a5dd7ebf2b15eb1b48f5f29f0a6b7e4b1d,"Merge pull request #1969 from yahoo/arnej/refactor-config-proxy

Arnej/refactor config proxy",https://github.com/vespa-engine/vespa/commit/8834c4a5dd7ebf2b15eb1b48f5f29f0a6b7e4b1d
2759,2759.0,2933.0,vespa-engine/vespa,58ff0e77d1c76dc51fc750ae823934ed95e0e3c9,"Merge pull request #1930 from yahoo/hmusum/refactor-config-proxy-part-3

Refactorings",https://github.com/vespa-engine/vespa/commit/58ff0e77d1c76dc51fc750ae823934ed95e0e3c9
2760,2760.0,2934.0,vespa-engine/vespa,769af8c421d1d3414a11304a42b03d1a6299b277,"Merge pull request #1918 from yahoo/toregge/refactor-proton-configuration

Toregge/refactor proton configuration",https://github.com/vespa-engine/vespa/commit/769af8c421d1d3414a11304a42b03d1a6299b277
2761,2761.0,2935.0,vespa-engine/vespa,8bb44b23d954cb96819b475a8813843d37c6c418,"Refactorings
* Make ConfigSourceClient and interface
* Clean up consttructor and creation of test server",https://github.com/vespa-engine/vespa/commit/8bb44b23d954cb96819b475a8813843d37c6c418
2762,2762.0,2936.0,vespa-engine/vespa,854ae6ce37f9f05caafe9b91f634e2ab13c7e8a1,"Merge pull request #1867 from yahoo/hmusum/orchestrator-client-minor-refactoring

Minor refactoring of orchestrator client",https://github.com/vespa-engine/vespa/commit/854ae6ce37f9f05caafe9b91f634e2ab13c7e8a1
2763,2763.0,2937.0,vespa-engine/vespa,1445a86d63aac70024b93fec35eafb7ca2b783c9,"Merge pull request #1876 from yahoo/hmusum/refactor-config-proxy-part-2

Refactor and make sure to synchronize on only one object",https://github.com/vespa-engine/vespa/commit/1445a86d63aac70024b93fec35eafb7ca2b783c9
2764,2764.0,2938.0,vespa-engine/vespa,23284568f424cec4ee396a67521d6ba0db1a7aad,Refactor and make sure to synchronize on only one object,https://github.com/vespa-engine/vespa/commit/23284568f424cec4ee396a67521d6ba0db1a7aad
2765,2765.0,2939.0,vespa-engine/vespa,38cc01ff9c22e46a62f462845b385b11b7b82d9d,Minor refactoring of orchestrator client,https://github.com/vespa-engine/vespa/commit/38cc01ff9c22e46a62f462845b385b11b7b82d9d
2766,2766.0,2940.0,vespa-engine/vespa,63ace03eda099559bffe609de450ab927041a228,"Use model instead of config for getting logserver connection info
* Add unit test
* Minor refactorings",https://github.com/vespa-engine/vespa/commit/63ace03eda099559bffe609de450ab927041a228
2767,2767.0,2941.0,vespa-engine/vespa,eb0ab421e0c6cecf57704cdd7095d80867bc4b75,Refactor for use in WeightedSetTerm too.,https://github.com/vespa-engine/vespa/commit/eb0ab421e0c6cecf57704cdd7095d80867bc4b75
2768,2768.0,2942.0,vespa-engine/vespa,4856dcd4fddd328114f1dc534bfddf7e66e5bf3a,"Merge pull request #1775 from yahoo/hmusum/refactor-config-proxy-part-1

Refactoring",https://github.com/vespa-engine/vespa/commit/4856dcd4fddd328114f1dc534bfddf7e66e5bf3a
2769,2769.0,2943.0,vespa-engine/vespa,58474e77ccd2a0f495a69c77cabe41e40d94bcfa,"Refactoring
* Remove traces of diskcache mode and simplify startup now that
  only default mode is supported when starting config proxy
* Remove CacheManager now that we have only one type of cache
* Rename some classes",https://github.com/vespa-engine/vespa/commit/58474e77ccd2a0f495a69c77cabe41e40d94bcfa
2770,2770.0,2944.0,vespa-engine/vespa,ea1ab26c3688c03b02f33c469c5d3f7d46bd35f9,"Remove dead code.
Simplify method names in document db referent registry.
Refactor read guard test in gid to lid mapper unit test.
Explicitly initialize members in constructor.",https://github.com/vespa-engine/vespa/commit/ea1ab26c3688c03b02f33c469c5d3f7d46bd35f9
2771,2771.0,2945.0,vespa-engine/vespa,1f986c231a7f1867996c4cbf63d05190e388037c,"Merge pull request #1733 from yahoo/dybdahl/refactor-json-reader2

Dybdahl/refactor json reader2",https://github.com/vespa-engine/vespa/commit/1f986c231a7f1867996c4cbf63d05190e388037c
2772,2772.0,2946.0,vespa-engine/vespa,37f5e12ea6ba692e8af3dad8bba2c30bbc5bf381,"Revert ""Revert ""Dybdahl/refactor json reader""""

This reverts commit b7c645f96271f4f27415af6757fef18499c63544.",https://github.com/vespa-engine/vespa/commit/37f5e12ea6ba692e8af3dad8bba2c30bbc5bf381
2773,2773.0,2947.0,vespa-engine/vespa,6f12f0033c795ffdc821787e38cde2563326c2a1,"Merge pull request #1732 from yahoo/revert-1728-dybdahl/refactor-json-reader

Revert ""Dybdahl/refactor json reader""",https://github.com/vespa-engine/vespa/commit/6f12f0033c795ffdc821787e38cde2563326c2a1
2774,2774.0,2948.0,vespa-engine/vespa,b7c645f96271f4f27415af6757fef18499c63544,"Revert ""Dybdahl/refactor json reader""",https://github.com/vespa-engine/vespa/commit/b7c645f96271f4f27415af6757fef18499c63544
2775,2775.0,2949.0,vespa-engine/vespa,9e7006beeb29e7c042ee0d07990b605ac2b852ad,"Merge pull request #1728 from yahoo/dybdahl/refactor-json-reader

Dybdahl/refactor json reader",https://github.com/vespa-engine/vespa/commit/9e7006beeb29e7c042ee0d07990b605ac2b852ad
2776,2776.0,2950.0,vespa-engine/vespa,5bfb3aaf39e4ddfc3d8437891075928027d92e06,Refactor buildConfig().,https://github.com/vespa-engine/vespa/commit/5bfb3aaf39e4ddfc3d8437891075928027d92e06
2777,2777.0,2951.0,vespa-engine/vespa,6329a23f586f3a418702e6b2ca683957bc0ca554,Refactor,https://github.com/vespa-engine/vespa/commit/6329a23f586f3a418702e6b2ca683957bc0ca554
2778,2778.0,2952.0,vespa-engine/vespa,cdc34a66c66703cfb1c62f51b2a86f4873d55167,Refactor,https://github.com/vespa-engine/vespa/commit/cdc34a66c66703cfb1c62f51b2a86f4873d55167
2779,2779.0,2953.0,vespa-engine/vespa,9370337f5571137388f052562320d80bdc9f7b40,"Merge pull request #1494 from yahoo/vekterli/refactor-storagepolicy-wrong-distribution-reply-handling

Refactor StoragePolicy handling of WrongDistributionReply. No logic changes.",https://github.com/vespa-engine/vespa/commit/9370337f5571137388f052562320d80bdc9f7b40
2780,2780.0,2954.0,vespa-engine/vespa,a1514a1defb55c2130600945b25c30ed93c2529d,Minor refactoring,https://github.com/vespa-engine/vespa/commit/a1514a1defb55c2130600945b25c30ed93c2529d
2781,2781.0,2955.0,vespa-engine/vespa,d5c2b05cc9de42874417369429c80113ba66c197,Refactor interface and add reserve method.,https://github.com/vespa-engine/vespa/commit/d5c2b05cc9de42874417369429c80113ba66c197
2782,2782.0,2956.0,vespa-engine/vespa,b263bc4d6f2fa48f0e634ac34c49d60a3f69d18b,"Merge pull request #1532 from yahoo/bjorncs/refactor

Remove duplicate code pattern",https://github.com/vespa-engine/vespa/commit/b263bc4d6f2fa48f0e634ac34c49d60a3f69d18b
2783,2783.0,2957.0,vespa-engine/vespa,e2932ad73d6465a60e4621e9e074fe1e385ce7f2,Refactor handling of WrongDistributionReply. No logic changes.,https://github.com/vespa-engine/vespa/commit/e2932ad73d6465a60e4621e9e074fe1e385ce7f2
2784,2784.0,2958.0,vespa-engine/vespa,c2987747ab678c5ce292b8d0cd21e68ab6b356fe,refactor for readability.,https://github.com/vespa-engine/vespa/commit/c2987747ab678c5ce292b8d0cd21e68ab6b356fe
2785,2785.0,2959.0,vespa-engine/vespa,56faf25a6f550d82b39fb1e1c4b838c630e5c8bf,"Merge pull request #1435 from yahoo/hmusum/refactor-content-handlers

Refactor content handlers, first step",https://github.com/vespa-engine/vespa/commit/56faf25a6f550d82b39fb1e1c4b838c630e5c8bf
2786,2786.0,2960.0,vespa-engine/vespa,0b0b72c9dff286d3cc0c7fd79f1bea9bd2c6f0a7,"Refactor content handlers, first step
* Move most of logic into ApplicationRepository
* Remove unnneded base class",https://github.com/vespa-engine/vespa/commit/0b0b72c9dff286d3cc0c7fd79f1bea9bd2c6f0a7
2787,2787.0,2961.0,vespa-engine/vespa,c2f781f48a16ec10ed70bc8fe5c557a4f7ed31dd,"Merge pull request #1392 from yahoo/hmusum/refactor-session-create

Refactor session creation",https://github.com/vespa-engine/vespa/commit/c2f781f48a16ec10ed70bc8fe5c557a4f7ed31dd
2788,2788.0,2962.0,vespa-engine/vespa,7f401834a66493d938bb450e84dd5eb9d70e88fc,Refactor session creation,https://github.com/vespa-engine/vespa/commit/7f401834a66493d938bb450e84dd5eb9d70e88fc
2789,2789.0,2963.0,vespa-engine/vespa,8aaf2662c79c7809415e2103ce2c0cc4037f312c,"Merge pull request #1387 from yahoo/hmusum/refactor-session-create-response

Refactor session create response",https://github.com/vespa-engine/vespa/commit/8aaf2662c79c7809415e2103ce2c0cc4037f312c
2790,2790.0,2964.0,vespa-engine/vespa,8847d63b66998e46c98168e420243607039ee7dd,"Refactor session create response
* Remove unnecessary interface
* Use tenant name instead of tenant instance
* Use session id instead of Session",https://github.com/vespa-engine/vespa/commit/8847d63b66998e46c98168e420243607039ee7dd
2791,2791.0,2965.0,vespa-engine/vespa,25bf76b340b9bf108b1cdb2ede644d993aa3bc38,"Merge pull request #1385 from yahoo/hmusum/refactor-timeout-handling

Minor refactoring of handling of zookeeper barrier timeout",https://github.com/vespa-engine/vespa/commit/25bf76b340b9bf108b1cdb2ede644d993aa3bc38
2792,2792.0,2966.0,vespa-engine/vespa,fc830c33fcc65e70ebfba59b6ebf075f8629e5fb,Minor refactoring of handling of zookeeper barrier timeout,https://github.com/vespa-engine/vespa/commit/fc830c33fcc65e70ebfba59b6ebf075f8629e5fb
2793,2793.0,2967.0,vespa-engine/vespa,2e83196195831b78d66346801afdafb6de4782d5,"Merge pull request #1299 from yahoo/hmusum/http-handlers-refactoring-part-6

Refactor http session activation",https://github.com/vespa-engine/vespa/commit/2e83196195831b78d66346801afdafb6de4782d5
2794,2794.0,2968.0,vespa-engine/vespa,fad43c5b4763a591a91751dc4ae39c0a47884f57,"Refactor http session activation
* Remove unneded base class
* Move everything regarding session into ApplicationRepository
* Avoid using LocalSession in reponse class",https://github.com/vespa-engine/vespa/commit/fad43c5b4763a591a91751dc4ae39c0a47884f57
2795,2795.0,2969.0,vespa-engine/vespa,de5aae2629450ebfd5ae2c50b404749b0d5286b1,"Merge pull request #1289 from yahoo/hmusum/http-handlers-refactoring-part-5

Move tenant checking out of http layer",https://github.com/vespa-engine/vespa/commit/de5aae2629450ebfd5ae2c50b404749b0d5286b1
2796,2796.0,2970.0,vespa-engine/vespa,2d02084e5ec773265a15f94316b18ebd95f203df,"Merge pull request #1288 from yahoo/hmusum/http-handlers-refactoring-part-4

Move more stuff out of http layer",https://github.com/vespa-engine/vespa/commit/2d02084e5ec773265a15f94316b18ebd95f203df
2797,2797.0,2971.0,vespa-engine/vespa,da11ef56b3815bfe8c98591598ee6f07e7715868,Refactor session state management,https://github.com/vespa-engine/vespa/commit/da11ef56b3815bfe8c98591598ee6f07e7715868
2798,2798.0,2972.0,vespa-engine/vespa,035938c340921d66b414136fec32d32eb78aac1f,"Merge pull request #1259 from yahoo/hmusum/refactor-test-registry-and-mock-filedistribution

Refactoring test component registry and mock file distribution",https://github.com/vespa-engine/vespa/commit/035938c340921d66b414136fec32d32eb78aac1f
2799,2799.0,2973.0,vespa-engine/vespa,39ea43088d8fa0ccd33916953001e5185760e982,"Refactoring test component registry and mock file distribution
* Make it possible to sepcify config server config and provisioner
* Make sure that we inject (mock) curator to file distribution mock
  so that we don't end up testing with two different curator instances",https://github.com/vespa-engine/vespa/commit/39ea43088d8fa0ccd33916953001e5185760e982
2800,2800.0,2974.0,vespa-engine/vespa,81eca42483d2909064a9dc15ce09f6db47fc9ad1,"Merge pull request #1109 from yahoo/toregge/refactor-multivalue-loading

Toregge/refactor multivalue loading",https://github.com/vespa-engine/vespa/commit/81eca42483d2909064a9dc15ce09f6db47fc9ad1
2801,2801.0,2975.0,vespa-engine/vespa,abb4847de0bb015da554b64359f637f2a63e94ca,Refactor the summary fetching out so that it can be easily retried if documents have moved lid.,https://github.com/vespa-engine/vespa/commit/abb4847de0bb015da554b64359f637f2a63e94ca
2802,2802.0,2976.0,vespa-engine/vespa,aa3136d7f540d5d94075cbaee533681dcd80ac28,Refactoring,https://github.com/vespa-engine/vespa/commit/aa3136d7f540d5d94075cbaee533681dcd80ac28
2803,2803.0,2977.0,vespa-engine/vespa,d66ee1e0fe3df9085e0be71cc02b4fe3c076248d,"Merge pull request #1048 from yahoo/toregge/refactor-buffertype-and-datastore

Refactor buffertype and datastore to better handle extra data at start",https://github.com/vespa-engine/vespa/commit/d66ee1e0fe3df9085e0be71cc02b4fe3c076248d
2804,2804.0,2978.0,vespa-engine/vespa,130cdfd5cc061ef2e80ddc058f325aa9b4f2d1ff,"Refactor buffertype and datastore to better handle extra data at start
of each buffer.  Simplify dense tensor store.
Change enum store base to calculate buffer size in proper virtual method in
buffertype subclass.",https://github.com/vespa-engine/vespa/commit/130cdfd5cc061ef2e80ddc058f325aa9b4f2d1ff
2805,2805.0,2979.0,vespa-engine/vespa,9cc12f086f2d1811558d9b2958b90a65e8d8d626,"Merge pull request #1037 from yahoo/hmusum/refactor-run-local-test

Minor refactorings",https://github.com/vespa-engine/vespa/commit/9cc12f086f2d1811558d9b2958b90a65e8d8d626
2806,2806.0,2980.0,vespa-engine/vespa,695abcec92498e52d162bcb61d9e73260c341dbf,"Minor refactorings
* Wait longer on config server coming up
* Minor refactoring of deployment
* Wait until container is up and responds in test",https://github.com/vespa-engine/vespa/commit/695abcec92498e52d162bcb61d9e73260c341dbf
2807,2807.0,2981.0,vespa-engine/vespa,19c689cbb253947e013c80c650b1ec04010b5956,"Merge pull request #859 from yahoo/hmusum/refactor-DockerOperations

Move non-Docker stuff to NodeAgent, no functional changes",https://github.com/vespa-engine/vespa/commit/19c689cbb253947e013c80c650b1ec04010b5956
2808,2808.0,2982.0,vespa-engine/vespa,d1cd17f254694d1649fa110c9c097effc138c64b,"Merge pull request #847 from yahoo/hmusum/http-handlers-refactoring-part-3

More refactoring of http handlers",https://github.com/vespa-engine/vespa/commit/d1cd17f254694d1649fa110c9c097effc138c64b
2809,2809.0,2983.0,vespa-engine/vespa,77796755bd7429b5c1c074957045712a10e12a32,"More refactoring of http handlers
* Let more handlers have ApplicationRepository injected
* Move more session stuff into ApplicationRepository, more to come",https://github.com/vespa-engine/vespa/commit/77796755bd7429b5c1c074957045712a10e12a32
2810,2810.0,2984.0,vespa-engine/vespa,f459ba24bf83aaea1b275c49f07285165461a407,"Merge pull request #839 from yahoo/musum/refactor-docker-operations-part-1

Refactor DockerOperationsImpl",https://github.com/vespa-engine/vespa/commit/f459ba24bf83aaea1b275c49f07285165461a407
2811,2811.0,2985.0,vespa-engine/vespa,3ea2d4b457dcade764569e99ac8b3daba8605bf4,"Refactor DockerOperationsImpl
* Move metrics stuff to NodeAgentImpl",https://github.com/vespa-engine/vespa/commit/3ea2d4b457dcade764569e99ac8b3daba8605bf4
2812,2812.0,2986.0,vespa-engine/vespa,bcb85e6bc5076b1425011d331f3d1524cd282edb,"Merge pull request #801 from yahoo/hmusum/http-handlers-refactoring-part-2

Move more stuff from http layer into ApplicationRepository",https://github.com/vespa-engine/vespa/commit/bcb85e6bc5076b1425011d331f3d1524cd282edb
2813,2813.0,2987.0,vespa-engine/vespa,95f131db13acc76df96c07f47baace6842d767af,Refactoring only: Move direct dispatch decision to SearchCluster,https://github.com/vespa-engine/vespa/commit/95f131db13acc76df96c07f47baace6842d767af
2814,2814.0,2988.0,vespa-engine/vespa,cf687abd43e57e52afe0a56df727bc0a95621da1,"Rewrite and refactor core cluster controller state generation logic

Cluster controller will now generate the new cluster state on-demand in a ""pure functional"" way instead of conditionally patching a working state over time. This makes understanding (and changing) the state generation logic vastly easier than it previously was.",https://github.com/vespa-engine/vespa/commit/cf687abd43e57e52afe0a56df727bc0a95621da1
2815,2815.0,2989.0,vespa-engine/vespa,3861994d463acf2b558809b0a30837f839d5b14f,"Merge pull request #780 from yahoo/geirst/generic-reduce-function-for-dense-tensor

Refactor dimension sum into generic reduce function for dense tensors.",https://github.com/vespa-engine/vespa/commit/3861994d463acf2b558809b0a30837f839d5b14f
2816,2816.0,2990.0,vespa-engine/vespa,54deccf618e798f627acc1b3be3b41e59f5ba0b0,Refactor dimension sum into generic reduce function for dense tensors.,https://github.com/vespa-engine/vespa/commit/54deccf618e798f627acc1b3be3b41e59f5ba0b0
2817,2817.0,2991.0,vespa-engine/vespa,c148daa705a4550017a84c2633b5bf01ce72b41e,Refactor test to avoid chaos and suffering,https://github.com/vespa-engine/vespa/commit/c148daa705a4550017a84c2633b5bf01ce72b41e
2818,2818.0,2992.0,vespa-engine/vespa,281d4a8ca3029bb732ab14021bb5b03968354fe5,"Merge pull request #767 from yahoo/geirst/refactor-dense-tensor-product-into-generic-apply-function

Geirst/refactor dense tensor product into generic apply function",https://github.com/vespa-engine/vespa/commit/281d4a8ca3029bb732ab14021bb5b03968354fe5
2819,2819.0,2993.0,vespa-engine/vespa,3a4ab17811981decb4d860b389ffcc221aff5c04,Refactor dense tensor product into generic function for applying two dense tensors together.,https://github.com/vespa-engine/vespa/commit/3a4ab17811981decb4d860b389ffcc221aff5c04
2820,2820.0,2994.0,vespa-engine/vespa,90e69e6ee887f3694ff03c5ef14e8dfdd0644ac7,refactor for readability,https://github.com/vespa-engine/vespa/commit/90e69e6ee887f3694ff03c5ef14e8dfdd0644ac7
2821,2821.0,2995.0,vespa-engine/vespa,6ac713957fc674e84ec0a46c3ca050be99be6cd3,"Voffeloff/documentupdate json serializer (#675)

* Add JsonTestHelper

inputJson is a convenience method for inputing JSON in Java
assertJsonEquals tests if two JSON encoded strings are structurally
equal

* Hide overridden low-level interface so that users don't have to implement two interfaces

* Refactor methods common to JsonWriter and DocumentUpdateJsonSerializer into JsonHelper

* Remove wildcard imports

* DocumentUpdate JSON serializer

* Move static tensor serializing methods close to where their used and change access modifier to private

* Class renaming

JsonHelper -> JsonSerializationHelper
JsonSerializingException -> JsonSerializationException

* Style changes

* Remove default-failing implementations of Serializer in FieldWriter

Refactor common Serializer methods (and more) into
JsonSerializationHelper

* Identation/spacing changes

* Add final to some local variables

* JavaDoc

* Implement ClearValueUpdate

* Code review changes",https://github.com/vespa-engine/vespa/commit/6ac713957fc674e84ec0a46c3ca050be99be6cd3
2822,2822.0,2996.0,vespa-engine/vespa,1ed9d4a2f425b299b13c83b8fdf67ae6b4563f74,Refactor/cleanup only,https://github.com/vespa-engine/vespa/commit/1ed9d4a2f425b299b13c83b8fdf67ae6b4563f74
2823,2823.0,2997.0,vespa-engine/vespa,f12d8f7a71539ae686da41769bd37e4356b45321,Refactoring only,https://github.com/vespa-engine/vespa/commit/f12d8f7a71539ae686da41769bd37e4356b45321
2824,2824.0,2998.0,vespa-engine/vespa,8029ba6a11869b5fa63b9f1230283370708be70b,"Merge pull request #659 from yahoo/hmusum/http-handlers-refactoring-part-1

Refactoring to make ready for separating business logic into ApplicationRepository",https://github.com/vespa-engine/vespa/commit/8029ba6a11869b5fa63b9f1230283370708be70b
2825,2825.0,2999.0,vespa-engine/vespa,b98805c6f63b428d62e715ac64630dfe12d126ac,"Refactoring to separate some business logic into ApplicationRepository
* Start refactoring, no functional changes, more to be done",https://github.com/vespa-engine/vespa/commit/b98805c6f63b428d62e715ac64630dfe12d126ac
2826,2826.0,3000.0,vespa-engine/vespa,5d8cad78e02f9a9e3732e69f2079e73bc87142df,"Temporarily skip updating node repo with current attributes
* It's not legal to update with current restart generation unless
  node is allocated, need to refactor code to make this work again",https://github.com/vespa-engine/vespa/commit/5d8cad78e02f9a9e3732e69f2079e73bc87142df
2827,2827.0,3001.0,vespa-engine/vespa,f904a5c903d48af7b4327858f0db99beb0ee3e5e,"Merge pull request #564 from yahoo/hmusum/minor-refactoring

Minor refactoring",https://github.com/vespa-engine/vespa/commit/f904a5c903d48af7b4327858f0db99beb0ee3e5e
2828,2828.0,3002.0,vespa-engine/vespa,3d24988d5b3161bef797fe39fd36d4b6e78fc8c3,Minor refactoring,https://github.com/vespa-engine/vespa/commit/3d24988d5b3161bef797fe39fd36d4b6e78fc8c3
2829,2829.0,3003.0,vespa-engine/vespa,6027e9d30acfde1e959399307210dffa6c341cd2,Refactor away from test implementation in superclass antipattern,https://github.com/vespa-engine/vespa/commit/6027e9d30acfde1e959399307210dffa6c341cd2
2830,2830.0,3004.0,vespa-engine/vespa,dd606d58a368a97d75127e3a3901d59e0a8541fd,Wrong variable name after refactoring.,https://github.com/vespa-engine/vespa/commit/dd606d58a368a97d75127e3a3901d59e0a8541fd
2831,2831.0,3005.0,vespa-engine/vespa,492a5b1ca6efd15ba7b88a9717da8f393ec7461e,"Merge pull request #339 from yahoo/geirst/refactor-turn-off-blocking-behavior-when-using-visibility-delay

Geirst/refactor turn off blocking behavior when using visibility delay",https://github.com/vespa-engine/vespa/commit/492a5b1ca6efd15ba7b88a9717da8f393ec7461e
2832,2832.0,3006.0,vespa-engine/vespa,7d59a362d5c0c16a926a2546b92d82159fd57a72,Refactor to separate method.,https://github.com/vespa-engine/vespa/commit/7d59a362d5c0c16a926a2546b92d82159fd57a72
2833,2833.0,3007.0,vespa-engine/vespa,4dc3b0b316fc4fb6c0aeb27e2299dfbaa1489f82,Refactor for readability.,https://github.com/vespa-engine/vespa/commit/4dc3b0b316fc4fb6c0aeb27e2299dfbaa1489f82
2834,2834.0,3008.0,vespa-engine/vespa,e5c09f0cfd3077498b5243adba2f8fda35318aa7,Refactor,https://github.com/vespa-engine/vespa/commit/e5c09f0cfd3077498b5243adba2f8fda35318aa7
2835,2835.0,3009.0,vespa-engine/vespa,94b9e09bb9fd8ab290cc56433eb72c2231b1f3b8,Refactor,https://github.com/vespa-engine/vespa/commit/94b9e09bb9fd8ab290cc56433eb72c2231b1f3b8
2836,2836.0,3010.0,vespa-engine/vespa,e22bdc4fbace80335be17ad611fd9cb04c427517,Refactor,https://github.com/vespa-engine/vespa/commit/e22bdc4fbace80335be17ad611fd9cb04c427517
2837,2837.0,3011.0,vespa-engine/vespa,03b42da05b5bacae6c8c6c6882eeb80ddadf9c63,Refactor,https://github.com/vespa-engine/vespa/commit/03b42da05b5bacae6c8c6c6882eeb80ddadf9c63
2838,2838.0,3012.0,vespa-engine/vespa,bec3d408785a17d53e40afe0c8872e3068693a2c,Refactor,https://github.com/vespa-engine/vespa/commit/bec3d408785a17d53e40afe0c8872e3068693a2c
2839,2839.0,3013.0,vespa-engine/vespa,4dd6e1bda2f24d94f48c36ce24f882589c9c226f,Refactor,https://github.com/vespa-engine/vespa/commit/4dd6e1bda2f24d94f48c36ce24f882589c9c226f
2840,2840.0,3014.0,vespa-engine/vespa,b4263f2dbb09613ffd0c08bd65126aae2a135c63,Refactor,https://github.com/vespa-engine/vespa/commit/b4263f2dbb09613ffd0c08bd65126aae2a135c63
2841,2841.0,3015.0,vespa-engine/vespa,b551c3983d5cd720f010369dcea81e57b78c18b5,Refactor,https://github.com/vespa-engine/vespa/commit/b551c3983d5cd720f010369dcea81e57b78c18b5
2842,2842.0,3016.0,vespa-engine/vespa,773186478a6f76b0c7c358a75f1fe966e6c62abd,Refactor,https://github.com/vespa-engine/vespa/commit/773186478a6f76b0c7c358a75f1fe966e6c62abd
2843,2843.0,3017.0,vespa-engine/vespa,dcc2c599d4b46c5f68ccc684aeabe1ae7d1bbd19,"Merge pull request #312 from yahoo/hmusum/minor-refactoring

Minor refactoring: No functional changes",https://github.com/vespa-engine/vespa/commit/dcc2c599d4b46c5f68ccc684aeabe1ae7d1bbd19
2844,2844.0,3018.0,vespa-engine/vespa,1d24ec38088cebec07a8e1822394c15436d984ef,"Minor refactoring: No functional changes
* Renames and mintor changes to output",https://github.com/vespa-engine/vespa/commit/1d24ec38088cebec07a8e1822394c15436d984ef
2845,2845.0,3019.0,vespa-engine/vespa,c84211d12966c9a3a7c62a1f0440064f52921d94,Refactor only,https://github.com/vespa-engine/vespa/commit/c84211d12966c9a3a7c62a1f0440064f52921d94
2846,2846.0,3020.0,vespa-engine/vespa,e3d99f8ccec0d741b1dbb93f807714f034944805,refactor,https://github.com/vespa-engine/vespa/commit/e3d99f8ccec0d741b1dbb93f807714f034944805
2847,2847.0,3021.0,vespa-engine/vespa,25e2a3081c5beb523fec71d2545e934a335c0c40,"Merge pull request #260 from yahoo/dybdahl/refactor-agent2

Refactor agent to smaller methods and classes.",https://github.com/vespa-engine/vespa/commit/25e2a3081c5beb523fec71d2545e934a335c0c40
2848,2848.0,3022.0,vespa-engine/vespa,cb87ddefda4f9c029092c5056e355e7bd261adbe,Refactor agent to smaller methods and classes.,https://github.com/vespa-engine/vespa/commit/cb87ddefda4f9c029092c5056e355e7bd261adbe
2849,2849.0,3023.0,vespa-engine/vespa,a1b166bfb9ec1f3031e4c6e393ac3672b28284b3,"Merge pull request #227 from yahoo/bakksjo/node-admin-refactor-network-setup-script

Bakksjo/node admin refactor network setup script",https://github.com/vespa-engine/vespa/commit/a1b166bfb9ec1f3031e4c6e393ac3672b28284b3
2850,2850.0,3024.0,vespa-engine/vespa,41686e96180155a6fd747453616c628720505456,"Merge pull request #236 from yahoo/bratseth/node-repo-refactoring

Support querying for one node from multiple states at the time",https://github.com/vespa-engine/vespa/commit/41686e96180155a6fd747453616c628720505456
2851,2851.0,3025.0,vespa-engine/vespa,8b9fe83c607ef965ea0447167e93a837f116ca8a,"Merge pull request #111 from yahoo/dybdahl/node-admin-suspend

Add host suspend logic with test and some refactoring.",https://github.com/vespa-engine/vespa/commit/8b9fe83c607ef965ea0447167e93a837f116ca8a
2852,2852.0,3026.0,vespa-engine/vespa,3ed6da878f9c0b0f8894cbd35935b49c4aa4349d,Add host suspend logic with test and some refactoring.,https://github.com/vespa-engine/vespa/commit/3ed6da878f9c0b0f8894cbd35935b49c4aa4349d
2853,2853.0,3027.0,vespa-engine/vespa,89f415c83ea73a9006376314d328713f0374d630,"Merge pull request #20 from yahoo/vegard/cmake-minor-refactoring

Vegard/cmake minor refactoring",https://github.com/vespa-engine/vespa/commit/89f415c83ea73a9006376314d328713f0374d630
2854,2854.0,3028.0,elastic/elasticsearch,e8c8aed500de83a50dbb6d0a1e448debaf2489d5,"Move license settings (#94566)

Continued refactoring of the license service. This commit follows #94261
which moved the LicenseService -> ClusterStateLicenseService and re-introduced
LicenseService as interface. That change did not move the settings to keep the diff small.

This change moves those settings to a new class LicenseSettings.
LicenseService will be re-introduced a subsequent commit.",https://github.com/elastic/elasticsearch/commit/e8c8aed500de83a50dbb6d0a1e448debaf2489d5
2855,2855.0,3029.0,elastic/elasticsearch,bb87e672825b8e4dcfc9df5b82f260e1453092e1,Refactoring pipeline's resolving code (#93821),https://github.com/elastic/elasticsearch/commit/bb87e672825b8e4dcfc9df5b82f260e1453092e1
2856,2856.0,3030.0,elastic/elasticsearch,7e2a6d8c93e8fff7fab92f7254ff802a203545af,"Introduce LicenseService as an interface (#94261)

LicenseService is currently a concrete class. As part of a much
larger refactoring LicenseService will be become an interface
that the existing concrete class will implement.

This commit is a pure refactoring (no functional changes)
with the following changes:

* rename LicenseService -> ClusterStateLicenseService (and matching variables)
* move the static settings and methods from the concrete class to the interface",https://github.com/elastic/elasticsearch/commit/7e2a6d8c93e8fff7fab92f7254ff802a203545af
2857,2857.0,3031.0,elastic/elasticsearch,90f6af3bdc1f030f3b43c1dd01d4f1d9f316269c,"Naming refactor to use cross cluster access consistently (#94424)

Rename refactor PR that uses `cross_cluster_access` in place of
`remote_access` wherever appropriate, since `cross_cluster_access` is a
more precise, clearer term. No functional changes, however I did make a
few tweaks around version handling.",https://github.com/elastic/elasticsearch/commit/90f6af3bdc1f030f3b43c1dd01d4f1d9f316269c
2858,2858.0,3032.0,elastic/elasticsearch,db0500ee24c9fed5de6e96eaf626b0d974251998,"Add checks for exception loops through suppressed exceptions (#93944)

This refactors how ElasticsearchException serializes causal & suppressed exceptions, to maintain the nested level count throughout. Previously, we were losing the nested level through ElasticsearchException.writeTo, which meant that loops through recursively suppressed exceptions were not handled.

This also moves the tests for such exceptions to ElasticsearchExceptionTests.",https://github.com/elastic/elasticsearch/commit/db0500ee24c9fed5de6e96eaf626b0d974251998
2859,2859.0,3033.0,elastic/elasticsearch,3d1b5cfbffb1862c4888b94977fb22b58ae1b81e,"Refactor `ShardLimitValidator` returning more info (#94421)

It adds a new `Result` record to be returned by the ShardLimitValidator
class. This record contains enough information to be used by external
callers to create error messages or any other information to notify
users about the internal status of the cluster.",https://github.com/elastic/elasticsearch/commit/3d1b5cfbffb1862c4888b94977fb22b58ae1b81e
2860,2860.0,3034.0,elastic/elasticsearch,14096d03cb55c8c8dafc3a3c6e60251c731c1772,"Refactor file settings watcher to allow reuse of file watching logic (#94376)

File-based settings should potentially support use cases besides
operator settings. We plan to create an extension point that would allow
alternate implementations. As a step towards that extension, we factor
out the file-watching logic into its own abstract class. An alternate
implementation simply needs to specify its own method for processing the
changed file.

Supersedes #93616 (which used delegation rather than inheritance and got
convoluted)",https://github.com/elastic/elasticsearch/commit/14096d03cb55c8c8dafc3a3c6e60251c731c1772
2861,2861.0,3035.0,elastic/elasticsearch,1f5e6f03ec724e6a453705ca62fc2cc7ccc3f7c2,Refactor the only use of TransportVersionUtils.compatibleFutureVersion (#94366),https://github.com/elastic/elasticsearch/commit/1f5e6f03ec724e6a453705ca62fc2cc7ccc3f7c2
2862,2862.0,3036.0,elastic/elasticsearch,1f7cec6382c8e2a7fcc16a398d5a310719752d70,"Fix static methods in LicenseService (#94171)

This is a pure refactoring commit that has no functional changes.

Many of the methods in LicenseService are unnecessarily static or mix static with non-static concerns.
This commit updates LicenseService to  remove uncessary static keyword 
or move them to LicenseUtils. Some static methods still remain. In particular private static methods 
and the static methods that deal with the cluster state. The former are harmless and later will be 
addressed in a future commits.

The changes here are standalone but are motivated by some future work in this area.",https://github.com/elastic/elasticsearch/commit/1f7cec6382c8e2a7fcc16a398d5a310719752d70
2863,2863.0,3037.0,elastic/elasticsearch,be298f290a2b227c64a3a40a41477ebbc6d369a0,"Refactor ILM rollover configuration (#94013)

In this refactoring PR we unified the rollover condition code in ILM and in RolloverRequest. This will allow us to improve this model in one place but also to reuse it in DLM too.",https://github.com/elastic/elasticsearch/commit/be298f290a2b227c64a3a40a41477ebbc6d369a0
2864,2864.0,3038.0,elastic/elasticsearch,aedf98435e25d3b931b123f5039ab50a89698b68,"Support wrapping XContentParser to extract a non-map type. (#93998)

* Support wrapping XContentParser to extract a non-map type.

Implementations of functional interface `XContentTypeExtractor` can
return a java type not natively supported by existing `XContentParser`s.

Refactor some `convertToMap` calls to use method refs to
`XContentParser.map` and `mapOrdered` using the new `parseToType` method.

Refs: #91142",https://github.com/elastic/elasticsearch/commit/aedf98435e25d3b931b123f5039ab50a89698b68
2865,2865.0,3039.0,elastic/elasticsearch,3d0279765c37749f1938e2daad96d84d3e053621,"Make default bucket count thresholds immutable (#93790)

I found while debugging
https://github.com/elastic/elasticsearch/issues/92058 that I had to
double check that our default bucket values (which are static objects)
are never mutated. 

This should be enforced by the compiler. So this adds a new
`ConstantBucketCountThresholds` to be used in our `static final`
`DEFAULT_BUCKET_COUNT_THRESHOLDS` objects.

This is a minor refactor, but gives me peace of mind :)",https://github.com/elastic/elasticsearch/commit/3d0279765c37749f1938e2daad96d84d3e053621
2866,2866.0,3040.0,elastic/elasticsearch,20dce68e653f78775b8c9a5d55b4953c02ee03bf,Refactor geoip-fixture to remove Docker requirement (#93488),https://github.com/elastic/elasticsearch/commit/20dce68e653f78775b8c9a5d55b4953c02ee03bf
2867,2867.0,3041.0,elastic/elasticsearch,d27102fa7e8d2f47ec7c3e6bcf5da969a0823603,"Move executeConsistentStateUpdate method from Repository to SnapshotsService (#94020)

This refactoring helps make https://github.com/elastic/elasticsearch/pull/90332 easier to read.
Also, even in isolation it saves a lot of code and seems to generally be the right thing to have this
method in the snapshots service.",https://github.com/elastic/elasticsearch/commit/d27102fa7e8d2f47ec7c3e6bcf5da969a0823603
2868,2868.0,3042.0,elastic/elasticsearch,b998b473b377154683684e83b82ca59f87e6a073,"Credentials resolver returns `RemoteClusterCredentials` (#93857)

A small refactor around resolving remote cluster authorization: rename
`RemoteAccessCredentials` to `RemoteClusterCredentials` since the latter
is more specific and descriptive, return `RemoteClusterCredentials` from
the resolver, and finally, rename the relevant header to
`REMOTE_CLUSTER_AUTHORIZATION_HEADER_KEY`. This is more precise and
avoids the unnecessary use or ""remote access"". I will follow up with a
bigger rename PR, replacing the terms ""remote access"" with ""remote
cluster"" more broadly.",https://github.com/elastic/elasticsearch/commit/b998b473b377154683684e83b82ca59f87e6a073
2869,2869.0,3043.0,elastic/elasticsearch,7d88d13312e5be993f202a013951a252f5cb6a89,"Consolidate use of `RemoteAccessHeaders`  (#93662)

This refactor PR extracts the RemoteAccessHeaders class and re-uses it
between querying-cluster and fulfilling-cluster side code.",https://github.com/elastic/elasticsearch/commit/7d88d13312e5be993f202a013951a252f5cb6a89
2870,2870.0,3044.0,elastic/elasticsearch,fd7736f824093b347e7b277a1d45e4a3361df278,"Remove uses of calculateMinimumCompatVersion from handshakes (#93376)

This replaces the previous uses of Version.minimumCompatibleVersion with hard-coded constants.

At some point later, handshakes will be refactored to not use the same transport versioning as the rest of the transport code, and will use its own version numbers & send/ack mechanisms.",https://github.com/elastic/elasticsearch/commit/fd7736f824093b347e7b277a1d45e4a3361df278
2871,2871.0,3045.0,elastic/elasticsearch,37fc695326152212ff3cf387a50ae211ddb60347,"Extract aligned write logic from searchable snapshots into blob cache module (#93592)

This is very neatly reusable elsewhere. Unfortunately, an isolated test for the method
is rather hard to build. We should look into refactoring this further to enable that.
There's good reason existing tests all go through the cache service or concrete frozen
input it seems.",https://github.com/elastic/elasticsearch/commit/37fc695326152212ff3cf387a50ae211ddb60347
2872,2872.0,3046.0,elastic/elasticsearch,c87b7bc17ed6fe721aa12d54d04cf95b6f2a8b9f,"Update Example plugins after Version->TransportVersion refactor (#93293)

Plugins which indirectly implement VersionedNamedWriteable should return
TransportVersion

relates #93242",https://github.com/elastic/elasticsearch/commit/c87b7bc17ed6fe721aa12d54d04cf95b6f2a8b9f
2873,2873.0,3047.0,elastic/elasticsearch,2f4620176bfa8dba2dbefdf37dde9757bb79469a,"Refactor GeoIp tests to use database service directly (#93281)

Replaces the usage of the GeoIp processor factory with the DatabaseNodeService when 
getting all databases in the tests.",https://github.com/elastic/elasticsearch/commit/2f4620176bfa8dba2dbefdf37dde9757bb79469a
2874,2874.0,3048.0,elastic/elasticsearch,da01691a994da5c814cedc20884a70940331e781,"Refactor Security code to use TransportVersion (#93089)

With the introduction of TransportVersion we want to use this object in transport protocol related code (usages of StreamInput, StreamOutput).
Also with serverless release being more frequent then on-prem the code changes that relied on Node's Version to perform a conditional logic are also refactored to use TransportVersion which has higher granularity",https://github.com/elastic/elasticsearch/commit/da01691a994da5c814cedc20884a70940331e781
2875,2875.0,3049.0,elastic/elasticsearch,81349d58d2041a23984825f4b8b520b975e282c2,"Migrate server/org.elasticsearch.cluster package to use TransportVersion (#93199)

conditional usages of StreamInput/StreamOutput getVersion are refactored to use
TransportVersion instead of Version",https://github.com/elastic/elasticsearch/commit/81349d58d2041a23984825f4b8b520b975e282c2
2876,2876.0,3050.0,elastic/elasticsearch,7122e129d4269fc6d047bf4e8c2c00d52521926f,"Adjust validation to allow custom password hash to be provided (#93163)

This commit adjusts validation to allow custom password hash
to be provided when executing change user password transport action.

This change relates to #92871, which introduced the original changes
but somehow, the validation on the transport action was missed to be
refactored as well.",https://github.com/elastic/elasticsearch/commit/7122e129d4269fc6d047bf4e8c2c00d52521926f
2877,2877.0,3051.0,elastic/elasticsearch,07b5d85dea471d5b0dcee9d28b4efcdfe72c8b51,"Remove user exception marker from server cli (#93206)

Previously UserExceptions could be thrown from the main Elasticsearch
process during startup. With recent refactorings all remaining
validation of arguments was moved to the server cli. Since there are no
longer any uses of the user exception in server, the marker code is no
longer needed. This commit removes that marker and the associated code
in the server cli error pump.",https://github.com/elastic/elasticsearch/commit/07b5d85dea471d5b0dcee9d28b4efcdfe72c8b51
2878,2878.0,3052.0,elastic/elasticsearch,8e284459864e72210fa4f2f53ebddcf8561a7342,"Migrate TcpTransport to TransportVersion (#92960)

The vast majority of this commit is doing a simple s/Version/TransportVersion/, however there are a couple of areas of complexity.

Handshakes proved to be a particularly tricky issue, as they have complex usage of Version.minimumCompatibilityVersion. In lieu of solving this problem now, I've replaced uses of minimumCompatibilityVersion with TransportVersion.minimumCompatibilityVersion and TransportVersion.calculateMinimumCompatVersion.

As a later piece of work, code using both those methods will need to be refactored to do something else, and the methods removed.

Co-authored-by: Przemyslaw Gomulka <przemyslaw.gomulka@elastic.co>",https://github.com/elastic/elasticsearch/commit/8e284459864e72210fa4f2f53ebddcf8561a7342
2879,2879.0,3053.0,elastic/elasticsearch,8a63c452b4d899e939cc70f29923d8134784c237,"Support custom PBKDF2 password hashes (#92871)

This PR changes validation of PBKDF2 password hashes to be able to
verify hashes with arbitrary salt and derived key lengths. The lengths
are determined based on the location of the '$' character.

Some limitations which are introduced:

- The salt length cannot be less than the recommended length of 8 bytes.
- The derived key length is a multiple of 128 bits (which is the default
    block size of used pseudo random HMAC-SHA512 function)

The create user and change password APIs are refactored to accept
password_hash which uses a different algorithm than the configured one
(xpack.security.authc.password_hashing.algorithm).",https://github.com/elastic/elasticsearch/commit/8a63c452b4d899e939cc70f29923d8134784c237
2880,2880.0,3054.0,elastic/elasticsearch,606a323a590c1f087094ffcf0f7e49e08d6c052c,"Small refactoring of GeoTileGridTiler (#92982)

It removes some duplicate loops and replace it with a method.",https://github.com/elastic/elasticsearch/commit/606a323a590c1f087094ffcf0f7e49e08d6c052c
2881,2881.0,3055.0,elastic/elasticsearch,9d37c8152cf3bed157863a6977b001310d08f50b,"Asyncify IndexEventListener#beforeIndexShardRecovery (#92979)

We want to add a listener which may do some background work before
letting the index shard recovery proceed, so this commit refactors
`beforeIndexShardRecovery` to accept a listener and adjusts all its
callers to match.",https://github.com/elastic/elasticsearch/commit/9d37c8152cf3bed157863a6977b001310d08f50b
2882,2882.0,3056.0,elastic/elasticsearch,2cdaabe783fa366b9644b092c080a61a537a6cc8,"[Stable plugin api] Drop api suffix in package names (#92905)

Refactoring that drops the api suffix from package name
This will have to be followed up by a plugins/examples fix in imports
Also set an artifact group name to `org.elasticsearch.plugin` in the plugin-api and plugin-analysis-api",https://github.com/elastic/elasticsearch/commit/2cdaabe783fa366b9644b092c080a61a537a6cc8
2883,2883.0,3057.0,elastic/elasticsearch,3c54c7ae17b6c50e355cc64e7e5c21bee002ebec,"Refactor index name expression resolver (#92518)

The goals in this expression resolving refactoring are: * simplify the
`IndexNameExpressionResolver#WildcardExpressionResolver` class, eg. it
doesn't throw the ""not found"" exception for explicit resource names
(which are not wildcards) * have a separate step to handle explicit
names: it either ignores (silently drops) names of missing resources or
throws a ""not found"" exception, depending on the `ignore_unavailable`
request option. * encapsulate the exclusion logic (names starting with
""-"" following another name that starts with ""*"" are exclusions)",https://github.com/elastic/elasticsearch/commit/3c54c7ae17b6c50e355cc64e7e5c21bee002ebec
2884,2884.0,3058.0,elastic/elasticsearch,c53becb3104195138f5ae93ed49bd1180842333b,"Refactor enum mappings parameter to allow for capital case types (#92548)

We have a couple of existing enum mappings parameters that specify they enum type in lowercase letters.
That is convenient to avoid having to convert enum names back and to uppercase or lowercase depending
on what's needed, yet it does not follow coding conventions in that constants should be in capital letters.
More importantly, moving the `on_script_error` mapping parameter to a streamlined enum mapping parameter is
not possible with lowercase type names because one of its values is `continue` which is a java reserved keyword.
It becomes a requirement that the actual value for an enum based mapping parameter can potentially differ from
the enum name. In general, the type name will be in capital letters, while the parameter value will be lowercase.

With this commit we refactor the enum mappings parameter to provide their types in capital case, while
users will keep on providing the corresponding values in lowercase. This only affects how the enum
types are represented internally. We can leverage toString for the enum types to do the lowercasing when needed.",https://github.com/elastic/elasticsearch/commit/c53becb3104195138f5ae93ed49bd1180842333b
2885,2885.0,3059.0,elastic/elasticsearch,ed83f9cc869cd11c61a8860862f46191b28514f6,"Refactor plugin scanning into lib (#92437)

new stable plugins require generated named_components.json file which contains all analysis components implemented by this plugin. The generation is currently done in build-tools by elasticsearch.stable-esplugin
However this makes the generation only available for plugins using gradle. Plugin developers using maven or other building tooling will not be able to use it.

This commits refactors the scanning logic into libs:plugin-scanner which will allow for plugin install command to perform the scanning too.

relates #88980",https://github.com/elastic/elasticsearch/commit/ed83f9cc869cd11c61a8860862f46191b28514f6
2886,2886.0,3060.0,elastic/elasticsearch,24b6256186f0c13fc6ccdac7ef9732999020a568,"Fix fransport handshake starting before tls handshake completes (#90534)

Implements waiting for the TLS handshake to complete before triggering the connected
callback and thus the transport handshake.
Had to make copies of two transport test cases with slight but not trivial alterations
to force a tls handshake before doing either a timeout or a conneciton reset.
Will dry that up in a follow-up as it's a bit a noisy refactoring.

closes #77999",https://github.com/elastic/elasticsearch/commit/24b6256186f0c13fc6ccdac7ef9732999020a568
2887,2887.0,3061.0,elastic/elasticsearch,7a5dca0f433f22007d2afcf217afee4995f4dabe,"Introduce RefCountingRunnable (#92620)

Today a `CountDownActionListener` which wraps a bare `Runnable` collects
all the exceptions it receives only to drop them when finally completing
the delegate action. Moreover callers must declare up-front the number
of times the listener will be completed, which means they must put extra
effort into computing this number ahead of time and/or supply an
overestimate and then make up the difference with additional artificial
completions.

This commit introduces `RefCountingRunnable` which allows callers to
acquire and release references as needed, executing the delegate
`Runnable` once all references are released. It also refactors all the
relevant call sites to use this new utility.",https://github.com/elastic/elasticsearch/commit/7a5dca0f433f22007d2afcf217afee4995f4dabe
2888,2888.0,3062.0,elastic/elasticsearch,2bb710ba54333a6e20e6a51f3a19cf97c818d73a,"Encapsulate JoinReason (#92750)

Today the reason attached to a `node-join` event is just a string, but
we'd rather it be a proper object so we can attach some extra metadata
in future. This refactors things to encapsulate the string within a
dedicated record.

Relates #92741",https://github.com/elastic/elasticsearch/commit/2bb710ba54333a6e20e6a51f3a19cf97c818d73a
2889,2889.0,3063.0,elastic/elasticsearch,369ac06e39d8886ba3f51c568d32e6c31f3bbc61,"JWT realm - Refactor tests (#92459)

This PR refactors tests related to the JWT realm feature to reduce visual clutter
and improve readability. It also adds a new test for concurrent JwkSet reloading
behaviour.",https://github.com/elastic/elasticsearch/commit/369ac06e39d8886ba3f51c568d32e6c31f3bbc61
2890,2890.0,3064.0,elastic/elasticsearch,e887c022c3f5b2032c155e56771ac97a6d2c2765,"Refactor Watcher webhook execution into WebhookService (#92576)

This commit creates a new `WebhookService` which encapsulates the action of executing Watcher's webhook actions. Currently the functionality of webhook is unchanged from its existing behavior, however, this refactoring allows us to extend webhook actions, from both the ""webhook"" action as well as other actions that use webhooks like the ""email"" action, to add functionality for adding additional injected tokens.",https://github.com/elastic/elasticsearch/commit/e887c022c3f5b2032c155e56771ac97a6d2c2765
2891,2891.0,3065.0,elastic/elasticsearch,d919beab5b227e0bed0d013c17eb82ae9a6e5e01,"QL: Introduce parameterized rule and executor (#92428)

Extend the QL rule (and executor) to allow passing a Context object to
 pass runtime information to certain rules. This avoids having to
 encapsulate the state into the rule by passing them as argument
 allowing the same rule instance to be reused across multiple queries at
 the same time. A common example of this are Analyzers which rely on the
 session Configuration or IndexResolution to perform analysis.

To minimize the amount of change the existing Rule and RuleExecutor are
 kept in place with minimal changes and two subclasses are introduced:
 ParameterizedRule and ParameterizedRuleExecutor - the former accepts
 passing of the Context object to each rule while the latter keeps the
 state and passes it when encountering a ParameterizedRule.

The majority of the PR is propagating this changes in the tests, mainly
 replacing the creation of the Analyzer; to prevent future refactoring
 noise, the creation has been centralized into an utility class that
 handles the various variants.",https://github.com/elastic/elasticsearch/commit/d919beab5b227e0bed0d013c17eb82ae9a6e5e01
2892,2892.0,3066.0,elastic/elasticsearch,5126f6d92a3d88b2734632245f2d2189f195dd7f,Internal refactoring of some IngestService methods (#92203),https://github.com/elastic/elasticsearch/commit/5126f6d92a3d88b2734632245f2d2189f195dd7f
2893,2893.0,3067.0,elastic/elasticsearch,3c3b3a7ded257517732097c3b75b00df0c33347c,"Use all profiling events on startup (#92087)

With this commit we use `profiling-events-all` to query profiling events
if the appropriate index for a sample count is not present yet. This can
happen on cluster startup when only a few events have been accumulated
because additional indices are only created when there are enough
events. This aligns behavior of the Elasticsearch plugin with the Kibana
plugin.

We also refactor the profiling-related test cases so we can simulate situations
after cluster startup when not all profiling-related indices have been created.
As testing also cancellation would require additional complexity and 
decreases test maintainability (need to adjust `slack` based on the scenario
which is a very low-level change), we also separate tests for the regular case 
and cancellation.
    
Relates #91640",https://github.com/elastic/elasticsearch/commit/3c3b3a7ded257517732097c3b75b00df0c33347c
2894,2894.0,3068.0,elastic/elasticsearch,60d1e1feb5cedcc2b25b49c958fb9be28a78c42b,"Consolidate handling of ""all"" for index expression resolver (#91735)

A refactoring such that callers of
IndexNameExpressionResolver#resolveExpressions don't
have to massage parameters when resolving _all and
its ilk (empty, null, *).",https://github.com/elastic/elasticsearch/commit/60d1e1feb5cedcc2b25b49c958fb9be28a78c42b
2895,2895.0,3069.0,elastic/elasticsearch,343c5c1ef7d722577085382bf84fb93cbfa2eccd,"Always test explicit names with name predicate when ignore unavailable  (#91618)

The ""is authorized"" check for explicit names must take
into account that a name can be authorized even if it doesn't exist.
To that end, the ""is authorized"" check for explicit names,
during request rewriting, should not fail if the index is unavailable.

This PR is a refactoring that allows changing the predicate
without changing the wildcard expansion test.",https://github.com/elastic/elasticsearch/commit/343c5c1ef7d722577085382bf84fb93cbfa2eccd
2896,2896.0,3070.0,elastic/elasticsearch,69bf51312c10840a37ac940b7ccf2682514b7c4a,"clean up a few things in AggregatorTestCase (#91727)

Small refactoring follow up on aggregations tests. This plumbs the AggTestConfig object into the private searchAndReduce method that actually does the work (as opposed to the public driver), and also pulls the flag for partial reduces up into the test config, which both makes the flag clearer and gives us an override point. The partial reduce flag still defaults to being random.",https://github.com/elastic/elasticsearch/commit/69bf51312c10840a37ac940b7ccf2682514b7c4a
2897,2897.0,3071.0,elastic/elasticsearch,26bcc0ff30a55a85f9067194c1dd3d0093b79c1a,"Force single aggregator mode for old terms tests (#91718)

Resolves #91679
Resolves #91668

When I refactored the terms tests earlier this week, I missed the fact that the test breaks sometimes if it runs with more than one leaf aggregator. Investigation is ongoing as to why this is the case, and we hope for a more robust fix in the future, but for now forcing it into single aggregator mode will stop the test flapping in CI.",https://github.com/elastic/elasticsearch/commit/26bcc0ff30a55a85f9067194c1dd3d0093b79c1a
2898,2898.0,3072.0,elastic/elasticsearch,45dba981df30edea5f406d865ec32e24ff06ef1a,"Adjust cartesian license levels (only centroid-shape) (#91625)

* Adjust cartesian license levels (only centroid-shape)

* Added SpatialPluginTests for cartesian centroid and bounds

Also refactored the tests to make it easier to add additional aggregations

* Moved a private method to the end

* Removed debugging code",https://github.com/elastic/elasticsearch/commit/45dba981df30edea5f406d865ec32e24ff06ef1a
2899,2899.0,3073.0,elastic/elasticsearch,2e12d20b39aca69f2c0db5453c193ea86fd998d3,"Release agg context in tests part 3 (#91598)

This PR, which is hopefully the last in the aggregations test refactoring saga, enables the fix for MockBigArrays which in turn enables circuit breaker tracking for a lot of aggs tests. Consequentially, it causes a bunch of failures from tests that are doing the wrong thing, so this PR includes fixes for those.

In general, I've tried to favor fixing these tests by standardizing them on calling either AggregatorTestCase#searchAndReduce or AggregatorTestCase#testCase, which have the correct handling for the BigArrays held by AggregationContext. In some cases, this has not been possible, and I've just released the AggregationContext in a try block within the test. That's less than ideal, but there aren't many tests I've needed to do that for.",https://github.com/elastic/elasticsearch/commit/2e12d20b39aca69f2c0db5453c193ea86fd998d3
2900,2900.0,3074.0,elastic/elasticsearch,998520e111cee9a090127ea8c811bcd40a42c44a,"Refactor enrich maintenance coordination logic (#90931)

This PR refactors the locking logic for enrich policies so that enrich index names are resolved early 
so that they may be explicitly protected from maintenance tasks on the master node. The 
maintenance service has been optimized to allow for concurrent removal of old enrich indices while 
policies are executing. Further concurrency changes were made to improve the thread safety of the 
system (such as removing the double check locking in maintenance and the ability to unlock 
policies from code that does not hold the lock).",https://github.com/elastic/elasticsearch/commit/998520e111cee9a090127ea8c811bcd40a42c44a
2901,2901.0,3075.0,elastic/elasticsearch,04ed8d567fe80c67c88a9850cbef97db252d197c,"Deprecate silently ignoring type, fields, copy_to and boost in metadata field definition (#90989)

The parsing code for metadata fields historically inherits from the existing parsing code for fields in the mappings, where type is the one parameter that every field type accepts. As a consequence, the metadata field definition has been silently ignoring the type parameter, despite the type of metadata fields can never be changed. Furthermore, with the recent move to parsing through builders (#59847), we've been accepting other unsupported parameters like fields, copy_to and boost.

This commit refactors the parsing method for metadata field builders to not reuse the base logic but a rather simplified version. In the case of type, fields, copy_to and boost we issue a deprecation warning starting from indices created on 8.6.

Closes #35389",https://github.com/elastic/elasticsearch/commit/04ed8d567fe80c67c88a9850cbef97db252d197c
2902,2902.0,3076.0,elastic/elasticsearch,e098e9d8485a155eca5f082555fca8d9d1ee92d3,"Refactor DatabaseNodeService as a cluster state listener. (#91567)

This PR changes the DatabaseNodeService to use a ClusterStateListener which will always run after 
the cluster state is globally applied instead of using a listener on the IngestService which is run before 
the cluster state is fully published.",https://github.com/elastic/elasticsearch/commit/e098e9d8485a155eca5f082555fca8d9d1ee92d3
2903,2903.0,3077.0,elastic/elasticsearch,47f63ad726204685fe838563740a7cddd62f36ae,"Refactor of some painless internals (#91544)

* Use JCL immutable collections more for less copying
* Fix reading cloned reflection arrays in loops
* Replace ArrayList with ArrayDeque for class hierarchy searches",https://github.com/elastic/elasticsearch/commit/47f63ad726204685fe838563740a7cddd62f36ae
2904,2904.0,3078.0,elastic/elasticsearch,34e8da6d605a90b8da3cd41ec02ff3a01a841cbc,"Support cartesian_bounds aggregation on point and shape (#91298)

* Support cartesian_bounds aggregation on point and shape

* Update docs/changelog/91298.yaml

* Update docs/changelog/91298.yaml

* Fixed cartesian parse exceptions to mimic previous behavior

* Re-added removed interfaces to fix failing tests

* Generalized AbstractGeoTestCase for use in Cartesian tests

And added new CartesianBoundsIT and CartesianCentroidIT

* Fixed bug in encoding missing cartesian points

* Simplify cartesian bounds

* Removing the neg/pos left/right split used in bounds because this is only relevant to GeoBounds
* Revert GeoBounds to no longer share common code with CartesianBounds (including aggregators)
* Make Point and Shape aggregators share common code

* Fixed geo comment

* Delete incorrectly added file

* Set correct minimum version for new cartesian aggs

* Fixed specific types for ShapeValues

* Completed Centroid/Bounds aggregation integration tests refactoring

An earlier commit started generalizing Geo/Cartesian integration tests for
centroid and bounds aggregations, but did not complete the job.

This commit completes the work, since almost all tests are identical between
cartesian and geo, except tests related to the dateline.

* Removed licensing comment

* GeoBoundsIT expects wrapLongitude(false)

* Fixed CartesianBoundsIT flakiness and removed geo-specific code

* Reduced CartesianCentroidIT flakiness by normalizing to floats",https://github.com/elastic/elasticsearch/commit/34e8da6d605a90b8da3cd41ec02ff3a01a841cbc
2905,2905.0,3079.0,elastic/elasticsearch,2c7d634b2e4c6bee6de3f69447b9e1f4cb497dc7,"Refactor JWT realm to facilitate new feature changes (#91001)

This is a refactoring PR that restructure how code for the JWT realm is
structured. The goal is to make it ready for incoming new feature related
changes by improve code reuse, modularity, readability and testability. 
This PR should have no functional changes.",https://github.com/elastic/elasticsearch/commit/2c7d634b2e4c6bee6de3f69447b9e1f4cb497dc7
2906,2906.0,3080.0,elastic/elasticsearch,f83a530daaa04c82f884ba1973c4cd929d81fc59,Tweak dra buildId passing after refactoring for DRA job,https://github.com/elastic/elasticsearch/commit/f83a530daaa04c82f884ba1973c4cd929d81fc59
2907,2907.0,3081.0,elastic/elasticsearch,b02e32a95125fd4d80c889395102fcfcef8f42a1,"Refactor CCS with security REST tests (#91373)

No functional (testing or otherwise) changes are included in this commit.

This commit does the following:
* moves the existing tests to legacy-with-basic-license and legacy-with-full-license sub-projects
* stops using the default distribution in favor of the smaller/faster integ test distribution
* aligns the naming of the resources with 'querying' and 'fulfilling' clusters
* general clean up the build.gradle file

This commit establishes a better pattern to start including REST tests for
the new API key based security model.",https://github.com/elastic/elasticsearch/commit/b02e32a95125fd4d80c889395102fcfcef8f42a1
2908,2908.0,3082.0,elastic/elasticsearch,b5743811f11a72a63b3585122c895a6f8f0f2d27,"Refactor RBACEngine authorize index action for resolved indices (#91180)

Refactor index action authorization to a single code path,
in both cases where the request allows remote indices or not.",https://github.com/elastic/elasticsearch/commit/b5743811f11a72a63b3585122c895a6f8f0f2d27
2909,2909.0,3083.0,elastic/elasticsearch,4f77a238431f850a37b145959302766d6c359622,Fix wrong test assertion which was introduced after refactoring (#91227),https://github.com/elastic/elasticsearch/commit/4f77a238431f850a37b145959302766d6c359622
2910,2910.0,3084.0,elastic/elasticsearch,3baaab5072bcb70c30020d44eb1b625eff87ecd0,"Refactor building role from single role descriptor (#91107)

This PR refactors functionality for building a role from a single role
descriptor. This used to be handled by a specialized constructor of the
Role.Builder class that accessed internal fields. This PR consolidates
this logic into a static method that uses the builder's canonical
methods instead. The method is used to construct the roles of internal
users, from static role descriptors, as well as in test code.

Relates: #90614 (comment)",https://github.com/elastic/elasticsearch/commit/3baaab5072bcb70c30020d44eb1b625eff87ecd0
2911,2911.0,3085.0,elastic/elasticsearch,9cb299b7dde39c6ccedda83a46b5577ceebaa1cb,"Refactor & tidy up uses of Strings class (#90672)

Refactor & tidy up uses of Strings class
Add some unit tests to string methods",https://github.com/elastic/elasticsearch/commit/9cb299b7dde39c6ccedda83a46b5577ceebaa1cb
2912,2912.0,3086.0,elastic/elasticsearch,ea48af39f14748b5f5a37449d86ef17b2fa0b7a7,"Use new base testcase for chunked xcontenttypes in examples (#90790)

in #90707 a org.elasticsearch.test.AbstractSerializingTestCase was refactored and
AbstractXContentSerializingTestCase should be used instead.",https://github.com/elastic/elasticsearch/commit/ea48af39f14748b5f5a37449d86ef17b2fa0b7a7
2913,2913.0,3087.0,elastic/elasticsearch,c167282fdb69c67743b95d6c3604d532a213f377,"Make Step.StepKey a record (#90755)

A bit of a random refactoring, but I found that master under heavy load
gets surprisingly hot on the hashcode calculation in `StepKey` because
that seems to not inline and actually sets up an `Object[]` array on
every call when this thing is used for checking if there's work for an
index.
Instead of fixing the hashCode to run faster, lets just use a record to
do this out of the box and save the code for equals and toString as
well.",https://github.com/elastic/elasticsearch/commit/c167282fdb69c67743b95d6c3604d532a213f377
2914,2914.0,3088.0,elastic/elasticsearch,3b86535d24d65216aa658c590b4b63bc3544b56c,"Remove RootObjectMapper.Builder method only used in tests (#90646)

The method Builder.add(Map<String, Mapper>) is only used in one test class,
and makes the tests more brittle and harder to read. This commit removes the
method and refactors the test to use builders instead.",https://github.com/elastic/elasticsearch/commit/3b86535d24d65216aa658c590b4b63bc3544b56c
2915,2915.0,3089.0,elastic/elasticsearch,1bb34e09823192fae8ee11504201589f8dcd6338,"Refactor FileSettingsService threading (#90417)

Use thread interruption rather than latches to signal the watcher thread on shutdown
General tidying up & simplifying the threading operations",https://github.com/elastic/elasticsearch/commit/1bb34e09823192fae8ee11504201589f8dcd6338
2916,2916.0,3090.0,elastic/elasticsearch,c3a1cb34294e902a9f46d7e840ea09965019f456,"Refactor to remove the IndexAccessControl#isGranted flag (#90141)

This is a refactoring of the `IndicesAccessControl` class intended to
remove the `isGranted` flag from each of the individual index resources.

In almost all cases the flag is redundant (and is `true`):  * when the
request is authorized (`IndicesAccessControl#isGranted`  is `true`), the
`isGranted` flags, for all the individual index resources,  must be
`true` * when the request is unauthorized the `isGranted` flag can be
either `false` or `true` but the request is promptly rejected and so the
flag has a short lifetime (basically it is available for the phrasing of
the access denied exception).

`IndexAccessControl` instances that could _theoretically_ have had
`isGranted` as `false` are replaced by `null`. The code already handled
nulls in the place of `IndexAccessControl` instances as if they were
unauthorized.",https://github.com/elastic/elasticsearch/commit/c3a1cb34294e902a9f46d7e840ea09965019f456
2917,2917.0,3091.0,elastic/elasticsearch,30f24d4eea7cb44d78561fd2c88ba477fb5d3d70,"Disk indicator refactoring (#90366)

Introduced the DiskHealthAnalyzer which determines the health state, the symptom, the impacts, the diagnoses and the details. We also changed the retrieval of the indices per node to use the RoutingNodes instead of the RoutingTable directly for efficiency.

Co-authored-by: Andrei Dan <andrei.dan@elastic.co>",https://github.com/elastic/elasticsearch/commit/30f24d4eea7cb44d78561fd2c88ba477fb5d3d70
2918,2918.0,3092.0,elastic/elasticsearch,ed9fed75e73aec43196101072981c446cbc6ec32,Some refactoring of InternalSnapshotInfoService (#90087),https://github.com/elastic/elasticsearch/commit/ed9fed75e73aec43196101072981c446cbc6ec32
2919,2919.0,3093.0,elastic/elasticsearch,e1343308c0dde1bc0b5f0ff4f63cd37f7a5033fb,"Refactor UberModuleClassLoader ctor signature (#90172)

The PluginBundle class will provide a Set<URL> rather than a List<Path>,
so the UberModuleClassLoader should expect that in its constructor.",https://github.com/elastic/elasticsearch/commit/e1343308c0dde1bc0b5f0ff4f63cd37f7a5033fb
2920,2920.0,3094.0,elastic/elasticsearch,15932d5168030da53a3530c08dc2f86b9ea3fe4a,"Refactor aggregator test case (#90149)

Refactor `AggregatorTestCase` to eliminate many overloads of `searchAndReduce`.  Introduce a parameter object, and default many common arguments.",https://github.com/elastic/elasticsearch/commit/15932d5168030da53a3530c08dc2f86b9ea3fe4a
2921,2921.0,3095.0,elastic/elasticsearch,157b274517c031714f7ee2c7cfa61c7ef9f7c548,"[ML] Fix MlAutoscalingContext.hasWaitingTasks (#90139)

This fixes the method `hasWaitingTasks` in `MlAutoscalingContext`
to correctly account for analytics jobs. This bug was introduced
in the refactoring done in #89167.",https://github.com/elastic/elasticsearch/commit/157b274517c031714f7ee2c7cfa61c7ef9f7c548
2922,2922.0,3096.0,elastic/elasticsearch,7c721bb3631c6c559ed53908e9267f6dfd3e6691,"Fix debug mode in MaxRetryAllocationDecider (#89973)

In #62275 we refactored this code a bit and inadvertently reversed the
sense of this conditional when running in debug mode. This commit fixes
the mistake.",https://github.com/elastic/elasticsearch/commit/7c721bb3631c6c559ed53908e9267f6dfd3e6691
2923,2923.0,3097.0,elastic/elasticsearch,7164e3511979e2d01f1da6944452f4f610386d5c,"Make sure listener is resolved when file queue is cleared (#89929)

This PR fixes a bug introduced in #88209 while refactoring how file upload
tasks run in a shard snapshot. The corner case where the queue of files
to snapshot gets cleared when a file snapshot runs into an exception is
not addressed in that PR.

Closes #89927
Closes #89956",https://github.com/elastic/elasticsearch/commit/7164e3511979e2d01f1da6944452f4f610386d5c
2924,2924.0,3098.0,elastic/elasticsearch,9e530e163cf7ee89fc7133b86b02a465ab9c6413,"[ML] Maintain ml node attribute for processors as integer for BWC (#89896)

In #89645 I switched the ml node attribute for allocated processors
to write a string representation of a double value. However, that
means the attribute value cannot be parsed in a mixed cluster version
when the node that tries to read it is before 8.5.0.

This commit addresses this problem by introducing a new attribute
for the version the has a string representation of the double value
and keeps writing the older version of the attribute as integer.

It also refactors the logic of parsing the attribute value given
a node in a single place as the logic now involves BWC and the
duplication is adding complexity.",https://github.com/elastic/elasticsearch/commit/9e530e163cf7ee89fc7133b86b02a465ab9c6413
2925,2925.0,3099.0,elastic/elasticsearch,b68d62ba1e2934fb605b7bdcacae935a0852d384,"Refactor GeoPoint and GeoShape with generics (#89388)

* Refactor GeoPoint and GeoShape with generics

In preparation for supporting CartesianPoint and CartesianShape
in aggregations, this PR adds a common interface between GeoPoint
and CartesianPoint, and then uses that to split out some key common
code that will be used in CartesianPoint and CartesianShape aggregations

* Simplify generics (by Ignacio)

Co-authored-by: Ignacio Vera <ivera@apache.org>

* Refactor ElasticPoint to SpatialPoint

* Rename ShapeValuesProvider to ShapeValuesSource

It extends ValuesSource, and is extended by GeoShapeValuesSource.
There is no reason for the suffix `Provider`.

* Code review, mostly AbstractShapeIndexFieldData

* Reverted trivial refactoring

* Removed unused Writable interface implementation

* Further generics refinements

Based on Ignacio's work in 050df953dfed27c444c3821a6d939f7030dbcc16,
we fix the BoundingBox generics, and also add a little more specificity
to the previous generics (replace <?> with <? extends SpatialPoint>).

* Removed some geo-specific code from BoundingBox

Co-authored-by: Ignacio Vera <ivera@apache.org>",https://github.com/elastic/elasticsearch/commit/b68d62ba1e2934fb605b7bdcacae935a0852d384
2926,2926.0,3100.0,elastic/elasticsearch,6077f7b48329f41b2f0c701fed568e76751f8afb,"Refactor testBalanceIncrementallyStartNodes (#89733)

Currently, testBalanceIncrementallyStartNodes relies on exactly 2 reroutes to
start all initializing shards after adding node-3. This might change with a
different shard allocator.",https://github.com/elastic/elasticsearch/commit/6077f7b48329f41b2f0c701fed568e76751f8afb
2927,2927.0,3101.0,elastic/elasticsearch,f7219470601efbd231fecc5c8e62ea0ca6785085,"Refactor SnapshotsInProgress to simplified constructors (#89813)

Simplify logic out of the primary constructor. This allows for faster copy
construction when forwarding the repository generation and allows for a cleaner
implementation of diffing in a follow-up.",https://github.com/elastic/elasticsearch/commit/f7219470601efbd231fecc5c8e62ea0ca6785085
2928,2928.0,3102.0,elastic/elasticsearch,bc4c6784dde77a395e4fef257e74aadc9689eda1,"Stable Plugin API modules and analysis interfaces (#88775)

This commit adds stable analysis plugin API with analysis components interfaces and annotations.
It does not contain any usage of it yet. Separate changes to introduce example plugins or refactoring to existing ones will follow later.

It contains two gradle modules. One plugin-api with two annotations Nameable and NamedComponent, which can be reused for plugins other than analysis.
And second analysis-plugin-api which contains analysis components (TokenFilterFactory, CharFilterFactory etc)

NamedComponent - used by plugin developer - indicates that a Nameable component will be registered under a given name.
Nameable - for analysis plugins it is only used by the stable analysis api designers (ES) - indicates that component have a name and should be declared with NamedComponent

additional tasks that will follow: #88980",https://github.com/elastic/elasticsearch/commit/bc4c6784dde77a395e4fef257e74aadc9689eda1
2929,2929.0,3103.0,elastic/elasticsearch,db5ddb321fc5c56b3152a83157ac4d9beab4c20d,"Synthetic source error on script loads (#88334)

* Source Lookup refactor with error on script synthetic source load

Refactors SourceLookup into a static source lookup used for most cases where we
access the source again after the fetch phase, and a re-loading lookup used by
scripts. The re-loading lookup now also fails with an error when we are using
synthetic source preventing silent failures or non-sensical behavior from
scripts.",https://github.com/elastic/elasticsearch/commit/db5ddb321fc5c56b3152a83157ac4d9beab4c20d
2930,2930.0,3104.0,elastic/elasticsearch,f7ee9e925d4d7d643378198740db46d01493f750,Refactor WaitForIndexColorStepTests (#89652),https://github.com/elastic/elasticsearch/commit/f7ee9e925d4d7d643378198740db46d01493f750
2931,2931.0,3105.0,elastic/elasticsearch,fb4addab65c5badc1623cc04e8895d0fb00d807b,"[ML] Refactor memory autoscaling decider into its own class (#89470)

This commit factors out the code that decides how much memory
is required during an autoscale request into its own decider
class. This prepares the ML autoscaling decider service to
accommodate more deciders for processors and storage in the
future.",https://github.com/elastic/elasticsearch/commit/fb4addab65c5badc1623cc04e8895d0fb00d807b
2932,2932.0,3106.0,elastic/elasticsearch,2b6fdfd819b9719c30a05fdb1ab986f7388cb431,"Refactor WildcardExpressionResolver for reusability (#89311)

This is a pure refactoring that shouldn't exhibit any behavior change.
The goal here is to specify the interface of
`WildcardExpressionResolver#innerResolve`, i.e. what are the properties
of its return value. The ultimate goal is to facilitate the replacement
of `IndicesAndAliasesResolver#resolveIndicesAndAliases`.",https://github.com/elastic/elasticsearch/commit/2b6fdfd819b9719c30a05fdb1ab986f7388cb431
2933,2933.0,3107.0,elastic/elasticsearch,51c6e6ba4309f426f95e7b3501d10cda3ba60b70,"Remove deprecated code from `ApiKeyService` (#89380)

Small refactor to remove use of deprecated functionality in
ApiKeyService.",https://github.com/elastic/elasticsearch/commit/51c6e6ba4309f426f95e7b3501d10cda3ba60b70
2934,2934.0,3108.0,elastic/elasticsearch,2c37c596d0337e0641c538119a610ca780e8e27f,"Allocation commands related refactoring (#89400)

This change includes:
* moving resetFailedAllocationCounter to a common place in RoutingNodes so that it is accessible from multiple allocation service implementation
* splitting ClusterRerouteTests#testClusterStateUpdateTask into 2 distinct test scenarios to avoid reusing the task",https://github.com/elastic/elasticsearch/commit/2c37c596d0337e0641c538119a610ca780e8e27f
2935,2935.0,3109.0,elastic/elasticsearch,892ad014ffcaacce928df9a40d82fb34fc051d00,"Refactor registering listeners out of constructors (#89265)

Classes affected:
- Fix LocalHealthMonitor
- Refactor HealthNodeTaskExecutor
- Refactor HealthMetadataService",https://github.com/elastic/elasticsearch/commit/892ad014ffcaacce928df9a40d82fb34fc051d00
2936,2936.0,3110.0,elastic/elasticsearch,264f09f3d571d1311eaa1aee2af22723a61736a1,"Script: Common base class for write scripts (#89141)

Adds `WriteScript` as the common base class for the write scripts: `IngestScript`, `UpdateScript`, `UpdateByQueryScript` and `ReindexScript`.

This pulls the common `getCtx()` and `metadata()` methods into the base class and prepares for the implementation of the ingest fields api (https://github.com/elastic/elasticsearch/issues/79155).

As part of the refactor, `IngestScript` now takes a `CtxMap` directly rather than taking ""sourceAndMetadata"" (`CtxMap`) and `Metadata` (from `CtxMap`).  There is a new `getCtxMap()` getter to get the typed `CtxMap`.  `getSourceAndMetadata` could have been refactored to do this, but most of the callers of that don't need to know about `CtxMap` and are happy with a `Map<String, Object>`.",https://github.com/elastic/elasticsearch/commit/264f09f3d571d1311eaa1aee2af22723a61736a1
2937,2937.0,3111.0,elastic/elasticsearch,92dc846ecc1f1f4ca333374ab9815f4089f32aae,"[ML] Extract ML tasks into a context class for use in autoscaling decider (#89167)

This commit is a refactoring that encapsulates together the ML tasks
that are considered when taking autoscaling decisions.",https://github.com/elastic/elasticsearch/commit/92dc846ecc1f1f4ca333374ab9815f4089f32aae
2938,2938.0,3112.0,elastic/elasticsearch,92852495335f7d065a022ce61ade835fb7cf8a4d,"Wrap code in new tracing contexts where required (#88920)

Part of #84369. Split out from #88443. This PR wraps parts of the code
in a new tracing context. This is necessary so that a tracing
implementation can use the thread context to propagate tracing headers,
but without the code attempting to set the same key twice in the thread
context, which is illegal. In order to avoid future diff noise, the wrapped
code has mostly been refactored into methods.

Note that in some places we actually clear the tracing context
completely. This is done where the operation to be performed should have
no association with the current trace context. For example, when
creating a new index via a REST request, the resulting background tasks
for the index should not be associated with the REST request in
perpetuity.",https://github.com/elastic/elasticsearch/commit/92852495335f7d065a022ce61ade835fb7cf8a4d
2939,2939.0,3113.0,elastic/elasticsearch,6f62d5bd4acddc7bb8cbf766769a91f5b4202a1b,"Refactor authentication handling for grant actions (#88944)

This PR establishes a cleaner contract between `TransportGrantAction`
and its sub-classes: it instruments checking grant authentication
instead of requiring this of sub-classes, and allows these to override
a handler method for successfully granted authentication. 

Closes #88636",https://github.com/elastic/elasticsearch/commit/6f62d5bd4acddc7bb8cbf766769a91f5b4202a1b
2940,2940.0,3114.0,elastic/elasticsearch,c7e10e70e16df8ac66f5f72995d6772faf5f1ce8,"Refactor WildcardExpressionResolver to better track usages of indices lookup (#89000)

This is a pure refactoring of the WildcardExpressionResolver.
The objective is to restrict access to the indices lookup through the context parameter only.
Eventually, Security is going to plug into the context and only show a restricted view of the
indices lookup, particular to the user context.",https://github.com/elastic/elasticsearch/commit/c7e10e70e16df8ac66f5f72995d6772faf5f1ce8
2941,2941.0,3115.0,elastic/elasticsearch,04635b52f3a69a1922adccbedff7b92238416d77,"Refactor IndicesPermission authorize method (#88662)

This commit is separating authorization check from computation of
index access control. The change is simply a preparation for allowing
the access control to be computed lazily.",https://github.com/elastic/elasticsearch/commit/04635b52f3a69a1922adccbedff7b92238416d77
2942,2942.0,3116.0,elastic/elasticsearch,de5d56a5d558f40207b32edeff17f89c6f0fa945,Fix errors in geo test introduced during refactoring (#88722),https://github.com/elastic/elasticsearch/commit/de5d56a5d558f40207b32edeff17f89c6f0fa945
2943,2943.0,3117.0,elastic/elasticsearch,140f0f5d4faa043d8c21d4ab84cd431e0418cf6c,[ML] refactor some nlp tokenizer internals (#88737),https://github.com/elastic/elasticsearch/commit/140f0f5d4faa043d8c21d4ab84cd431e0418cf6c
2944,2944.0,3118.0,elastic/elasticsearch,efd8ecf4257e1bbca9ff7faf644910e0d1e85dd6,"Consolidate user role resolution for API keys (#88542)

This refactor extracts the user role resolution logic for API keys from
ApiKeyGenerator. It plugs the shared resolver class into API key
creation and update handling. It also removes ApiKeyGenerator since
the class is now trivial. A new REST base handler for API key-related
REST actions ensures that the API key service is enabled before we
perform role resolution, which was the only other responsibility left
to ApiKeyGenerator.",https://github.com/elastic/elasticsearch/commit/efd8ecf4257e1bbca9ff7faf644910e0d1e85dd6
2945,2945.0,3119.0,elastic/elasticsearch,001fef1d348fa896dd0236cc5982ff3c93a7e105,Refactor json parsing in immutable handlers (#88492),https://github.com/elastic/elasticsearch/commit/001fef1d348fa896dd0236cc5982ff3c93a7e105
2946,2946.0,3120.0,elastic/elasticsearch,ca7c21fce6ea6eaf819d423a6308f49d0df8b347,"Refactor tasks to improve APM support (#87917)

Part of #84369. Split out from #87696. Rework how some work is executed
by creating child tasks for them, so that when traced by APM, it results
in more meaningful parent and child tasks in the UI. It also improves
how Elasticsearch is modelling the work.",https://github.com/elastic/elasticsearch/commit/ca7c21fce6ea6eaf819d423a6308f49d0df8b347
2947,2947.0,3121.0,elastic/elasticsearch,8113c6fa6b3cf55495f9b09e061d0db592b8e1bd,"Refactor various ParameterizedMessage usages into String.format (#87603)

ParameterizedMessage is part of log4j api and should not be used
in places where a lambda and String.format would be enough.

This commit is the last batch of refactoring to get rid of ParameterizedMessage
in ES codebase and consists of various, not related usages.

relates #86549",https://github.com/elastic/elasticsearch/commit/8113c6fa6b3cf55495f9b09e061d0db592b8e1bd
2948,2948.0,3122.0,elastic/elasticsearch,b123feba00251c11794c3e717df34f7a82697a20,"Refactor ParametrizedMessage.getFormattedMessage into Strings.format (#87324)

ParametrizedMessage is part of log4j api and should not be used
in places where a simple String.format would be enough.
Many of usages like this are message formatting for exceptions being
thrown.

relates #86549",https://github.com/elastic/elasticsearch/commit/b123feba00251c11794c3e717df34f7a82697a20
2949,2949.0,3123.0,elastic/elasticsearch,a308f0c7bbf9346fc90c4a970408b87e1014ab86,"Move test-only code from RoutingNode to tests module (#87537)

With recent refactoring we only instantiate these with an empty map in production
and mutate afterwards. We can do the same in tests and save the test only code
in server.",https://github.com/elastic/elasticsearch/commit/a308f0c7bbf9346fc90c4a970408b87e1014ab86
2950,2950.0,3124.0,elastic/elasticsearch,705b27ae3b7274f9c47d5b8dbb8cc0d4d3e206b9,"Refactor ParameterizedMessage used in lambda and casted to Supplier (#87156)

This is a result of structural search/replace in intellij. This only affects log methods with a signature
logger.info((Supplier) ()-> ParametrizedMessage) logger.info((Supplier) ()-> ParametrizedMessage, Throwable)

relates #86549",https://github.com/elastic/elasticsearch/commit/705b27ae3b7274f9c47d5b8dbb8cc0d4d3e206b9
2951,2951.0,3125.0,elastic/elasticsearch,e9b0fcd5a320938ffc90d8a030abad6717e8521a,"[ML] Split node load counts by job type (#87172)

This refactoring is in preparation to remove native inference jobs
from the jobs that account towards the max open jobs limit.",https://github.com/elastic/elasticsearch/commit/e9b0fcd5a320938ffc90d8a030abad6717e8521a
2952,2952.0,3126.0,elastic/elasticsearch,d0b9f00596db9d71f322b420554043ff1902481c,"[Refactor] Remove nearly-redundant method from SystemIndices (#87093)

The getProductSystemIndexMetadataPredicate was only used once, and could be
replaced by the very similar method getProductSystemIndexNamePredicate. This
not only simplifies the public API, but removes the cognitive load of
understanding how the two methods differed.

Co-authored-by: Elastic Machine <elasticmachine@users.noreply.github.com>",https://github.com/elastic/elasticsearch/commit/d0b9f00596db9d71f322b420554043ff1902481c
2953,2953.0,3127.0,elastic/elasticsearch,86142aad84a279755901e1f8413d2de5cf9889f7,"Refactor log4j supplier of ParameterizedMessage with throwable (#87022)

This is a result of structural search/replace in intellij. This only affects log methods with a signature
logger.info(Supplier<?>, Throwable) where level could be info/debug etc and supplier argument is in a form of
()-> new ParameterizedMessage

relates #86549",https://github.com/elastic/elasticsearch/commit/86142aad84a279755901e1f8413d2de5cf9889f7
2954,2954.0,3128.0,elastic/elasticsearch,00b3721108d749dcaf88ee187a61e66b21006060,"Dry up collection writing to StreamOutput (#86386)

Small weekend project around automated refactoring:
We have endless duplication here, drying up some of it.",https://github.com/elastic/elasticsearch/commit/00b3721108d749dcaf88ee187a61e66b21006060
2955,2955.0,3129.0,elastic/elasticsearch,dbf37c9a4c2c01747f37e4ae75b491dab045894b,"[Refactor] Use Lists instead of Maps for SystemIndices features (#87004)

The SystemIndices constructor should take a list instead of a map as an
argument so that we can guarantee that the map we use for feature lookups is
keyed on the feature name.

We also provide some new getter methods so that calling code does not have to
handle the map directly.",https://github.com/elastic/elasticsearch/commit/dbf37c9a4c2c01747f37e4ae75b491dab045894b
2956,2956.0,3130.0,elastic/elasticsearch,2c84b40b922b64cf9651d5ac8a69d84c0df9c245,"[Refactor] Move classpath plugins to MockNode (#86914)

We only use classpath plugins in tests, so we should move code handling them to
our test framework. This PR introduces a new MockPluginsService in our test
framework. The MockPluginsService is constructed with a list of classpath
plugins that it will load by reflection. As before, these classpath plugins
won't have their own classloaders.

We have to construct the pluginsService early in the Node class constructor so
that MockNode methods can access it, but we have to do it after Node updates
its Settings argument. Therefore, instead of passing in classpath plugins as a
paramater, we are passing in a constructor function that takes a Settings
argument and returns a PluginsService. This lets us remove the classpath plugin
list from the production code entirely.

The MockPluginsService delegates almost everything to a real PluginsService,
overriding only the protected plugins() method and the info() method.

This commit also changes the PluginDescriptor.equals() method. We have long had
a todo comment for removing the version comparison and making two plugin
descriptors equal if and only if they have the same name. The original commit
that introduced version comparison between plugin descriptors was:

    abf9a866788b2fab855b50728670e2aa2dd42c5a

The change did not seem to have a specific purpose in that commit, and no tests
guaranteed the behavior.

Closes #86635",https://github.com/elastic/elasticsearch/commit/2c84b40b922b64cf9651d5ac8a69d84c0df9c245
2957,2957.0,3131.0,elastic/elasticsearch,2e992fd4eb1e262a63a57b780400f3de4811d1e5,"Add access to internal representation of geo_point doc values (#86800)

Refactors GeoPoint docvalues wrappers to expose the internal SortedNumericDocValues",https://github.com/elastic/elasticsearch/commit/2e992fd4eb1e262a63a57b780400f3de4811d1e5
2958,2958.0,3132.0,elastic/elasticsearch,da6c79ef195df73994d84a3c9c086ef8bfdccf65,"[Refactor] Extract method for mandatory plugins check (#86906)

This commit factors out a checkMandatoryPlugins method
so we can keep test coverage without using the classpath
plugin code path, which will soon be moved to MockNode.

I also couldn't resist using set logic instead of for-loop list
building for the check itself.",https://github.com/elastic/elasticsearch/commit/da6c79ef195df73994d84a3c9c086ef8bfdccf65
2959,2959.0,3133.0,elastic/elasticsearch,cf3737a2d5ba83e97edb9917e202e7f0db5eb270,"[Refactor] Move plugin setting merge method from PluginsService to Node (#86891)

The PluginsService#updatedSettings method was only used once in the Node constructor, so it makes sense to make that a utility method on the Node class. We make it testable by factoring out the PluginsService, instead providing a map of names to plugins as an argument.

This commit also adds test coverage to verify that we reject two plugins with the same name when loading from disk.",https://github.com/elastic/elasticsearch/commit/cf3737a2d5ba83e97edb9917e202e7f0db5eb270
2960,2960.0,3134.0,elastic/elasticsearch,7fda2744f53da6320ee15e862d3f7751f2be614a,"Use default hash setting helper in ApiKeyService (#86845)

Small refactor to re-use the default stored hash setting helper. 

Missed this in #86146.",https://github.com/elastic/elasticsearch/commit/7fda2744f53da6320ee15e862d3f7751f2be614a
2961,2961.0,3135.0,elastic/elasticsearch,f61edf5931761dbf1b29d5167caed6a09a6a2e10,"Simplify CellIdSource classes used in GeoGrid aggregations (#86806)

small refactor to share some common code.",https://github.com/elastic/elasticsearch/commit/f61edf5931761dbf1b29d5167caed6a09a6a2e10
2962,2962.0,3136.0,elastic/elasticsearch,fd99a502eeeca1035dea06f1047bab22deab929c,"Fix compilation for (#86591)

The above PR was merged concurrently to another one that refactored
a method name.",https://github.com/elastic/elasticsearch/commit/fd99a502eeeca1035dea06f1047bab22deab929c
2963,2963.0,3137.0,elastic/elasticsearch,cb278f2b4d4ad605ae8609f0724bc3e2456e0080,"[Refactor] Make PluginBundle package-private (#86863)

Our plugin loading code uses the PluginBundle class to describe a plugin on
disk. This should be an implementation detail of the plugin loading code, and
not part of the API shared with the plugin CLI.

* Refactor to hide internal code from Plugin CLI
* Add javadoc",https://github.com/elastic/elasticsearch/commit/cb278f2b4d4ad605ae8609f0724bc3e2456e0080
2964,2964.0,3138.0,elastic/elasticsearch,78644ad834f34e9924482186859ba89f967d926c,"[Refactor] Flexible general actions over plugins in PluginsService (#86642)

PluginsService had a handful of methods that simply called a method from
the Plugin superclass for every plugin in the plugin service. Here, we
refactor this logic out to the call sites by adding flexible, generic
methods for applying actions to all plugins.

We also find places in the Node class that were using
filterPlugin(Plugin.class) to accomplish the same thing, and replace
those usages with these new methods.",https://github.com/elastic/elasticsearch/commit/78644ad834f34e9924482186859ba89f967d926c
2965,2965.0,3139.0,elastic/elasticsearch,1579b64191b3c41328e23aef312294c0b14a128f,"Refactor code to avoid JDK bug: JDK-8285835 (#86614)

Refactor code in DateHistogramAggregator$FromDateRange::adapt
to avoid OpenJDK C2 compiler crash with JDK 18.",https://github.com/elastic/elasticsearch/commit/1579b64191b3c41328e23aef312294c0b14a128f
2966,2966.0,3140.0,elastic/elasticsearch,65d9098a1d658f10067b1741f94bf466c90dcf77,"Refactor ParameterizedMessage usages in action/admin/cluster/* to use message supplier #86576

relates #86549",https://github.com/elastic/elasticsearch/commit/65d9098a1d658f10067b1741f94bf466c90dcf77
2967,2967.0,3141.0,elastic/elasticsearch,89825eda6f82cf54187244b9fd01bf3f02b537e4,"[Refactor] Use records instead of tuples in PluginService (#86365)

* Refactor: use records instead of tuples to hold plugins, pluginInfo, and classloaders",https://github.com/elastic/elasticsearch/commit/89825eda6f82cf54187244b9fd01bf3f02b537e4
2968,2968.0,3142.0,elastic/elasticsearch,286cb2b26c5dd37d6cca8973fa684d885c1f65e9,"[Test] Replace removed User methods (#86422)

Another refactor leftover.

Relates: #86246 Resolves: #86421",https://github.com/elastic/elasticsearch/commit/286cb2b26c5dd37d6cca8973fa684d885c1f65e9
2969,2969.0,3143.0,elastic/elasticsearch,a29bd8d7ee549afc33834424f03a60fbc682658d,"Refactor tests to check only relevant tasks (#86351)

The tests affected in this PR are expecting that the tasks related to the test are the only tasks running. This assumption will not hold soon. For this reason, we refactor the tests so that the assertions are handling only the tasks that are related to the test.

There is only one exception BaseMlIntegTestCase, in this case it was easier to exclude unrelated tasks than to include all the possible tasks created as a side effect of the ML jobs. The constant UNRELATED_TASKS enabled developers to add tasks that need to be excluded, for example the new task we are introducing in #86131.",https://github.com/elastic/elasticsearch/commit/a29bd8d7ee549afc33834424f03a60fbc682658d
2970,2970.0,3144.0,elastic/elasticsearch,cc7a5a872c58aa599c5bc636145a81b1b4b409c1,"Internalise run-as user and simplify the regular User class (#86246)

Today the run-as information is spread between User (authenticatedUser) and
Authentication (lookup realm). They have to be configured consistently to work
correctly. Previously there was also no inherent logic to ensure the
consistency. Recent refactoring of Authentication class has made the situation
better by favour Authentication creation with dedicated convenient methods over
free-for-all constructors. #86206 is the ongoing PR that will finally remove
public access of Authentication constructors. Now that the Authentication class
is being tightly controlled, it makes possible to clean-up the User class.
Specifically, the run-as information is already provided by the Authentication
class, there is no need for the User class to also keep track of it. In fact,
the way User class tracking the authenticating user with an inner user is less
straightforward and not friendly to serialisation. Also, conceptually run-as is
an information at Authentication level instead of User level.

This PR refactors the User class so that it no longer keeps track of run-as
information so that there is a single consistent way to check whether an
Authentication object is run-as. The essential changes are:

* Removes User.isRunAs() method 
* Removes User.authenticatedUser() method and its backing instance variable 
* Removes all User constructors that take authenticatedUser as an argument 
* Adds a new private RunAsUser class inside Authentication 

Note that this RunAsUser class is not really necessary in long term, the plan
is to remove it in the later refactoring of Authentication class (where Subject
variable and methods will become primary over the current User).  It is added
mostly to make the refactoring easier and reduce the change to how things work
conceptually. This class is not exposed and there should be no need to use this
class outside of Authentication itself. This tight scope should make it
relatively easy to remove it later.

Relates: #86206 
Relates: #80117",https://github.com/elastic/elasticsearch/commit/cc7a5a872c58aa599c5bc636145a81b1b4b409c1
2971,2971.0,3145.0,elastic/elasticsearch,6e0a0f93a8b16b7be0ea42dd9b8e9a8fec1e80c3,"Less jank in after-key parsing for unmapped fields (#86359)

This addresses a bug where specifying an integer after key on an unmapped field for a terms composite source caused the shard to error.  

Resolves #85928

The after-key parsing is pretty weird, and there are probably more bugs there. I did not take the opportunity to refactor the whole thing, but we should. This fixes the immediate problem by treating after keys as bytes refs when we don't have a field but think we want a keyword. We were already doing that if the user asked for a missing bucket, this just extends the behavior in the case that we don't.

Long term, the terms Composite source (and probably other Composite sources) should have specializations for unmapped fields. That's the direction we want to take aggs in general.",https://github.com/elastic/elasticsearch/commit/6e0a0f93a8b16b7be0ea42dd9b8e9a8fec1e80c3
2972,2972.0,3146.0,elastic/elasticsearch,210ce866636aee057c9821239f8136e2ce5327f3,"[Test] Fix authentication creation in example project (#86385)

In #86206, we closed down Authentication constructors to favour
dedicated convenient methods for instantiation. The constructor usages
in the example project were however left out (another refactor fallout).

Relates: #86206
Resolves: #86378",https://github.com/elastic/elasticsearch/commit/210ce866636aee057c9821239f8136e2ce5327f3
2973,2973.0,3147.0,elastic/elasticsearch,bbd5c84434784c3adf47d9d90396d5154e49166a,"Locking down Authentication constructors (#86206)

This PR removes one constructor from Authentication and change
the visibility of the other one to private. This means Authentication
object must now be created using dedicated convenient methods, e.g.
newRealmAuthentication. This approach helps maintain the internal logic
of Authentication object more easily and correctly. It also allows
further refactoring for Authentication internals easier.

Technically, the constructor with StreamInput argument is still public.
But this one is special enough that we can leave it for now and come
back to it later if necessary.

Relates: #85905
Relates: #86020
Relates: #86054",https://github.com/elastic/elasticsearch/commit/bbd5c84434784c3adf47d9d90396d5154e49166a
2974,2974.0,3148.0,elastic/elasticsearch,56c1b01a41e0412df9d43ebf198fec507585b7d5,[Cloud Security] refactor cloud security package policy name (#86268),https://github.com/elastic/elasticsearch/commit/56c1b01a41e0412df9d43ebf198fec507585b7d5
2975,2975.0,3149.0,elastic/elasticsearch,2a1c317c78ec16eb8a684ca6237523ecc5994ac3,"Revert ""Refactor Cardinality Aggregation (#85840)"" (#86237)

This reverts commit 406dd9320ada194f40b112bf34bf21fee8faba0c.",https://github.com/elastic/elasticsearch/commit/2a1c317c78ec16eb8a684ca6237523ecc5994ac3
2976,2976.0,3150.0,elastic/elasticsearch,ea07e9dc09bdc0ceff9a117bd3db17a20277d61f,"[Test] Ensure correct randomization for API key metadata (#86218)

Similar to #86188, the test failure #86211 is also caused by incorrect
randomziation due to refactoring.  In this case, the API metadata was
expected to be null in some cases.  This PR fixes it by ensuring the
correct randomisation.

Resolves: #86211",https://github.com/elastic/elasticsearch/commit/ea07e9dc09bdc0ceff9a117bd3db17a20277d61f
2977,2977.0,3151.0,elastic/elasticsearch,1d9c5d730284fb310215c5fc8d474b098e68cd75,"Refactor bounded geogrid aggregations (#86120)

This commit refactors the implementation of bounded GeoGrid aggregation into a GeoHashBoundedPredicate and a GeoTileBoundedPredicate to compute bin validity.",https://github.com/elastic/elasticsearch/commit/1d9c5d730284fb310215c5fc8d474b098e68cd75
2978,2978.0,3152.0,elastic/elasticsearch,611d83f48777870f69191eb67720b99ad18d589d,"Default hashing algo setting refactor (#86146)

Small refactor that removes code duplication in constructing the default
hashing algorithm setting between password and token setting. 

Also removes obsolete test cluster configuration tweak introduced in
#86079. This configuration fix is superseded by #86171.",https://github.com/elastic/elasticsearch/commit/611d83f48777870f69191eb67720b99ad18d589d
2979,2979.0,3153.0,elastic/elasticsearch,7a3dd5ae46293b806e1acd32dea6987ce7110279,"Merge AuthenticationContex into Authentication (#85255)

This PR removes the AuthenticationContext class introduced in #80926 and
merges its functions into Authentication.

It becomes more apparent that the most useful refactoring in #80926 is
the new Subject class, which is also what AuthenticationContext provides
most of its value. The AuthenticationContext is essentially just a thin
wrapper of two subjects which represents the existing Authentication
object in a more structured format. The original plan was to replace
Authentication with AuthenticationContext. However, it has practical
challenges that the usage of Authentication is too wide spread. It's
hard to have a series of scoped changes to replace it. Therefore the new
plan is to stick with Authentication, agumenting it with subjects
similar to what AuthenticationContext has and remove
AuthenticationContext. This PR also deprecates methods that should be
replaced by methods of Subjects. In future, the plan is to remove the
deprecated methods, also rework the User class so it does not need
nest another User to represent run-as (which is another main reason for
the original refactor #80926). Overall, the new plan makes it easier to
spread the work in a few more tightly scoped PRs while achieving the
same original goal.",https://github.com/elastic/elasticsearch/commit/7a3dd5ae46293b806e1acd32dea6987ce7110279
2980,2980.0,3154.0,elastic/elasticsearch,4ca8a1ae3bf01e2609cdc7c91d8397aab6369af8,"Support 'GeoJSON' in CartesianPoint for 'point' (#85442)

* Support 'GeoJSON' in CartesianPoint

This is done by using a common parser with GeoPoint.

In addition, we refactored away the pattern of creating the point high
in the stack and modifying it deep in the stack. Instead, we create the
points low in the stack. This leads to much simpler code. There are a
few cases of increased object creation, but they seem very slight:

- The GeoBoundingBox class uses it to extract the bounds
- The GeoPointFieldScript used a shared point for repeated use

* Added tests to assert expected errors are thrown

Particularly to verify that CartesianPoint does not accept 'geohash'",https://github.com/elastic/elasticsearch/commit/4ca8a1ae3bf01e2609cdc7c91d8397aab6369af8
2981,2981.0,3155.0,elastic/elasticsearch,965b6dc734f11a6ce760c9ed4845a5fc1a5b3ff2,"refactor array part into a BytesRefArray which can be serialized and … (#85826)

refactor BytesRefHash and extract BytesRefArray. The BytesRefArray can be serialized for communication.

Serialization/Deserialization: For communication, get the BytesRefsArray. On the receiver side, serialize the BytesRefsArray and re-create the BytesRefHash. The added constructor uses the given BytesRefsArray and re-creates the hashtable part.",https://github.com/elastic/elasticsearch/commit/965b6dc734f11a6ce760c9ed4845a5fc1a5b3ff2
2982,2982.0,3156.0,elastic/elasticsearch,406dd9320ada194f40b112bf34bf21fee8faba0c,"Refactor Cardinality Aggregation (#85840)

Move more of the strategy decision making for which Cardinality collector to use into the factory, and also the ValuesSourceRegistry.  Lays the ground work for future improvements to Cardinality.

Co-authored-by: Elastic Machine <elasticmachine@users.noreply.github.com>",https://github.com/elastic/elasticsearch/commit/406dd9320ada194f40b112bf34bf21fee8faba0c
2983,2983.0,3157.0,elastic/elasticsearch,4892fa7a606d70448acb428e3519aea048219479,"Better error message for run-as denials  (#85501)

Users can impersonate i.e. run an action on behalf of other users via
the run-as feature, provided they have the right privileges. For user A
running as user B, a run-as can be denied either because A does not
have permission to run as B or because B does not have permission to
perform the given action. For the former (missing run as permission) we
don't clearly identify that that was the cause of an auth failure. This
PR refactors how we construct denial messages, and provides a more
concrete error message when a run as is denied due to missing run as
permissions.

Closes #72904",https://github.com/elastic/elasticsearch/commit/4892fa7a606d70448acb428e3519aea048219479
2984,2984.0,3158.0,elastic/elasticsearch,28a008a43d170c3e2deeeacdc6fb0d0b234d6891,"Reduce cli tests calling main directly (#85855)

The main method of Command is not normally called by cli tests. Instead
they call the execute helper which calls mainWithoutErrorHandling.
Sometimes, though, it is desirable to test the top level behavior. This
commit cleans up the base class tests to not call main directly. This
will help with future refactorings to change the signature of main, so
that less uses need to be changed.",https://github.com/elastic/elasticsearch/commit/28a008a43d170c3e2deeeacdc6fb0d0b234d6891
2985,2985.0,3159.0,elastic/elasticsearch,a372b543f5b14a11c4b970a81a9dfadc25a3e1f9,"Enforce external id uniqueness during DesiredNode construction (#84227)

This commit introduces some small refactorings to improve the desired
nodes codebase.

- DesiredNode must contain a valid external id, otherwise it cannot
  be built.
- DesiredNodes now stores desired nodes as a map that uses desired
  nodes external id as the key. This fixes a small bug around
  idempotent updates, as before we were using a list and comparing
  the desired nodes using that list.",https://github.com/elastic/elasticsearch/commit/a372b543f5b14a11c4b970a81a9dfadc25a3e1f9
2986,2986.0,3160.0,elastic/elasticsearch,f98631a85d59d64c3c47596df85154c564d1b420,"Remove legacy versioned logic for DefaultSystemMemoryInfo (#85761)

The machine dependent heap logic uses SystemMemoryInfo to determine how
much total memory is available on the system. The default implementation
delegates to Java's MX bean to get OS stats. In the past this was only
available in Java 14, but since the main branch is now on Java 17, we do
not need this logic.

This commit refactors the default implementation to no longer need the
version check, and to also remove unnecessary forbidden api suppressions
for the entire class, instead using a LongSupplier for the memory to
isolate the platform specific bean references.

relates #85758",https://github.com/elastic/elasticsearch/commit/f98631a85d59d64c3c47596df85154c564d1b420
2987,2987.0,3161.0,elastic/elasticsearch,3d3eb316379729e8b2e29b8adae94e70c5e8b12e,"Cleanup SystemIndexMigration tests (#84281)

A follow up after #84192

refactor the static state in TestPlugin to be an instance
refactor assertions to use hamcrest
remove Simple from methods as it is not meaningful
refactor xcontent tests to support unknown fields
closes #84245",https://github.com/elastic/elasticsearch/commit/3d3eb316379729e8b2e29b8adae94e70c5e8b12e
2988,2988.0,3162.0,elastic/elasticsearch,6020de5910d8a6d755ceecc078b69b82ded7bce4,"Refactor security classes for restricted indices (#85050)

This commit introduces a `RestrictedIndices` class that is a thin
wrapper around the existing `Automaton` that is used to represent the
set of restricted indices. This new class is used in all places where
security needs to be aware of, or test for, restricted indices.

The `RestrictedIndicesNames` class has been removed, with some of its
members moved to `SecuritySystemIndices` and others moved to
`TestRestrictedIndices`",https://github.com/elastic/elasticsearch/commit/6020de5910d8a6d755ceecc078b69b82ded7bce4
2989,2989.0,3163.0,elastic/elasticsearch,0ec229050e5bebdb82a0a273076aae52e56ba520,"Move yaml rest test case to separate test lib (#84835)

The ESClientYamlSuiteTestCase is used to run yaml tests throughout
Elasticsearch. It utilizes the low level rest client in sniffing for
nodes, but the sniffer is not needed anywhere else in the test
framework.

This commit creates a new project, `:test:rest-runner` which is meant to
house the rest test running infrastructure. This has two purposes. First
is to remove the sniffer from the test framework dependencies, because
it transitively depends on Jackson. Second is to setup the runner for
future refactorings where it could be made to not depend on the entire
test framework, though how that could work is left for the future.",https://github.com/elastic/elasticsearch/commit/0ec229050e5bebdb82a0a273076aae52e56ba520
2990,2990.0,3164.0,elastic/elasticsearch,2f0733d1b5dc9458ec901efe2f7141742d9dfed8,"Fix can access resource checks for API Keys with run as (#84277)

This fixes two things for the ""can access"" authz check: * API Keys
running as, have access to the resources created by the effective run as
user * tokens created by API Keys (with the client credentials) have
access to the API Key's resources

In addition, this PR moves some of the authz plumbing code from the
Async and Scroll services classes under the Security Context class (as a
minor refactoring).",https://github.com/elastic/elasticsearch/commit/2f0733d1b5dc9458ec901efe2f7141742d9dfed8
2991,2991.0,3165.0,elastic/elasticsearch,078bea2d048e3ea09b0e19387ede6d6f6590d8d2,[TRANSFORM] Fix upgrade test after refactor (#84328),https://github.com/elastic/elasticsearch/commit/078bea2d048e3ea09b0e19387ede6d6f6590d8d2
2992,2992.0,3166.0,elastic/elasticsearch,35c9258e46c4865efc0efeeec1beaadeee9469ec,"Refactor FilterXContentParser and DelegatingXContentParser (#83457)

We have two implementations of XContentParser that both delegate all of its methods to a delegate, either an inner parser provided at construction (FilterXContentParser) or a more dynamic variant that is returned by overriding the delegate method (DelegatingXContentParser).

Effectively the two classes do exactly the same, the only difference being how the delegate parser is provided. While these two are two separate implementations, they could inherit from each other.

With this change we make FilterXContentParser be the previous DelegatingXContentParser, that allows to override the delegate method, and we introduce a new FilterXContentParserWrapper that takes the fixed delegate as a constructor argument.

Additionally, XContentSubParser is rewritten to extend FilterXContentParserWrapper.",https://github.com/elastic/elasticsearch/commit/35c9258e46c4865efc0efeeec1beaadeee9469ec
2993,2993.0,3167.0,elastic/elasticsearch,ac3d0beaf00e3b9b6f95fc889b6783e627609705,"[ML] refactoring internal tokenization logic for NLP (#83835)

This simplifies the internal logic used to pass tokenization results around while streamlining building the request sent to the model.

This helps lay some of the ground work for windowing as collapsing request building && token results will be required (as a single sequence could result in a batch request).

Additionally, many of the intellij warnings are addressed and code is modernized (i.e. taking advantage of records)",https://github.com/elastic/elasticsearch/commit/ac3d0beaf00e3b9b6f95fc889b6783e627609705
2994,2994.0,3168.0,elastic/elasticsearch,505b0d9451a05d7dc8b9572b7a387f78b53ddb3f,"refactor health service creation (#83831)

This commit extracts health service creation into a separate method in
order to reduce overall service wiring method complexity",https://github.com/elastic/elasticsearch/commit/505b0d9451a05d7dc8b9572b7a387f78b53ddb3f
2995,2995.0,3169.0,elastic/elasticsearch,7293f47c9d24c52cbcf49883e4ee13e1af7d27d1,"Speed up Name Collision Check in Metadata.Builder (#83340)

Once either indices, datastreams or their aliases become very numerous, these
checks of adding everything to a fresh set and then retaining collisions
become very expensive. Slightly adjusted the logic to just collect collisions
instead to save endless set adding.
Also refactored the logic a little to make it easier to profile the time spent
on these validations and extraced some cold-paths for maybe a minor speedup.",https://github.com/elastic/elasticsearch/commit/7293f47c9d24c52cbcf49883e4ee13e1af7d27d1
2996,2996.0,3170.0,elastic/elasticsearch,aa2affea548fd2d687d16839d8c8407c20d02397,"Introduce dedicated interface for health indicator details. (#83417)

This change introduces dedicated interface for health indicator details
to simplify finding usages and potential refactorings.",https://github.com/elastic/elasticsearch/commit/aa2affea548fd2d687d16839d8c8407c20d02397
2997,2997.0,3171.0,elastic/elasticsearch,a03cd922079f55961b28afa8c8a3766924890850,"refactor: use the original from/to values when creating the bucket (#83262)

The range bucket values should always be set to the original `from`
and `to` values. These values are the ones used by the serialisation
logic and are the values the client expects in the response.

Also, the key for a Range is made optional, avoiding unnecessary
serialisation and deserialisation and the actual key generation
happens only if required (calling  'getKey' or 'getKeyAsString'
directly or at key serialisation time).
A Range does not actually need a key to accomplish its purpose ('from'
and 'to' are the only required parameters), other than propagating a
user-specified key for the bucket collecting documents for that range.",https://github.com/elastic/elasticsearch/commit/a03cd922079f55961b28afa8c8a3766924890850
2998,2998.0,3172.0,elastic/elasticsearch,51c1f27b94d2e8bb55a76b07027a535267f895d6,"Make AbstractDiffable an interface (#83002)

* AbstractDiffable doesn't have any state, so it doesn't have to be an abstract class. We represent it as an interface which support default methods since Java 8. The advantage of such refactoring is to allow the classes which extend AbstractDiffable to be represented as Java records.

* Rename it SimpleDiffable",https://github.com/elastic/elasticsearch/commit/51c1f27b94d2e8bb55a76b07027a535267f895d6
2999,2999.0,3173.0,elastic/elasticsearch,002f506de8dba77f50442a418bd08cf187311a8b,"Construct dynamic updates directly via object builders (#81449)

Currently, dynamic updates are built in the DocumentParser using a
stack of possibly-dynamic object mappers. This logic, spread across
a number of static methods, frequently assumes that the parents of
a mapper can be found by splitting its name on dots, an assumption
that will fail to hold once we allow objects to hold fields that have dots
in their names.

As a pre-requisite for the dots in field names effort, this commit refactors
the construction of dynamic updates into object mapper builders. Now,
to build an update, we start with a new dynamic root builder, and then
call addUpdate on it with each dynamically built mapper in turn. The
builder will examine the mapper and see if it can just add it to its own
set of mappers directly; and if not, it will retrieve or build an appropriate
intermediate object mapper and recursively call addUpdate on it with
the original mapper.

As a side-effect of this change, ObjectMapper itself no longer updates
its map of child mappers except during construction via merging, and so
we can safely replace CopyOnWriteHashMap here.",https://github.com/elastic/elasticsearch/commit/002f506de8dba77f50442a418bd08cf187311a8b
3000,3000.0,3174.0,elastic/elasticsearch,cce5ad2e4fdfe20fdce0972a1e20a9c4a722a75a,"Migrate to Java16 records (part 2) (#82914)

Try to represent immutable data with Java records introduced in JEP 395

Convert only existing immutable classes, no ""POJO with setters to a record"" refactorings.",https://github.com/elastic/elasticsearch/commit/cce5ad2e4fdfe20fdce0972a1e20a9c4a722a75a
3001,3001.0,3175.0,elastic/elasticsearch,805cd39147740f31eb5adabc3e4581a94718ead2,"ClusterStateTaskListener usage refactoring in MasterServiceTests (#82869)

Today node removal tasks executed by the master have a separate
ClusterStateTaskListener to feed back the result to the requester.
It'd be preferable to use the task itself as the listener.",https://github.com/elastic/elasticsearch/commit/805cd39147740f31eb5adabc3e4581a94718ead2
3002,3002.0,3176.0,elastic/elasticsearch,febf22c56bde08fd066b428410dc72d69cda08b8,"refactor custom metadata integration test (#82714)

currently, custom metadata integration test combines 3-4 test cases in
a single test method. This change split the test into separate scenarios
and removes code duplication.",https://github.com/elastic/elasticsearch/commit/febf22c56bde08fd066b428410dc72d69cda08b8
3003,3003.0,3177.0,elastic/elasticsearch,74db5c11768fbe8cdd97c59f3576f701e2574e1d,"[ML] ML usage inference ingest stats should be calculated per processor (#82377)

During the refactoring in #82259 there was an accidental change reporting
ingest stats for processors using the total ingest stats per model instead
of the ingest stats of each model's processors. This commit corrects that mistake.",https://github.com/elastic/elasticsearch/commit/74db5c11768fbe8cdd97c59f3576f701e2574e1d
3004,3004.0,3178.0,elastic/elasticsearch,353117244e661653aa49dcdb67d149245c7be464,"optimize duplicated code block in MetadataUpdateSettingsService (#82048)

Optimize duplicated code block in MetadataUpdateSettingsService

This change also introduces a new unit test for the refactored function.",https://github.com/elastic/elasticsearch/commit/353117244e661653aa49dcdb67d149245c7be464
3005,3005.0,3179.0,elastic/elasticsearch,08eb1a7a9415606e162ac69befeae1f8d5ddbae7,"[ML] Refactor ML usage action to reuse the trained model stats API (#82259)

Whilst collecting inference usage info we can reuse the trained model
stats API instead of manually collecting information about ingest nodes, etc.",https://github.com/elastic/elasticsearch/commit/08eb1a7a9415606e162ac69befeae1f8d5ddbae7
3006,3006.0,3180.0,elastic/elasticsearch,e467424043b6b97c40c1c010f9dae9f165bbafbe,"Add JwtRealmSettings (#81680)

Add JwtRealmSettings

Include unit tests and realm security settings documentation. Covers all settings except client authentication mTLS option, and HTTP proxy option.

Refactor Open ID Connect realm to reuse ClaimSetting.java and ClaimParser.java for JWT realm.",https://github.com/elastic/elasticsearch/commit/e467424043b6b97c40c1c010f9dae9f165bbafbe
3007,3007.0,3181.0,elastic/elasticsearch,68bc54899dfc5e0784c316dc0c55867cece16d04,"revert multiline string refactor in JsonThrowablePatternConverterTests (#81815)

the test relies on line separator which is platform specific and use of
multiline string can cause it to fail in Windows

closes #81803
closes #81810",https://github.com/elastic/elasticsearch/commit/68bc54899dfc5e0784c316dc0c55867cece16d04
3008,3008.0,3182.0,elastic/elasticsearch,89fdf476ce98cad876e403b529820caf3c517cda,Refactor ingest to use instanceof pattern matching where possible (#81656),https://github.com/elastic/elasticsearch/commit/89fdf476ce98cad876e403b529820caf3c517cda
3009,3009.0,3183.0,elastic/elasticsearch,5b9ce9e8201af7dc29bbe3638cb9b1513981f978,"Remove dead code from same-shard decider (#81520)

Today the same-shard allocation decider falls back to checking the
hostname if the node has no host address. In practice nodes will always
have an address so the fallback is dead code. This commit removes that
dead code.

Relates #80702 which will add the ability to distinguish nodes by
hostname regardless of whether they have an address or not, and #80767
which optimizes this area of code - this refactoring should make the
optimization simpler.",https://github.com/elastic/elasticsearch/commit/5b9ce9e8201af7dc29bbe3638cb9b1513981f978
3010,3010.0,3184.0,elastic/elasticsearch,c7aa2b5c2f2483435341d1862ca002d07c0bedc0,"Refactor CompositeRolesStore for separation of concerns (#80926)

The process of role resolving is to build the Role object from an
Authentication object. The high level steps of this process is as the follows:

1. Locate the role reference for the Authentication, e.g. for regular user,
this means a collection of role names.

2. Retrieve the role descriptors for the role reference, e.g. search the
security index to get the role descriptors for the role name.

3. Build the Role object based on the role descriptors.  There are also special
cases in the above process. For example, API keys do not have role names, but
two byteReference representing the role descriptors. API keys also have a
nested Role structure for limiting the key's actual privileges based on the
owner's.

Today, this process is managed by a single CompositeRolesStore class and the
steps are not clearly separated. This PR improves the situation by introducing
a new RoleReferenceResolver class that is responsible for turning roleReference
into role descriptors. CompositeRolesStore is now only responsible for buiding
the Role from the descriptors.

The RoleReference is also a new concept introduced by this PR, along with
AuthenticationContext and Subject. They technically belong to the issue of
revisiting Authentication class (#80117). But they are needed here to faciliate
the changes. Their usage will be expanded once we start working on #80117.

A Subject knows how to return a list of RoleReference and the final Role is the
intersection of all the RoleReference. This was a concept for API keys. It is
now generalised in this PR in the light on potential expanded usage of
limitedBy roles.

Relates: #80117",https://github.com/elastic/elasticsearch/commit/c7aa2b5c2f2483435341d1862ca002d07c0bedc0
3011,3011.0,3185.0,elastic/elasticsearch,f9421e45528dc57cf0fcfc4c9426954086002f90,"Add '$' syntax as a shortcut for 'field' in Painless (#80518)

This adds a shortcut for the field method when a script context supports the scripting fields API. This 
shortcut replaces field('fieldname').get(defaultValue) with $('fieldname', defaultValue). This change 
builds this into the Painless compiler, but eventually this can be easily refactored out to make it so the 
'$' could be specialized per context.",https://github.com/elastic/elasticsearch/commit/f9421e45528dc57cf0fcfc4c9426954086002f90
3012,3012.0,3186.0,elastic/elasticsearch,8ee05f9d9d57894d60802f9dcffd1a488962fa96,"Fix after restore Lucene.pruneUnreferencedFiles() conditional (#81047)

In #68821 we introduced a condition to skip the pruning of 
unreferenced files after the restore of a snapshot for 
searchable snapshot shards. Sadly I managed to mess 
this up in a refactoring (#75308) few months after.

This commit reintroduces the right conditional which is 
to NOT prune Lucene files for searchable snapshot shards.",https://github.com/elastic/elasticsearch/commit/8ee05f9d9d57894d60802f9dcffd1a488962fa96
3013,3013.0,3187.0,elastic/elasticsearch,375fc779b40a4d00653ec32c1040bc337a423b10,"[ML] update truncation default & adding field output when input is truncated (#79942)

This commit makes the two following changes (along with some
refactoring)  - Nlp results will now indicate if the input was truncated
or not  - The default truncation is now `none` instead of `first`",https://github.com/elastic/elasticsearch/commit/375fc779b40a4d00653ec32c1040bc337a423b10
3014,3014.0,3188.0,elastic/elasticsearch,94773fc9e1c09574b130ce50b40ff5480204c7da,"Fix path.data as comma separated string (#76202) (#79272)

For multiple data paths, there are several allowed varieties of
specifcying the paths. The yaml list forms, both single and multi line,
are allowed, but another form is a string containing commas that is
parsed as a list. This latter form was broken recently by the
refactoring of path.data parsing to emit deprecation warnings for MDP.
This commit fixes the comma separated string case and adds a test.

closes #76181",https://github.com/elastic/elasticsearch/commit/94773fc9e1c09574b130ce50b40ff5480204c7da
3015,3015.0,3189.0,elastic/elasticsearch,bedeb2c4d9293543a19741d62d0bc35954066af3,"Refactor IndexAbstraction to not use IndexMetadata (#79080)

Most users of an `IndexAbstraction` instance doesn't need to use the
`IndexMetadata` instances that `getIndices()` and `getWriteIndex()` returns.

Cluster state variables/parameters can be used in places that access to
`IndexMetadata` is required.

By changing the `getIndices()` and `getWriteIndex()` methods to return `Index`
instance, the indices lookup can be reused across different cluster states.
This should be possible in cases that don't change an index hidden status or
 open and closes indices or when adding / removing aliases, data streams or indices.

This change should allow for #79004",https://github.com/elastic/elasticsearch/commit/bedeb2c4d9293543a19741d62d0bc35954066af3
3016,3016.0,3190.0,elastic/elasticsearch,f1753ee6e97b1e845a518d309ff1cba9863dc315,"Unify AuthC chain - 1. Authenticator extraction (#77293)

This PR is a first step to refactor and unify the authentication chain. An
Authenticator interface is extracted for following concrete Authenticators
(listed in decreasing priority):

* Service token
* OAuth2 token
* API key
* Realms

Before runnning the above authenticators, existing authentication from
ThreadContext is always checked first. After running the authenticators,
fallback, anonymous and lookup users are checked more consistently. Failed
authentication with either OAuth2 token or API key now reports the attempted
and failed credentials instead of ""missing credentials"".

In above authenticators, the RealmsAuthenticator has its own sub-chain.
Technically, this sub-chain can also be flattend and be part of the main chain.
But it's impractical to do so without also changing the existing behaviour.
Though the change makes sense imo, it adds a lot complexities of the PR. So it
is better to be left as future work.

Relates: #75607

Co-authored-by: Tim Vernum <tim@adjective.org>",https://github.com/elastic/elasticsearch/commit/f1753ee6e97b1e845a518d309ff1cba9863dc315
3017,3017.0,3191.0,elastic/elasticsearch,75fb1bc631a898366bf9a77e6f16adf9ae9ac74a,"Small clean-ups in dense vector plugin (#78535)

This PR makes some small refactors:
* Rename `Vectors` to `DenseVectorPlugin` to match other plugin naming
* Remove outdated skips in REST tests",https://github.com/elastic/elasticsearch/commit/75fb1bc631a898366bf9a77e6f16adf9ae9ac74a
3018,3018.0,3192.0,elastic/elasticsearch,f5e4228bb3e3a7b67becfd372b3ffa6b734c930c,"Setting to disable x-opaque-id in logs throttling (#78911)

Introduces a setting cluster.deprecation_indexing.x_opaque_id_used.enabled to disable use of
x-opaque-id in RateLimitingFilter. This will be used for deprecation
logs indexing and will not affect logging to files (it uses different
instance of RateLimitingFilter with this flag enabled by default)

Changes the indices backing a deprecation log data stream to be hidden.

Refactors DeprecationHttpIT to be more reliable

relates #76292
closes #77936",https://github.com/elastic/elasticsearch/commit/f5e4228bb3e3a7b67becfd372b3ffa6b734c930c
3019,3019.0,3193.0,elastic/elasticsearch,aa1107b44a357e06c029644398843cd6caa9e091,"Refactor SnapshotsInProgress to Track Snapshots By Repository (#77984)

First step in making `SnapshotsInProgress` easier to work with
by tracking snapshots per repository. This allows simplifying the
concurrency logic in a couple of places and sets up a follow-up
that would invert the current list of maps for snapshots that is
very hard to reason about in the concurrency logic into a map
of lists that maps repo-shard to snapshots to make the logic
more obviously correct.",https://github.com/elastic/elasticsearch/commit/aa1107b44a357e06c029644398843cd6caa9e091
3020,3020.0,3194.0,elastic/elasticsearch,f9cbacb69a4865287eac602a871d72eb7ebb1728,"Split up Painless Fields API conversion tests (#78345)

This change has three small parts.
* Refactors the tests to have a base test class that contains predefined fields for each relevant type 
conversion. This base test class allows availability of predefined fields for any new fields added outside 
of core.
* Splits the conversions test cases into a one to one matching for each possible conversion where we 
do field type to other field type, and if possible, the reverse as well within a single test.
* Fixes a bug where we relied on the delegating method values for get long and get double, but in 
some cases this was giving non-converted data.",https://github.com/elastic/elasticsearch/commit/f9cbacb69a4865287eac602a871d72eb7ebb1728
3021,3021.0,3195.0,elastic/elasticsearch,2afec9ace704ab05bfb6d794f537b29b0f38d766,"HotThreads refactor idle threads code  (#77805)

Refactor HotThreads.isIdleThread

Remove code duplication by using lists of named stack frames, split
JVM thread name checking and stack trace checking into separate
methods, add new JVM threads (Notification Thread, Common-Cleaner) into
the list of known JVM threads.",https://github.com/elastic/elasticsearch/commit/2afec9ace704ab05bfb6d794f537b29b0f38d766
3022,3022.0,3196.0,elastic/elasticsearch,514352101236c94fcf5bee4f286f004c10b7da0b,"Refactor metric PipelineAggregation integration test (#77548)

This commit extracts BucketMetricsPipeLineAggregationTestCase and simplifies the testing of several 
pipeline aggregations.",https://github.com/elastic/elasticsearch/commit/514352101236c94fcf5bee4f286f004c10b7da0b
3023,3023.0,3197.0,elastic/elasticsearch,25ae1363a217b07b6369c8d463c600c9bd9c7037,"Split up fields into different field types for Painless Fields API (#77732)

This change refactors the inner fields classes and inner converter classes into field class split by type 
for the Painless Fields API.

Each field class now contains the following:

* it's own members
* a converter that converts from other types of fields to its own type of field
* conversion helper methods to go from its own type of field to other types of fields
* conversion helper methods to go from its own type to other types",https://github.com/elastic/elasticsearch/commit/25ae1363a217b07b6369c8d463c600c9bd9c7037
3024,3024.0,3198.0,elastic/elasticsearch,2b71bb8677ff08463e122abff062406805a8efb0,"Use enum field for HotThreads report type (#77462)

Switch HotThreads request type to enum

HotThreads report request type is declared as String, but used as an
enum where only few values are allowed. This PR changes the type to
enum allowing malformed requests to correctly report the error.

This PR also introduces a small refactor to make the report getter
function part of the accumulator class.",https://github.com/elastic/elasticsearch/commit/2b71bb8677ff08463e122abff062406805a8efb0
3025,3025.0,3199.0,elastic/elasticsearch,9b2eb915e75f4a0326d940927a806792567ec8c5,"Move each field in the Painless Fields API to its own class file (#77652)

This change is a purely mechanical refactor to move each type of field to its own class. This allows for an 
easy way to separate the converters as well as each converter will require many lines of code.",https://github.com/elastic/elasticsearch/commit/9b2eb915e75f4a0326d940927a806792567ec8c5
3026,3026.0,3200.0,elastic/elasticsearch,062276f84d530bc8054492437718ccf10d8151cf,"Refactor GeoBoundingBoxQuery integration tests (#77103)

This commit breaks the test to separate the testing of legacy geo_shape field.",https://github.com/elastic/elasticsearch/commit/062276f84d530bc8054492437718ccf10d8151cf
3027,3027.0,3201.0,elastic/elasticsearch,07715438b5d24ae92e517eb52f04148623f196ec,"Refactor of GeoShape integration tests (#77052)

This commit joins GeoFilterIT and GeoShapeIntegrationIT into one test case called GeoShapeIntegTestCase 
which is moved into the test framework.",https://github.com/elastic/elasticsearch/commit/07715438b5d24ae92e517eb52f04148623f196ec
3028,3028.0,3202.0,elastic/elasticsearch,a6f2a4df8b80abf65f905c34438731813d0c21ac,"Introduce Cloud docker variant (#74980)

Closes #74795.

Introduce two Docker image variants for Cloud. The first bundles
(actually installs) the S3, Azure and GCS repository plugins. The
second bundles all official plugins, but only installs the repository
plugins.

Both images also bundle Filebeat and Metricbeat.

The testing utils have been refactored to introduce a `docker`
sub-package. This allows the static `Docker.containerId` to be
shared without needing all the code in one big class. The code for
checking file ownership / permissions has also been refactored to
a more Hamcrest style, using a custom Docker file matcher.",https://github.com/elastic/elasticsearch/commit/a6f2a4df8b80abf65f905c34438731813d0c21ac
3029,3029.0,3203.0,elastic/elasticsearch,964816091e4dd864289acc07f016898c384c8bab,"[ML] refactor model allocation builders (#76463)

refactoring model allocation builders. The current design is fairly unintuitive and can make adding new states or predicates annoying.",https://github.com/elastic/elasticsearch/commit/964816091e4dd864289acc07f016898c384c8bab
3030,3030.0,3204.0,elastic/elasticsearch,da668f9cb0a16f9ec55384aeb505ac17ba554139,"Refactor Snapshot Finalization Method (#76005)

This refactors the signature of snapshot finalization. For one it allows removing
a TODO about being dependent on mutable `SnapshotInfo` which was not great but
more importantly this sets up a follow-up where state can be shared between the
cluster state update at the end of finalization and subsequent old-shard-generation
cleanup so that we can resolve another open TODO about leaking shard generation files
in some cases.",https://github.com/elastic/elasticsearch/commit/da668f9cb0a16f9ec55384aeb505ac17ba554139
3031,3031.0,3205.0,elastic/elasticsearch,10fe3afd5b002d120d0fe7a30388ffba6d0639c3,"[DOCS] Remove ifdefs for rollup refactor

Removes some ifdef conditionals overlooked in #70885. That PR removed
docs for the rollup refactor.",https://github.com/elastic/elasticsearch/commit/10fe3afd5b002d120d0fe7a30388ffba6d0639c3
3032,3032.0,3206.0,elastic/elasticsearch,c8c5d225710824dc566e5ec468f5c9f37acfd2a6,"[Rest Api Compatibility] Make query registration easier (#75722)

Refactoring to NamedXContentRegistry to make it easier to register new
query builders. It removes the concept of separate compatibel
namedXContentRegistry and adds a second dimension - restApiVersion - to
registry in NamedXContentRegistry.
This makes the design similar to the solution in ObjectParser where the
field parser lookup map also needs has a restApiVersion

relates #51816",https://github.com/elastic/elasticsearch/commit/c8c5d225710824dc566e5ec468f5c9f37acfd2a6
3033,3033.0,3207.0,elastic/elasticsearch,6592cfe6be95118c390dfc461a5d39713bce42da,"Refactor SnapshotsInProgress to Use RepositoryId for Concurency Logic (#75501)

This refactors the snapshots-in-progress logic to work from `RepositoryShardId` when working out what parts of the repository are in-use by writes for snapshot concurrency safety. This change does not go all the way yet on this topic and there are a number of possible follow-up further improvements to simplify the logic that I'd work through over time.
But for now this allows fixing the remaining known issues that snapshot stress testing surfaced when combined with the fix in https://github.com/elastic/elasticsearch/pull/75530.

These issues all come from the fact that `ShardId` is not a stable key across multiple snapshots if snapshots are partial. The scenarios that are broken are all roughly this:
* snapshot-1 for index-A with uuid-A runs and is partial
* index-A is deleted and re-created and now has uuid-B
* snapshot-2 for index-A is started and we now have it queued up behind snapshot-1 for the index
* snapshot-1 finishes and the logic tries to start the next snapshot for the same shard-id
  * this fails because the shard-id is not the same, we can't compare index uuids, just index name + shard id
  * this change fixes all these spots by always taking the round trip via `RepositoryShardId`
 
planned follow-ups here are:
* dry up logic across cloning and snapshotting more as both now essentially run the same code in many state-machine steps
* serialize snapshots-in-progress efficiently instead of re-computing the index and by-repository-shard-id lookups in the constructor every time
    * refactor the logic in snapshots-in-progress away from maps keyed by shard-id in almost all spots to this end, just keep an index name to `Index` map to work out what exactly is being snapshotted
 * refactoring snapshots-in-progress to be a map of list of operations keyed by repository shard id instead of a list of maps as it currently is to make the concurrency simpler and more obviously correct

closes #75423 

relates (#75339 ... should also fix this, but I have to verify by testing with a backport to 7.x)",https://github.com/elastic/elasticsearch/commit/6592cfe6be95118c390dfc461a5d39713bce42da
3034,3034.0,3208.0,elastic/elasticsearch,fb0846a23d523d8a69ead5c2dc5e4ca778ed76d5,"[Transform][Rollup] remove unnecessary list indirection (#75459)

Remove an unnecessary indirection and refactor progress tracking. Both rollup and transform
process documents as stream, however in the AsyncTwoPhaseIndexer takes a List of index
requests. This change removes the unnecessary temporary container and makes upcoming
transform enhancements easier.",https://github.com/elastic/elasticsearch/commit/fb0846a23d523d8a69ead5c2dc5e4ca778ed76d5
3035,3035.0,3209.0,elastic/elasticsearch,71546b3a3e47f99ca8af4456afda160832701020,"Refactor plugin CLI commands (#75259)

Part of #70219.

Split the install and remove plugin CLI commands into `Command` and
`Action` classes, so that the main implementations can be reused
in a later PR to create a `Sync` command.",https://github.com/elastic/elasticsearch/commit/71546b3a3e47f99ca8af4456afda160832701020
3036,3036.0,3210.0,elastic/elasticsearch,a81f0b4f29146ec1ecf8049ccaa52629c7c2485f,"Refactor SSL setup in X-Pack (#75410)

* Refactor SSL setup in X-Pack

This commit makes some internal changes to the way SSL configuration
works in X-Pack. This is in preparation for replacing the X-PackSSL
configuration with ""libs/ssl-config"" instead.

* Adds a new class to x-pack core that can loads
  SslConfiguration objects (as defined in the ssl-config library),
  from standard Elasticsearch Settings objects.
  This class supports the semantics that are used for ""xpack.*.ssl.*""
  settings.

* Refactors the internals of SSLConfigurationSettings to reduce the
  number of constants and the duplication of code between them

* Address feedback

Co-authored-by: Elastic Machine <elasticmachine@users.noreply.github.com>",https://github.com/elastic/elasticsearch/commit/a81f0b4f29146ec1ecf8049ccaa52629c7c2485f
3037,3037.0,3211.0,elastic/elasticsearch,9b88db7f4c8109f18498ee533042d53cf7c32b4c,"Significant terms test refactor for extendability (#75452)

The original PR #75264 made some test mistakes

NXY Significant term heuristics have additional values that need to be set when testing
basicScore properties.

Additionally, previous refactor kept the abstract test class in a package that other plugins
don't have access to.

closes #75442, #75561",https://github.com/elastic/elasticsearch/commit/9b88db7f4c8109f18498ee533042d53cf7c32b4c
3038,3038.0,3212.0,elastic/elasticsearch,e5eb0475d5ba776f842cafb6c7b080f746979504,"Refactor SimpleFeatureFactory so it has no external dependencies (#75232)

SimpleFeatureFactory has no external dependencies now.",https://github.com/elastic/elasticsearch/commit/e5eb0475d5ba776f842cafb6c7b080f746979504
3039,3039.0,3213.0,elastic/elasticsearch,379fad1ed9e923c5c882e7a6d19a12c3fdabebe2,"Refactor significance heuristic tests for easier extensability (#75264)

The significant terms heuristic tests do not lend themselves well for new heuristics being added.

This commit extracts common code and builds an abstract significant heuristic test class.

This way new heuristics get the common suite of tests by extending a test class.",https://github.com/elastic/elasticsearch/commit/379fad1ed9e923c5c882e7a6d19a12c3fdabebe2
3040,3040.0,3214.0,elastic/elasticsearch,3a76a398cbb6e38752dc24132dae109343f3d814,"[ML] Simplify node load memory calculation for various tasks (#75186)

Refactors calculation of node memory load so that there is a
framework for supporting various different ML tasks. This results
in simpler code and it is a step towards making it easier to
add memory tracking for future tasks.",https://github.com/elastic/elasticsearch/commit/3a76a398cbb6e38752dc24132dae109343f3d814
3041,3041.0,3215.0,elastic/elasticsearch,49a57eed42622a43737c0e59edb15d253dd5dfc5,"Fix TransportFieldCapabilitiesAction Blocking Transport Thread (#75022)

Running a request per index could take a very long time here if the request covers
a larger number of shards (especially when security is enabled).
Forking it to the management pool saves the transport thread from getting blocked.
Also, to make this request run quicker (again especially with security enabled)
I removed the redundant index-level request fan-out here as well to save one step
of redundant request handling and authorization (the shard level request is authorized
separately again anyway). In a follow-up to 8.x because of 7.x BwC issues, we can
refactor away the redundant  index-level fan out as well.",https://github.com/elastic/elasticsearch/commit/49a57eed42622a43737c0e59edb15d253dd5dfc5
3042,3042.0,3216.0,elastic/elasticsearch,d6b3706a093488962be7e146ba4da4ad928c4ea6,"[Testing] Refactor RestActionTests to cover all rest methods (#74489)

Refactoring RestGetActionTests and RestGestSourceActionTests to remove
duplicated code. Previously the tests would fail if rest request was
sent twice to RestController. This was fixed in #74293 and the
refactoring is possible now",https://github.com/elastic/elasticsearch/commit/d6b3706a093488962be7e146ba4da4ad928c4ea6
3043,3043.0,3217.0,elastic/elasticsearch,a5adc7df9c244dbe226c00231bbaadef564b113e,"[ML] refactor internal datafeed management (#74018)

This unifies the concept of object management between datafeeds and anomaly jobs.",https://github.com/elastic/elasticsearch/commit/a5adc7df9c244dbe226c00231bbaadef564b113e
3044,3044.0,3218.0,elastic/elasticsearch,dbb626abbb795d94a376367758bb7564859ad8b1,"Add Bulk Fetch SnapshotInfo API to Repository (#73570)

This PR refactors the `Repository` API for fetching `SnapshotInfo` to enabled implementations to optimize for bulk fetching multiple `SnapshotInfo` at once. This is a requirement for making use of a more efficient repository format that does not require loading individual blobs per snapshot to fetch a snapshot listing. Also, by enabling consuming `SnapshotInfo` as they are fetched on the snapshot meta thread this allows for some more memory efficient usage of snapshot listing.
Also, this commit makes use of the new API to make the snapshot status API run a little more parallel if fetching multiple snapshots (though there's additional improvements possible+useful here as far as fetching shard level metadata in parallel).",https://github.com/elastic/elasticsearch/commit/dbb626abbb795d94a376367758bb7564859ad8b1
3045,3045.0,3219.0,elastic/elasticsearch,15fc541a49deb004c41b893eeb0ca9c1699e6bfb,"Fix highlighting for match_phrase_prefix query inside nested (#73775)

Some refactoring between versions 7.2 and 7.3 seems to have broken highlighting
using the default ""unified"" highlighter when using a `match_phrase_prefix` query
inside a nested query. Re-adding handling of `ESToParentBlockJoinQuery` to the
CustomUnifiedHighlighter#rewriteCustomQuery method solves the problem.

Closes #70922",https://github.com/elastic/elasticsearch/commit/15fc541a49deb004c41b893eeb0ca9c1699e6bfb
3046,3046.0,3220.0,elastic/elasticsearch,7ac998b61aa8081fbb5bca7fc6163ba8713c4492,"Move filter adapters to their own files (#73720)

This refactors a part of the `filters` aggregator into multiple files so
its a little easier to read. We ended up with more subclasses then we
expected at first.",https://github.com/elastic/elasticsearch/commit/7ac998b61aa8081fbb5bca7fc6163ba8713c4492
3047,3047.0,3221.0,elastic/elasticsearch,05ca9cf8767220e21eaf1337b7787954f025aecd,"Remove getMatchingFieldTypes method (#73655)

FieldTypeLookup and MappingLookup expose the getMatchingFieldTypes method to look up matching field type by a string pattern. We have migrated ExistsQueryBuilder to instead rely on getMatchingFieldNames, hence we can go ahead and remove the remaining usages and the method itself.

The remaining usages are to find specific field types from the mappings, specifically to eagerly load global ordinals and for the join field type. These are operations that are performed only once when loading the mappings, and may be refactored to work differently in the future. For now, we remove getMatchingFieldTypes and rather call for the two mentioned scenarios getMatchingFieldNames(*) and then getFieldType for each of the returned field name. This is a bit wasteful but performance can be sacrificed for these scenarios in favour of less code to maintain.",https://github.com/elastic/elasticsearch/commit/05ca9cf8767220e21eaf1337b7787954f025aecd
3048,3048.0,3222.0,elastic/elasticsearch,2b275613d5770697aafb5ce106bb508090d110d8,"Move vector tile implementation to its own module (#73562)

In addition, a few things have been added:

* The API now handles cancellation which it turned to be a big performance booster.
* The API supports defining a sort field.
* RestVectorTileAction has been refactor to one class again. 
* VectorTileRequest class has been extracted so it can be unit tested.",https://github.com/elastic/elasticsearch/commit/2b275613d5770697aafb5ce106bb508090d110d8
3049,3049.0,3223.0,elastic/elasticsearch,bb5fea160be8f3baa97c90763c9bbfc87e184fe0,Refactor uri_parts processor so it can be exposed in Painless (#73344),https://github.com/elastic/elasticsearch/commit/bb5fea160be8f3baa97c90763c9bbfc87e184fe0
3050,3050.0,3224.0,elastic/elasticsearch,b13f43b24e602a6e97047b1475c6aa412f9e1006,"Refactor RestoreService Restore Path (#73258)

Make the restore path a little easier to follow by splitting it up into
the cluster state update and the steps that happen before the CS update.
Also, document more pieces of it and remove some confusing redundant code.",https://github.com/elastic/elasticsearch/commit/b13f43b24e602a6e97047b1475c6aa412f9e1006
3051,3051.0,3225.0,elastic/elasticsearch,a4e722e139c34537287c43e389dab6c5ba255f82,"[ML] slight refactor of the bucket_correlation aggregation (#72924)

This PR moves the bucket_correlation aggregation to inherit from pipeline bucket metrics.

This allows the validation code to be reused from the parent object.",https://github.com/elastic/elasticsearch/commit/a4e722e139c34537287c43e389dab6c5ba255f82
3052,3052.0,3226.0,elastic/elasticsearch,e609e07cfec848b7f4d1a08e8b5cd464834a08ff,"Remove internal build logic from public build tool plugins (#72470)

Extract usage of internal API from TestClustersPlugin and PluginBuildPlugin and related plugins and build logic

This includes a refactoring of ElasticsearchDistribution to handle types
better in a way we can differentiate between supported Elasticsearch
Distribution types supported in TestCkustersPlugin and types only supported
in internal plugins.

It also introduces a set of internal versions of public plugins.

As part of this we also generate the plugin descriptors now.

As a follow up on this we can actually move these public used classes into 
an extra project (declared as included build)

We keep LoggedExec and VersionProperties effectively public And workaround for RestTestBase",https://github.com/elastic/elasticsearch/commit/e609e07cfec848b7f4d1a08e8b5cd464834a08ff
3053,3053.0,3227.0,elastic/elasticsearch,bd84e8a394bc8c347712666149fb3d90ae13c7d8,[DOCS] Refactor script processor docs (#72691),https://github.com/elastic/elasticsearch/commit/bd84e8a394bc8c347712666149fb3d90ae13c7d8
3054,3054.0,3228.0,elastic/elasticsearch,e002aa809b86bd7daddfd7aad0af353839a8690e,"Make FieldNamesFieldMapper responsible for adding its own doc fields (#71929)

The FieldNamesFieldMapper is a metadata mapper defining a field that
can be used for exists queries if a mapper does not use doc values or
norms. Currently, data is added to it via a special method on FieldMapper
that pulls the metadata mapper from a mapping lookup, checks to see
if it is enabled, and then adds the relevant value to a lucene document.

This is one of only two places that pulls a metadata mapper from the
MappingLookup, and it would be nice to remove this method. This commit
refactors field name handling by instead storing the names of fields to
index in the fieldnames field in a set on the ParseContext, and then
building the field itself in FieldNamesFieldMapper.postParse(). This means
that all of the responsibility for enabling indexing, etc, is handled within
the metadata mapper itself.",https://github.com/elastic/elasticsearch/commit/e002aa809b86bd7daddfd7aad0af353839a8690e
3055,3055.0,3229.0,elastic/elasticsearch,423c47ac562cafc14124c5efff7095f2d2be3b30,"Refactor GeoGridTiler classes (#72201)

This PR introduces the classes  AbstractGeoHashGridTiler and AbstractGeoTileGridTiler in order to 
simplify the current class hierarchy.",https://github.com/elastic/elasticsearch/commit/423c47ac562cafc14124c5efff7095f2d2be3b30
3056,3056.0,3230.0,elastic/elasticsearch,ede947fdd88617e37f9fedeec9d996c341248124,"Refactor Repository#snapshotShard (#72083)

Create a class for holding the large number of arguments to this method
and to dry up resource handling across snapshot shard service and the
source-only repository.",https://github.com/elastic/elasticsearch/commit/ede947fdd88617e37f9fedeec9d996c341248124
3057,3057.0,3231.0,elastic/elasticsearch,aa5d1948ba20c681ff05a6587533459718e4b3ae,"Introduce RepositoryData.SnapshotDetails (#71826)

Today we track a couple of values for each snapshot in the top-level
`RepositoryData` blob: the overall snapshot state and the version of
Elasticsearch which took the snapshot. In the blob these values are
fields of the corresponding snapshot object, but in code they're kept in
independent maps. In the near future we would like to track some more
values in the same way, but adding a new field for every tracked value
is a little ugly. This commit refactors these values into a single
object, `SnapshotDetails`, so that it can be more easily extended in
future.",https://github.com/elastic/elasticsearch/commit/aa5d1948ba20c681ff05a6587533459718e4b3ae
3058,3058.0,3232.0,elastic/elasticsearch,75897341454ec804bebcc58c8c27c067eac66a12,"Service Accounts - renaming refactor (#71917)

This PR renames classes relevant to the following names for accuracy 
and consistency:
* Rename GetServiceAccountTokens to GetServiceAccountCredentials
* Rename ServiceAccountsTokenStore to ServiceAccountTokenStore

Co-authored-by: Tim Vernum <tim@adjective.org>",https://github.com/elastic/elasticsearch/commit/75897341454ec804bebcc58c8c27c067eac66a12
3059,3059.0,3233.0,elastic/elasticsearch,b2130249b037b21d5012addcedfadd8cbfc49232,"[DOCS] Refactor quick start guide and README (#71331)

Changes:

* Refactors the ""Getting Started"" content down to one page.
* Refactors the README to reduce duplicated content and better mirror
Kibana's.
* Focuses the quick start on time series data, including data streams
and runtime fields.
* Streamlines self-managed install instructions to Docker.

Co-authored-by: debadair <debadair@elastic.co>",https://github.com/elastic/elasticsearch/commit/b2130249b037b21d5012addcedfadd8cbfc49232
3060,3060.0,3234.0,elastic/elasticsearch,5f3b6a74a0a4f93f9f363a9ba74a5b01de95cbdb,"Refactor Shard-Level Snapshot State Machine for Better Readability (#71876)

Refactoring this incredibly complicated loop into an object that holds
all state required for looping through existing snapshots and updates.
This hopefully makes it clearer what the different paths are across the
various combinations of snapshots and clones by drying up across both
where possible and splitting the logic to different methods for both
otherwise.

This sets up a relatively straight forward enhancement solution for #61870",https://github.com/elastic/elasticsearch/commit/5f3b6a74a0a4f93f9f363a9ba74a5b01de95cbdb
3061,3061.0,3235.0,elastic/elasticsearch,289d202cb208772c2664c1ba76e17c67a213afa1,"Rework geo mappers to index value by value (#71696)

The various geo field mappers are organised in a hierarchy that shares
parsing and indexing code. This ends up over-complicating things,
particularly when we have some mappers that accept multiple values
and others that only accept singletons. It also leads to confusing
behaviour around ignore_malformed behaviour: geo fields will ignore
all values if a single one is badly formed, while all other field mappers
will only ignore the problem value and index the rest. Finally, this
structure makes adding index-time scripts to geo_point needlessly
complex.

This commit refactors the indexing logic of the hierarchy to move the
individual value indexing logic into the concrete implementations,
and aligns the ignore_malformed behaviour with that of other mappers.

It contains two breaking changes:

* The geo field mappers no longer check for external field values on the
  parse context. This added considerable complication to the refactored
  parse methods, and is unused anywhere in our codebase, but may
  impact plugin-based field mappers which expect to use geo fields
  as multifields
* The geo_point field mapper now passes geohashes to its multifields
  one-by-one, instead of formatting them into a comma-delimited
  string and passing them all at once. Completion multifields using
  this as an input should still behave as normal because by default
  they would split this combined geohash string on the commas in any
  case, but keyword subfields may look different.

Fixes #69601",https://github.com/elastic/elasticsearch/commit/289d202cb208772c2664c1ba76e17c67a213afa1
3062,3062.0,3236.0,elastic/elasticsearch,d4b649cd25df6c4261a206b56f6aa7ecd88e33ca,"Improve reusability of the cache invalidation counter (#66310)

This PR is a follow-up refactoring for #59376. It replaces
InvalidationCountingCacheWrapper with a simpler and more resuable
LockingAtomicCounter.

The change includes extracting the logic of ""minimizing chance of caching stale
results"" into a new class, which is now generic and not tied to any cache
related operations. This in turn allows it to be reused by different caches,
which often have subtle, important and anonying differences that make it
impossible (or at least cubersome and painful) to have a generic solution. So
this change of reducing the size of reusable code is the right move.

As an example of applying this new pattern, the caches for NativePrivilegeStore
are now migrated and managed by the centrialied CacheInvalidatorRegistry. The
clear privilege cache rest and transport actions are also updated to use the
new implementation. The Request/Response classes are intentionally untouched
and plan to have a separate PR to address them because they would involve user
visible deprecation changes.

Co-authored-by: Albert Zaharovits <albert.zaharovits@elastic.co>",https://github.com/elastic/elasticsearch/commit/d4b649cd25df6c4261a206b56f6aa7ecd88e33ca
3063,3063.0,3237.0,elastic/elasticsearch,e484faa9ccb7b10092f8c420d9cf78218678e778,"Fix validate decider roles test

This commit fixes an autoscaling test that is failing due to a
refactoring. Previously, the configured decider would not validate
against a policy specifying no roles, because the empty role marker was
explicitly not included in the list of roles that the decider
supported. Instead of using a marker, we now use an explicit method that
indicates whether or not the decider supports the empty role. The
production implementation of this decider does support the empty role,
but the configured decider in the test no longer maintained this
behavior since it was not overriding the new extension point to indicate
this. This commit addresses that by overriding this method in the
configured decider used in the test.",https://github.com/elastic/elasticsearch/commit/e484faa9ccb7b10092f8c420d9cf78218678e778
3064,3064.0,3238.0,elastic/elasticsearch,3f5b6f80a433685f5691a74a15276c56ec327df1,"Refactor empty role marker in autoscaling (#71490)

Some autoscaling deciders can apply to policies that specify an empty
set of roles. This is useful for testing. Today this is done by a
special empty marker role which can be included in the list of roles
that the decider supports. That marker is checked for when a policy that
specifies an empty set of roles is encountered. This commit refactors
this so that there is an interface method for answering the same
question that implementors can override.

We make this change to support removing the ability to plugin roles.",https://github.com/elastic/elasticsearch/commit/3f5b6f80a433685f5691a74a15276c56ec327df1
3065,3065.0,3239.0,elastic/elasticsearch,e3acfc613f7b1bb9b0e4620d17b3f0798587b134,"Vector Tiles: continue REST layer refactoring (#71259)

This change unifies the request parsing and makes it extensible.",https://github.com/elastic/elasticsearch/commit/e3acfc613f7b1bb9b0e4620d17b3f0798587b134
3066,3066.0,3240.0,elastic/elasticsearch,65be40ac7b06176b6b460db9315f908bad14953e,[DOCS] Refactor rollover API docs (#70938),https://github.com/elastic/elasticsearch/commit/65be40ac7b06176b6b460db9315f908bad14953e
3067,3067.0,3241.0,elastic/elasticsearch,0b1dc7f2312ce0c0708380ad8ac43728310a5af5,"EQL: Optimize redundant toString (#71070)

Replace toString(""string"") with ""string""
Refactor the underlying rule to reuse code across QL

Fix #70671",https://github.com/elastic/elasticsearch/commit/0b1dc7f2312ce0c0708380ad8ac43728310a5af5
3068,3068.0,3242.0,elastic/elasticsearch,f41320616c8dabf1de6f642d72cda1ccb48cc55c,[DOCS] Refactor data stream setup tutorial (#71074),https://github.com/elastic/elasticsearch/commit/f41320616c8dabf1de6f642d72cda1ccb48cc55c
3069,3069.0,3243.0,elastic/elasticsearch,bf2b209e3d77766cb70822c4c8f0ab1da786eb2b,"Vector Tiles: Start refactoring rest layer (#71080)

This is the first iteration that just extracts most obvious
shared parts of vector tile and aggregated vector tile. Besides
removing code repetition this common basis will simplify dealing
with async and other aspects of search api later on.",https://github.com/elastic/elasticsearch/commit/bf2b209e3d77766cb70822c4c8f0ab1da786eb2b
3070,3070.0,3244.0,elastic/elasticsearch,493741dd7fdb7afe4cb1f57c218d11bf74d7a08a,[DOCS] Remove docs for rollup refactor (#70885),https://github.com/elastic/elasticsearch/commit/493741dd7fdb7afe4cb1f57c218d11bf74d7a08a
3071,3071.0,3245.0,elastic/elasticsearch,e6d3bbe412e58f44ea1d4fe2458ed55cf4dad1c2,"Simplify runtime field parser and builder (#70837)

RuntimeField.Parser currently requires a BiFunction <String, ParserContext, Builder> but in reality ParserContext can be made an argument to the method that creates the runtime field itself, so that the BiFunction becomes a Function. At the same time, buildFieldType can be renamed to createRuntimeField (following the split between RuntimeField and the corresponding MappedFieldType.

Additionally, the creation logic for all of the currently supported runtime fields is the same: if the script is not provided, initialize the script factory with the predefined script that extract values from source, otherwise compile the script and create the runtime field. This logic can be shared by refactoring the RuntimeField.Builder.

These steps simplify things, and will help with the creation of the runtime object field. In fact, more logic will be introduced around the creation of a runtime field that can this way be shared instead of repeated for each field type.",https://github.com/elastic/elasticsearch/commit/e6d3bbe412e58f44ea1d4fe2458ed55cf4dad1c2
3072,3072.0,3246.0,elastic/elasticsearch,1fa629abd646b13d68c8376c61cdbd2e57da1fe0,"Refactor how fields tell aggs about ords (#70693)

This just renamed `hasGlobalOrdinals` to `hasOrginals` and changes the
documentation to say that it returns true when there are segment or
global ordinals. There isn't any case when we supported global ordinals
that we don't also support segment ordinals. I mean, global ordinals are
*built* from segment ordinals.",https://github.com/elastic/elasticsearch/commit/1fa629abd646b13d68c8376c61cdbd2e57da1fe0
3073,3073.0,3247.0,elastic/elasticsearch,f9a00491d3d0c97f37efc7d6d349821716429f89,[DOCS] Refactor glossary (#70516),https://github.com/elastic/elasticsearch/commit/f9a00491d3d0c97f37efc7d6d349821716429f89
3074,3074.0,3248.0,elastic/elasticsearch,111b0b767c3ac9a2c824198781947801ed3bb97c,"Follow-up fix to reuse FrozenIndexInput.writeCacheFile (#70597)

Follow-up to #70545 which introduced a subtle bug in the refactoring.

Marked as non-issue as unreleased bug

Closes #70592",https://github.com/elastic/elasticsearch/commit/111b0b767c3ac9a2c824198781947801ed3bb97c
3075,3075.0,3249.0,elastic/elasticsearch,c4233dfbb7c9b807da6778d1bc18a7318cb7cb3c,"Refactor: Aggs use NOOP leaf collector (#70320)

Before this commit, if an aggregator didn't have anything to do in
`AggregatorBase#getLeafCollector` it was obligated to throw
`CollectionTerminatedException` if there wasn't a parent aggregator,
otherwise it was obligated to return `LeafBucketCollector.NOOP`. This
seems like something aggregators shouldn't have to do. So this commit
changes `getLeafCollector` so aggregators are obligated to return
`LeafBucketCollector.NOOP` if they have no work to do. The aggregation
framework will throw the exception if its appropriate. Otherwise it'll
use the `NOOP` collector. If they have work to do the
`LeafBucketCollector`s that they do return may still throw
`CollectionTerminatedException` to signal that they are done with the
leaf.",https://github.com/elastic/elasticsearch/commit/c4233dfbb7c9b807da6778d1bc18a7318cb7cb3c
3076,3076.0,3250.0,elastic/elasticsearch,010a973018199316431408be6c8c6367759a6306,[DOCS] Refactor ingest pipeline docs (#70253),https://github.com/elastic/elasticsearch/commit/010a973018199316431408be6c8c6367759a6306
3077,3077.0,3251.0,elastic/elasticsearch,3c1e0a94b1838601cc3b18ff874714751bd70b56,"SQL: Refactor Tableau connector to make use of the connection properties (#69169)

* Refactor to make use of the connection propreties

This refactors the way the connection URL is being built, to make use of
frameworks' ability to construct the URL based on a set of connection
propreties.
This also ensures that the URI attributes are properly escaped.",https://github.com/elastic/elasticsearch/commit/3c1e0a94b1838601cc3b18ff874714751bd70b56
3078,3078.0,3252.0,elastic/elasticsearch,9c5fa020d86462917669b3b47da1bf48b20c489e,"[REST Compatible API] Route refactoring (addendum) (#70168)

Followup to #69573",https://github.com/elastic/elasticsearch/commit/9c5fa020d86462917669b3b47da1bf48b20c489e
3079,3079.0,3253.0,elastic/elasticsearch,2883d37443d52773c0d80f31db8495ef6670902c,[DOCS] Add overview for rollup refactor (#70001),https://github.com/elastic/elasticsearch/commit/2883d37443d52773c0d80f31db8495ef6670902c
3080,3080.0,3254.0,elastic/elasticsearch,9ad9c781dea6f9de12d3193994502e168e869ba5,"Add compatible logging when parsing a compatible field (#69539)

A #68808 introduced a possibility to declare fields which will be only available to parsing when a compatible API was used.

This commit replaces deprecated log with compatible logging when a 'compatible only' field was used. Also includes a refactoring of LoggingDeprecationHandler method names

relates #51816",https://github.com/elastic/elasticsearch/commit/9ad9c781dea6f9de12d3193994502e168e869ba5
3081,3081.0,3255.0,elastic/elasticsearch,9334ee915d84d0cc6e3ee0c9eb49d7b1329d2269,"Refactor: Add LeafBucketCollector#isNoop (#69937)

We're getting to the point where it'll be useful to check if the
sub-aggregator's collectors are noops. This adds a method we can call to
check.",https://github.com/elastic/elasticsearch/commit/9334ee915d84d0cc6e3ee0c9eb49d7b1329d2269
3082,3082.0,3256.0,elastic/elasticsearch,4cc4c2cc4769f5a2c53db2d909f310e17bd017c0,"[REST Compatible API] Route refactoring (#69573)

Related to #51816

Makes `Route`s  `RestApiVersion` -aware (and `RestHandler`s `RestApiVersion` -agnostic). Refactors 
how `Route`s are constructed in the case of deprecation or replacement of routes.",https://github.com/elastic/elasticsearch/commit/4cc4c2cc4769f5a2c53db2d909f310e17bd017c0
3083,3083.0,3257.0,elastic/elasticsearch,17aa2e975664db4d3ac1283340750b78638cd1ad,"Add missing copied tests to default sourceset outputdir (#69381)

For all projects that use copied YAML tests AND use the
default sourceset (test) the YAML tests are no longer on
the test class path.

This commit adds them back to the classpath after the
refactoring on #68943",https://github.com/elastic/elasticsearch/commit/17aa2e975664db4d3ac1283340750b78638cd1ad
3084,3084.0,3258.0,elastic/elasticsearch,d88104ccf2740c584dfb23a622b5a752e00f1b8b,"Fix long handling for version, if_seq_no and if_primary_term (#69238)

After #66197 we've lost ability to use longs for version, if_seq_no and if_primary_term (only ints would work).
That slipped through because 1 test went missing after refactoring in #50131.
This change fixes that with new ConfigurationUtils.readOptionalStringOrLongProperty method and and brings back the test.",https://github.com/elastic/elasticsearch/commit/d88104ccf2740c584dfb23a622b5a752e00f1b8b
3085,3085.0,3259.0,elastic/elasticsearch,f22adc47d8300ea7487480754611b93e4ffb2d7c,"Refactor ObjectParser and CompatibleObjectParser to support REST Compatible API (#68808)

In order to support compatible fields when parsing XContent additional information has to be set during ParsedField declaration.
This commit adds a set of RestApiCompatibleVersion on a ParsedField in order to specify on which versions a field is supported. By default ParsedField is allowed to be parsed on both current and previous major versions.

ObjectParser - which is used for constructing objects using 'setters' - has a modified fieldParsersMap to be Map of Maps. with key being RestApiCompatibility. This allows to choose set of field-parsers as specified on a request.
Under RestApiCompatibility.minimumSupported key, there is a map that contains field-parsers for both previous and current versions.
Under RestApiCompatibility.current there will be only current versions field (compatible fields not a present)

ConstructingObjectParser - which is used for constructing objects using 'constructors' - is modified to contain a map of Version To constructorArgInfo , declarations of fields to be set on a constructor depending on a version

relates #51816",https://github.com/elastic/elasticsearch/commit/f22adc47d8300ea7487480754611b93e4ffb2d7c
3086,3086.0,3260.0,elastic/elasticsearch,68376037456190a2003b9d8c2ef6b1c2b143c90b,"Refactor gradle test transform unit tests (#69007)

This commit refactors some of the rest test transformations unit tests.
Similar to #68944, but this change focuses on the ""match"" tests.
Specifically, this refactor introduces a common parent that the ""match""
tests (and other future tests) can consume. Also, the example tests
have been simplified to better illustrate the change.

There should no functional changes, just refactoring. This will help with
future commits to allow focus only for the relevant changes.",https://github.com/elastic/elasticsearch/commit/68376037456190a2003b9d8c2ef6b1c2b143c90b
3087,3087.0,3261.0,elastic/elasticsearch,26d560db19e3012facb54689afa0af9e65671b31,"Rest Tests: Refactor InjectHeader (#68944)

This commit is purely refactoring of InjectHeader and associated tests.

There should not be any functional changes here, and the same amount of
test coverage as prior.

This change specifically introduces a parent class ""FeatureInjector"" to
handle the responsibility of injecting the ""feature"" to the setup and teardown
sections of REST test. This is done to allow future code modifications
that also require ""feature"" backed tranformations, such as ""allow_warnings""
without needing to repeat the same setup/teardown code or tests.

The tests source files have been changed from ""real"" examples to
contrived examples to simplify and better illustrate the change it
is testing.",https://github.com/elastic/elasticsearch/commit/26d560db19e3012facb54689afa0af9e65671b31
3088,3088.0,3262.0,elastic/elasticsearch,3aff641b43ae7d00946b210cc37b60d842a71851,"Fix permissions for UnboundID LDAP SDK (#68872)

We inadvertently removed permissions needed by the UnboundID LDAP SDK
during a refactoring. This commit returns them to their rightful place.

These permissions are needed in core because we force the class
initializers for two classes from the UnboundID LDAP SDK to load while
loading the x-pack-core plugin. We have to do this there because
x-pack-core depends on the UnboundID LDAP SDK as some realm classes live
in x-pack-core.

Without these permissions, Elasticsearch will fail to start if an AD or
LDAP realm is configured.",https://github.com/elastic/elasticsearch/commit/3aff641b43ae7d00946b210cc37b60d842a71851
3089,3089.0,3263.0,elastic/elasticsearch,71d43b598d7d65fe9c9a810f20e7c76fbaec45f2,"Refactor usage of compatible version (#68648)

Compatible API version is at the moment represented by both Version and
byte - representing a major version. This can lead to a confusion which
representation to use, as well as to incorrect assumptions that minor
versions are supported (with the use of Version.V_7_0_0)

Current usage of XContentParser.useCompatible is also not allowing to
define two compatible implementations. This is not about
support N-2 compatibility, but to allow to continue development when a
major release is performed.

This commit is introducing the CompatibleVersion object responsible for
wrapping around a major version of compatible API.

relates #68100",https://github.com/elastic/elasticsearch/commit/71d43b598d7d65fe9c9a810f20e7c76fbaec45f2
3090,3090.0,3264.0,elastic/elasticsearch,82253a3e2d8c82f068dff3b1da7a7e51eab10440,"QL: Improve exact match detection in StringPattern (#68754)

Small refactor to internal class to handle discovery of the exact match
across all implementations without the need of manual escaping.",https://github.com/elastic/elasticsearch/commit/82253a3e2d8c82f068dff3b1da7a7e51eab10440
3091,3091.0,3265.0,elastic/elasticsearch,8ad476ad21ac3304bb6369d8a115226bb2903267,"Split Mapping parsing from DocumentMapper construction (#68593)

DocumentMapperParser parses xcontent mappings into a DocumentMapper, through DocumentMapper.Builder. Most of the work is done to construct a Mapping instance, that then gets provided to the DocumentMapper.

Moving forward, we would like to rely more on Mapping and less on the entire DocumentMapper, but currently it is cumbersome to create Mapping without creating an instance of DocumentMapper.

This commit removes DocumentMapperParser and DocumentMapper.Builder in favor of a new class called MappingParser that given xcontent mappings returns a Mapping instance, which can be used on its own or provided to DocumentMapper at its construction time. This will help with further refactorings as well as to possibly have more tests that don't rely on the entire MapperService/DocumentMapper but rather only on the needed components.",https://github.com/elastic/elasticsearch/commit/8ad476ad21ac3304bb6369d8a115226bb2903267
3092,3092.0,3266.0,elastic/elasticsearch,97eda6fab2a85b8d2cc57e7b26a338df36cb0b0a,"Scripting: refactor use of stdlib extractor (#68402)

If there's no java stdlib path, `StdlibJavadocExtractor` is unnecessary.

This creates a separate code path for that case, which removes a
bunch of checking that `StdlibJavadocExtractor` is `null`.",https://github.com/elastic/elasticsearch/commit/97eda6fab2a85b8d2cc57e7b26a338df36cb0b0a
3093,3093.0,3267.0,elastic/elasticsearch,6be3a507f62fbdc2d2bd11db582219d22c8ff9f7,"Refactor IndexMetadataUpgradeService to IndexMetadataVerifier (#67547)

This PR removes support for index metadata upgrades:
* Stop using the `index.version.upgrade` setting and deprecate it.
* Remove `MetadataIndexUpgradeService` and other references to upgrades.

In addition to supporting upgrades, `MetadataIndexUpgradeService` verified
certain aspects of the metadata, like index version compatibility. This logic
is important to keep, so `MetadataIndexUpgradeService` was reworked to
`IndexMetadataVerifier` instead of being removed completely.

Closes #66143.",https://github.com/elastic/elasticsearch/commit/6be3a507f62fbdc2d2bd11db582219d22c8ff9f7
3094,3094.0,3268.0,elastic/elasticsearch,246cd030963845799850b449fcc213ebe7e5cbda,"Don't use 'default' as the default name for keyword normalizers (#68354)

We previously used 'null' as a placeholder for unconfigured normalizers
on keywords. With recent refactoring, this was changed to 'default', but
this causes problems for configurations that already have a custom
normalizer called 'default', which now gets ignored. This commit changes
the mapper back to using 'null' as a default, and adds a test that you can
add a normalizer called 'default' that will be applied correctly.",https://github.com/elastic/elasticsearch/commit/246cd030963845799850b449fcc213ebe7e5cbda
3095,3095.0,3269.0,elastic/elasticsearch,cf08c0e6ab08cc43a21b090262955fe0e0661221,"[Transform] refactor cat transform to show more useful information (#68232)

Refactoring of cat transform to show more relevant information. The current cat transform shows a
lot of configuration details, however cat should show operationally useful information. This PR
changes the defaults and also adds when transform did a search last.",https://github.com/elastic/elasticsearch/commit/cf08c0e6ab08cc43a21b090262955fe0e0661221
3096,3096.0,3270.0,elastic/elasticsearch,d981cf2dff186f1bd908045fc70a2a7586e017bc,"Remove intermediate SearchLookup classes (#68052)

SearchLookup has two intermediate classes, DocMap and StoredFieldsLookup, that
are simple factories for their Leaf implementations. They are never accessed
outside SearchLookup, with the exception of two calls on DocMap that can be
easily refactored. This commit removes them, making SearchLookup.getLeafSearchLookup
directly responsible for creating the leaf lookups.",https://github.com/elastic/elasticsearch/commit/d981cf2dff186f1bd908045fc70a2a7586e017bc
3097,3097.0,3271.0,elastic/elasticsearch,afa4ce027c3e8b2ac3532543f72c17530196699e,"EQL: Introduce ~ grammar for case-insensitive functions (#67869)

By default, operators and string comparisons are case sensitive. This PR
enables support for case insensitive comparisons through the ~ (tilde)
symbol which works on functions.

For example:
process where endsWith~(file.path, ""ExE"")

will match all file.path that end with ""exe"", regardless of their case.

In the process, refactored the code by introducing a common class and
improving code consistency.

Fix #67868",https://github.com/elastic/elasticsearch/commit/afa4ce027c3e8b2ac3532543f72c17530196699e
3098,3098.0,3272.0,elastic/elasticsearch,09eb817496cb88885d60a80ea2f6eebae0fd308d,"[Transform] refactor transform functions that utilize composite aggs (#67986)

Many of the queries and APIs with the composite agg functions are very similar (if not exactly the same).

This commit refactors both the pivot and latest transform functions so that they are more uniform in design and common functions are extracted out.",https://github.com/elastic/elasticsearch/commit/09eb817496cb88885d60a80ea2f6eebae0fd308d
3099,3099.0,3273.0,elastic/elasticsearch,54c8d45fa561335b8a5bd0790e6c5ec19a2bf361,"Add bwc for parsing mappings from dynamic templates (#67763)

During refactoring of the mapper parsing code, the part that checks for unknown
mapper parameters and throws an error when one is found was moved to
FieldMapper.Builder#parse which gets also executed when applying matching
dynamic templates. However, dynamic templates introduced during the 7.x versions
may still contain arbitrary parameters, although we have deprecation warnings
for that in place on latest 7.x now. When using these templates, indexing a new
document with a new field that triggers one of these mappings to be parsed can
create an error as demonstrated in #66765. Instead we need to be lenient in
these cases and simply ignore the unknown parameter while issuing a deprecation
warning here as well.

Closes #66765",https://github.com/elastic/elasticsearch/commit/54c8d45fa561335b8a5bd0790e6c5ec19a2bf361
3100,3100.0,3274.0,elastic/elasticsearch,70c611ba66bc3b4219664bad439a8dc8ed83694b,"Refactor RollupAction to leverage a shard-based indexing strategy (#66423)

This commit refactors the rollup action in order to execute on a per shard basis.
Each shard is responsible for sending its local buckets to the target rollup index.
The shard action is executed in the rollup thread pool in order to limit the
number of shards that can rollup concurrently per node.
Buckets are computed on the fly using the index searcher and they are sorted
using a compressed offline sorter.

This commit also removes the rollup thread pool usage in the RollupAsyncIndexer that is used by
the legacy rollup and transforms. All actions performed by this indexer are asynchronous so
using the generic thread pool to fire search and bulk requests is ok.

Co-authored-by: jimczi <jim.ferenczi@elastic.co>
Co-authored-by: James Rodewig <40268737+jrodewig@users.noreply.github.com>",https://github.com/elastic/elasticsearch/commit/70c611ba66bc3b4219664bad439a8dc8ed83694b
3101,3101.0,3275.0,elastic/elasticsearch,2f2b690025666fdf52d097afd75cc162e70f3da9,"QL: Refactor FunctionRegistry to make it pluggable (#67761)

Break the FunctionRegistry monolith into a common QL base and a SQL
specific registry that handles aspects such as distinct and extract.
In the process clean-up the names and signature of internal interfaces.
Most of the semantics were preserved however the error messages were
slightly tweaked to make them more readable - this shouldn't be a
problem as they are being used internally mainly in test assertions.",https://github.com/elastic/elasticsearch/commit/2f2b690025666fdf52d097afd75cc162e70f3da9
3102,3102.0,3276.0,elastic/elasticsearch,6bd946da7a53163c0c9fe25bb5040aab6435b7be,"QL: Refactor function resolution strategy (#67672)

The SQL strategy for resolving functions is still used inside QL.
This commit simplifies it by breaking the enum into a pluggable
interface that SQL extends accordingly.",https://github.com/elastic/elasticsearch/commit/6bd946da7a53163c0c9fe25bb5040aab6435b7be
3103,3103.0,3277.0,elastic/elasticsearch,eed54949dae419386aa488afc4f36fc9c65e66d9,"[ML] Refactor data frame analytics framework in steps (#67423)

This commit improves the design of the code that manages
and runs data frame analytics jobs.

First, it splits the code into asynchronous steps. At the moment,
there are only two steps: the reindexing step and the analysis
step. However, splitting the task into steps allows us to
factor out running inference into its own step which in turn
allows us to properly resume a job that failed during inference
without having to start a c++ process. I will follow with this
improvement in a follow up PR.

The other main improvement this commit does is that it simplifies
the state of a DFA task by getting rid of `reindexing` and `analyzing`
states. Now, once the task goes to `started` it stays there until
it finishes or gets stopped. The removed states are no longer useful.
They used to be useful in order to know how to resume a job before
progress was added. But currently they serve no purpose at all.",https://github.com/elastic/elasticsearch/commit/eed54949dae419386aa488afc4f36fc9c65e66d9
3104,3104.0,3278.0,elastic/elasticsearch,ab39cd5d96f39b95798e49b7a7dd6bc33dce3d76,"Fix AutoFollowIT Failures from Transport Thread Assertion (#67115)

We have to execute the failure callback on the generic pool as well,
not just the `onResponse` since it blocks on a transport request so I refactored
the listener accordingly.

closes #67106",https://github.com/elastic/elasticsearch/commit/ab39cd5d96f39b95798e49b7a7dd6bc33dce3d76
3105,3105.0,3279.0,elastic/elasticsearch,ae272030ad4bab3a820838bdd56d3a8b87c5a76a,"Extract common reduce logic from InternalTerms (#66565)

In #65623 we are adding a new aggregation that can reuse some of the
non-trivial logic of terms aggs such as reduction. This refactoring
moves some of this logic into a parent class where it can be reused.

Relates to #65623",https://github.com/elastic/elasticsearch/commit/ae272030ad4bab3a820838bdd56d3a8b87c5a76a
3106,3106.0,3280.0,elastic/elasticsearch,e1437f3ea32feafe030b0406804f81e8bfefde59,"Add more tests for creating system indices (#66605)

Add integration tests for creating and auto-creating system indices. This
leans on the work done to test SystemIndexManager, and indeed refactors
those tests as well.",https://github.com/elastic/elasticsearch/commit/e1437f3ea32feafe030b0406804f81e8bfefde59
3107,3107.0,3281.0,elastic/elasticsearch,6d1f43c6d2e8cc453d4d72d48e8239a043309d32,"Fix search_as_you_type field with term_vector (#66432)

This commit fixes a bug in the search_as_you_type field that was introduced during
the refactoring of the field mapper. The prefix field that is used internally
by the search_as_you_type mapper doesn't need term vector even if they are activated
on the main field. So this commit ensures that we don't copy the options from the main
field when we create the prefix sub-field.

Closes #66407",https://github.com/elastic/elasticsearch/commit/6d1f43c6d2e8cc453d4d72d48e8239a043309d32
3108,3108.0,3282.0,elastic/elasticsearch,f8bda89c03efc77cd20829766b1acb152480ac53,"[ML] Report cause when datafeed extraction encounters error (#66167)

When a datafeed encounters errors extracting data, often
the error is an instance of `SearchPhaseExecutionException`.
In that case the top level error message is `Partial shards failure`
which is not very informative.

This commit refactors a transform util method from
`ExceptionRootCauseFinder`, which unwraps exceptions with special
handling for `SearchPhaseExecutionException`, and makes use of
it from datafeed `ProblemTracker` in order to provide a more
useful error message.",https://github.com/elastic/elasticsearch/commit/f8bda89c03efc77cd20829766b1acb152480ac53
3109,3109.0,3283.0,elastic/elasticsearch,d4d56cb5ffca1fc6f11e616ae54f4391333ea863,"Refactor deprecation plugin for easier extensibility (#65284)

This refactor for the deprecation plugin makes extending and adding more plugin settings deprecation checks simpler.",https://github.com/elastic/elasticsearch/commit/d4d56cb5ffca1fc6f11e616ae54f4391333ea863
3110,3110.0,3284.0,elastic/elasticsearch,4547d3b24501bcdfef343e5a493af657395942fd,"Refactor ActionListener#map towards Stricter API (#65526)

Making `#map` look and feel a little nicer, optimize chains of `#map`,
and replace `#delegateFailure` calls with `#map` calls where possible
in order to enforce callbacks not throwing where possible.",https://github.com/elastic/elasticsearch/commit/4547d3b24501bcdfef343e5a493af657395942fd
3111,3111.0,3285.0,elastic/elasticsearch,22c129abcced67465e14114f18afacb33e7886ed,"refactor sourceIndex out of RollupV2Config (#65478)

this commit extracts the sourceIndex from the RollupV2Config. It
was not a natural fit. The sourceIndex will now be a part of the
RollupAction.Request.

renamed RollupV2Config to RollupActionConfig

relates #42720.",https://github.com/elastic/elasticsearch/commit/22c129abcced67465e14114f18afacb33e7886ed
3112,3112.0,3286.0,elastic/elasticsearch,4f4c3d3371b00d2b6c688af4b9c6c6af4b84f75e,"Adding back a validation of incorrect response header (#65255)

SQL used to validate this and previous refactoring accidentally removed
this.
This commit brings it back.
relates #51816",https://github.com/elastic/elasticsearch/commit/4f4c3d3371b00d2b6c688af4b9c6c6af4b84f75e
3113,3113.0,3287.0,elastic/elasticsearch,1a8ce8716d2bbca49c123eceb122898502b8a843,"Restore use of default search and search_quote analyzers (#65491)

In the refactoring of TextFieldMapper, we lost the ability to define
a default search or search_quote analyzer in index settings. This
commit restores that ability, and adds some more comprehensive
testing.

Fixes #65434",https://github.com/elastic/elasticsearch/commit/1a8ce8716d2bbca49c123eceb122898502b8a843
3114,3114.0,3288.0,elastic/elasticsearch,070b2e7c477984daf4240fc8891d66a1eca882fa,"Port LicenseHeadersTask to java and remove ant layer (#65310)

This ports Licenseheaders task from using groovies antbuilder to rely on the rat ant task 
to use rat directly which allows us to port this completely to java. We also refactored rat to 
generate xml instead of plain report file. 

- More efficient as plain file generation is based on running an xslt transformation on top 
of the xml output (via ant rat in a different thread which results in faster task execution as seen 
in the attached profiler report)
- Easier machine readable
- By using rat directly we can avoid parsing the log file for reporting.
- Ported more buildSrc sources from groovy to java which has been blocked from porting by 
LicenseHeadersTask",https://github.com/elastic/elasticsearch/commit/070b2e7c477984daf4240fc8891d66a1eca882fa
3115,3115.0,3289.0,elastic/elasticsearch,8695a79ce264b4adb959e5b8335ad50a6a0bc9ce,"[ML] Refactor process starting into its own method in AutodetectProcessManager (#65360)

A method extraction that improves readability of AutodetectProcessManager.openJob
ever so slightly.",https://github.com/elastic/elasticsearch/commit/8695a79ce264b4adb959e5b8335ad50a6a0bc9ce
3116,3116.0,3290.0,elastic/elasticsearch,4acbff932c2390eb472ab67bd6c6cc1399585523,"Remove unused EQL helpers (#65165)

These methods were leftover from previous refactorings, but they are no
longer necessary.",https://github.com/elastic/elasticsearch/commit/4acbff932c2390eb472ab67bd6c6cc1399585523
3117,3117.0,3291.0,elastic/elasticsearch,7a9e118d1ed74e7de0b146a257d372fc309e2e0c,"Encapsulate nested identity loading (#65054)

When handling nested documents in the Fetch phase, we currently find
a document's nested identity by loading ObjectMappers from a MapperService,
and iterating over their filters. This logic is difficult to follow, end requires
exposing internals of the mappers that we would rather hide away.

This commit refactors all NestedIdentity loading into a single NestedDocuments
object, with per-segment iterators to handle the individual documents. This way
of iterating over documents allows us to share parent filters, meaning that we
can avoid rebuilding the filter for every nested level of every visited document.",https://github.com/elastic/elasticsearch/commit/7a9e118d1ed74e7de0b146a257d372fc309e2e0c
3118,3118.0,3292.0,elastic/elasticsearch,c2864e38fb097bd0e8095aaa716263356a0c3f8a,"[Test] Output authResult details on test failures (#65043)

Currently when the tests fail to authenticate, they only show that user is null
or status is not success. It would be helpful to have knowledge about the whole 
AuthenticationResult object. This PR refactors the code to always show the 
stringified authenticationResult on failure.

Relates: #56756",https://github.com/elastic/elasticsearch/commit/c2864e38fb097bd0e8095aaa716263356a0c3f8a
3119,3119.0,3293.0,elastic/elasticsearch,e85d9d1bbee13ad408e789fd62efb30bc8d223f2,"EQL: Add option for returning results from the tail of the stream (#64869)

Introduce option for specifying whether the results are returned from
the tail (end) of the stream or the head (beginning).
Improve sequencing algorithm by significantly eliminating the number
of in-flight sequences for spare datasets.
Refactor the sequence class by eliminating some of the redundant code.
Change matching behavior for tail sequences.
Return results based on their first entry ordinal instead of
insertion order (which was ordered on the last match ordinal).
Randomize results position inside test suite.

Close #58646",https://github.com/elastic/elasticsearch/commit/e85d9d1bbee13ad408e789fd62efb30bc8d223f2
3120,3120.0,3294.0,elastic/elasticsearch,757af065db0bcccc4cdeb3b7bb50b47b6f7701a0,"[ML] Refactor gathering of context necessary to run datafeed (#64860)

This groups together the context necessary to build a datafeed
job into a method of the `DatafeedManager`. This method can
be reused in the future in order to determine whether the
job needs to be reverted to its loaded model snapshot in
case the latter is out dated.",https://github.com/elastic/elasticsearch/commit/757af065db0bcccc4cdeb3b7bb50b47b6f7701a0
3121,3121.0,3295.0,elastic/elasticsearch,d99f964c6eff4f19a0b25c065dddcf0c42a688d6,"[ML] Refactor fetching of datafeed restart info (#64555)

This moves the logic of fetching the information needed
to restart a datafeed into `JobResultsProvider`.",https://github.com/elastic/elasticsearch/commit/d99f964c6eff4f19a0b25c065dddcf0c42a688d6
3122,3122.0,3296.0,elastic/elasticsearch,a32a0986c35ba7e971ff376abb6539892b2b1470,"Make ES files inside Docker container world readable (#64274)

Running the Elasticsearch Docker image with a different GID is
possible but trappy, since at present all the ES files are only
readable by the user and group. This PR documents a Docker CLI flag
that fixes this situation, by ensuring the container user is added
to the default group (which is `root`, GID 0).

I also added a test for this case, and refactored the Docker tests
to use a builder pattern for constructing the `docker run` command.
The existing code was becoming unwieldy and hard to change.",https://github.com/elastic/elasticsearch/commit/a32a0986c35ba7e971ff376abb6539892b2b1470
3123,3123.0,3297.0,elastic/elasticsearch,2c5884188734eccb9b962058b09d62824997f1f8,"Reuse policy parsing for plugins (#64089)

Plugin policy parsing is currently split, with different code executed
for Elasticsearch startup vs installing a plugin. This commit
refactors the policy parsing to be utilized by both places. The main
benefit is policy files in both places now handle permissions not only
for a global grant, but also codebase specific grants.",https://github.com/elastic/elasticsearch/commit/2c5884188734eccb9b962058b09d62824997f1f8
3124,3124.0,3298.0,elastic/elasticsearch,ae8462a4dcc30d4e90f275c1fd73af79b3615589,"[ML] refactor tasks classes and add new abstract executor (#64242)

This commit extracts out the anomaly job executor and task into their own classes. 

Additionally, a new `AbstractJobPersistentTaskExecutor` class is added. This class takes care of adding the setting listeners and some of the common validation logic between data frame analytics and anomaly jobs.",https://github.com/elastic/elasticsearch/commit/ae8462a4dcc30d4e90f275c1fd73af79b3615589
3125,3125.0,3299.0,elastic/elasticsearch,70d88ef62d7ea287907c98b3f3263e3b08e60f3f,"Rework parent-join to not require access to DocumentMapper (#63738)

Parent joins work using a cluster of field mappers: the join field itself;
a set of subfields that allow multiple relationships between parents and
children to be defined; and a metadata field that acts to only allow a
single join field per index to be defined. The various queries and
aggregations that use this infrastructure retrieve the join field mapper
via a static method and then build themselves by pulling individual
relationship mappers from this main mapper.

Using mappers rather than MappedFieldTypes means that we need to
expose DocumentMapper at search time, which is something we are
trying to avoid. This commit refactors things so that the join relations
are encapsulated in a Joiner object, which lives instead on the
MappedFieldType associated with the metadata join field. Rather than
using the ParentJoinFieldMapper and connected ParentIdFieldMappers,
we can now build queries and aggregations using this Joiner object,
retrieved via the QueryShardContext or AggregationContext using
a static helper method on Joiner itself.",https://github.com/elastic/elasticsearch/commit/70d88ef62d7ea287907c98b3f3263e3b08e60f3f
3126,3126.0,3300.0,elastic/elasticsearch,5e5599186121d2aef4cd99fad16ecd2291b6676a,"Simplify DocumentParser handling (#63800)

DocumentMapperParser holds a reference to the xcontent registry, only with the purpose of being retrieved in DocumentParser#parsedDocument .

This can be greatly simplified by making DocumentParser take the registry as a constructor argument, and removing the same reference from DocumentMapperParser. This may also allow for further refactorings around how DocumentMapperParser is used. With this change it is MapperService that creates DocumentParser and exposes it so that DocumentMapper can use it.",https://github.com/elastic/elasticsearch/commit/5e5599186121d2aef4cd99fad16ecd2291b6676a
3127,3127.0,3301.0,elastic/elasticsearch,71fbf2ccac75f8c80450d4ff835543360714d9be,"[ML] refactor to use ByteSizeValue#of... helpers (#63768)

This is a simple find/replace with regex. 

This replaces all the `new ByteSizeValue(<value>, ByteSizeUnit.<unit)` to the correct `ByteSizeValue.of...` functions.

Its a much better abstraction and removes the need to refer to `ByteSizeUnit` all together.",https://github.com/elastic/elasticsearch/commit/71fbf2ccac75f8c80450d4ff835543360714d9be
3128,3128.0,3302.0,elastic/elasticsearch,bf6dc58b93529f977d035a846d083b1c31867694,"SQL: integer parameter validation in string functions (#63338)

* SQL: integer parameter validation in string functions (#58923)

In insert, locate, substring function, when argument `start` or `length` is greater than Integer.MAX_INT OR less then Integer.MIN_INT + 1 (note that `start` need to minus 1), it causes overflow and leads to unexpected results.

* Add range checks for BinaryStringNumericProcessors

- Add range checks for Left, Right, Repeat.
- Minor refactorings on initial PR changes.

Co-authored-by: yinanwu <yinanwu@tencent.com>",https://github.com/elastic/elasticsearch/commit/bf6dc58b93529f977d035a846d083b1c31867694
3129,3129.0,3303.0,elastic/elasticsearch,b7893ba14c476a8c55d8e8a0fdf4760567d0a00c,"Replace usage of Project#exec with ExecOperations in LoggedExec (#63550)

As part of moving towards supporting gradle configuration cache, we should avoid using
project in task actions. Therefore we refactored the LoggedExec#exec method to use the
injectable ExecOperations service instead

fixes #63052",https://github.com/elastic/elasticsearch/commit/b7893ba14c476a8c55d8e8a0fdf4760567d0a00c
3130,3130.0,3304.0,elastic/elasticsearch,31b4cde8396b42f768bd71a4cdf2abb640b4a0b0,"[ML] Validate dest pipeline exists on transform update (#63494)

Adds validation that the dest pipeline exists when a transform
is updated. Refactors the pipeline check into the `SourceDestValidator`.

Fixes #59587",https://github.com/elastic/elasticsearch/commit/31b4cde8396b42f768bd71a4cdf2abb640b4a0b0
3131,3131.0,3305.0,elastic/elasticsearch,275c792fe423ac89c0763571fdd537453032f902,"Tidy up some ILM and SLM packages (#63146)

Very minor refactoring, just moving some ILM and SLM classes around to decrease
the total number of packages.",https://github.com/elastic/elasticsearch/commit/275c792fe423ac89c0763571fdd537453032f902
3132,3132.0,3306.0,elastic/elasticsearch,40d528995ef51151d150cf3ecabf25fcaa51f493,"Small refactoring of unsinged_long (#62904)

- Modify Lucene::readSortValue to read BigInteger as a sortValue.
In #60050 writeSortValue was modified, but readSortValue was forgotten.

- Adjust yml tests to v7.10 asr unsigned_long has been backported

- Change MapperTests to use proper document IDs

Relates to #60050",https://github.com/elastic/elasticsearch/commit/40d528995ef51151d150cf3ecabf25fcaa51f493
3133,3133.0,3307.0,elastic/elasticsearch,84825d7439b29a48fbb9d75da384f25a78c9b9b7,"Avoid Redundantly Loading Monitoring Templates on CS Applier Thread (#62913)

This refactors the loading of monitoring templates slightly so that they aren't loaded over and
over again (from disk) on CS updates. This isn't an important optimization in production for obvious
reasons since it only affects the install stage, but this turned out to cause some slow CS applies
in tests.

Relates #62853",https://github.com/elastic/elasticsearch/commit/84825d7439b29a48fbb9d75da384f25a78c9b9b7
3134,3134.0,3308.0,elastic/elasticsearch,34c79afd9d84982fe9f97ad8795a757e39513a6b,"Refactor PointParser to not take FieldMapper as a parameter (#62950)

Passing FieldMappers to point parsing functions makes trying to build source-only
fields from MappedFieldTypes more complicated. This small refactoring changes
things so that the relevant parsing and factory functions from
AbstractGeometryFieldMapper are instead passed as lambdas to the PointParser
constructor.",https://github.com/elastic/elasticsearch/commit/34c79afd9d84982fe9f97ad8795a757e39513a6b
3135,3135.0,3309.0,elastic/elasticsearch,48db3f285aa8976ead5a9f5d071a9c1046d7bd31,"EQL: Refactor testing infrastructure (#62928)

Extract reusable methods inside QL TestUtils
Rename abstract base classes for clarity
Clean-up EQL DataLoader",https://github.com/elastic/elasticsearch/commit/48db3f285aa8976ead5a9f5d071a9c1046d7bd31
3136,3136.0,3310.0,elastic/elasticsearch,3fc407bd2dea7c3820d668294d3976f8f78d9667,"[Transform] Improve robustness when saving state (#62086)

refactor how state is persisted, call doSaveState only from the indexer thread, except there is none.

fixes #60781
fixes #52931
fixes #51629
fixes #52035",https://github.com/elastic/elasticsearch/commit/3fc407bd2dea7c3820d668294d3976f8f78d9667
3137,3137.0,3311.0,elastic/elasticsearch,6ab28e5b22df2c37fc4fa7f802696a743d55fe38,"Prepare Snapshot Shard State Update Logic For Clone Logic (#62617)

Small refactoring to shorten the diff with the clone logic in #61839:

* Since clones will create a different kind of shard state update that
isn't the same request sent by the snapshot shards service (and cannot be
the same request because we have no `ShardId`) base the shard state updates
on a different class that can be extended to be general enough to accomodate
shard clones as well.
* Make the update executor a singleton (can't make it an inline lambda as that
would break CS update batching because the executor is used as a map key but
this change still makes it crystal clear that there's no internal state to the
executor)
* Make shard state update responses a singleton (can't use TransportResponse.Empty because
we need an action response but still it makes it clear that there's no actual
response with content here)",https://github.com/elastic/elasticsearch/commit/6ab28e5b22df2c37fc4fa7f802696a743d55fe38
3138,3138.0,3312.0,elastic/elasticsearch,5b6a9917a5d6560387a9ec0f0bea7f316b150a57,"[ML] Add upgrade mappings assertions to full cluster restart tests (#62293)

Refactors the index mapping checks in the rolling upgrade tests 
and use that shared code in the full cluster restart tests.",https://github.com/elastic/elasticsearch/commit/5b6a9917a5d6560387a9ec0f0bea7f316b150a57
3139,3139.0,3313.0,elastic/elasticsearch,03c3d6a339a469afdd28f3d3a286a7ddcad73b35,"Allow [null] values in [null_value] (#61798)

Several field mappers have a null_value parameter, that allows you to specify a placeholder
value to insert into a document if the incoming value for that field is null. The default value
for this is always null, meaning ""add no placeholder"". However, we explicitly bar users from
setting this parameter directly to null (done in #7978, in order to fix an NPE).

This exclusion means that if a mapper is serialized with include_defaults, then we either need
to special-case null_value to ensure that it is not output when it holds the default value, or
we find that the resulting serialized form cannot be used to create a mapping. This stops us
doing some useful generic testing of mappers.

This commit permits null as a parameter value for null_value, and changes the tests to check
that it is a) permissible and b) applied without throwing errors. As part of the testing changes,
a new base class MapperServiceTestCase is refactored from MapperTestCase, holding
the various helper methods related to building mappings but not the single-mapper specific
abstract methods.

Closes #58823",https://github.com/elastic/elasticsearch/commit/03c3d6a339a469afdd28f3d3a286a7ddcad73b35
3140,3140.0,3314.0,elastic/elasticsearch,90f7508e6ebedd0cad13508624c89829253d9fb5,"Small refactoring of AsyncExecutionId (#61640)

- don't do encoding of asynchExecutionId if it is already provided in
the encoded form
- create a new instance of AsyncExecutionId after checks for
correctness are done",https://github.com/elastic/elasticsearch/commit/90f7508e6ebedd0cad13508624c89829253d9fb5
3141,3141.0,3315.0,elastic/elasticsearch,0501bfdd2a14ef4553f1e19e9aaaa993124f4626,"[ML] refactor ml job node selection into its own class (#61521)

This is a minor refactor where the job node load logic (node availability, etc.) is refactored into its own class.

This will allow future things (i.e. autoscaling decisions) to use the same node load detection class.",https://github.com/elastic/elasticsearch/commit/0501bfdd2a14ef4553f1e19e9aaaa993124f4626
3142,3142.0,3316.0,elastic/elasticsearch,a156e3439cd0d77f86a08ba121d24094dd83f576,"Refactor SamlAuthenticationIT (#57162)

Refactor the tests to not require a mock HTTP Server. This has been
the cause of flakiness and removing it doesn't affect the logical
coverage of this suite. The ""fake UI"" is now simulated by an
http client that makes the necessary requests to Elasticsearch APIs.",https://github.com/elastic/elasticsearch/commit/a156e3439cd0d77f86a08ba121d24094dd83f576
3143,3143.0,3317.0,elastic/elasticsearch,5457b34343838f11081c8c34234d79fcb6d1cecd,"Correct how field retrieval handles multifields and copy_to. (#61309)

Before when a value was copied to a field through a parent field or `copy_to`,
we parsed it using the `FieldMapper` from the source field. Instead we should
parse it using the target `FieldMapper`. This ensures that we apply the
appropriate mapping type and options to the copied value.

To implement the fix cleanly, this PR refactors the value parsing strategy. Now
instead of looking up values directly, field mappers produce a helper object
`ValueFetcher`. The value fetchers are responsible for almost all aspects of
fetching, including looking up the right paths in the _source.

The PR is fairly big but each commit can be reviewed individually.

Fixes #61033.",https://github.com/elastic/elasticsearch/commit/5457b34343838f11081c8c34234d79fcb6d1cecd
3144,3144.0,3318.0,elastic/elasticsearch,91c82e76fb65445f84269eed72db09d396593703,"Fix AOOBE when setting min_doc_count to 0 in significant_terms (#60823)

This commit fixes the computation of the subset size on empty buckets (doc count of 0).
The aggregator test refactoring in #60683 revealed this bug.",https://github.com/elastic/elasticsearch/commit/91c82e76fb65445f84269eed72db09d396593703
3145,3145.0,3319.0,elastic/elasticsearch,dca46c29fff1f77ba4c27f07a33d2895a96a1bba,"[DOCS] Refactor EQL docs (#60700)

Changes:

* Moves sample data to reusable rest test
* Combines EQL index, requirements, and run a search pages
* Combines EQL syntax and limitations pages
* Adds related redirects",https://github.com/elastic/elasticsearch/commit/dca46c29fff1f77ba4c27f07a33d2895a96a1bba
3146,3146.0,3320.0,elastic/elasticsearch,4407402924d07337b6bb1c4b70ab05faa4dcb9aa,"[DOCS] Refactor snippets for `Search your data` (#60701)

Changes:
* Moves sample data to reusable REST test
* Add xref to pagination docs
* Removes duplicated results
* Updates the wildcard example",https://github.com/elastic/elasticsearch/commit/4407402924d07337b6bb1c4b70ab05faa4dcb9aa
3147,3147.0,3321.0,elastic/elasticsearch,393ce41740007d4ed0341d2116b8c739974d0f6c,"Enable bwc tests after backport of bounds in aggregations refactoring (#60688)

This commit enables all bwc tests after #60681 is merged.",https://github.com/elastic/elasticsearch/commit/393ce41740007d4ed0341d2116b8c739974d0f6c
3148,3148.0,3322.0,elastic/elasticsearch,09d4034115ffb886652e349fb08ae7413227b07b,"Prepare for backport of bounds in aggregations refactoring (#60684)

This commit temporary disables all bwc tests until #60681 is merged.",https://github.com/elastic/elasticsearch/commit/09d4034115ffb886652e349fb08ae7413227b07b
3149,3149.0,3323.0,elastic/elasticsearch,bfc62a419e7cd1f7f8bc0a3026a2f6ecc361fd45,"Refactor extendedBounds to use DoubleBounds (#60556)

Refactors extendedBounds to use DoubleBounds instead
of 2 variables.

This is a follow up for #59175",https://github.com/elastic/elasticsearch/commit/bfc62a419e7cd1f7f8bc0a3026a2f6ecc361fd45
3150,3150.0,3324.0,elastic/elasticsearch,c99cac4e2664ff9264c7ed2fba0c24a9a5bcc5e0,"Refactor SnapshotsInProgress State Transitions (#60517)

The copy constructors previously used were hard to read and the exact state changes
were not obvious at all.
Refactored those into a number of named constructors instead, added additional assertions
and moved the snapshot abort logic into `SnapshotsInProgress`.",https://github.com/elastic/elasticsearch/commit/c99cac4e2664ff9264c7ed2fba0c24a9a5bcc5e0
3151,3151.0,3325.0,elastic/elasticsearch,9d283287c49577faad891b4263b9501dba1f0505,"Clarify SourceLookup sharing across fetch subphases. (#60179)

The `SourceLookup` class provides access to the _source for a particular
document, specified through `SourceLookup#setSegmentAndDocument`. Previously
the search context contained a single `SourceLookup` that was shared between
different fetch subphases. It was hard to reason about its state: is
`SourceLookup` set to the expected document? Is the _source already loaded and
available?

Instead of using a global source lookup, the fetch hit context now provides
access to a lookup that is set to load from the hit document.

This refactor closes #31000, since the same `SourceLookup` is no longer shared
between the 'fetch _source phase' and script execution.",https://github.com/elastic/elasticsearch/commit/9d283287c49577faad891b4263b9501dba1f0505
3152,3152.0,3326.0,elastic/elasticsearch,db0adfd2b8f186293fa64c6674fef7d4fa6ed430,"[DOCS] Refactored index-templates topic. (#59737)

* [DOCS] Refactored index-templates topic.

* [DOCS] Add separate files.

* [DOCS] Add delete component template.

* Apply suggestions from code review

Co-authored-by: James Rodewig <james.rodewig@elastic.co>

* [DOCS] Incorporated review comments",https://github.com/elastic/elasticsearch/commit/db0adfd2b8f186293fa64c6674fef7d4fa6ed430
3153,3153.0,3327.0,elastic/elasticsearch,cb960cdb67362ac9200830efa615948d5817db8a,Refactor HyperLogLogPlusPlus to separate algorithms and internal data representation (#60104),https://github.com/elastic/elasticsearch/commit/cb960cdb67362ac9200830efa615948d5817db8a
3154,3154.0,3328.0,elastic/elasticsearch,2382c752ac339389f42d5e7fe5a5b6cb3ab261db,"Simplify CheckSumBlobStoreFormat and make it more Reusable (#59888)

Refactored `CheckSumBlobStoreFormat` so it can more easily be reused in
other functionality (i.e. upcoming repair logic).
Simplified away constant `failIfAlreadyExists` parameter and removed the atomic
write method and its tests.
The atomic write method was only used in a single spot and that spot has now been adjusted to
work the same way writing root level metadata works.",https://github.com/elastic/elasticsearch/commit/2382c752ac339389f42d5e7fe5a5b6cb3ab261db
3155,3155.0,3329.0,elastic/elasticsearch,d333dacb4abb14a58b36f3108521547ee374a06a,"Enable Fully Concurrent Snapshot Operations (#56911)

Enables fully concurrent snapshot operations:
* Snapshot create- and delete operations can be started in any order
* Delete operations wait for snapshot finalization to finish, are batched as much as possible to improve efficiency and once enqueued in the cluster state prevent new snapshots from starting on data nodes until executed
   * We could be even more concurrent here in a follow-up by interleaving deletes and snapshots on a per-shard level. I decided not to do this for now since it seemed not worth the added complexity yet. Due to batching+deduplicating of deletes the pain of having a delete stuck behind a long -running snapshot seemed manageable (dropped client connections + resulting retries don't cause issues due to deduplication of delete jobs, batching of deletes allows enqueuing more and more deletes even if a snapshot blocks for a long time that will all be executed in essentially constant time (due to bulk snapshot deletion, deleting multiple snapshots is mostly about as fast as deleting a single one))
* Snapshot creation is completely concurrent across shards, but per shard snapshots are linearized for each repository as are snapshot finalizations

See updated JavaDoc and added test cases for more details and illustration on the functionality.

Some notes:

The queuing of snapshot finalizations and deletes and the related locking/synchronization is a little awkward in this version but can be much simplified with some refactoring.  The problem is that snapshot finalizations resolve their listeners on the `SNAPSHOT` pool while deletes resolve the listener on the master update thread. With some refactoring both of these could be moved to the master update thread, effectively removing the need for any synchronization around the `SnapshotService` state. I didn't do this refactoring here because it's a fairly large change and not necessary for the functionality but plan to do so in a follow-up.

This change allows for completely removing any trickery around synchronizing deletes and snapshots from SLM and 100% does away with SLM errors from collisions between deletes and snapshots.

Snapshotting a single index in parallel to a long running full backup will execute without having to wait for the long running backup as required by the ILM/SLM use case of moving indices to ""snapshot tier"". Finalizations are linearized but ordered according to which snapshot saw all of its shards complete first",https://github.com/elastic/elasticsearch/commit/d333dacb4abb14a58b36f3108521547ee374a06a
3156,3156.0,3330.0,elastic/elasticsearch,219b7dbd12fbd9e7438ca86d6ea7cd0bfdba866b,"Add declarative parameters to FieldMappers (#58663)

The FieldMapper infrastructure currently has a bunch of shared parameters, many of which
are only applicable to a subset of the 41 mapper implementations we ship with. Merging,
parsing and serialization of these parameters are spread around the class hierarchy, with
much repetitive boilerplate code required. It would be much easier to reason about these
things if we could declare the parameter set of each FieldMapper directly in the implementing
class, and share the parsing, merging and serialization logic instead.

This commit is a first effort at introducing a declarative parameter style. It adds a new FieldMapper
subclass, ParametrizedFieldMapper, and refactors two mappers, Boolean and Binary, to use it.
Parameters are declared on Builder classes, with the declaration including the parameter name,
whether or not it is updateable, a default value, how to parse it from mappings, and how to
extract it from another mapper at merge time. Builders have a getParameters method, which
returns a list of the declared parameters; this is then used for parsing, merging and serialization.
Merging is achieved by constructing a new Builder from the existing Mapper, and merging in
values from the merging Mapper; conflicts are all caught at this point, and if none exist then a new,
merged, Mapper can be built from the Builder. This allows all values on the Mapper to be final.

Other mappers can be gradually migrated to this new style, and once they have all been refactored
we can merge ParametrizedFieldMapper and FieldMapper entirely.",https://github.com/elastic/elasticsearch/commit/219b7dbd12fbd9e7438ca86d6ea7cd0bfdba866b
3157,3157.0,3331.0,elastic/elasticsearch,b5e374d958d7d6d8d9187e7b791158bab84d28a1,[DOCS] Change Beats links to refactored getting started docs (#58790),https://github.com/elastic/elasticsearch/commit/b5e374d958d7d6d8d9187e7b791158bab84d28a1
3158,3158.0,3332.0,elastic/elasticsearch,673444000e3ada416d57f7a9e8ddc77d590a1b74,"Percolator keyword fields should not store norms (#58899)

The refactoring in #57666 inadvertently enabled norms on two of the percolator subfields,
leading to an increase in memory usage. This commit disables norms on these fields again.",https://github.com/elastic/elasticsearch/commit/673444000e3ada416d57f7a9e8ddc77d590a1b74
3159,3159.0,3333.0,elastic/elasticsearch,bcf2c1141302f3f98c85e82d2c501aa02c8540e9,"EQL: Introduce sequence internal paging (#58859)

Refactor sequence matching classes in order to decouple querying from
results consumption (and matching).
Rename some classes to better convey their intent.

Introduce internal pagination of sequence algorithm, that is getting the
data in slices and, if needed, moving forward in order to find more
matches until either the dataset is consumer or the number of results
desired is found.",https://github.com/elastic/elasticsearch/commit/bcf2c1141302f3f98c85e82d2c501aa02c8540e9
3160,3160.0,3334.0,elastic/elasticsearch,fa8669ed0cd468c02ff1383af37e387a68d98088,"EQL: Fix race condition in RestEqlCancellationIT (#58493)

Makes RestEqlCancellationIT more deterministic by adding an assertBusy for the
cancellation propagation. It also refactors the SearchBlockPlugin to block
after the field caps are received, which prevents the test to block on the
transport thread. Blocking on transport thread was preventing the cancellation
on disconnect from cancelling the task until after the block on the transport
thread was released.

Since I cannot reporduce this issue, I will leave the trace logging for now
and will remove it after observing this test for a while in CI.

Relates to #58270",https://github.com/elastic/elasticsearch/commit/fa8669ed0cd468c02ff1383af37e387a68d98088
3161,3161.0,3335.0,elastic/elasticsearch,91cc417aba84fce2b9b8a42794ee2411708b6c71,"Simplify mapping validation for resizing indices. (#58510)

When creating a target index from a source index, we don't allow for target
mappings to be specified. This PR simplifies the check that the target mappings
are empty.

This refactor will help when implementing composable template merging, since we
no longer need to resolve + check the target mappings when creating an index
from a template.",https://github.com/elastic/elasticsearch/commit/91cc417aba84fce2b9b8a42794ee2411708b6c71
3162,3162.0,3336.0,elastic/elasticsearch,b8db2da09635df481b3b71f44d5b583db8d5502b,"Remove anonymous PublicationContext implementation (#58405)

Today the `PublicationContext` interface has a single anonymous
implementation, and `PublicationTransportHandler` has various methods
that take the variables that this anonymous class captures. This commit
refactors this into a proper class with proper fields and moves the
relevant methods onto this class.",https://github.com/elastic/elasticsearch/commit/b8db2da09635df481b3b71f44d5b583db8d5502b
3163,3163.0,3337.0,elastic/elasticsearch,992039653c4c416189fc4037886a4d09eb8f0c0a,"Remove several Painless user tree nodes (#58129)

This PR contains the following clean up:

* Remove the EConstant node from the user tree. This is no longer necessary as 
we don't do constant folding as part of the semantic phase anymore.
* Remove DType nodes from the user tree. These are no longer necessary as 
they were part of a plan to add flexibility to Painless under a single tree 
architecture.
* Remove SDeclaration from SCatch. Catch statements are unique enough that 
using and SDeclaration node for the variable declaration was an overly complex 
indirection.
* Rename ScriptRoot to ScriptScope and rename Scope to SemanticScope. 
ScriptRoot is just the scope for the overall compilation of the script. With 
multiple phases is makes sense to rename Scope to SemanticScope as this will 
only be used during the semantic phase and may overlap otherwise.
* Make ScriptScope a child of SemanticScope so that we can have only one 
argument passed in during phases as this will eventually be refactored into a 
generic base visitor.",https://github.com/elastic/elasticsearch/commit/992039653c4c416189fc4037886a4d09eb8f0c0a
3164,3164.0,3338.0,elastic/elasticsearch,9b7d2a697ee49716096da22ed27c09db9b5e3dc2,"Enable TTY password OS tests, plus refactoring (#57759)

Two keystore tests were unintentionally ignored when the
password-protected keystore work was merged. I've reënabled those tests
here.

I've also refactored the test methods a little bit to reduce the API
surface: instead of having a ""startElasticsearchTtyPassword"" method and
a ""startElasticsearchStandardInputPassword"" method, I've made a single
""startElasticsearch"" method with a ""useTty"" boolean argument.",https://github.com/elastic/elasticsearch/commit/9b7d2a697ee49716096da22ed27c09db9b5e3dc2
3165,3165.0,3339.0,elastic/elasticsearch,78fcd0581d2981b48dfac5c63047e7fd14a248e8,"[ML] inference performance optimizations and refactor (#57674)

This is a major refactor of the underlying inference logic.

The main refactor is now we are separating the model configuration and 
the inference interfaces. 

This has the following benefits:
 - we can store extra things with the model that are not 
   necessary for inference (i.e. treenode split information gain)
 - we can optimize inference separate from model serialization and storage.
 - The user is oblivious to the optimizations (other than seeing the benefits).

A major part of this commit is removing all inference related methods from the
trained model configurations (ensemble, tree, etc.) and moving them to a new class.

This new class satisfies a new interface that is ONLY for inference.

The optimizations applied currently are:
- feature maps are flattened once
- feature extraction only happens once at the highest level 
  (improves inference + feature importance through put)
- Only storing what we need for inference + feature importance on heap",https://github.com/elastic/elasticsearch/commit/78fcd0581d2981b48dfac5c63047e7fd14a248e8
3166,3166.0,3340.0,elastic/elasticsearch,b68bd78a53af064f9c1253f6c81228310e792af1,"Refactor how to determine if a field is metafield (#57378)

Before to determine if a field is meta-field, a static method of MapperService
isMetadataField was used. This method was using an outdated static list
of meta-fields.

This PR instead changes this method to the instance method that
is also aware of meta-fields in all registered plugins.

Related #38373, #41656
Closes #24422",https://github.com/elastic/elasticsearch/commit/b68bd78a53af064f9c1253f6c81228310e792af1
3167,3167.0,3341.0,elastic/elasticsearch,802099a1801adbdad21875c323427e605f9f1632,"Handle `cluster.max_shards_per_node` in YAML config (#57234)

Prior to this commit, `cluster.max_shards_per_node` is not correctly handled
when it is set via the YAML config file, only when it is set via the Cluster
Settings API.

This commit refactors how the limit is implemented, both to enable correctly
handling the setting in the YAML and to more effectively centralize the logic
used to enforce the limit. The logic used to apply the limit, as well as the
setting value, has been moved to the new `ShardLimitValidator`.",https://github.com/elastic/elasticsearch/commit/802099a1801adbdad21875c323427e605f9f1632
3168,3168.0,3342.0,elastic/elasticsearch,88a2aeb8cf60aee45704f0ca7d102bb0836ee8e8,"Remove the 'array value parser' marker interface. (#57571)

This PR replaces the marker interface with the method
FieldMapper#parsesArrayValue. I find this cleaner and it will help with the
fields retrieval work (#55363).

The refactor also ensures that only field mappers can declare they parse array
values. Previously other types like ObjectMapper could implement the marker
interface and be passed array values, which doesn't make sense.",https://github.com/elastic/elasticsearch/commit/88a2aeb8cf60aee45704f0ca7d102bb0836ee8e8
3169,3169.0,3343.0,elastic/elasticsearch,3bb11cf2694aac41f8015c388f53bb8bb914da0f,"[DOCS] Refactor admons for multi-parameter options (#57491)

Several APIs support options that can be specified as a query parameter or a
request body parameter.

Currently, this is documented using notes, which can get rather lengthy. This
replaces those multiple notes with a single note and a footnote.",https://github.com/elastic/elasticsearch/commit/3bb11cf2694aac41f8015c388f53bb8bb914da0f
3170,3170.0,3344.0,elastic/elasticsearch,4d6dc51c72941f6184f34787b5b1b1398297a38d,"Header warning logging refactoring (#55941)

Splitting DeprecationLogger into two. HeaderWarningLogger - responsible for adding a response warning headers and ThrottlingLogger - responsible for limiting the duplicated log entries for the same key (previously deprecateAndMaybeLog).
Introducing A ThrottlingAndHeaderWarningLogger which is a base for other common logging usages where both response warning header and logging throttling was needed.

relates #55699
relates #52369",https://github.com/elastic/elasticsearch/commit/4d6dc51c72941f6184f34787b5b1b1398297a38d
3171,3171.0,3345.0,elastic/elasticsearch,f0e2086e69ae0a5d00da3080a6824b81c0f8219e,"Add new circuitbreaker plugin and refactor CircuitBreakerService (#55695)

This commit lays the ground work for plugins supplying their own circuit breakers. 

It adds a new interface: `CircuitBreakerPlugin`.

This interface provides methods for providing custom child CircuitBreaker objects. There are also facilities for allowing dynamic settings for the custom breakers.

With the refactor, circuit breakers are no longer replaced on setting changes. Instead, the two mutable settings themselves are `volatile`. Plugins that want to use their custom circuit breaker should keep a reference of their constructed breaker.",https://github.com/elastic/elasticsearch/commit/f0e2086e69ae0a5d00da3080a6824b81c0f8219e
3172,3172.0,3346.0,elastic/elasticsearch,1211699473d74318c789a64921c44c1bc536bb3c,"Fix `bool` query behaviour on null value (#56817)

Until 7.7 we used to ignore `null` values for `bool`queries `minimum_should_match`,
parameters and also for the `must`,  `must_not`, `should` and `filter` clauses.
An internal refactoring has changed this so now we get a parsing error. While `null` 
should not a common value here, we should restore the old behaviour for bwc for now.

Closes #56812",https://github.com/elastic/elasticsearch/commit/1211699473d74318c789a64921c44c1bc536bb3c
3173,3173.0,3347.0,elastic/elasticsearch,51d2e9a1947cc0cca678447fed8576f4d4aec4e7,"Fix key usage in SamlAuthenticatorTests (#57124)

In #51089 where SamlAuthenticatorTests were refactored, we missed
to update one test case which meant that a single key would be
used both for signing and encryption in the same run. As explained
in #51089, and due to FIPS 140 requirements, BouncyCastle FIPS
provider will block RSA keys that have been used for signing from
being used for encryption and vice versa

This commit changes testNoAttributesReturnedWhenTheyCannotBeDecrypted
to always use the specific keys we have added for encryption.",https://github.com/elastic/elasticsearch/commit/51d2e9a1947cc0cca678447fed8576f4d4aec4e7
3174,3174.0,3348.0,elastic/elasticsearch,b5cd02f501a7db0403ff0ed7cf8012c5ff2568ab,"Fix Confusing Exception on Shard Snapshot Abort (#57116)

If a partial snapshot has some of its shards aborted because an index got deleted, this can lead to confusing `IllegalStateExceptions` when trying to increment the ref count of the already closed `Store`.
Refactored this a little to throw the same exception for aborted shards no matter the timing of the store close and assert that the concurrent store close can in fact only happen when the shard snapshot has already been aborted.",https://github.com/elastic/elasticsearch/commit/b5cd02f501a7db0403ff0ed7cf8012c5ff2568ab
3175,3175.0,3349.0,elastic/elasticsearch,6f60f1eb52de75efa4ef2ad4a537b9f2e3e0ab8a,"Refactor SamlAuthenticatorTests  (#51089)

- Use opensaml to sign and encrypt responses/assertions/attributes
instead of doing this manually
- Use opensaml to build response and assertion objects instead of
parsing xml strings
- Always use different keys for signing and encryption. Due to FIPS 
140 requirements, BouncyCastle FIPS provider will block
RSA keys that have been used for signing from being used for 
encryption and vice versa. This change adds new encryption specific
 keys to be used throughout the tests.",https://github.com/elastic/elasticsearch/commit/6f60f1eb52de75efa4ef2ad4a537b9f2e3e0ab8a
3176,3176.0,3350.0,elastic/elasticsearch,f82d74b501701e50358b0d5445a17a6db671ee94,"Move merge compatibility logic from MappedFieldType to FieldMapper (#56915)

Merging logic is currently split between FieldMapper, with its merge() method, and
MappedFieldType, which checks for merging compatibility. The compatibility checks
are called from a third class, MappingMergeValidator. This makes it difficult to reason
about what is or is not compatible in updates, and even what is in fact updateable - we
have a number of tests that check compatibility on changes in mapping configuration
that are not in fact possible.

This commit refactors the compatibility logic so that it all sits on FieldMapper, and
makes it called at merge time. It adds a new FieldMapperTestCase base class that
FieldMapper tests can extend, and moves the compatibility testing machinery from
FieldTypeTestCase to here.

Relates to #56814",https://github.com/elastic/elasticsearch/commit/f82d74b501701e50358b0d5445a17a6db671ee94
3177,3177.0,3351.0,elastic/elasticsearch,cba99dcd95068336d878d844a3ed83c85c903924,"Don't omit empty arrays when filtering _source (#56527)

When using source filtering exclusions, empty arrays are not preserved in documents, and no empty arrays are returned if arrays are empty after applying exclusions. We have special treatment to make sure that we preserve empty objects, but the behaviour for arrays is different.

It looks like this regression was introduced by #22593, shortly after we refactored source filtering to use automata (#20736).

Note that this change affects what the search API returns when using source exclusions, as well as what gets indexed when using source exclusions for the _source field.

Closes #23796",https://github.com/elastic/elasticsearch/commit/cba99dcd95068336d878d844a3ed83c85c903924
3178,3178.0,3352.0,elastic/elasticsearch,36be0acdfc19e9b4225c88c189eee757c11ef250,"Move all Snapshot Master Node Steps to SnapshotsService (#56365)

This refactoring has three motivations:

1. Separate all master node steps during snapshot operations from all data node steps in code.
2. Set up next steps in concurrent repository operations and general improvements by centralizing tracking of each shard's state in the repository in `SnapshotsService` so that operations for each shard can be linearized efficiently (i.e. without having to inspect the full snapshot state for all shards on every cluster state update, allowing us to track more in memory and only fall back to inspecting the full CS on master failover like we do in the snapshot shards service).
    * This PR already contains some best effort examples of this, but obviously this could be way improved upon still (just did not want to do it in this PR for complexity reasons) 
3. Make the `SnapshotsService` less expensive on the CS thread for large snapshots",https://github.com/elastic/elasticsearch/commit/36be0acdfc19e9b4225c88c189eee757c11ef250
3179,3179.0,3353.0,elastic/elasticsearch,a01d2bd24b0e849af034b88b563897a692a87bd8,"[Geo] Refactor Point Field Mappers (#56060)

This commit refactors the following:
  * GeoPointFieldMapper and PointFieldMapper to
    AbstractPointGeometryFieldMapper derived from AbstractGeometryFieldMapper.
  * .setupFieldType moved up to AbstractGeometryFieldMapper
  * lucene indexing moved up to AbstractGeometryFieldMapper.parse
  * new addStoredFields, addDocValuesFields abstract methods for implementing
    stored field and doc values field indexing in the concrete field mappers

This refactor is the next phase for setting up a framework for extending
spatial field mapper functionality in x-pack.",https://github.com/elastic/elasticsearch/commit/a01d2bd24b0e849af034b88b563897a692a87bd8
3180,3180.0,3354.0,elastic/elasticsearch,cb70ce7468bd6e24b05d427148d84d5da10dbbea,"Fix spurious failures in AsyncSearchIntegTestCase (#56026)

Async search integration tests are subject to random failures when:
  * The test index has more than one replica.
  * The request cache is used.
  * Some shards are empty.
  * The maintenance service starts a garbage collection when node is closing.

They are also slow because the test index is created/populated on each
test method.

This change refactors these integration tests in order to:
  * Create the index once for the entire test suite.
  * Fix the usage of the request cache and replicas.
  * Ensures that all shards have at least one document.
  * Increase the delay of the maintenance service garbage collection.

Closes #55895
Closes #55988",https://github.com/elastic/elasticsearch/commit/cb70ce7468bd6e24b05d427148d84d5da10dbbea
3181,3181.0,3355.0,elastic/elasticsearch,f15fe2385e2b1eac183a5360b2336fa84abb8894,"Move CumulativeSumPipelineAgg to use ConstructingObjectParser parsing (#55990)

As part of #52776, this refactors the aggregation to use
the context parser to parse its parameters.",https://github.com/elastic/elasticsearch/commit/f15fe2385e2b1eac183a5360b2336fa84abb8894
3182,3182.0,3356.0,elastic/elasticsearch,b909cee8e9beb84faf7a5563072cfc45770215ac,"Expose agg usage in Feature Usage API (#55732)

* Expose agg usage in Feature Usage API

Counts usage of the aggs and exposes them on the _nodes/usage/.

Closes #53746

* Refactor to include non value sources aggregations

* Fix reported values source type for parent and children aggs

* Refactor SearchModule constructor

* Fix subtype in TTest and IPRanges

* Fix more subtypes in aggs that don't register themselves

* Fix doc tests

* Fix docs

* Fix ScriptedMetricAggregatorTests

* Fix compilation issues after merge

* Fix merge fallout

* This gets stale quickly...

* Address review comments

* Fix tests that were missing proper agg registration in the search module

* Fix ScriptedMetricAggregatorTests

* Address review comments

Co-authored-by: Elastic Machine <elasticmachine@users.noreply.github.com>",https://github.com/elastic/elasticsearch/commit/b909cee8e9beb84faf7a5563072cfc45770215ac
3183,3183.0,3357.0,elastic/elasticsearch,009f5f4ee8ebdc14f1aaa6fd3f9213727f2a04d3,"[ML] Decouple DFA progress testing from analyses phases (#55925)

This refactors native integ tests to assert progress without
expecting explicit phases for analyses. We can test those with
yaml tests in a single place.",https://github.com/elastic/elasticsearch/commit/009f5f4ee8ebdc14f1aaa6fd3f9213727f2a04d3
3184,3184.0,3358.0,elastic/elasticsearch,ceb6e6227fb48cf6986f1124014df4cbc6f82a40,"Modified searchAndReduce() to return empty agg when no docs exist  (#55826)

Modified AggregatorTestCase.searchAndReduce() method so that it returns an empty aggregation result when no documents have been inserted.

Also refactored several aggregation tests so they do not re-implement method AggregatorTestCase.testCase()

Fixes #55824",https://github.com/elastic/elasticsearch/commit/ceb6e6227fb48cf6986f1124014df4cbc6f82a40
3185,3185.0,3359.0,elastic/elasticsearch,6cb17a3a71a8a9b097382b394f672aea1b8e70dc,"Simplify java home verification (#55635)

* Simplify java home verification

At one time, all uses of java home were found through the getJavaHome
utility method on BuildPlugin. However, that was changed many
refactorings ago, but the complex support for registering a java home
version needed that fails at configuration time still exists. The only
remaining use of grabbing java home is within bwc tests, and must be at
runtime since that is when we have the checkout and know what version is
needed.

This commit consolidates the java home finding method into a utility
unassociated with BuildPlugin.

* fix checkstyle

* address feedback",https://github.com/elastic/elasticsearch/commit/6cb17a3a71a8a9b097382b394f672aea1b8e70dc
3186,3186.0,3360.0,elastic/elasticsearch,ddb1699301254768dbe62ac7b81edacde5d16e24,"Reduce code duplication in CCR non-compliance tests

This commit removes some code duplication in the CCR non-compliance
tests by refactoring an assertion method so that it can be used in both
tests that are present there.",https://github.com/elastic/elasticsearch/commit/ddb1699301254768dbe62ac7b81edacde5d16e24
3187,3187.0,3361.0,elastic/elasticsearch,3bf2df6037ae2d67132aed5714af3ce137c3ab01,"Make AsyncSearchIndexService reusable (#55598)

EQL will require very similar functionality to async search. This PR refactors
AsyncSearchIndexService to make it reusable for EQL.

Supersedes #55119
Relates to #49638",https://github.com/elastic/elasticsearch/commit/3bf2df6037ae2d67132aed5714af3ce137c3ab01
3188,3188.0,3362.0,elastic/elasticsearch,eb0b2c8f6996ff90becc8875f20ac34b925f5795,"Refactor Spatial Field Mappers (#55621)

This commit refactors all spatial Field Mappers to a common 
AbstractGeometryFieldMapper that implements shared parameter functionality 
(e.g., ignore_malformed, ignore_z_value) and provides a common framework for 
overriding type parsing, and building in xpack. Common shape functionality is 
implemented in a new AbstractShapeGeometryFieldMapper that is reused and 
overridden in GeoShapeFieldMapper, GeoShapeFieldMapperWithDocValues, 
LegacyGeoShapeFieldMapper, and ShapeFieldMapper. This abstraction provides a 
reusable foundation for adding new xpack features; such as coordinate reference 
system support.",https://github.com/elastic/elasticsearch/commit/eb0b2c8f6996ff90becc8875f20ac34b925f5795
3189,3189.0,3363.0,elastic/elasticsearch,6b7916606111827e0d9843e401291afa6627d4f3,"Refactor GeoShape DocValues in spatial xpack (#55492)

This commit refactors geo_shape doc values, fielddata, and utility classes from 
the single mapper package in x-pack spatial plugin to a package structure that 
is consistent with the server module.",https://github.com/elastic/elasticsearch/commit/6b7916606111827e0d9843e401291afa6627d4f3
3190,3190.0,3364.0,elastic/elasticsearch,f9de7ce82e0c8bec589ddb5201e44e3a83054cd1,"Handle TLS file updates during startup (#54999)

This change reworks the loading and monitoring of files that are used
for the construction of SSLContexts so that updates to these files are
not lost if the updates occur during startup. Previously, the
SSLService would parse the settings, build the SSLConfiguration
objects, and construct the SSLContexts prior to the
SSLConfigurationReloader starting to monitor these files for changes.
This allowed for a small window where updates to these files may never
be observed until the node restarted.

To remove the potential miss of a change to these files, the code now
parses the settings and builds SSLConfiguration instances prior to the
construction of the SSLService. The files back the SSLConfiguration
instances are then registered for monitoring and finally the SSLService
is constructed from the previously parse SSLConfiguration instances. As
the SSLService is not constructed when the code starts monitoring the
files for changes, a CompleteableFuture is used to obtain a reference
to the SSLService; this allows for construction of the SSLService to
complete and ensures that we do not miss any file updates during the
construction of the SSLService.

While working on this change, the SSLConfigurationReloader was also
refactored to reflect how it is currently used. When the
SSLConfigurationReloader was originally written the files that it
monitored could change during runtime. This is no longer the case as
we stopped the monitoring of files that back dynamic SSLContext
instances. In order to support the ability for items to change during
runtime, the class made use of concurrent data structures. The use of
these concurrent datastructures has been removed.

Closes #54867",https://github.com/elastic/elasticsearch/commit/f9de7ce82e0c8bec589ddb5201e44e3a83054cd1
3191,3191.0,3365.0,elastic/elasticsearch,f82404986b08d6ca2a08a71266f93f0b6853bdc1,"Refactor AuditTrail for TransportRequests instead of TransportMessage (#55141)

This commit refactors the `AuditTrail` to use the `TransportRequest` as a parameter
for all its audit methods, instead of the current `TransportMessage` super class.

The goal is to gain access to the `TransportRequest#parentTaskId` member,
so that it can be audited. The `parentTaskId` is used internally when spawning tasks
that handle transport requests; in this way tasks across nodes are related by the
same parent task.

Relates #52314",https://github.com/elastic/elasticsearch/commit/f82404986b08d6ca2a08a71266f93f0b6853bdc1
3192,3192.0,3366.0,elastic/elasticsearch,70241b52697ac2cf71004040042123c1ec050299,"SQL: drop BASE TABLE type in favour for just TABLE (#54836)

* Drop BASE TABLE type in favour for just TABLE

This commit drops the table type 'BASE TABLE' and replaces all
occurences with just 'TABLE', since his type is wider-used and
friendlier to the client applications that query for certain table types
in their discovery mode.

The 'TABLE' type is also explicitely mentioned by the JDBC and ODBC
standards and although other data source-specific types are permitted,
older apps will not work well with them.

* Refactor table type constants out of IndexType

Move SQL_TABLE/_ALIAS out of IndexType, so that they can also be used in
that Enum definition.

Co-authored-by: Elastic Machine <elasticmachine@users.noreply.github.com>",https://github.com/elastic/elasticsearch/commit/70241b52697ac2cf71004040042123c1ec050299
3193,3193.0,3367.0,elastic/elasticsearch,f4a96f581d4a7103ccd814cd1c3e067cd701a583,"Revert ""Refactor nodes stats request builders to match requests (#54363)""

This reverts commit d6d664cc7dbcaaf7fd3867282ca9c176cc1319b4.",https://github.com/elastic/elasticsearch/commit/f4a96f581d4a7103ccd814cd1c3e067cd701a583
3194,3194.0,3368.0,elastic/elasticsearch,ddcb2ed869b59227d468be34babb06853faa7189,"Search Hit Refactoring BWC

Charge wire version for SearchHit fields to 7.8

related to #41656, #54584",https://github.com/elastic/elasticsearch/commit/ddcb2ed869b59227d468be34babb06853faa7189
3195,3195.0,3369.0,elastic/elasticsearch,d6d664cc7dbcaaf7fd3867282ca9c176cc1319b4,"Refactor nodes stats request builders to match requests (#54363)

* Remove hard-coded setters from NodesInfoRequestBuilder

* Remove hard-coded setters from NodesStatsRequest

* Use static imports to reduce clutter",https://github.com/elastic/elasticsearch/commit/d6d664cc7dbcaaf7fd3867282ca9c176cc1319b4
3196,3196.0,3370.0,elastic/elasticsearch,6c030dc8b8fa08843bdf4bbe2644d0538f322d52,"Additional ValuesSource Work (#54301)

* ValuesSource refactor wire up missing agg (#53511)

Part of refactoring ValuesSource in #42949

* ValuesSource refactoring: Wire up ExtendedStats aggregation (#53227)

* Javadoc for ValuesSource related work (#53427)

Co-authored-by: Andy Bristol <andy.bristol@elastic.co>
Co-authored-by: Christos Soulios <1561376+csoulios@users.noreply.github.com>",https://github.com/elastic/elasticsearch/commit/6c030dc8b8fa08843bdf4bbe2644d0538f322d52
3197,3197.0,3371.0,elastic/elasticsearch,128bcc59d802b2e1a6062edb09a302d5e79ab9f6,"Search hit refactoring (#41656)

Refactor SearchHit to have separate document and meta fields.
This is a part of bigger refactoring of issue #24422 to remove
dependency on MapperService to check if a field is metafield.

Relates to PR: #38373
Relates to issue #24422",https://github.com/elastic/elasticsearch/commit/128bcc59d802b2e1a6062edb09a302d5e79ab9f6
3198,3198.0,3372.0,elastic/elasticsearch,b7af8524228891c305b8868ff7f748ec10cf724c,"Refactor AliasOrIndex abstraction. (#53982)

In order to prepare the `AliasOrIndex` abstraction for the introduction of data streams,
the abstraction needs to be made more flexible, because currently it really can be only
an alias or an index.

* Renamed `AliasOrIndex` to `IndexAbstraction`.
* Introduced a `IndexAbstraction.Type` enum to indicate what a `IndexAbstraction` instance is.
* Replaced the `isAlias()` method that returns a boolean with the `getType()` method that returns the new Type enum.
* Moved `getWriteIndex()` up from the `IndexAbstraction.Alias` to the `IndexAbstraction` interface.
* Moved `getAliasName()` up from the `IndexAbstraction.Alias` to the `IndexAbstraction` interface and renamed it to `getName()`.
* Removed unnecessary casting to `IndexAbstraction.Alias` by just checking the `getType()` method.

Relates to #53100",https://github.com/elastic/elasticsearch/commit/b7af8524228891c305b8868ff7f748ec10cf724c
3199,3199.0,3373.0,elastic/elasticsearch,a90c1de8745681356a6516f4f22a8c40f71f6b12,"Add ValuesSource Registry and associated logic (#54281)

* Remove ValuesSourceType argument to ValuesSourceAggregationBuilder (#48638)

* ValuesSourceRegistry Prototype (#48758)

* Remove generics from ValuesSource related classes (#49606)

* fix percentile aggregation tests (#50712)

* Basic thread safety for ValuesSourceRegistry (#50340)

* Remove target value type from ValuesSourceAggregationBuilder (#49943)

* Cleanup default values source type (#50992)

* CoreValuesSourceType no longer implements Writable (#51276)

* Remove genereics & hard coded ValuesSource references from Matrix Stats (#51131)

* Put values source types on fields (#51503)

* Remove VST Any (#51539)

* Rewire terms agg to use new VS registry (#51182)

Also adds some basic AggTestCases for untested code
paths (and boilerplate for future tests once the IT are
converted over)

* Wire Cardinality aggregation to work with the ValuesSourceRegistry (#51337)

* Wire Percentiles aggregator into new VS framework (#51639)

This required a bit of a refactor to percentiles itself.  Before,
the Builder would switch on the chosen algo to generate an
algo-specific factory.  This doesn't work (or at least, would be
difficult) in the new VS framework.

This refactor consolidates both factories together and introduces
a PercentilesConfig object to act as a standardized way to pass
algo-specific parameters through the factory.  This object
is then used when deciding which kind of aggregator to create

Note: CoreValuesSourceType.HISTOGRAM still lives in core, and will
be moved in a subsequent PR.

* Remove generics and target value type from MultiVSAB (#51647)

* fix checkstyle after merge (#52008)

* Plumb ValuesSourceRegistry through to QuerySearchContext (#51710)

* Convert RareTerms to new VS registry (#52166)

* Wire up Value Count (#52225)

* Wire up Max & Min aggregations (#52219)

* ValuesSource refactoring: Wire up Sum aggregation (#52571)

* ValuesSource refactoring: Wire up SigTerms aggregation (#52590)

* Soft immutability for VSConfig (#52729)

* Unmute testSupportedFieldTypes, fix Percentiles/Ranks/Terms tests (#52734)

Also fixes Percentiles which was incorrectly specified to only accept
numeric, but in fact also accepts Boolean and Date (because those are
numeric on master - thanks `testSupportedFieldTypes` for catching it!)

* VS refactoring: Wire up stats aggregation (#52891)

* ValuesSource refactoring: Wire up string_stats aggregation (#52875)

* VS refactoring: Wire up median (MAD) aggregation (#52945)

* fix valuesourcetype issue with constant_keyword field (#53041)

this commit implements `getValuesSourceType` for
the ConstantKeyword field type.

master was merged into feature/extensible-values-source
introducing a new field type that was not implementing
`getValuesSourceType`.

* ValuesSource refactoring: Wire up Avg aggregation (#52752)

* Wire PercentileRanks aggregator into new VS framework  (#51693)

* Add a VSConfig resolver for aggregations not using the registry (#53038)

* Vs refactor wire up ranges and date ranges (#52918)

* Wire up geo_bounds aggregation to ValuesSourceRegistry (#53034)

This commit updates the geo_bounds aggregation to depend
on registering itself in the ValuesSourceRegistry

relates #42949.

* VS refactoring: convert Boxplot to new registry (#53132)

* Wire-up geotile_grid and geohash_grid to ValuesSourceRegistry (#53037)

This commit updates the geo*_grid aggregations to depend
on registering itself in the ValuesSourceRegistry

relates to the values-source refactoring meta issue #42949.

* Wire-up geo_centroid agg to ValuesSourceRegistry (#53040)

This commit updates the geo_centroid aggregation to depend
on registering itself in the ValuesSourceRegistry.

relates to the values-source refactoring meta issue #42949.

* Fix type tests for Missing aggregation (#53501)

* ValuesSource Refactor: move histo VSType into XPack module (#53298)

- Introduces a new API (`getBareAggregatorRegistrar()`) which allows plugins to register aggregations against existing agg definitions defined in Core.
- This moves the histogram VSType over to XPack where it belongs. `getHistogramValues()` still remains as a Core concept
- Moves the histo-specific bits over to xpack (e.g. the actual aggregator logic). This requires extra boilerplate since we need to create a new ""Analytics"" Percentile/Rank aggregators to deal with the histo field. Doubly-so since percentiles/ranks are extra boiler-plate'y... should be much lighter for other aggs

* Wire up DateHistogram to the ValuesSourceRegistry (#53484)

* Vs refactor parser cleanup (#53198)

Co-authored-by: Zachary Tong <polyfractal@elastic.co>
Co-authored-by: Zachary Tong <zach@elastic.co>
Co-authored-by: Christos Soulios <1561376+csoulios@users.noreply.github.com>
Co-authored-by: Tal Levy <JubBoy333@gmail.com>",https://github.com/elastic/elasticsearch/commit/a90c1de8745681356a6516f4f22a8c40f71f6b12
3200,3200.0,3374.0,elastic/elasticsearch,2e24e885beedb9926976269bf01faadac7575376,"Rollover: refactor out cluster state update (#53965)

Make it possible to reuse the cluster state update of rollover for
simulation purposes by extracting it. Also now run the full rollover in
the pre-rollover phase and the actual rollover phase, allowing a
dedicated exception in case of concurrent rollovers as well as a more
thorough pre-check.",https://github.com/elastic/elasticsearch/commit/2e24e885beedb9926976269bf01faadac7575376
3201,3201.0,3375.0,elastic/elasticsearch,e244a3bc7a0771e8403d35cc02d2b637d7373a17,"Check authentication type using enum instead of string (#54145)

Avoid string comparison when we can use safter enums. 
This refactor is a follow up for #52178.

Resolves: #52511",https://github.com/elastic/elasticsearch/commit/e244a3bc7a0771e8403d35cc02d2b637d7373a17
3202,3202.0,3376.0,elastic/elasticsearch,ecdbd37f2e0f0447ed574b306adb64c19adc3ce1,"Refactor global build info plugin to leverage JavaInstallationRegistry (#53994)

This commit removes the configuration time vs execution time distinction
with regards to certain BuildParms properties. Because of the cost of
determining Java versions for configuration JDK locations we deferred
this until execution time. This had two main downsides. First, we had
to implement all this build logic in tasks, which required a bunch of
additional plumbing and complexity. Second, because some information
wasn't known during configuration time, we had to nest any build logic
that depended on this in awkward callbacks.

We now defer to the JavaInstallationRegistry recently added in Gradle.
This utility uses a much more efficient method for probing Java
installations vs our jrunscript implementation. This, combined with some
optimizations to avoid probing the current JVM as well as deferring
some evaluation via Providers when probing installations for BWC builds
we can maintain effectively the same configuration time performance
while removing a bunch of complexity and runtime cost (snapshotting
inputs for the GenerateGlobalBuildInfoTask was very expensive). The end
result should be a much more responsive build execution in almost all
scenarios.",https://github.com/elastic/elasticsearch/commit/ecdbd37f2e0f0447ed574b306adb64c19adc3ce1
3203,3203.0,3377.0,elastic/elasticsearch,adcf25e0930266b3601ecef0b996426028e972bc,"[ML] Refactor DFA custom processor to cross validation splitter (#53915)

While `CustomProcessor` is generic and allows for flexibility, there
are new requirements that make cross validation a concept it's hard
to abstract behind custom processor. In particular, we would like to
add data_counts to the DFA jobs stats. Counting training VS. test
docs would be a useful statistic. We would also want to add a
different cross validation strategy for multiclass classification.

This commit renames custom processors to cross validation splitters
which allows for those enhancements without cryptically doing
things as a side effect of the abstract custom processing.",https://github.com/elastic/elasticsearch/commit/adcf25e0930266b3601ecef0b996426028e972bc
3204,3204.0,3378.0,elastic/elasticsearch,5c8cd16ab310bd8cdeed3117d37a0046d36732ac,"TermsLookup uses ObjectParser for x-content parsing (#53733)

This commit refactors the fromXContent method in TermsLookup to use an
ObjectParser and adds an explicit parsing test.

Related to #53731",https://github.com/elastic/elasticsearch/commit/5c8cd16ab310bd8cdeed3117d37a0046d36732ac
3205,3205.0,3379.0,elastic/elasticsearch,1dac8dffc657389d245918c055d5b0e1be1bbb1c,"Fix NPE when logging null values in JSON (#53715)

Slow log's routing value when null was causing ESLogMessage.asJson
method to throw Null Pointer Exception. This should be fixed in
ESLogMessage as well as prevent passing that key at all.
This only happens in 8 because of previous refactoring #46702",https://github.com/elastic/elasticsearch/commit/1dac8dffc657389d245918c055d5b0e1be1bbb1c
3206,3206.0,3380.0,elastic/elasticsearch,3608be62f53e1c8258d437e3354478f7e006e423,"Add internalClusterTest to check task (#53444)

This commit adds internalClusterTest in xpack core to run as part of
check. This was accidentally removed in a refactoring. Other xpack
modules already do this, but core was left out. This commit also mutes 2
tests that currently fail.

closes #53407",https://github.com/elastic/elasticsearch/commit/3608be62f53e1c8258d437e3354478f7e006e423
3207,3207.0,3381.0,elastic/elasticsearch,51dd8d83908aa54029aaee9561889dfd5ad8760b,"Serialize NodesStatsRequest as set of strings (#53235)

* Add unit tests before refactoring

* Convert boolean fields to set of strings

In order to make nodes stats plugins pluggable, we need to make the
NodesStatsRequest class capable of carrying a flexible list of metrics
rather than a fixed list of boolean flags. This commit changes the
internal storage of the class without changing its serialization.

* Rename test class to match conventions

* Change serialization of NodesStatsRequest

* Set up BWC before merging

* Singularize enum name",https://github.com/elastic/elasticsearch/commit/51dd8d83908aa54029aaee9561889dfd5ad8760b
3208,3208.0,3382.0,elastic/elasticsearch,4bd55ce01e08fd48b288d6983a21f35be1d4e2d0,"Serialize NodesInfoRequest as a set of strings (#53140)

For Node Info to be pluggable, NodesInfoRequest must be able to carry
arbitrary strings. This commit reworks the internals of that class to
use a set rather than hard-coded boolean fields.

NodesInfoRequest defaults to specifying all values. We test for
this behavior as we refactor and use random testing for the
various combinations of metrics.

Add backwards compatibility for transport requests.",https://github.com/elastic/elasticsearch/commit/4bd55ce01e08fd48b288d6983a21f35be1d4e2d0
3209,3209.0,3383.0,elastic/elasticsearch,2a9c1f830ec1ba69814d9f4261b6909444b132ce,"Avoid race condition in ILMHistorySotre (#53039)

* Avoid race condition in ILMHistorySotre

This change modifies ILMHistoryStore to always apply correct settings and mappings,
even if template is deleted and not yet recreated. This ensures that ILM history index
is correctly managed by ILM and also fixes flaky history tests that were prone to
triggenring this race.

This commit also refactors and simplifies ILM history tests.

Closes #50353 and #52853

* Review comment

Co-authored-by: Elastic Machine <elasticmachine@users.noreply.github.com>",https://github.com/elastic/elasticsearch/commit/2a9c1f830ec1ba69814d9f4261b6909444b132ce
3210,3210.0,3384.0,elastic/elasticsearch,7425042f86f66df8c207c5e96f9b9848bda2b4c3,"SQL: refactor In predicate moving it to QL project (#52870)

* Move In, InPipe and InProcessor out of SQL to the common QL project.
* Move tests classes to the QL project.
* Create SQL dedicated In class to handle SQL specific data types.
* Update SQL classes to use the InPipe and InProcessor QL classes.
* Extract common Foldables methods in QL project.
* Be more explicit when folding and converting a foldable value, by
removing most of the code inside Foldables class.",https://github.com/elastic/elasticsearch/commit/7425042f86f66df8c207c5e96f9b9848bda2b4c3
3211,3211.0,3385.0,elastic/elasticsearch,4ff5e03c70aa590f755289c568eb7f6569e4b499,"Adds recall@k metric to rank eval API (#52577)

This change adds the recall@k metric and refactors precision@k to match
the new metric.

Recall@k is an important metric to use for learning to rank (LTR)
use-cases. Candidate generation or first ranking phase ranking functions
are often optimized for high recall, in order to generate as many
relevant candidates in the top-k as possible for a second phase of
ranking. Adding this metric allows tuning that base query for LTR.

See: https://github.com/elastic/elasticsearch/issues/51676",https://github.com/elastic/elasticsearch/commit/4ff5e03c70aa590f755289c568eb7f6569e4b499
3212,3212.0,3386.0,elastic/elasticsearch,4943bc0cd39c5f860b0280b78c3b800a668a3951,"HybridDirectory should mmap postings. (#52641)

Since version 8.4, `MMapDirectory` has an optimization to read long[]
arrays directly in little endian order, which postings leverage. So it'd
be more efficient to open postings with `MMapDirectory`.

I refactored a bit the existing logic to better explain why every listed
file extension is open with `mmap`.",https://github.com/elastic/elasticsearch/commit/4943bc0cd39c5f860b0280b78c3b800a668a3951
3213,3213.0,3387.0,elastic/elasticsearch,ee09ac76cab34c628621bbe1856cbc4d9460d2e0,"Refactor watcher tests (#52799)

This PR moves the majority of the Watcher REST tests under
the Watcher x-pack plugin.

Specifically, moves the Watcher tests from:
x-pack/plugin/test
x-pack/qa/smoke-test-watcher
x-pack/qa/smoke-test-watcher-with-security
x-pack/qa/smoke-test-monitoring-with-watcher

to:
x-pack/plugin/watcher/qa/rest (/test and /qa/smoke-test-watcher)
x-pack/plugin/watcher/qa/with-security
x-pack/plugin/watcher/qa/with-monitoring

Additionally, this disables Watcher from the main
x-pack test cluster and consolidates the stop/start logic
for the tests listed.

No changes to the tests (beyond moving them) are included.

3rd party tests and doc tests (which also touch Watcher)
are not included in the changes here.",https://github.com/elastic/elasticsearch/commit/ee09ac76cab34c628621bbe1856cbc4d9460d2e0
3214,3214.0,3388.0,elastic/elasticsearch,8830eb6b9a8da0202806791f29f049b764ad19af,"Generalize how queries on `_index` are handled at rewrite time (#52486)

#49713 aims at introducing a new constant_keyword field which, like _index, always rewrites queries to a MatchAllQueryBuilder or a MatchNoneQueryBuilder in order to skip shards in the can_match phase. This change introduces a new ConstantFieldType marker class that helps get this functionality with any field and not just _index.

Since this change refactors rewrites, I also took it as an opportunity to adrress #49254: instead of returning the same queries you would get on a keyword field when a field is unmapped, queries get rewritten to a MatchNoDocsQueryBuilder.

This change exposed a couple bugs, like the fact that the percolator doesn't rewrite queries at query time, or that the significant_terms aggregation doesn't rewrite its inner filter, which I fixed.

Closes #49254",https://github.com/elastic/elasticsearch/commit/8830eb6b9a8da0202806791f29f049b764ad19af
3215,3215.0,3389.0,elastic/elasticsearch,075fee249c983aeeb08bdbae1ecd044c314c9bf5,"[Transform] add support for filter aggregation (#52483)

add support for filter aggregations, refactor code for sub-aggregation support in mapping
deduction

fixes #52151",https://github.com/elastic/elasticsearch/commit/075fee249c983aeeb08bdbae1ecd044c314c9bf5
3216,3216.0,3390.0,elastic/elasticsearch,72cf242dc443f0704517f6d59d37d32e1c8a63c9,"Refactor license checking (#52118)

Improve code resuse and readility. Add convenience checking method which 
covers most use cases without having to pass many boolean arguments.",https://github.com/elastic/elasticsearch/commit/72cf242dc443f0704517f6d59d37d32e1c8a63c9
3217,3217.0,3391.0,elastic/elasticsearch,0866031899a889afb6f296e89a4c1d277b496cfc,"Scripting: split out compile limits and caching (#52498)

Phase 1 of adding compilation limits per context.
* Refactor rate limiting and caching into separate class, 
  `ScriptCache`,  which will be used per context.
* Disable compilation limit for certain tests.

Refs: #50152",https://github.com/elastic/elasticsearch/commit/0866031899a889afb6f296e89a4c1d277b496cfc
3218,3218.0,3392.0,elastic/elasticsearch,ba9516e1acb7fdf2e503c3d21d191dedd21a27c9,"Make FreezeStep retryable (#52540)

* Make FreezeStep retryable

This change marks `FreezeStep` as retryable and adds test to make sure we can really run it again.

* refactor tests",https://github.com/elastic/elasticsearch/commit/ba9516e1acb7fdf2e503c3d21d191dedd21a27c9
3219,3219.0,3393.0,elastic/elasticsearch,30316d6d6409a359431d47094c497c482118a226,"Refactor GeoShapeIndexer by extracting polygon / line decomposers (#52422)

Refactor GeoShapeIndexer. We extract Polygon and Line decomposers which are in charge of breaking a shape around the dateline if needed.",https://github.com/elastic/elasticsearch/commit/30316d6d6409a359431d47094c497c482118a226
3220,3220.0,3394.0,elastic/elasticsearch,e086f81b688875b33d01e4504ce7377031c8cf28,"Break QueryTranslator into QL and SQL (#52397)

Refactor the code to allow contextual parameterization of dateFormat and
name.
Separate aggs/query implementation though there's room for improvement in the future",https://github.com/elastic/elasticsearch/commit/e086f81b688875b33d01e4504ce7377031c8cf28
3221,3221.0,3395.0,elastic/elasticsearch,cb9be14afb4b0536e0ae4bd9625a83e0d34e7387,"Make TimeSeriesLifecycleActionsIT.testWaitForSnapshot and testWaitForSnapshotSlmExecutedBefore wait for snaphost (#51892)

* waitForSnapshot tests rework

* Refactor assertBusy

Co-authored-by: Elastic Machine <elasticmachine@users.noreply.github.com>",https://github.com/elastic/elasticsearch/commit/cb9be14afb4b0536e0ae4bd9625a83e0d34e7387
3222,3222.0,3396.0,elastic/elasticsearch,f06f9fa5e4175f21a637ab5e5e3042afaeef625a,"Refactor Inflexible Snapshot Repository BwC (#52365)

Transport the version to use for  a snapshot instead of whether to use shard generations in the snapshots in progress entry. This allows making upcoming repository metadata changes in a flexible manner in an analogous way to how we handle serialization BwC elsewhere.
Also, exposing the version at the repository API level will make it easier to do BwC relevant changes in derived repositories like source only or encrypted.",https://github.com/elastic/elasticsearch/commit/f06f9fa5e4175f21a637ab5e5e3042afaeef625a
3223,3223.0,3397.0,elastic/elasticsearch,8fcbd1ddb928eaa08e480e5941871c1ac66f4c70,"[ML] Refactor ML mappings and templates into JSON resources (#51765)

ML mappings and index templates have so far been created
programmatically. While this had its merits due to static typing,
there is consensus it would be clear to maintain those in json files.
In addition, we are going to adding ILM policies to these indices
and the component for a plugin to register ILM policies is
`IndexTemplateRegistry`. It expects the templates to be in resource
json files.

For the above reasons this commit refactors ML mappings and index
templates into json resource files that are registered via
`MlIndexTemplateRegistry`.",https://github.com/elastic/elasticsearch/commit/8fcbd1ddb928eaa08e480e5941871c1ac66f4c70
3224,3224.0,3398.0,elastic/elasticsearch,dc7cf28be4ec56fb9ddd52fac923ccde1b1af855,"[ML] job results provider refactoring (#52012)

During a bug hunt, I caught a handful of things (unrelated to the bug) that could be potential issues:

1. Needlessly wrapping in exception handling (minor cleanup)
2. Potential of notifying listeners of a failure multiple times + even trying to notify of a success after a failure notification",https://github.com/elastic/elasticsearch/commit/dc7cf28be4ec56fb9ddd52fac923ccde1b1af855
3225,3225.0,3399.0,elastic/elasticsearch,ba9c4fb98702825d33f24dcc5798d2b5d1cc5b96,"Refactor Percentiles/Ranks aggregation builders and factories (#51887)

- Consolidates HDR/TDigest factories into a single factory
- Consolidates most HDR/TDigest builder into an abstract builder
- Deprecates method(), compression(), numSigFig() in favor of a new
unified PercentileConfig object
- Disallows setting algo options that don't apply to current algo

The unified config method carries both the method and algo-specific
setting. This provides a mechanism to reject settings that apply
to the wrong algorithm.  For BWC the old methods are retained
but marked as deprecated, and can be removed in future versions.

Co-authored-by: Mark Tozzi <mark.tozzi@gmail.com>",https://github.com/elastic/elasticsearch/commit/ba9c4fb98702825d33f24dcc5798d2b5d1cc5b96
3226,3226.0,3400.0,elastic/elasticsearch,72b84adf5e49c25133d841b656472718f9e4f939,"[ML] Prepare to hold additinal stats in DF Analytics task (#52134)

Refactors `DataFrameAnalyticsTask` to hold a `StatsHolder` object.
That just has a `ProgressTracker` for now but this is paving the
way to add additional stats like memory usage, analysis stats, etc.",https://github.com/elastic/elasticsearch/commit/72b84adf5e49c25133d841b656472718f9e4f939
3227,3227.0,3401.0,elastic/elasticsearch,9fb5c811fc04e13e2b4d010ea98656d4af6207a6,"Extract class to store Authentication in context (#52032)

This change extracts the code that previously existed in the
""Authentication"" class that was responsible for reading and writing
authentication objects to/from the ThreadContext.

This is needed to support multiple authentication objects under
separate keys.

This refactoring highlighted that there were a large number of places
where we extracted the Authentication/User objects from the thread
context, in a variety of ways. These have been consolidated to rely on
the SecurityContext object.",https://github.com/elastic/elasticsearch/commit/9fb5c811fc04e13e2b4d010ea98656d4af6207a6
3228,3228.0,3402.0,elastic/elasticsearch,7cebcdfbe3d23bd7cd60e046607258faf415b432,"Refactor JvmOptionsParser for testability (#52102)

This commit prepares the JvmOptionsParser to be more unit testable by
refactoring the class to have some input that it pulls from external
sources passed in as arguments. We do not change any functionality in
this commit, nor add any unit tests, we are only preparing the way.",https://github.com/elastic/elasticsearch/commit/7cebcdfbe3d23bd7cd60e046607258faf415b432
3229,3229.0,3403.0,elastic/elasticsearch,4ab16c67115342e47d1ae9138f90c579140f3b5e,"Add enterprise mode and refactor license check (#51864)

Add enterprise operation mode to properly map enterprise license.

Aslo refactor XPackLicenstate class to consolidate license status and mode checks.
This class has many sychronised methods to check basically three things:
* Minimum operation mode required
* Whether security is enabled
* Whether current license needs to be active

Depends on the actual feature, either 1, 2 or all of above checks are performed. 
These are now consolidated in to 3 helper methods (2 of them are new).
The synchronization is pushed down to the helper methods so actual checking
methods no longer need to worry about it.

resolves: #51081",https://github.com/elastic/elasticsearch/commit/4ab16c67115342e47d1ae9138f90c579140f3b5e
3230,3230.0,3404.0,elastic/elasticsearch,fef0e1dd89731aace184a509970fa77d6f75372c,"Create a class to hold field capabilities for one index. (#51721)

Currently, the same class `FieldCapabilities` is used both to represent the
capabilities for one index, and also the merged capabilities across indices. To
help clarify the logic, this PR proposes to create a separate class
`IndexFieldCapabilities` for the capabilities in one index. The refactor will
also help when adding `source_path` information in #49264, since the merged
source path field will have a different structure from the field for a single index.

Individual changes: 
* Add a new class IndexFieldCapabilities.
* Remove extra constructor from FieldCapabilities.
* Combine the add and merge methods in FieldCapabilities.Builder.",https://github.com/elastic/elasticsearch/commit/fef0e1dd89731aace184a509970fa77d6f75372c
3231,3231.0,3405.0,elastic/elasticsearch,f016b17ac1370d67009c347d9bbf49e390a27ff7,"Deprecate timeout.tcp_read AD/LDAP realm setting (#47305)

* Done

* Update docs/reference/settings/security-settings.asciidoc

Co-Authored-By: Ioannis Kakavas <ikakavas@protonmail.com>

* Update docs/reference/settings/security-settings.asciidoc

Co-Authored-By: Ioannis Kakavas <ikakavas@protonmail.com>

* refactored ldap_search explanation

* Tim's review!

* [ML] Use CSV ingest processor in find_file_structure ingest pipeline (#51492)

Changes the find_file_structure response to include a CSV
ingest processor in the ingest pipeline it suggests.

Previously the Kibana file upload functionality parsed CSV
in the browser, but by parsing CSV in the ingest pipeline
it makes the Kibana file upload functionality more easily
interchangable with Filebeat such that the configurations
it creates can more easily be used to import data with the
same structure repeatedly in production.

* Add test verify replica allocator with sync_id (#51512)

We no longer issue new sync_ids in 8.0, but we still need to make sure 
that the replica allocator prefers copies with matching sync_id. This
commit adds tests for that.

Relates #50776

* Formatting: keep simple if / else on the same line (#51526)

Previous the formatter was breaking simple if/else statements (i.e.
without braces) onto separate lines, which could be fragile because the
formatter cannot also introduce braces. Instead, keep such expressions
on the same line.

* Nits

Co-authored-by: Ioannis Kakavas <ikakavas@protonmail.com>
Co-authored-by: Elastic Machine <elasticmachine@users.noreply.github.com>
Co-authored-by: David Roberts <dave.roberts@elastic.co>
Co-authored-by: Nhat Nguyen <nhat.nguyen@elastic.co>
Co-authored-by: Rory Hunter <pugnascotia@users.noreply.github.com>",https://github.com/elastic/elasticsearch/commit/f016b17ac1370d67009c347d9bbf49e390a27ff7
3232,3232.0,3406.0,elastic/elasticsearch,c117c0cf0a2e1a497c83278cebb7a2da57c2f599,"Password-protected Keystore Feature Branch PR (#51123)

* Reload secure settings with password (#43197)

If a password is not set, we assume an empty string to be
compatible with previous behavior.
Only allow the reload to be broadcast to other nodes if TLS is
enabled for the transport layer.

* Add passphrase support to elasticsearch-keystore (#38498)

This change adds support for keystore passphrases to all subcommands
of the elasticsearch-keystore cli tool and adds a subcommand for
changing the passphrase of an existing keystore.
The work to read the passphrase in Elasticsearch when
loading, which will be addressed in a different PR.

Subcommands of elasticsearch-keystore can handle (open and create)
passphrase protected keystores

When reading a keystore, a user is only prompted for a passphrase
only if the keystore is passphrase protected.

When creating a keystore, a user is allowed (default behavior) to create one with an
empty passphrase

Passphrase can be set to be empty when changing/setting it for an
existing keystore

Relates to: #32691
Supersedes: #37472

* Restore behavior for force parameter (#44847)

Turns out that the behavior of `-f` for the add and add-file sub
commands where it would also forcibly create the keystore if it
didn't exist, was by design - although undocumented.
This change restores that behavior auto-creating a keystore that
is not password protected if the force flag is used. The force
OptionSpec is moved to the BaseKeyStoreCommand as we will presumably
want to maintain the same behavior in any other command that takes
a force option.

*  Handle pwd protected keystores in all CLI tools  (#45289)

This change ensures that `elasticsearch-setup-passwords` and
`elasticsearch-saml-metadata` can handle a password protected
elasticsearch.keystore.
For setup passwords the user would be prompted to add the
elasticsearch keystore password upon running the tool. There is no
option to pass the password as a parameter as we assume the user is
present in order to enter the desired passwords for the built-in
users.
For saml-metadata, we prompt for the keystore password at all times
even though we'd only need to read something from the keystore when
there is a signing or encryption configuration.

* Modify docs for setup passwords and saml metadata cli (#45797)

Adds a sentence in the documentation of `elasticsearch-setup-passwords`
and `elasticsearch-saml-metadata` to describe that users would be
prompted for the keystore's password when running these CLI tools,
when the keystore is password protected.

Co-Authored-By: Lisa Cawley <lcawley@elastic.co>

* Elasticsearch keystore passphrase for startup scripts (#44775)

This commit allows a user to provide a keystore password on Elasticsearch
startup, but only prompts when the keystore exists and is encrypted.

The entrypoint in Java code is standard input. When the Bootstrap class is
checking for secure keystore settings, it checks whether or not the keystore
is encrypted. If so, we read one line from standard input and use this as the
password. For simplicity's sake, we allow a maximum passphrase length of 128
characters. (This is an arbitrary limit and could be increased or eliminated.
It is also enforced in the keystore tools, so that a user can't create a
password that's too long to enter at startup.)

In order to provide a password on standard input, we have to account for four
different ways of starting Elasticsearch: the bash startup script, the Windows
batch startup script, systemd startup, and docker startup. We use wrapper
scripts to reduce systemd and docker to the bash case: in both cases, a
wrapper script can read a passphrase from the filesystem and pass it to the
bash script.

In order to simplify testing the need for a passphrase, I have added a
has-passwd command to the keystore tool. This command can run silently, and
exit with status 0 when the keystore has a password. It exits with status 1 if
the keystore doesn't exist or exists and is unencrypted.

A good deal of the code-change in this commit has to do with refactoring
packaging tests to cleanly use the same tests for both the ""archive"" and the
""package"" cases. This required not only moving tests around, but also adding
some convenience methods for an abstraction layer over distribution-specific
commands.

* Adjust docs for password protected keystore (#45054)

This commit adds relevant parts in the elasticsearch-keystore
sub-commands reference docs and in the reload secure settings API
doc.

* Fix failing Keystore Passphrase test for feature branch (#50154)

One problem with the passphrase-from-file tests, as written, is that
they would leave a SystemD environment variable set when they failed,
and this setting would cause elasticsearch startup to fail for other
tests as well. By using a try-finally, I hope that these tests will fail
more gracefully.

It appears that our Fedora and Ubuntu environments may be configured to
store journald information under /var rather than under /run, so that it
will persist between boots. Our destructive tests that read from the
journal need to account for this in order to avoid trying to limit the
output we check in tests.

* Run keystore management tests on docker distros (#50610)

* Add Docker handling to PackagingTestCase

Keystore tests need to be able to run in the Docker case. We can do this
by using a DockerShell instead of a plain Shell when Docker is running.

* Improve ES startup check for docker

Previously we were checking truncated output for the packaged JDK as
an indication that Elasticsearch had started. With new preliminary
password checks, we might get a false positive from ES keystore
commands, so we have to check specifically that the Elasticsearch
class from the Bootstrap package is what's running.

* Test password-protected keystore with Docker (#50803)

This commit adds two tests for the case where we mount a
password-protected keystore into a Docker container and provide a
password via a Docker environment variable.

We also fix a logging bug where we were logging the identifier for an
array of strings rather than the contents of that array.

* Add documentation for keystore startup prompting (#50821)

When a keystore is password-protected, Elasticsearch will prompt at
startup. This commit adds documentation for this prompt for the archive,
systemd, and Docker cases.

Co-authored-by: Lisa Cawley <lcawley@elastic.co>

* Warn when unable to upgrade keystore on debian (#51011)

For Red Hat RPM upgrades, we warn if we can't upgrade the keystore. This
commit brings the same logic to the code for Debian packages. See the
posttrans file for gets executed for RPMs.

* Restore handling of string input

Adds tests that were mistakenly removed. One of these tests proved
we were not handling the the stdin (-x) option correctly when no
input was added. This commit restores the original approach of
reading stdin one char at a time until there is no more (-1, \r, \n)
instead of using readline() that might return null

* Apply spotless reformatting

* Use '--since' flag to get recent journal messages

When we get Elasticsearch logs from journald, we want to fetch only log
messages from the last run. There are two reasons for this. First, if
there are many logs, we might get a string that's too large for our
utility methods. Second, when we're looking for a specific message or
error, we almost certainly want to look only at messages from the last
execution.

Previously, we've been trying to do this by clearing out the physical
files under the journald process. But there seems to be some contention
over these directories: if journald writes a log file in between when
our deletion command deletes the file and when it deletes the log
directory, the deletion will fail.

It seems to me that we might be able to use journald's ""--since"" flag to
retrieve only log messages from the last run, and that this might be
less likely to fail due to race conditions in file deletion.

Unfortunately, it looks as if the ""--since"" flag has a granularity of
one-second. I've added a two-second sleep to make sure that there's a
sufficient gap between the test that will read from journald and the
test before it.

* Use new journald wrapper pattern

* Update version added in secure settings request

Co-authored-by: Lisa Cawley <lcawley@elastic.co>
Co-authored-by: Ioannis Kakavas <ikakavas@protonmail.com>",https://github.com/elastic/elasticsearch/commit/c117c0cf0a2e1a497c83278cebb7a2da57c2f599
3233,3233.0,3407.0,elastic/elasticsearch,aebda81b30e1563b877a8896309fd50633e0b663,"QL: Refactor DataType for pluggability (#51328)

Change DataType from enum to class
Break DataType enums into QL (default) and SQL types
Make data type conversion pluggable so that new types can be introduced

As part of the process:
- static type conversion in QL package (such as Literal) has been
removed
- several utility classes have been broken into base (QL) and extended
(SQL) parts based on type awareness
- operators (+,-,/,*) are
- due to extensibility, serialization of arithmetic operation has been
slightly changed and pushed down to the operator executor itself",https://github.com/elastic/elasticsearch/commit/aebda81b30e1563b877a8896309fd50633e0b663
3234,3234.0,3408.0,elastic/elasticsearch,dd409e17cb1bc50d89fd8f6dba98be73282993d0,"Refactor GeoShape tests to GeoShape and GeoPoint (#50737)

* WIP subclassing GeoShapeQueryTests.java

* WIP subclassing GeoShapeQueryTests.java

* WIP subclassing GeoShapeQueryTests.java

* WIP writing GeoPointShapeQueryTests.java

* Added Failing Test testIndexPointsFilterRectangle
 in Class org.elasticsearch.search.geo.GeoPointShapeQueryTests

* permit GeoShapeQueryBuilder to accept a geo_point -> class_cast_exception raised, see org.elasticsearch.index.query.QueryShardContext.toQuery

* added @Override protected XContentBuilder createMapping
in GeoPointShapeQueryTests

* repeat refactor post type removal and remove remaining types from GeoShapeQueryTests.java

* tidy GeoPointShapeQueryTests.java

* interim checkin, still failing tests

* GeoShapeQueryTests.java passing tests

* GeoShapeQueryTests.java extends GeoQueryTests

* refactored + tests passing

* refactored + tests passing

* reset GeoShapeQueryBuilder.java for future PR

* improved refactoring see: https://github.com/elastic/elasticsearch/pull/50737#pullrequestreview-340443408

* refactor

* rectified Checkstyle rule violations",https://github.com/elastic/elasticsearch/commit/dd409e17cb1bc50d89fd8f6dba98be73282993d0
3235,3235.0,3409.0,elastic/elasticsearch,c1b6fbfe69386e45d532aabe2f773b5119fa155a,"[Transform] refactor naming leftovers and apply code formating  (#51465)

refactor renaming leftovers: ""data frame transform"" to ""transforms"", touch only internals (variable
names, non-public API's, doc strings, ...) and apply code-formatting (spotless). No logical changes.",https://github.com/elastic/elasticsearch/commit/c1b6fbfe69386e45d532aabe2f773b5119fa155a
3236,3236.0,3410.0,elastic/elasticsearch,a4da1c9b46115624e630c9b91e73ee95d3f8262a,"Refactor ForEachProcessor to use iteration instead of recursion (#51104)

* Refactor ForEachProcessor to use iteration instead of recursion

This change makes ForEachProcessor iterative and still non-blocking.
In case of non-async processors we use single for loop and no recursion at all.
In case of async processors we continue work on either current thread or thread
started by downstream processor, whichever is slower (usually processor thread).
Everything is synchronised by single atomic variable.

Relates #50514",https://github.com/elastic/elasticsearch/commit/a4da1c9b46115624e630c9b91e73ee95d3f8262a
3237,3237.0,3411.0,elastic/elasticsearch,d9528406bf371a7490c564df0cbe928e932fba35,"Use default profile for remote connections (#50828)

Currently, the connection manager is configured with a default profile
for both the sniff and proxy connection stratgies. This profile
correctly reflects the expected number of connection (6 for sniff, 18
for proxy). This commit removes the proxy strategy usages of the per
connection attempt profile configuration.

Additionally, it refactors other unnecessary code around the connection
manager. The connection manager now can always be built inside the
remote connection.",https://github.com/elastic/elasticsearch/commit/d9528406bf371a7490c564df0cbe928e932fba35
3238,3238.0,3412.0,elastic/elasticsearch,42d84b839bd8753985ef76ff42414172c59be917,"EQL: Make EqlSearchResponse immutable (#50810)

Refactors EqlSearchResponse to make it immutable

Relates to #49581",https://github.com/elastic/elasticsearch/commit/42d84b839bd8753985ef76ff42414172c59be917
3239,3239.0,3413.0,elastic/elasticsearch,f9bcd6c36b90919207b7c49ebbfdd132268f3333,"[Transform] refactor source and dest validation to support CCS (#50018)

refactors source and dest validation, adds support for CCS, makes resolve work like reindex/search, allow aliased dest index with a single write index.

fixes #49988
fixes #49851
relates #43201",https://github.com/elastic/elasticsearch/commit/f9bcd6c36b90919207b7c49ebbfdd132268f3333
3240,3240.0,3414.0,elastic/elasticsearch,9f069f795ce86bb1424ea97be3b2f2e887632bf2,"Refactor environment variable processing for Docker (#49612)

Closes #45223.

The current Docker entrypoint script picks up environment variables and
translates them into -E command line arguments. However, since any tool
executes via `docker exec` doesn't run the entrypoint, it results in
a poorer user experience.

Therefore, refactor the env var handling so that the -E options are
generated in `elasticsearch-env`. These have to be appended to any
existing command arguments, since some CLI tools have subcommands and
-E arguments must come after the subcommand.

Also extract the support for `_FILE` env vars into a separate script, so
that it can be called from more than once place (the behaviour is
idempotent).

Finally, add noop -E handling to CronEvalTool for parity, and support
`-E` in MultiCommand before subcommands.",https://github.com/elastic/elasticsearch/commit/9f069f795ce86bb1424ea97be3b2f2e887632bf2
3241,3241.0,3415.0,elastic/elasticsearch,12e1bc45c364e2ec820d0324a20acebe25aa950a,"Refactor utility code in qa:os: tests (#49945)

This refactor bridges some gaps between a long-running feature branch (#49268) and the master branch.

First of all, this PR gives our PackagingTestCase class some methods to start and stop Elasticsearch that will switch on packaging type and delegate to the appropriate utility class for deb/RPM packages, archive installations, and Docker. These methods should be very useful as we continue group tests by function rather than by package or platform type.

Second, the password-protected keystore tests have a particular need to read the output of Elasticsearch startup commands. In order to make this easer to do, some commands now return Shell.Result objects so that tests can check over output to the shell. To that end, there's also an assertElasticsearchFailure method that will handle checking for startup failures for the various distribution types.

There is an update to the Powershell startup script for archives that asynchronously redirects the output of the Powershell process to files that we can read for errors.

Finally, we use the ES_STARTUP_SLEEP_TIME environment variable to make sure that our startup commands wait long enough before exiting for errors to make it to the standard output and error streams.",https://github.com/elastic/elasticsearch/commit/12e1bc45c364e2ec820d0324a20acebe25aa950a
3242,3242.0,3416.0,elastic/elasticsearch,21a09be994653f358c28c900dfa0b0a072172a93,"Refactor IndexLifecycleRunner to split state modification (#49891)

This commit refactors the `IndexLifecycleRunner` to split out and
consolidate the number of methods that change state from within ILM. It
adds a new class `IndexLifecycleTransition` that contains a number of
static methods used to modify ILM's state. These methods all return new
cluster states rather than making changes themselves (they can be
thought of as helpers for modifying ILM state).

Rather than having multiple ways to move an index to a particular step
(like `moveClusterStateToStep`, `moveClusterStateToNextStep`,
`moveClusterStateToPreviouslyFailedStep`, etc (there are others)) this
now consolidates those into three with (hopefully) useful names:

- `moveClusterStateToStep`
- `moveClusterStateToErrorStep`
- `moveClusterStateToPreviouslyFailedStep`

In the move, I was also able to consolidate duplicate or redundant
arguments to these functions. Prior to this commit there were many calls
that provided duplicate information (both `IndexMetaData` and
`LifecycleExecutionState` for example) where the duplicate argument
could be derived from a previous argument with no problems.

With this split, `IndexLifecycleRunner` now contains the methods used to
actually run steps as well as the methods that kick off cluster state
updates for state transitions. `IndexLifecycleTransition` contains only
the helpers for constructing new states from given scenarios.

This also adds Javadocs to all methods in both `IndexLifecycleRunner`
and `IndexLifecycleTransition` (this accounts for almost all of the
increase in code lines for this commit). It also makes all methods be as
restrictive in visibility, to limit the scope of where they are used.

This refactoring is part of work towards capturing actions and
transitions that ILM makes, by consolidating and simplifying the places
we make state changes, it will make adding operation auditing easier.",https://github.com/elastic/elasticsearch/commit/21a09be994653f358c28c900dfa0b0a072172a93
3243,3243.0,3417.0,elastic/elasticsearch,5d095e2173bcbf120f534a6f2a584185a7879b57,"Refactor usage of NamedExpression (#49693)

To recap, Attributes form the properties of a derived table.
Each LogicalPlan has Attributes as output since each one can be part of a
query and as such its result are sent to its consumer.
This change essentially removes the name id comparison so any changes
applied to existing expressions should work as long as the said expressions
are semantically equivalent.
This change enforces the hashCode and equals which has the side-effect
of using hashCode as identifiers for each expression.
By removing any property from an Attribute, the various components need
to look the original source for comparison which, while annoying, should
prevent a reference from getting out of sync with its source due to 
optimizations.

Essentially going forward there are only 3 types of NamedExpressions:

Alias - user define (implicit or explicit) name
FieldAttribute - field backed by Elasticsearch
ReferenceAttribute - a reference to another source acting as an
Attribute. Typically the Attribute of an Alias.

* Remove the usage of NamedExpression as basis for all Expressions.
Instead, restrict their use only for named context, such as projections
by using Aliasing instead.
* Remove different types of Attributes and allow only FieldAttribute,
UnresolvedAttribute and ReferenceAttribute. To avoid issues with
rewrites, resolve the references inside the QueryContainer so the
information always stays on the source.
* Side-effect, simplify the rules as the state for InnerAggs doesn't have
to be contained anymore.
* Improve ResolveMissingRef rule to handle references to named
non-singular expression tree against the same expression used up the
tree.",https://github.com/elastic/elasticsearch/commit/5d095e2173bcbf120f534a6f2a584185a7879b57
3244,3244.0,3418.0,elastic/elasticsearch,871408fa04ac37195f13b7c4ebabeca9446c1466,"Fix invalid break iterator highlighting on keyword field (#49566)

By default the unified highlighter splits the input into passages using
a sentence break iterator. However we don't check if the field is tokenized
or not so `keyword` field also applies the break iterator even though they can
only match on the entire content. This means that by default we'll split the
content of a `keyword` field on sentence break if the requested number of fragments
is set to a value different than 0 (default to 5). This commit changes this behavior
to ignore the break iterator on non-tokenized fields (keyword) in order to always
highlight the entire values. The number of requested fragments control the number of
matched values are returned but the boundary_scanner_type is now ignored.
Note that this is the behavior in 6x but some refactoring of the Lucene's highlighter
exposed this bug in Elasticsearch 7x.",https://github.com/elastic/elasticsearch/commit/871408fa04ac37195f13b7c4ebabeca9446c1466
3245,3245.0,3419.0,elastic/elasticsearch,5bc0a3fdc338bb71be83b73e5d8c1d0ca2ba08b6,"Reuse CompensatedSum object in agg collect loops (#49548)

The new CompensatedSum is a nice DRY refactor, but had the unanticipated 
side effect of creating a lot of object allocation in the aggregation hot collection 
loop: one object per visited document, per aggregator. In some places it 
created two per-doc-per-agg (weighted avg, geo centroids, etc) since there 
were multiple compensations being maintained.

This PR moves the object creation out of the hot loop so that it is now 
created once per segment, and resets the internal state each time through 
the loop",https://github.com/elastic/elasticsearch/commit/5bc0a3fdc338bb71be83b73e5d8c1d0ca2ba08b6
3246,3246.0,3420.0,elastic/elasticsearch,0130139fd71b6d294781c63871a1a1e8ad4a09c6,"Geo: Fix handling of circles in legacy geo_shape queries (#49410)

Brings back support for circles in legacy geo_shape queries that
was accidentally lost during query refactoring.

Fixes #49296",https://github.com/elastic/elasticsearch/commit/0130139fd71b6d294781c63871a1a1e8ad4a09c6
3247,3247.0,3421.0,elastic/elasticsearch,31512fb6ecf20246b2abcffa123bcb80497a7e10,"Support ""enterprise"" license types (#49223)

This adds ""enterprise"" as an acceptable type for a license loaded
through the PUT _license API.

Internally an enterprise license is treated as having a ""platinum""
operating mode.

The handling of License types was refactored to have a new explicit
""LicenseType"" enum in addition to the existing ""OperatingMode"" enum.",https://github.com/elastic/elasticsearch/commit/31512fb6ecf20246b2abcffa123bcb80497a7e10
3248,3248.0,3422.0,elastic/elasticsearch,6cccf3d8274c4638d7f8b6ce7df23399b6c527cd,"(refactor) Extract Empty/Script/Missing ValuesSource behavior to an interface (#48320)

This is a pure code rearrangement refactor.  Logic for what specific ValuesSource instance to use for a given type (e.g. script or field) moved out of ValuesSourceConfig and into CoreValuesSourceType (previously just ValueSourceType; we extract an interface for future extensibility).  ValueSourceConfig still selects which case to use, and then the ValuesSourceType instance knows how to construct the ValuesSource for that case.",https://github.com/elastic/elasticsearch/commit/6cccf3d8274c4638d7f8b6ce7df23399b6c527cd
3249,3249.0,3423.0,elastic/elasticsearch,1dd816f030e256f497c1726695d1209a481b9d8e,"[ML] Extract creation of DFA field extractor into a factory (#49315)

This commit moves the async calls required to retrieve the components
that make up `ExtractedFieldsExtractor` out of `DataFrameDataExtractorFactory`
and into a dedicated `ExtractorFieldsExtractorFactory` class.

A few more refactorings are performed:

  - The detector no longer needs the results field. Instead, it knows
  whether to use it or not based on whether the task is restarting.
  - We pass more accurately whether the task is restarting or not.
  - The validation of whether fields that have a cardinality limit
  are valid is now performed in the detector after retrieving the
  respective cardinalities.",https://github.com/elastic/elasticsearch/commit/1dd816f030e256f497c1726695d1209a481b9d8e
3250,3250.0,3424.0,elastic/elasticsearch,0f6ffc20a536d5daecb6fcc0cb5f59cf1acd63ca,"Refactor percolator's QueryAnalyzer to use QueryVisitors (#49238)

Lucene now allows us to explore the structure of a query using QueryVisitors,
delegating the knowledge of how to recurse through and collect terms to the
query implementations themselves. The percolator currently has a home-grown
external version of this API to construct sets of matching terms that must be
present in a document in order for it to possibly match the query.

This commit removes the home-grown implementation in favour of one using
QueryVisitor. This has the added benefit of making interval queries available
for percolator pre-filtering. Due to a bug in multi-term intervals (LUCENE-9050)
it also includes a clone of some of the lucene intervals logic, that can be removed
once upstream has been fixed.

Closes #45639",https://github.com/elastic/elasticsearch/commit/0f6ffc20a536d5daecb6fcc0cb5f59cf1acd63ca
3251,3251.0,3425.0,elastic/elasticsearch,eb70849a21eb08504ffa8af7cbfc0801dec66ebd,Refactor and DRY up Kahan Sum algorithm (#48558),https://github.com/elastic/elasticsearch/commit/eb70849a21eb08504ffa8af7cbfc0801dec66ebd
3252,3252.0,3426.0,elastic/elasticsearch,e9367ef4be659a616adf8c988ce2acd95354e69b,"[ML] Prevent fetching multi-field from source (#48770)

Aggregatable mutli-fields are at the moment wrongly mapped
as normal doc_value fields and thus they support fetching from
source. However, they do not exist in the source. This results
to failure to extract such fields.

This commit fixes this bug. While a fix could be worked out
on top of the existing code, it is evident the extraction logic
has become difficult to understand and maintain. As we also
want to deduplicate multi-fields for data frame analytics,
it seemed appropriate to refactor the code to simplify and
better handle the extraction of multi-fields.

Relates #48756",https://github.com/elastic/elasticsearch/commit/e9367ef4be659a616adf8c988ce2acd95354e69b
3253,3253.0,3427.0,elastic/elasticsearch,83ef1553bfbff5a3d2874cf6d2d3d61102d7a642,"Refactor unit tests for vector functions. (#48662)

This PR performs the following changes:
* Split `ScoreScriptUtilsTests` into `DenseVectorFunctionTests` and
`SparseVectorFunctionTests`. This will make it easier to delete all sparse
vector function tests once we remove support on 8.x.
* As much as possible, break up the large test methods into individual tests
for each vector function (`cosineSimilarity`, `l2norm`, etc.).",https://github.com/elastic/elasticsearch/commit/83ef1553bfbff5a3d2874cf6d2d3d61102d7a642
3254,3254.0,3428.0,elastic/elasticsearch,24ba4c30ccbcc09071a0cf4241ba120981a33772,"Refactor HLRC transform stats test (#48708)

This test uses a deprecated base class, and this commit moves it over
to the new class.

Ref #39745",https://github.com/elastic/elasticsearch/commit/24ba4c30ccbcc09071a0cf4241ba120981a33772
3255,3255.0,3429.0,elastic/elasticsearch,019d6c5006f61acd32f1df4ed0622eef03a49eae,"[ML] Move field extraction logic to its own package (#48709)

Moves common field extraction logic to its own package so that it can
be used both for anomaly detection and data frame analytics.

In preparation for refactoring extraction fields to be simpler and to
support multi-fields properly.",https://github.com/elastic/elasticsearch/commit/019d6c5006f61acd32f1df4ed0622eef03a49eae
3256,3256.0,3430.0,elastic/elasticsearch,f863dd12b419db850fd32dad84df2e9c2218e57f,"Update the signature of vector script functions. (#48604)

Previously the functions accepted a doc values reference, whereas they now
accept the name of the vector field. Here's an example of how a vector function
was called before and after the change.

```
Before: cosineSimilarity(params.query_vector, doc['field'])
After:  cosineSimilarity(params.query_vector, 'field')
```

This seems more intuitive, since we don't allow direct access to vector doc
values and the the meaning of `doc['field']` is unclear.

The PR makes the following changes (broken into distinct commits):
* Add new function signatures of the form `function(params.query_vector,
'field')` and deprecates the old ones. Because Painless doesn't allow two
methods with the same name and number of arguments, we allow a generic `Object`
to be passed in to the function and decide on the behavior through an
`instanceof` check.
* Refactor the class bindings so that the document field is passed to the
constructor instead of the instance method. This allows us to avoid retrieving
the vector doc values on every function invocation, which gives a tiny speed-up
in benchmarks.

Note that this PR adds new signatures for the sparse vector functions too, even
though sparse vectors are deprecated. It seemed simplest to understand (for both
us and users) to keep everything symmetric between dense and sparse vectors.",https://github.com/elastic/elasticsearch/commit/f863dd12b419db850fd32dad84df2e9c2218e57f
3257,3257.0,3431.0,elastic/elasticsearch,4e2ee64b91369470aa4708f6c25f5d3d41fe0e0b,"Refactor FIPS BootstrapChecks to simple checks (#47499)

FIPS 140 bootstrap checks should not be bootstrap checks as they
are always enforced. This commit moves the validation logic within
the security plugin.
The FIPS140SecureSettingsBootstrapCheck was not applicable as the
keystore was being loaded on init, before the Bootstrap checks
were checked, so an elasticsearch keystore of version < 3 would
cause the node to fail in a FIPS 140 JVM before the bootstrap check
kicked in, and as such hasn't been migrated.

Resolves: #34772",https://github.com/elastic/elasticsearch/commit/4e2ee64b91369470aa4708f6c25f5d3d41fe0e0b
3258,3258.0,3432.0,elastic/elasticsearch,a6075e7718dff94a90dbc0795dd924dcb7641092,"SQL: Refactor binary date time functions (#47786)

Refactor DateTrunc and DatePart to use separate Pipe classes which
allows the removal of the BinaryDateOperation enum.",https://github.com/elastic/elasticsearch/commit/a6075e7718dff94a90dbc0795dd924dcb7641092
3259,3259.0,3433.0,elastic/elasticsearch,a4a79670f85d5c135c1ad668c387808fffd733f7,"Refactor ESLogMessage to not define fields upfront (#46702)

* refactor ESLogMessage and overriding fields

* rename esmessagefields to overrideFields

* javadoc

* simplify custom message class creation

* line length

* small cleanup and rename of ESJsonField

* working with builder

* parametrized map - basing on ecs

* builder

* refactoring and cleanup

* cleanup

* logger checker",https://github.com/elastic/elasticsearch/commit/a4a79670f85d5c135c1ad668c387808fffd733f7
3260,3260.0,3434.0,elastic/elasticsearch,68faaaf94310fbcd3b5ee369dc0ed0cf0681c041,"Fix --debug-jvm Gradle Arg (#47773)

This fixes the `--debug-jvm` arg to work again for
the `run` task.
Seems a recent refactoring of `RunTask` introduced
this obvious type.",https://github.com/elastic/elasticsearch/commit/68faaaf94310fbcd3b5ee369dc0ed0cf0681c041
3261,3261.0,3435.0,elastic/elasticsearch,c20fa4d54120d9db74ac8b0acd6e46719de38019,"Geo-Match Enrich Processor (#47243)

this commit introduces a geo-match enrich processor that looks up a specific
`geo_point` field in the enrich-index for all entries that have a geo_shape match field
that meets some specific relation criteria with the input field.

For example, the enrich index may contain documents with zipcodes and their respective
geo_shape. Ingesting documents with a geo_point field can be enriched with which zipcode
they associate according to which shape they are contained within.

this commit also refactors some of the MatchProcessor by moving a lot of the shared code to
AbstractEnrichProcessor.

Closes #42639.",https://github.com/elastic/elasticsearch/commit/c20fa4d54120d9db74ac8b0acd6e46719de38019
3262,3262.0,3436.0,elastic/elasticsearch,785cf6bd44d5de91edc3fc184d8be3d3ba511898,"Upgrade joni from 2.1.6 to 2.1.29 (#47374)

Changed the Grok class to use searchInterruptible(...) instead of search(...)
otherwise we can't interrupt long running matching via the thread watch
dog.

Joni now also provides another way to interrupt long running matches.
By invoking the interrupt() method on the Matcher. We need then to refactor
the watch thread dog to keep track of Matchers instead of Threads, but
it is a better way of doing this, since interrupting would be more direct
(not every 30k iterations) and efficient (checking a volatile field).
This work needs to be done in a follow up.",https://github.com/elastic/elasticsearch/commit/785cf6bd44d5de91edc3fc184d8be3d3ba511898
3263,3263.0,3437.0,elastic/elasticsearch,aeeba167ffad4bd8964bc055a253342cc19aa2c9,"[ML] Reinstate ML daily maintenance actions (#47103)

A refactoring in 6.6 meant that the ML daily
maintenance actions have not been run at all
since then. This change installs the local
master listener that schedules the ML daily
maintenance, and also defends against some
subtle race conditions that could occur in the
future if a node flipped very quickly between
master and non-master.

Fixes #47003",https://github.com/elastic/elasticsearch/commit/aeeba167ffad4bd8964bc055a253342cc19aa2c9
3264,3264.0,3438.0,elastic/elasticsearch,37db38581c7accf674d3f960ace977f2f1a4a381,"Refactor AllocatedPersistentTask#init(), move rollup ctor logic (#46444)

This makes the AllocatedPersistentTask#init() method protected so that
implementing classes can perform their initialization logic there,
instead of the constructor.  Rollup's task is adjusted to use this
init method.

It also slightly refactors the methods to use a static logger in the
AllocatedTask instead of passing it in via an argument.  This is 
simpler, logged messages come from the task instead of the 
service, and is easier for tests",https://github.com/elastic/elasticsearch/commit/37db38581c7accf674d3f960ace977f2f1a4a381
3265,3265.0,3439.0,elastic/elasticsearch,94fec109c77819a731562cc6f827dfc3bf86c5b7,"[ML] Extract DataFrameAnalyticsTask into its own class (#46402)

This refactors `DataFrameAnalyticsTask` into its own class.
The task has quite a lot of functionality now and I believe it would
make code more readable to have it live as its own class rather than
an inner class of the start action class.",https://github.com/elastic/elasticsearch/commit/94fec109c77819a731562cc6f827dfc3bf86c5b7
3266,3266.0,3440.0,elastic/elasticsearch,f336c74788f202e9eb0ce6e99da41eebb17a1768,"Revert ""Refactor AllocatedPersistentTask#init(), move rollup logic out of ctor (#46288)""

This reverts commit d999942c6dfd931266d01db24d3fb26b29cf8f64.",https://github.com/elastic/elasticsearch/commit/f336c74788f202e9eb0ce6e99da41eebb17a1768
3267,3267.0,3441.0,elastic/elasticsearch,d999942c6dfd931266d01db24d3fb26b29cf8f64,"Refactor AllocatedPersistentTask#init(), move rollup logic out of ctor (#46288)

This makes the AllocatedPersistentTask#init() method protected so that
implementing classes can perform their initialization logic there,
instead of the constructor.  Rollup's task is adjusted to use this
init method.

It also slightly refactors the methods to se a static logger in the 
AllocatedTask instead of passing it in via an argument.  This is 
simpler, logged messages come from the task instead of the 
service, and is easier for tests",https://github.com/elastic/elasticsearch/commit/d999942c6dfd931266d01db24d3fb26b29cf8f64
3268,3268.0,3442.0,elastic/elasticsearch,2648ece98a4ccd40fb15f43304086b1e1bc6a44c,"Quiet down shard lock failures (#46368)

These were actually never intended to be logged at the warning level but made visible by a refactoring in #19991, which introduced a new exception type but forgot to adapt some of the consumers of the exception.",https://github.com/elastic/elasticsearch/commit/2648ece98a4ccd40fb15f43304086b1e1bc6a44c
3269,3269.0,3443.0,elastic/elasticsearch,9ae7393a2c85d0c6ba3f66ceb2306d6ff59d8cc5,"[ML] Regression dependent variable must be numeric (#46072)

* [ML] Regression dependent variable must be numeric

This adds a validation that the dependent variable of a regression
analysis must be numeric.

* Address review comments and fix some problems

In addition to addressing the review comments, this
commit fixes a few issues I found during testing.

In particular:

- if there were mappings for required fields but they were
not included we were not reporting the error
- if explicitly included fields had unsupported types we were
not reporting the error

Unfortunately, I couldn't get those fixed without refactoring
the code in `ExtractedFieldsDetector`.",https://github.com/elastic/elasticsearch/commit/9ae7393a2c85d0c6ba3f66ceb2306d6ff59d8cc5
3270,3270.0,3444.0,elastic/elasticsearch,8ca0d4bb484943b1eee4e0178469ad2601c410ee,Refactor auditor-related classes (#45893),https://github.com/elastic/elasticsearch/commit/8ca0d4bb484943b1eee4e0178469ad2601c410ee
3271,3271.0,3445.0,elastic/elasticsearch,a526d9c54a57cf290d42d164887cb279bd1877dc,"Refactor RepositoryCredentialsTests (#45919)

This commit refactors the S3 credentials tests in 
RepositoryCredentialsTests so that it now uses a single 
node (ESSingleNodeTestCase) to test how secure/insecure 
credentials are overriding each other. Using a single node 
makes it much easier to understand what each test is actually 
testing and IMO better reflect how things are initialized.

It also allows to fold into this class the test 
testInsecureRepositoryCredentials which was wrongly located 
in S3BlobStoreRepositoryTests. By moving this test away, the 
S3BlobStoreRepositoryTests class does not need the 
allow_insecure_settings option anymore and thus can be 
executed as part of the usual gradle test task.",https://github.com/elastic/elasticsearch/commit/a526d9c54a57cf290d42d164887cb279bd1877dc
3272,3272.0,3446.0,elastic/elasticsearch,77cb22f0816ad506c1a5d83b98ebd1dd5b4f30a6,"Toggle flag to tail cluster log on failure

The flag was toggled by accident in a refactoring.
This PR configures it so that we tail the cluster log on failure again.",https://github.com/elastic/elasticsearch/commit/77cb22f0816ad506c1a5d83b98ebd1dd5b4f30a6
3273,3273.0,3447.0,elastic/elasticsearch,be8fe0a0ce562fe732fae12a0b236b5731e4638c,"SQL: Refactor away the cycle between Rowset and Cursor (#45516)

* SQL: Refactor away the cycle between RowSet and Cursor

Improve encapsulation of pagination of rowsets by breaking the cycle
between cursor and associated rowset implementation, all logic now
residing inside each cursor implementation.",https://github.com/elastic/elasticsearch/commit/be8fe0a0ce562fe732fae12a0b236b5731e4638c
3274,3274.0,3448.0,elastic/elasticsearch,14551b2c405e6fddcfedc4727bb028e604e7c227,"Fix bats distro test to build distributions (#45529)

The dependency on copying distributions was accidentally masked by an
earlier refactoring. This commit fixes the copyDistributions task to be
run before bats tests run.",https://github.com/elastic/elasticsearch/commit/14551b2c405e6fddcfedc4727bb028e604e7c227
3275,3275.0,3449.0,elastic/elasticsearch,7ee47227a1c89b4b0fd2008838a246d52044a842,"Complete decoupling ANTLR AST from Painless AST (#45366)

This change removes the Reserved class used to track variables usages 
within the ANTLR grammar. That task is now performed by an existing pass 
""extractVariables"" in the Painless AST. The Painless AST no longer has any 
dependencies on the ANTLR AST for state outside of the tree being built. 
This will simplify future refactoring and opens the possibility of alternate 
grammars.",https://github.com/elastic/elasticsearch/commit/7ee47227a1c89b4b0fd2008838a246d52044a842
3276,3276.0,3450.0,elastic/elasticsearch,b44c0281e6cbb74b3b4f50fbb31b61cc1bfb32d5,"Refactor cluster privileges and cluster permission (#45265)

The current implementations make it difficult for
adding new privileges (example: a cluster privilege which is
more than cluster action-based and not exposed to the security
administrator). On the high level, we would like our cluster privilege
either:
- a named cluster privilege
  This corresponds to `cluster` field from the role descriptor
- or a configurable cluster privilege
  This corresponds to the `global` field from the role-descriptor and
allows a security administrator to configure them.

Some of the responsibilities like the merging of action based cluster privileges
are now pushed at cluster permission level. How to implement the predicate
(using Automaton) is being now enforced by cluster permission.

`ClusterPermission` helps in enforcing the cluster level access either by
performing checks against cluster action and optionally against a request.
It is a collection of one or more permission checks where if any of the checks
allow access then the permission allows access to a cluster action.

Implementations of cluster privilege must be able to provide information
regarding the predicates to the cluster permission so that can be enforced.
This is enforced by making implementations of cluster privilege aware of
cluster permission builder and provide a way to specify how the permission is
to be built for a given privilege.

This commit renames `ConditionalClusterPrivilege` to `ConfigurableClusterPrivilege`.
`ConfigurableClusterPrivilege` is a renderable cluster privilege exposed
as a `global` field in role descriptor.

Other than this there is a requirement where we would want to know if a cluster
permission is implied by another cluster-permission (`has-privileges`).
This is helpful in addressing queries related to privileges for a user.
This is not just simply checking of cluster permissions since we do not
have access to runtime information (like request object).
This refactoring does not try to address those scenarios.

Relates #44048",https://github.com/elastic/elasticsearch/commit/b44c0281e6cbb74b3b4f50fbb31b61cc1bfb32d5
3277,3277.0,3451.0,elastic/elasticsearch,af6568d38016ecd3ee0a2ff61e430c8c733a0a19,"Use StepListener to Simplify SnapshotResiliencyTests (#45233)

* Reduces complicated callback relations in `testSuccessfulSnapshotAndRestore` to flat steps of sequential actions
* Will refactor the other tests in this suit as a follow up
   * This format certainly makes it easier to create more complicated tests that involve multiple subsequent snapshots as it would allow adding loops",https://github.com/elastic/elasticsearch/commit/af6568d38016ecd3ee0a2ff61e430c8c733a0a19
3278,3278.0,3452.0,elastic/elasticsearch,ed3da66e8e75c9df2774f8cd3e440ae69ffec16a,"Fix Rollup job creation to work with templates (#43943)

The PutJob API accidentally used an ""expert"" API of CreateIndexRequest.
That API is semi-lenient to syntax; a type could be omitted and the
request would work as expected.  But if a type was omitted it would
not merge with templates correctly, leading to index creation that
only has the template and not the requested mappings in the request.

This commit refactors the PutJob API to:

- Include the type name
- Use a less ""expert"" API in an attempt to future proof against errors
- Uses an XContentBuilder instead of string replacing, removes json template",https://github.com/elastic/elasticsearch/commit/ed3da66e8e75c9df2774f8cd3e440ae69ffec16a
3279,3279.0,3453.0,elastic/elasticsearch,b7553af7209fbf225c4a5b63b6afe666907bd0e8,"Add back lowercase processor in docs (#45090)

This got lost in a refactoring in 9137d92ca613b7fe40574789686575c4404089c1",https://github.com/elastic/elasticsearch/commit/b7553af7209fbf225c4a5b63b6afe666907bd0e8
3280,3280.0,3454.0,elastic/elasticsearch,204ed8509a4687f8e5067f825a14fe822aad46d0,"Move snapshot-tool S3 and GCS tests to submodules (#45093)

Currently, snapshot tool tests for S3 and GCS reside in the
build.gradle file.
And there is no way to run GCS tests without running S3 tests and vice
versa.
Of course, it's possible to create separate test tasks for GCS and S3,
but fixtures plugin is implemented in such a way, that it surrounds all
test tasks with fixture start/stop.
So even if you were to run just GCS tests, Minio docker container would
be started (and not used).

The solution @mark-vieira suggested is to refactor S3 and GCS tests
into separate submodules, similar to what we're doing for
repository-gcs plugin.
This commit creates 2 new submodules - :qa:s3 and
:qa:google-cloud-storage.
And now it's easy to run GCS and S3 tests separately.
An additional benefit is that we now have 3 separate shorter/cleaner
build.gradle files.

:x-pack:snapshot-tool:check still invokes S3 and GCS tests.",https://github.com/elastic/elasticsearch/commit/204ed8509a4687f8e5067f825a14fe822aad46d0
3281,3281.0,3455.0,elastic/elasticsearch,63361622e3a3e0528dc3169012e82b0b237d6d27,"Snapshot tool: GCS orphaned files cleanup (#45076)

Extending snapshot-tool with GCS cleanup command.
Refactoring main/test to support both S3 and GCS.
Snapshot-tool was first introduced here #44551.",https://github.com/elastic/elasticsearch/commit/63361622e3a3e0528dc3169012e82b0b237d6d27
3282,3282.0,3456.0,elastic/elasticsearch,b07310022d2ae66ef28b011d289a3da6b197ba1e,"[SPATIAL] New ShapeFieldMapper for indexing cartesian geometries (#44980)

This commit adds a new ShapeFieldMapper to the xpack spatial module for
indexing arbitrary cartesian geometries using a new field type called shape.
The indexing approach leverages lucene's new XYShape field type which is
backed by BKD in the same manner as LatLonShape but without the WGS84
latitude longitude restrictions. The new field mapper builds on and
extends the refactoring effort in AbstractGeometryFieldMapper and accepts
shapes in either GeoJSON or WKT format (both of which support non geospatial geometries).

Tests are provided in the ShapeFieldMapperTest class in the same manner
as GeoShapeFieldMapperTests and LegacyGeoShapeFieldMapperTests.
Documentation for how to use the new field type and what parameters are
accepted is included. The QueryBuilder for searching indexed shapes is provided in a separate commit.",https://github.com/elastic/elasticsearch/commit/b07310022d2ae66ef28b011d289a3da6b197ba1e
3283,3283.0,3457.0,elastic/elasticsearch,781fbffc033f4367bc4f9de3f8e44acdbe9e9b88,"Geo: fix geo query decomposition (#44924)

The recent refactoring introduced an issue where queries where not
going through the decomposition processing.

Fixes #44891",https://github.com/elastic/elasticsearch/commit/781fbffc033f4367bc4f9de3f8e44acdbe9e9b88
3284,3284.0,3458.0,elastic/elasticsearch,94b684630c8321ee4fe9aea05d8c5c8181ca3980,"[GEO] Refactor DeprecatedParameters in AbstractGeometryFieldMapper (#44923)

Refactors DeprecatedParameters specific to legacy geo_shape out of
AbstractGeometryFieldMapper.TypeParser#parse.",https://github.com/elastic/elasticsearch/commit/94b684630c8321ee4fe9aea05d8c5c8181ca3980
3285,3285.0,3459.0,elastic/elasticsearch,f603f06250ab72b229bdf45476a73c9eeb21ac46,"Geo: refactor geo mapper and query builder (#44884)

Refactors out the indexing and query generation logic out of the
mapper and query builder into a separate unit-testable classes.",https://github.com/elastic/elasticsearch/commit/f603f06250ab72b229bdf45476a73c9eeb21ac46
3286,3286.0,3460.0,elastic/elasticsearch,ae486e4911da7969d35f6f3d76f1130c0f17df04,"Asynchronously connect to remote clusters (#44825)

Refactors RemoteClusterConnection so that it no longer blockingly connects to remote clusters.

Relates to #40150",https://github.com/elastic/elasticsearch/commit/ae486e4911da7969d35f6f3d76f1130c0f17df04
3287,3287.0,3461.0,elastic/elasticsearch,0dfcdf327a2376ad0860854486a7f5561a000d8d,"[GEO] Fix GeoShapeQueryBuilder to check for valid spatial relations

Refactor left out the spatial strategy check in GeoShapeQueryBuilder.relation
setter method. This commit adds that check back in.",https://github.com/elastic/elasticsearch/commit/0dfcdf327a2376ad0860854486a7f5561a000d8d
3288,3288.0,3462.0,elastic/elasticsearch,0482894e578e9f1e75998c8338a92c3fb339e910,"[Geo] Refactor GeoShapeQueryBuilder to derive from AbstractGeometryQueryBuilder (#44780)

Refactors GeoShapeQueryBuilder to derive from a new AbstractGeometryQueryBuilder that provides common parsing and build logic for spatial geometries. This will allow development of custom geometry queries by extending AbstractGeometryQueryBuilder preventing duplication of common spatial query logic.",https://github.com/elastic/elasticsearch/commit/0482894e578e9f1e75998c8338a92c3fb339e910
3289,3289.0,3463.0,elastic/elasticsearch,d7c84e16ef7f3f8e885ab6030fcb1e3038dd3c23,"Fix stats in slow logs to be a escaped JSON (#44642)

Fields in JSON logs should be an escaped JSON fields. It is a broken json value at the moment
""stats"": ""[""group1"", ""group2""]"", -> ""stats"": ""[\""group1\"", \""group2\""]"",
This should later be refactored into a JSON array of strings (the same as types in 7.x)",https://github.com/elastic/elasticsearch/commit/d7c84e16ef7f3f8e885ab6030fcb1e3038dd3c23
3290,3290.0,3464.0,elastic/elasticsearch,5e89cd9963bd123d37062967bce658248f39822b,"Removal Streamable (#44647)

This commit ends the grand adventure that was the
refactoring effort to migrate all usages of
Streamable to Writeable.

Closes #34389.",https://github.com/elastic/elasticsearch/commit/5e89cd9963bd123d37062967bce658248f39822b
3291,3291.0,3465.0,elastic/elasticsearch,8407423b3557232e48d5261b496948cdbff936dd,"Fix unconverted ML Action Ctors to use Writeable (#44439)

I am not sure how this #44302 refactor passed tests without this.
This PR is a followup to clean up that mess.

These changes are already included in the backport PR #44391.",https://github.com/elastic/elasticsearch/commit/8407423b3557232e48d5261b496948cdbff936dd
3292,3292.0,3466.0,elastic/elasticsearch,03f4e81fc39b20dd61a9a2f1383519bb331e1e40,"JSON logging refactoring and X-Opaque-ID support (#41354)

This is a refactor to current JSON logging to make it more open for extensions
and support for custom ES log messages used inDeprecationLogger IndexingSlowLog , SearchSLowLog
We want to include x-opaque-id in deprecation logs. The easiest way to have this as an additional JSON field instead of part of the message is to create a custom DeprecatedMessage (extends ESLogMEssage)

These messages are regular log4j messages with a text, but also carry a map of fields which can then populate the log pattern. The logic for this lives in ESJsonLayout and ESMessageFieldConverter.

Similar approach can be used to refactor IndexingSlowLog and SearchSlowLog JSON logs to contain fields previously only present as escaped JSON string in a message field.

closes #41350",https://github.com/elastic/elasticsearch/commit/03f4e81fc39b20dd61a9a2f1383519bb331e1e40
3293,3293.0,3467.0,elastic/elasticsearch,9c6632c3d6b13339d9f76a8c417db270cb7c615a,"Reindex ScrollableHitSource pump data out (#43864)

Refactor ScrollableHitSource to pump data out and have a simplified
interface (callers should no longer call startNextScroll, instead they
simply mark that they are done with the previous result, triggering a
new batch of data). This eases making reindex resilient, since we will
sometimes need to rerun search during retries.

Relates #43187 and #42612",https://github.com/elastic/elasticsearch/commit/9c6632c3d6b13339d9f76a8c417db270cb7c615a
3294,3294.0,3468.0,elastic/elasticsearch,399d53e5c03ae4157d9ba107d01fbecfed758972,"Refactor index engines to manage readers instead of searchers (#43860)

This commit changes the way we manage refreshes in the index engines.
Instead of relying on a SearcherManager, this change uses a ReaderManager that
creates ElasticsearchDirectoryReader when needed. Searchers are now created on-demand
(when acquireSearcher is called) from the current ElasticsearchDirectoryReader.
It also slightly changes the Engine.Searcher to extend IndexSearcher in order
to simplify the usage in the consumer.",https://github.com/elastic/elasticsearch/commit/399d53e5c03ae4157d9ba107d01fbecfed758972
3295,3295.0,3469.0,elastic/elasticsearch,eb92e01632fa350e526cb5de75cd16112fce166a,"Geo: Refactors libs/geo parser to provide serialization logic as well (#43717)

Enables libs/geo parser to return a geometry format object that can
perform both serialization and deserialization functions. This can
be useful for ingest nodes that are trying to modify an existing
geometry in the source.

Relates to #43554",https://github.com/elastic/elasticsearch/commit/eb92e01632fa350e526cb5de75cd16112fce166a
3296,3296.0,3470.0,elastic/elasticsearch,de693a2902049fcc05ddc4ef3968b33fc23153f4,"Rename and refactor RoutingService (#43827)

The `RoutingService` has a confusing name, since it doesn't really have
anything to do with routing. Its responsibility is submitting reroute commands
to the master.

This commit renames this class to `BatchedRerouteService`, and extracts the
`RerouteService` interface to avoid passing `BiConsumer`s everywhere. It also
removes that `BatchedRerouteService extends AbstractLifecycleComponent` since
this service has no meaningful lifecycle. Finally, it introduces a small
wrapper class to allow for lazy initialization to deal with the dependency loop
when constructing a `Node`.",https://github.com/elastic/elasticsearch/commit/de693a2902049fcc05ddc4ef3968b33fc23153f4
3297,3297.0,3471.0,elastic/elasticsearch,b33ffc1ae06035e934277f17c4b5d9851f607056,"Rename Action to ActionType (#43778)

Action is a class that encapsulates meta information about an action
that allows it to be called remotely, specifically the action name and
response type. With recent refactoring, the action class can now be
constructed as a static constant, instead of needing to create a
subclass. This makes the old pattern of creating a singleton INSTANCE
both misnamed and lacking a common placement.

This commit renames Action to ActionType, thus allowing the old INSTANCE
naming pattern to be TYPE on the transport action itself. ActionType
also conveys that this class is also not the action itself, although
this change does not rename any concrete classes as those will be
removed organically as they are converted to TYPE constants.

relates #34389",https://github.com/elastic/elasticsearch/commit/b33ffc1ae06035e934277f17c4b5d9851f607056
3298,3298.0,3472.0,elastic/elasticsearch,fd4eb96d1c2ee7091d99b5a5069673de45833801,"Refactor IndexSearcherWrapper to disallow the wrapping of IndexSearcher (#43645)

This change removes the ability to wrap an IndexSearcher in plugins. The IndexSearcherWrapper is replaced by an IndexReaderWrapper and allows to wrap the DirectoryReader only. This simplifies the creation of the context IndexSearcher that is used on a per request basis. This change also moves the optimization that was implemented in the security index searcher wrapper to the ContextIndexSearcher that now checks the live docs to determine how the search should be executed. If the underlying live docs is a sparse bit set the searcher will compute the intersection
betweeen the query and the live docs instead of checking the live docs on every document that match the query.",https://github.com/elastic/elasticsearch/commit/fd4eb96d1c2ee7091d99b5a5069673de45833801
3299,3299.0,3473.0,elastic/elasticsearch,3ed3041221e3e725eaab3751a88abfcf5eb2e8b8,"Reindex remote version lookup test refactor (#43576)

Refactor test to reuse code and ease maintenance",https://github.com/elastic/elasticsearch/commit/3ed3041221e3e725eaab3751a88abfcf5eb2e8b8
3300,3300.0,3474.0,elastic/elasticsearch,a8141351775bdaecefc7c9026839f4761e3fd463,"Add scripting support to AggregatorTestCase (#43494)

This refactors AggregatorTestCase to allow testing mock scripts.
The main change is to QueryShardContext.  This was previously mocked,
but to get the ScriptService you have to invoke a final method
which can't be mocked.

Instead, we just create a mostly-empty QueryShardContext and populate
the fields that are needed for testing.  It also introduces a few
new helper methods that can be overridden to change the default
behavior a bit.

Most tests should be able to override getMockScriptService() to supply
a ScriptService to the context, which is later used by the aggs.
More complicated tests can override queryShardContextMock() as before.

Adds a test to MaxAggregatorTests to test out the new functionality.",https://github.com/elastic/elasticsearch/commit/a8141351775bdaecefc7c9026839f4761e3fd463
3301,3301.0,3475.0,elastic/elasticsearch,85f40b7827e3692eba4c012661231eccd7d093d5,"Refactor aggregation base classes to remove doEquals() and doHashCode() (#43214)

A number of the aggregation base classes have an abstract doEquals() and doHashCode() (e.g. InternalAggregation.java, AbstractPipelineAggregationBuilder.java).

Theoretically this is so the sub-classes can add to the equals/hashCode and don't need to worry about calling super.equals(). In practice, it's mostly just confusing/inconsistent. And if there are more than two levels, we end up with situations like InternalMappedSignificantTerms which has to call super.doEquals() which defeats the point of having these overridable methods.

This PR removes the do versions and just use equals/hashCode ensuring the super when necessary.

This PR is part of #41713 refactoring meta

* Refactored all subclasses of InternalAggregation to remove doEquals() and doHashCode()
* Refactored all subclasses of AbstractPipelineAggregationBuilder to remove doEquals() and doHashCode()
* Refactored all subclasses of AbstractAggregationBuilder and CompositeValuesSourceBuilder to remove doEquals() and doHashCode()",https://github.com/elastic/elasticsearch/commit/85f40b7827e3692eba4c012661231eccd7d093d5
3302,3302.0,3476.0,elastic/elasticsearch,ace1d40e21b56ae67fabd5eac44f203538ee4648,"Refactor Version class to make version bumps easier (#42668)

With this change we only have to add one line to add a new version.
The intent is to make it less error prone and easier to write a script
to automate the process.",https://github.com/elastic/elasticsearch/commit/ace1d40e21b56ae67fabd5eac44f203538ee4648
3303,3303.0,3477.0,elastic/elasticsearch,dded86344a6f42fd3a59206cf28e0eda40e3282d,"Refactor put mapping request validation for reuse (#43005)

This commit refactors put mapping request validation for reuse. The
concrete case that we are after here is the ability to apply effectively
the same framework to indices aliases requests. This commit refactors
the put mapping request validation framework to allow for that.",https://github.com/elastic/elasticsearch/commit/dded86344a6f42fd3a59206cf28e0eda40e3282d
3304,3304.0,3478.0,elastic/elasticsearch,31c745a332937c7e7ab9414290a83a931fb0c934,"Fix NPE when rejecting bulk updates (#42923)

Single updates use a different internal code path than updates that are wrapped in a bulk request.
While working on a refactoring to bring both closer together I've noticed that bulk updates were
failing some of the tests that single updates passed. In particular, bulk updates cause
NullPointerExceptions to be thrown and listeners not being properly notified when being rejected
from the thread pool.",https://github.com/elastic/elasticsearch/commit/31c745a332937c7e7ab9414290a83a931fb0c934
3305,3305.0,3479.0,elastic/elasticsearch,92bbcd8c2d36932451bd488875c142a0b4a950af,"Refactor control flow in TransportAnalyzeAction (#42801)

The control flow in TransportAnalyzeAction is currently spread across two large
methods, and is quite difficult to follow. This commit tidies things up a bit, to make
it clearer when we use pre-defined analyzers and when we use custom built ones.",https://github.com/elastic/elasticsearch/commit/92bbcd8c2d36932451bd488875c142a0b4a950af
3306,3306.0,3480.0,elastic/elasticsearch,0d6cbf92e5903ad97d1d5c823bb8ba6545581ef1,"[ML Data Frame] Refactor stop logic (#42644)

* Revert ""invalid test""

This reverts commit 9dd8b52c13c716918ff97e6527aaf43aefc4695d.

* Testing

* mend

* Revert ""[ML Data Frame] Mute Data Frame tests""

This reverts commit 5d837fa312b0e41a77a65462667a2d92d1114567.

* Call onStop and onAbort outside atomic update

* Don’t update CS

* Tidying up

* Remove invalid test that asserted logic that has been removed

* Add stopped event

* Revert ""Add stopped event""

This reverts commit 02ba992f4818bebd838e1c7678bd2e1cc090bfab.

* Adding check for STOPPED in saveState",https://github.com/elastic/elasticsearch/commit/0d6cbf92e5903ad97d1d5c823bb8ba6545581ef1
3307,3307.0,3481.0,elastic/elasticsearch,8e5812c4b320faa312c7fc946fbb3c96ebb6d275,"remove v6.5.x and v6.6.x version constants (#42130)

related to refactoring initiative #41164.",https://github.com/elastic/elasticsearch/commit/8e5812c4b320faa312c7fc946fbb3c96ebb6d275
3308,3308.0,3482.0,elastic/elasticsearch,28ad74f8892530f500e1283a9c5852b666774f0f,"Geo: Refactor libs/geo parsers (#42549)

Refactors the WKT and GeoJSON parsers from an utility class into an
instantiatable objects. This is a preliminary step in
preparation for moving out coordinate validators from Geometry
constructors. This should allow us to make validators plugable.",https://github.com/elastic/elasticsearch/commit/28ad74f8892530f500e1283a9c5852b666774f0f
3309,3309.0,3483.0,elastic/elasticsearch,35b6239a8d44f0bb5b15437c593a38ead8373ed4,"Refactor HLRC RequestConverters parameters to be more explicit (#42128)

The existing `RequestConverters.Params` is confusing, because it wraps
an underlying request object and mutations of the `Params` object
actually mutate the `Request` that was used in the construction of the
`Params`.

This leads to a situation where we create a `RequestConverter.Params`
object, mutate it, and then it appears nothing happens to it - it
appears to be unused. What happens behind the scenes is that the Request
object is mutated when methods on `Params` are invoked. This results in
unclear, confusing code where mutating one object changes another with
no obvious connection.

This commit refactors `RequestConverters.Params` to be a simple helper
class to produce a `Map` which must be passed explicitly to a Request
object. This makes it apparent that the `Params` are actually used, and
that they have an effect on the `request` object explicit and easier to
understand.

Co-authored-by: Ojas Gulati <ojasgulati100@gmail.com>",https://github.com/elastic/elasticsearch/commit/35b6239a8d44f0bb5b15437c593a38ead8373ed4
3310,3310.0,3484.0,elastic/elasticsearch,4a08b3d1c94cc5821841b6682ccc9606c4095112,"remove 6.4.x version constants (#42127)

relates refactoring initiative #41164.",https://github.com/elastic/elasticsearch/commit/4a08b3d1c94cc5821841b6682ccc9606c4095112
3311,3311.0,3485.0,elastic/elasticsearch,da1ba685b16018053b28847cf4618d0ddf9c40fb,"remove 6.3.x constants (#42087)

relates to refactoring effort #41164.",https://github.com/elastic/elasticsearch/commit/da1ba685b16018053b28847cf4618d0ddf9c40fb
3312,3312.0,3486.0,elastic/elasticsearch,cbf1150d845faafe32e005b0a8749a97803b1b34,"Small internal AnalysisRegistry changes (#42500)

Some internal refactorings to the AnalysisRegistry, spin-off from #40782.",https://github.com/elastic/elasticsearch/commit/cbf1150d845faafe32e005b0a8749a97803b1b34
3313,3313.0,3487.0,elastic/elasticsearch,a15f1ee4f64b19670b15a9c1526c7b0b0204ea60,"[ML] Improve file structure finder timestamp format determination (#41948)

This change contains a major refactoring of the timestamp
format determination code used by the ML find file structure
endpoint.

Previously timestamp format determination was done separately
for each piece of text supplied to the timestamp format finder.
This had the drawback that it was not possible to distinguish
dd/MM and MM/dd in the case where both numbers were 12 or less.
In order to do this sensibly it is best to look across all the
available timestamps and see if one of the numbers is greater
than 12 in any of them.  This necessitates making the timestamp
format finder an instantiable class that can accumulate evidence
over time.

Another problem with the previous approach was that it was only
possible to override the timestamp format to one of a limited
set of timestamp formats.  There was no way out if a file to be
analysed had a timestamp that was sane yet not in the supported
set.  This is now changed to allow any timestamp format that can
be parsed by a combination of these Java date/time formats:
yy, yyyy, M, MM, MMM, MMMM, d, dd, EEE, EEEE, H, HH, h, mm, ss,
a, XX, XXX, zzz
Additionally S letter groups (fractional seconds) are supported
providing they occur after ss and separated from the ss by a dot,
comma or colon.  Spacing and punctuation is also permitted with
the exception of the question mark, newline and carriage return
characters, together with literal text enclosed in single quotes.

The full list of changes/improvements in this refactor is:

- Make TimestampFormatFinder an instantiable class
- Overrides must be specified in Java date/time format - Joda
  format is no longer accepted
- Joda timestamp formats in outputs are now derived from the
  determined or overridden Java timestamp formats, not stored
  separately
- Functionality for determining the ""best"" timestamp format in
  a set of lines has been moved from TextLogFileStructureFinder
  to TimestampFormatFinder, taking advantage of the fact that
  TimestampFormatFinder is now an instantiable class with state
- The functionality to quickly rule out some possible Grok
  patterns when looking for timestamp formats has been changed
  from using simple regular expressions to the much faster
  approach of using the Shift-And method of sub-string search,
  but using an ""alphabet"" consisting of just 1 (representing any
  digit) and 0 (representing non-digits)
- Timestamp format overrides are now much more flexible
- Timestamp format overrides that do not correspond to a built-in
  Grok pattern are mapped to a %{CUSTOM_TIMESTAMP} Grok pattern
  whose definition is included within the date processor in the
  ingest pipeline
- Grok patterns that correspond to multiple Java date/time
  patterns are now handled better - the Grok pattern is accepted
  as matching broadly, and the required set of Java date/time
  patterns is built up considering all observed samples
- As a result of the more flexible acceptance of Grok patterns,
  when looking for the ""best"" timestamp in a set of lines
  timestamps are considered different if they are preceded by
  a different sequence of punctuation characters (to prevent
  timestamps far into some lines being considered similar to
  timestamps near the beginning of other lines)
- Out-of-the-box Grok patterns that are considered now include
  %{DATE} and %{DATESTAMP}, which have indeterminate day/month
  ordering
- The order of day/month in formats with indeterminate day/month
  order is determined by considering all observed samples (plus
  the server locale if the observed samples still do not suggest
  an ordering)

Relates #38086
Closes #35137
Closes #35132",https://github.com/elastic/elasticsearch/commit/a15f1ee4f64b19670b15a9c1526c7b0b0204ea60
3314,3314.0,3488.0,elastic/elasticsearch,8177e7102d9438c0b6d2fe55a351089a5e5b98a2,"Split document and metadata fields in GetResult (#38373)

This commit makes creators of GetField split the fields into document fields and metadata fields. It is part of larger refactoring that aims to remove the calls to static methods of MapperService related to metadata fields, as discussed in #24422.",https://github.com/elastic/elasticsearch/commit/8177e7102d9438c0b6d2fe55a351089a5e5b98a2
3315,3315.0,3489.0,elastic/elasticsearch,2d8869175b102565f73ca14ae4d2d6e3fb66660b,"remove backcompat handling of 6.2.x versions (#42044)

relates to refactoring initiative #41164.",https://github.com/elastic/elasticsearch/commit/2d8869175b102565f73ca14ae4d2d6e3fb66660b
3316,3316.0,3490.0,elastic/elasticsearch,753726c8c556463a8ccf8872223a9d64156da772,"Safer Wait for Snapshot Success in ClusterPrivilegeTests (#40943)

* Safer Wait for Snapshot Success in ClusterPrivilegeTests

* The snapshot state returned by the API might become SUCCESS before it's fully removed from the cluster state.
  * We should fix this race in the transport API but it's not trivial and will be part of the incoming big round of refactoring the repository interaction, this added check fixes the test for now
* closes #38030",https://github.com/elastic/elasticsearch/commit/753726c8c556463a8ccf8872223a9d64156da772
3317,3317.0,3491.0,elastic/elasticsearch,0635f5a9e24d6b796b87270fe1cabd6dd42ce58f,"Fix FiltersAggregation NPE when `filters` is empty (#41459)

If `keyedFilters` is null it assumes there are unkeyed filters...which
will NPE if the unkeyed filters was actually empty.

This refactors to simplify the filter assignment a bit, adds an empty
check and tidies up some formatting.",https://github.com/elastic/elasticsearch/commit/0635f5a9e24d6b796b87270fe1cabd6dd42ce58f
3318,3318.0,3492.0,elastic/elasticsearch,4b28f5b57c0836b0cf99fe8351a41ddc21563972,"remove backcompat handling of 6.1.x versions (#42032)

relates to refactoring initiative #41164.",https://github.com/elastic/elasticsearch/commit/4b28f5b57c0836b0cf99fe8351a41ddc21563972
3319,3319.0,3493.0,elastic/elasticsearch,8270c801614418ac2647ecabc6cb0d2b4d376ef2,"Refactor TransportSingleShardAction to serialize Writeable responses (#41985)

Previously, TransportSingleShardAction required constructing a new
empty response object. This response object's Streamable readFrom
was used. As part of the migration to Writeable, the interface here
was updated to leverage Writeable.Reader.

relates to #34389.",https://github.com/elastic/elasticsearch/commit/8270c801614418ac2647ecabc6cb0d2b4d376ef2
3320,3320.0,3494.0,elastic/elasticsearch,f6df9286bd340a1fb08970a4ce573be9da41e43a,"[ML Data Frame] Set executing nodes in task actions (#41798)

Direct the task request to the node executing the task and also refactor the task responses
so all errors are returned and set the HTTP status code based on presence of errors.",https://github.com/elastic/elasticsearch/commit/f6df9286bd340a1fb08970a4ce573be9da41e43a
3321,3321.0,3495.0,elastic/elasticsearch,a189a8e5a71c62201293805d86d2f6938afbec1b,"Remove `nonApplicationWrite` from `SSLDriver` (#41829)

Currently, when the SSLEngine needs to produce handshake or close data,
we must manually call the nonApplicationWrite method. However, this data
is only required when something triggers the need (starting handshake,
reading from the wire, initiating close, etc). As we have a dedicated
outbound buffer, this data can be produced automatically. Additionally,
with this refactoring, we combine handshake and application mode into a
single mode. This is necessary as there are non-application messages that
are sent post handshake in TLS 1.3. Finally, this commit modifies the
SSLDriver tests to test against TLS 1.3.",https://github.com/elastic/elasticsearch/commit/a189a8e5a71c62201293805d86d2f6938afbec1b
3322,3322.0,3496.0,elastic/elasticsearch,ad87f332a01e748f9f7d8ef19b5cac41565041a5,"[ML-DataFrame] refactor pivot to only take the pivot config (#41763)

refactor pivot class to only take the config at construction, other parameters are passed in as part of
method that require them",https://github.com/elastic/elasticsearch/commit/ad87f332a01e748f9f7d8ef19b5cac41565041a5
3323,3323.0,3497.0,elastic/elasticsearch,0bd3e3ed49950aa5f246bc54e618a62a7541b4a6,"Simplify filtering addresses on interfaces (#41758)

This commit is a refactoring of how we filter addresses on
interfaces. In particular, we refactor all of these methods into a
common private method. We also change the order of logic to first check
if an address matches our filter and then check if the interface is
up. This is to possibly avoid problems we are seeing where devices are
flapping up and down while we are checking for loopback addresses. We do
not expect the loopback device to flap up and down so by reversing the
logic here we avoid that problem on CI machines. Finally, we expand the
error message when this does occur so that we know which device is
flapping.",https://github.com/elastic/elasticsearch/commit/0bd3e3ed49950aa5f246bc54e618a62a7541b4a6
3324,3324.0,3498.0,elastic/elasticsearch,18ae99fcdf31406c309025f151d4195f1e963ee5,"[ML] Refactor NativeStorageProvider to enable reuse (#41414)

* [ML] Refactor NativeStorageProvider to enable reuse

Moves `NativeStorageProvider` as a machine learning component
so that it can be reused for other job types. Also, we now
pass the persistent task description as unique identifier which
avoids conflicts between jobs of different type but with same ids.

* Adding nativeStorageProvider as component

Since `TransportForecastJobAction` is expected to get injected a `NativeStorageProvider` class, we need to make sure that it is a constructed component, as it does not have a zero parametered, public ctor.",https://github.com/elastic/elasticsearch/commit/18ae99fcdf31406c309025f151d4195f1e963ee5
3325,3325.0,3499.0,elastic/elasticsearch,a8870ef98c9a25961914b408f25d27dabd3a5a11,"Refactor GeoHashUtils (#40869)

This commit refactors GeoHashUtils class into a new Geohash utility class located in the ES geo library. The intent is to not only better control what geo methods are whitelisted for painless scripting but to clean up the geo utility API in general.",https://github.com/elastic/elasticsearch/commit/a8870ef98c9a25961914b408f25d27dabd3a5a11
3326,3326.0,3500.0,elastic/elasticsearch,5ccc0b5a32fcb01023cf09948e64340d637fa592,"Disallow null/empty or duplicate composite sources (#41359)

Adds some validation to prevent duplicate source names from being 
used in the composite agg.

Also refactored to use a ConstructingObjectParser and removed the 
private ctor and setter for sources, making it mandatory.",https://github.com/elastic/elasticsearch/commit/5ccc0b5a32fcb01023cf09948e64340d637fa592
3327,3327.0,3501.0,elastic/elasticsearch,72b66af0f3107fef1cc8d3f900a0d9b8ce1a0d43,[ML] refactoring the ML plugin to use the common auditor code (#41419),https://github.com/elastic/elasticsearch/commit/72b66af0f3107fef1cc8d3f900a0d9b8ce1a0d43
3328,3328.0,3502.0,elastic/elasticsearch,6dc41a8f4a896340bb1cbf6e13071cd8ded89dcd,"Refactor the enrich store to remove it from guice (#41421)

There is no need to create a enrich store component for the transport
layer since the inner components of the store are either present in the
master node calls or via an already injected ClusterService. This commit
cleans up the class, adds the forthcoming delete call and tests the new
code.",https://github.com/elastic/elasticsearch/commit/6dc41a8f4a896340bb1cbf6e13071cd8ded89dcd
3329,3329.0,3503.0,elastic/elasticsearch,a730b4489b424ff2d58748cbdef52b0c3220634f,"[ML][Data Frame] Moving destination creation to _start (#41416)

* [ML][Data Frame] Moving destination creation to _start

* slight refactor of DataFrameAuditor constructor",https://github.com/elastic/elasticsearch/commit/a730b4489b424ff2d58748cbdef52b0c3220634f
3330,3330.0,3504.0,elastic/elasticsearch,768ff2e331f121a92cba22b7f77719ae82302532,"[ML] Refactor autodetect service into its own class (#41378)

This also improves aims to improve the corresponding unit tests
with regard to readability and maintainability.",https://github.com/elastic/elasticsearch/commit/768ff2e331f121a92cba22b7f77719ae82302532
3331,3331.0,3505.0,elastic/elasticsearch,4bd8e7b9f49ed091a53ce2717d65dc0ecb77b8d8,"[ML-DataFrame] Refactorings and tidying  (#41248)

Remove unnecessary generic params from SingleGroupSource
and unused code from the HLRC",https://github.com/elastic/elasticsearch/commit/4bd8e7b9f49ed091a53ce2717d65dc0ecb77b8d8
3332,3332.0,3506.0,elastic/elasticsearch,b41e3fc09f2584626c5fe8c9889ba70d9cd4cbb2,"Move primary term from replicas proxy to repl op (#41119)

A small refactoring that removes the primaryTerm field from ReplicasProxy and
instead passes it directly in to the methods that need it. Relates #40706.",https://github.com/elastic/elasticsearch/commit/b41e3fc09f2584626c5fe8c9889ba70d9cd4cbb2
3333,3333.0,3507.0,elastic/elasticsearch,c95a95b77a4a065517c544dffabf5b141ae1d3bb,"Some internal refactorings in AnalysisRegistry (#40609)

Reducing some methods scope and marking them as static where possible. Removing
""alias"" support from AnalysisRegistry#produceAnalyze and changing that method to
return a NamedAnalyzer instead of having a side effect on the analyzer map passed in.
Also, CustomAnalyzerProvider doesn't seem to need the `environment` field.",https://github.com/elastic/elasticsearch/commit/c95a95b77a4a065517c544dffabf5b141ae1d3bb
3334,3334.0,3508.0,elastic/elasticsearch,241644aac57baee1eb128b993ee410c7d08172a5," SQL: Refactor args verification of In & conditionals (#40916)

Move verification of arguments for Conditional functions and IN
from `Verifier` to the `resolveType()` method of the functions.",https://github.com/elastic/elasticsearch/commit/241644aac57baee1eb128b993ee410c7d08172a5
3335,3335.0,3509.0,elastic/elasticsearch,e10f77934e9a750381c08f588195f397ad6d320a,"refactor onStart and onFinish to take runnables and executed them guarded by state (#40855)

refactor onStart and onFinish to take action listeners and execute them when indexer is in indexing state.",https://github.com/elastic/elasticsearch/commit/e10f77934e9a750381c08f588195f397ad6d320a
3336,3336.0,3510.0,elastic/elasticsearch,5d26243aba226648e1bd2c327e0ac0cae4a4c14f,"Make Transport Shard Bulk Action Async (#39793)

This is a dependency of #39504 

Motivation: 
By refactoring `TransportShardBulkAction#shardOperationOnPrimary` to async, we enable using `DeterministicTaskQueue` based tests to run indexing operations. This was previously impossible since we were blocking on the `write` thread until the `update` thread finished the mapping update.
With this change, the mapping update will trigger a new task in the `write` queue instead. 
This change significantly enhances the amount of coverage we get from `SnapshotResiliencyTests` (and other potential future tests) when it comes to tracking down concurrency issues with distributed state machines.

The logical change is effectively all in `TransportShardBulkAction`, the rest of the changes is then simply mechanically moving the caller code and tests to being async and passing the `ActionListener` down.

Since the move to async would've added more parameters to the `private static` steps in this logic, I decided to inline and dry up (between delete and update) the logic as much as I could instead of passing the listener + wait-consumer down through all of them.",https://github.com/elastic/elasticsearch/commit/5d26243aba226648e1bd2c327e0ac0cae4a4c14f
3337,3337.0,3511.0,elastic/elasticsearch,a84946c308e91d05580e7893bfa2135088d59ff3,"[ML] refactoring start task a bit, removing unused code (#40798)",https://github.com/elastic/elasticsearch/commit/a84946c308e91d05580e7893bfa2135088d59ff3
3338,3338.0,3512.0,elastic/elasticsearch,efe47cebe72490a0798a24a27e32de242e8d1862,"Small refactorings to analysis components (#40745)

This change add the following internal refactorings:

* wraps input analyzers into an unmodifiable map in IndexAnalyzers ctor
* removes duplicated indexSetting in IndexAnalyzers
* removes references to IndexAnalyzers from DocumentMapperParser and TypeParser.ParserContext.
   It can always be retrieve it from MapperService directly in those cases",https://github.com/elastic/elasticsearch/commit/efe47cebe72490a0798a24a27e32de242e8d1862
3339,3339.0,3513.0,elastic/elasticsearch,e79da922a3e61ce9708b17bd3312217a9ea2afd1,"[ML] Add data frame task state object and field (#40169)

* [ML] Add data frame task state object and field

* A new state item is added so that the overall task state can be
accoutned for
* A new FAILED state and reason have been added as well so that failures
can be shown to the user for optional correction

* Addressing PR comments

* adjusting after master merge

* addressing pr comment

* Adjusting auditor usage with failure state

* Refactor, renamed state items to task_state and indexer_state

* Adding todo and removing redundant auditor call

* Address HLRC changes and PR comment

* adjusting hlrc IT test",https://github.com/elastic/elasticsearch/commit/e79da922a3e61ce9708b17bd3312217a9ea2afd1
3340,3340.0,3514.0,elastic/elasticsearch,9e55ca80cc3bc4b0b37a1fc0b7cf6bf1ddfb5753,"Remove unused variable (#40468)

This was leftover from previous iterations of test clusters refactorings",https://github.com/elastic/elasticsearch/commit/9e55ca80cc3bc4b0b37a1fc0b7cf6bf1ddfb5753
3341,3341.0,3515.0,elastic/elasticsearch,7562d6eeeb77c04794002649fe726f4b3a9a398b,"SQL: Fix RLIKE bug and improve testing for RLIKE statement (#40354)

* Refactor RegexMatch to support both LIKE and RLIKE
* Add integration tests for RLIKE
* Polish the rest of tests",https://github.com/elastic/elasticsearch/commit/7562d6eeeb77c04794002649fe726f4b3a9a398b
3342,3342.0,3516.0,elastic/elasticsearch,357aac806641b3807dcbbc70c33676228a33f627,"Refactor Token Service (#39808)

This refactoring is in the context of the work related to moving security
tokens to a new index. In that regard, the Token Service has to work with
token documents stored in any of the two indices, albeit only as a transient
situation. I reckoned the added complexity as unmanageable,
hence this refactoring.

This is incomplete, as it fails to address the goal of minimizing .security accesses,
but I have stopped because otherwise it would've become a full blown rewrite
(if not already). I will follow-up with more targeted PRs.

In addition to being a true refactoring, some 400 errors moved to 500. Furthermore,
more stringed validation of various return result, has been implemented, notably the
one of the token document creation.",https://github.com/elastic/elasticsearch/commit/357aac806641b3807dcbbc70c33676228a33f627
3343,3343.0,3517.0,elastic/elasticsearch,70615dd38dd6cbb3be724203bf18d71d430d1553,"[ML] Refactor GET Transforms API (#40015)

* [Data Frame] Refactor GET Transforms API:

* Add pagination
* comma delimited list expression support GET transforms
* Flag troublesome internal code for future refactor

* Removing `allow_no_transforms` param, ratcheting down pageparam option

* Changing  DataFrameFeatureSet#usage to not get all configs

* Intermediate commit

* Writing test for batch data gatherer

* Removing unused import

* removing bad println used for debugging

* Updating BatchedDataIterator comments and query

* addressing pr comments

* disallow null scrollId to cause stackoverflow",https://github.com/elastic/elasticsearch/commit/70615dd38dd6cbb3be724203bf18d71d430d1553
3344,3344.0,3518.0,elastic/elasticsearch,8b95daa65ecd51e42ccf5f77b46b5ba5266958ba,"Fix snapshot restore logging on fresh restore (#40252)

A recent refactoring (#37130) where imports got mixed up (changing Lucene's
IndexNotFoundException to Elasticsearch's IndexNotFoundException) led to many warnings being
logged in case of restoring a fresh snapshot.",https://github.com/elastic/elasticsearch/commit/8b95daa65ecd51e42ccf5f77b46b5ba5266958ba
3345,3345.0,3519.0,elastic/elasticsearch,97707c7f892636e5b75c3df546b067414acb27cd,"Unmute, fix, refactor and zen2ify NetworkDisruptionIT (#38351)

This commit unmutes NetworkDisruptionIT.

It makes changes necessary for Zen2 - avoids usage of
autoMinMasterNodes and selects cluster size, such that there is no
need to call AddVotingExclusion.
This test also introduces refactors a single method
prepareDistruptedCluster to be used by both test methods.
Unfortunately, NetworkDisruption is broken and the
testNetworkPartitionRemovalRestoresConnections ""is fixed"" by
introducing assertBusy - #38348.

Relates #36205
Relates #38348",https://github.com/elastic/elasticsearch/commit/97707c7f892636e5b75c3df546b067414acb27cd
3346,3346.0,3520.0,elastic/elasticsearch,8579235affb04351d83a4e5d3f931d3a43128d6a,"SQL: Refactor Literals serialization method (#40058)

Since other classes besides intervals can be serialized as part of
the Cursor, the getNamedWritables method should be moved from Intervals
to a more generic class Literals.

Relates to #39973",https://github.com/elastic/elasticsearch/commit/8579235affb04351d83a4e5d3f931d3a43128d6a
3347,3347.0,3521.0,elastic/elasticsearch,4c803e5abbf56c4859afd111c88e7431cc1954f3,"[ML] Avoid assertions on empty Optional in DF usage test (#40043)

Refactor the usage class to make testing simpler",https://github.com/elastic/elasticsearch/commit/4c803e5abbf56c4859afd111c88e7431cc1954f3
3348,3348.0,3522.0,elastic/elasticsearch,56f3038979576927c51f0075d08209dd3fe3cdde,"[Data Frame] Refactor PUT transform to not create a task (#39934)

* [Data Frame] Refactor PUT transform such that:

 * POST _start creates the task and starts it
 * GET transforms queries docs instead of tasks
 * POST _stop verifies the stored config exists before trying to stop
the task

* Addressing PR comments

* Refactoring DataFrameFeatureSet#usage, decreasing size returned getTransformConfigurations

* fixing failing usage test",https://github.com/elastic/elasticsearch/commit/56f3038979576927c51f0075d08209dd3fe3cdde
3349,3349.0,3523.0,elastic/elasticsearch,b0d77828670ccfaf121f5a83873c3a1be04ecde4,"[ML] Refactor common utils out of ML plugin to XPack.Core (#39976)

* [ML] Refactor common utils out of ML plugin to XPack.Core

* implementing GET filters with abstract transport

* removing added rest param

* adjusting how defaults can be supplied",https://github.com/elastic/elasticsearch/commit/b0d77828670ccfaf121f5a83873c3a1be04ecde4
3350,3350.0,3524.0,elastic/elasticsearch,92ac431c242baa6b1453e1ba55b12128b0ab8d10,"[ML] refactoring lazy query and agg parsing (#39776)

* [ML] refactoring lazy query and agg parsing

* Clean up and addressing PR comments

* removing unnecessary try/catch block

* removing bad call to logger

* removing unused import

* fixing bwc test failure due to serialization and config migrator test

* fixing style issues

* Adjusting DafafeedUpdate class serialization

* Adding todo for refactor in v8

* Making query non-optional so it does not write a boolean byte",https://github.com/elastic/elasticsearch/commit/92ac431c242baa6b1453e1ba55b12128b0ab8d10
3351,3351.0,3525.0,elastic/elasticsearch,c94ebefbc67f342157ce9e7a8dd7a7fd9d07b409,"Move validation from FieldTypeLookup to MapperMergeValidator. (#39814)

This commit consolidates more mapping validation logic into the same class.
`FieldTypeLookup` is now a bit simpler, and has the sole responsibility of quickly
resolving field names to their types.

I have a broader refactor planned around mapping merge validation, but this
change should at least be a step in the right direction.",https://github.com/elastic/elasticsearch/commit/c94ebefbc67f342157ce9e7a8dd7a7fd9d07b409
3352,3352.0,3526.0,elastic/elasticsearch,28ca58d494edab132555529c49f570f22cc5b105,"Introduce Mapping ActionListener (#39538)

* Introduce Safer Chaining of Listeners

* The motivation here is to make reasoning about chains of `ActionListener` a little easier, by providing a safe method for nesting `ActionListener` that guarantees that a response is never dropped. Also, it dries up the code a little by removing the need to repeat `listener::onFailure` and `listener.onResponse` over and over.
* Refactored a number of obvious/easy spots to use the new listener constructor",https://github.com/elastic/elasticsearch/commit/28ca58d494edab132555529c49f570f22cc5b105
3353,3353.0,3527.0,elastic/elasticsearch,fe7b215354299d0bb442ad3251dd6dcb5df1e695,"[ML] Refactoring scheduled event to store instant instead of zoned time zone (#39380)

The ScheduledEvent class has never preserved the time
zone so it makes more sense for it to store the start and
end time using Instant rather than ZonedDateTime.

Closes #38620",https://github.com/elastic/elasticsearch/commit/fe7b215354299d0bb442ad3251dd6dcb5df1e695
3354,3354.0,3528.0,elastic/elasticsearch,4acb50fd1c2facff15cd246a786cf47853a9e021,"ML refactor DatafeedsConfig(Update) so defaults are not populated in queries or aggs (#38822)

* ML refactor DatafeedsConfig(Update) so defaults are not populated in queries or aggs

* Addressing pr feedback",https://github.com/elastic/elasticsearch/commit/4acb50fd1c2facff15cd246a786cf47853a9e021
3355,3355.0,3529.0,elastic/elasticsearch,207e18566163f5ca09a8cc2cc8e8138c982a013b,"ClusterClientIT refactor (#38872)

Add fixes for ClusterClientIT test and unmute tests.",https://github.com/elastic/elasticsearch/commit/207e18566163f5ca09a8cc2cc8e8138c982a013b
3356,3356.0,3530.0,elastic/elasticsearch,514a762d8dc582f90142cab0557afbf3c5f6f79e,"Specialize pre-closing checks for engine implementations (#38702)

The Close Index API has been refactored in 6.7.0 and it now performs 
pre-closing sanity checks on shards before an index is closed: the maximum 
sequence number must be equals to the global checkpoint. While this is a 
strong requirement for regular shards, we identified the need to relax this 
check in the case of CCR following shards.

The following shards are not in charge of managing the max sequence 
number or global checkpoint, which are pulled from a leader shard. They 
also fetch and process batches of operations from the leader in an unordered 
way, potentially leaving gaps in the history of ops. If the following shard lags 
a lot it's possible that the global checkpoint and max seq number never get 
in sync, preventing the following shard to be closed and a new PUT Follow 
action to be issued on this shard (which is our recommended way to 
resume/restart a CCR following).

This commit allows each Engine implementation to define the specific 
verification it must perform before closing the index. In order to allow 
following/frozen/closed shards to be closed whatever the max seq number 
or global checkpoint are, the FollowingEngine and ReadOnlyEngine do 
not perform any check before the index is closed.

Co-authored-by: Martijn van Groningen <martijn.v.groningen@gmail.com>",https://github.com/elastic/elasticsearch/commit/514a762d8dc582f90142cab0557afbf3c5f6f79e
3357,3357.0,3531.0,elastic/elasticsearch,c921a87fc51c8fe57efdfcb2277c967886fce080,"Refactor ZonedDateTime.now in millis resolution (#38577)

In different places across the code base the ZonedDateTime in
milliseconds resolution has to be used for testing. Refactoring this to
a single place to avoid code duplication

closes #38511
closes #38581",https://github.com/elastic/elasticsearch/commit/c921a87fc51c8fe57efdfcb2277c967886fce080
3358,3358.0,3532.0,elastic/elasticsearch,afcdbd2bc03a9df3b5a45b6f7dfcc2b5e52df404,"XPack: core/ccr/Security-cli migration to java-time (#38415)

part of the migrating joda time work.
refactoring x-pack plugins usages of joda to java-time
refers #27330",https://github.com/elastic/elasticsearch/commit/afcdbd2bc03a9df3b5a45b6f7dfcc2b5e52df404
3359,3359.0,3533.0,elastic/elasticsearch,3ce7d2c9b621e796ace43008134413cea7648a06,"Make sure to reject mappings with type _doc when include_type_name is false. (#38270)

`CreateIndexRequest#source(Map<String, Object>, ... )`, which is used when
deserializing index creation requests, accidentally accepts mappings that are
nested twice under the type key (as described in the bug report #38266).

This in turn causes us to be too lenient in parsing typeless mappings. In
particular, we accept the following index creation request, even though it
should not contain the type key `_doc`:

```
PUT index?include_type_name=false
{
  ""mappings"": {
    ""_doc"": {
      ""properties"": { ... }
    }
  }
}
```

There is a similar issue for both 'put templates' and 'put mappings' requests
as well.

This PR makes the minimal changes to detect and reject these typed mappings in
requests. It does not address #38266 generally, or attempt a larger refactor
around types in these server-side requests, as I think this should be done at a
later time.",https://github.com/elastic/elasticsearch/commit/3ce7d2c9b621e796ace43008134413cea7648a06
3360,3360.0,3534.0,elastic/elasticsearch,f3cde06a1dcbe57d1fb6641a2af8910ca4f8db6d,"geotile_grid implementation (#37842)

Implements `geotile_grid` aggregation

This patch refactors previous implementation https://github.com/elastic/elasticsearch/pull/30240

This code uses the same base classes as `geohash_grid` agg, but uses a different hashing
algorithm to allow zoom consistency.  Each grid bucket is aligned to Web Mercator tiles.",https://github.com/elastic/elasticsearch/commit/f3cde06a1dcbe57d1fb6641a2af8910ca4f8db6d
3361,3361.0,3535.0,elastic/elasticsearch,290c6637c2475320d6206cdafdec026f731777f4,"Refactor into appropriate uses of scheduleUnlessShuttingDown (#37709)

Replace `threadPool().schedule()` / catch
`EsRejectedExecutionException` pattern with direct calls to
`ThreadPool#scheduleUnlessShuttingDown()`.

Closes #36318",https://github.com/elastic/elasticsearch/commit/290c6637c2475320d6206cdafdec026f731777f4
3362,3362.0,3536.0,elastic/elasticsearch,f1e71be8b24f65bc9fb340f269436acab3642366,"Refactored GeoHashGrid unit tests (#37832)

* Refactored GeoHashGrid unit tests

This change allows other grid aggregations to reuse the same tests.

The change mostly just moves code to the base classes, trying to
keep changes to a bare minimum.

* rename createInternalGeoHashGridBucket to createInternalGeoGridBucket

* indentation",https://github.com/elastic/elasticsearch/commit/f1e71be8b24f65bc9fb340f269436acab3642366
3363,3363.0,3537.0,elastic/elasticsearch,289106a578284aa40f1026c09dd8fa4ff4ea23ee,"Refactor GeoHashGrid to be abstract and re-usable (#37742)

This change split out all the specific GeoHash
classes for the geohash_grid aggregation into
abstract GeoGrid classes that can be re-used for
specific hashing types, like `geohash`",https://github.com/elastic/elasticsearch/commit/289106a578284aa40f1026c09dd8fa4ff4ea23ee
3364,3364.0,3538.0,elastic/elasticsearch,106f900dfb3ac49ab45ec20a7dae43753de2e4c8,"refactor inner geogrid classes to own class files (#37596)

To make further refactoring of GeoGrid aggregations
easier (related: #30320), splitting out these inner
class dependencies into their own files makes it
easier to map the relationship between classes",https://github.com/elastic/elasticsearch/commit/106f900dfb3ac49ab45ec20a7dae43753de2e4c8
3365,3365.0,3539.0,elastic/elasticsearch,4351a5e5375237b8259fbcbd3ff4d7c59cc2d215,"Allow field types to optimize phrase prefix queries (#37436)

This change adds a way to customize how phrase prefix queries should be created
on field types. The match phrase prefix query is exposed in field types in order
to allow optimizations based on the options set on the field.
For instance the text field uses the configured prefix field (if available) to
build a span near that mixes the original field and the prefix field on the last
position.
This change also contains a small refactoring of the match/multi_match query that
simplifies the interactions between the builders.

Closes #31921",https://github.com/elastic/elasticsearch/commit/4351a5e5375237b8259fbcbd3ff4d7c59cc2d215
3366,3366.0,3540.0,elastic/elasticsearch,36a3b84fc968f9aec5c3482dee69a1e53a7ac94a,"Update the default for include_type_name to false. (#37285)

* Default include_type_name to false for get and put mappings.

* Default include_type_name to false for get field mappings.

* Add a constant for the default include_type_name value.

* Default include_type_name to false for get and put index templates.

* Default include_type_name to false for create index.

* Update create index calls in REST documentation to use include_type_name=true.

* Some minor clean-ups around the get index API.

* In REST tests, use include_type_name=true by default for index creation.

* Make sure to use 'expression == false'.

* Clarify the different IndexTemplateMetaData toXContent methods.

* Fix FullClusterRestartIT#testSnapshotRestore.

* Fix the ml_anomalies_default_mappings test.

* Fix GetFieldMappingsResponseTests and GetIndexTemplateResponseTests.

We make sure to specify include_type_name=true during xContent parsing,
so we continue to test the legacy typed responses. XContent generation
for the typeless responses is currently only covered by REST tests,
but we will be adding unit test coverage for these as we implement
each typeless API in the Java HLRC.

This commit also refactors GetMappingsResponse to follow the same appraoch
as the other mappings-related responses, where we read include_type_name
out of the xContent params, instead of creating a second toXContent method.
This gives better consistency in the response parsing code.

* Fix more REST tests.

* Improve some wording in the create index documentation.

* Add a note about types removal in the create index docs.

* Fix SmokeTestMonitoringWithSecurityIT#testHTTPExporterWithSSL.

* Make sure to mention include_type_name in the REST docs for affected APIs.

* Make sure to use 'expression == false' in FullClusterRestartIT.

* Mention include_type_name in the REST templates docs.",https://github.com/elastic/elasticsearch/commit/36a3b84fc968f9aec5c3482dee69a1e53a7ac94a
3367,3367.0,3541.0,elastic/elasticsearch,6ca076bf7467f13d7807b089f549ac429b45e8fc,"Fix ClusterBlock serialization and Close Index API logic after backport to 6.x (#37360)

This commit changes the versions in the serialization logic of ClusterBlock 
after the backport to 6.x of the Close Index API refactoring (#37359).",https://github.com/elastic/elasticsearch/commit/6ca076bf7467f13d7807b089f549ac429b45e8fc
3368,3368.0,3542.0,elastic/elasticsearch,f1f5d834c308ebb900be932a2d839e1b833ba3f5,Merge branch 'close-index-api-refactoring',https://github.com/elastic/elasticsearch/commit/f1f5d834c308ebb900be932a2d839e1b833ba3f5
3369,3369.0,3543.0,elastic/elasticsearch,096a83183e3eac6da889bc9d56de5ed881ff9818,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/096a83183e3eac6da889bc9d56de5ed881ff9818
3370,3370.0,3544.0,elastic/elasticsearch,7f6fe14b668baff79725972cb4bfe28661e50586,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/7f6fe14b668baff79725972cb4bfe28661e50586
3371,3371.0,3545.0,elastic/elasticsearch,6e852dfa7c952f84bca2fb8b785225db428c1e49,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/6e852dfa7c952f84bca2fb8b785225db428c1e49
3372,3372.0,3546.0,elastic/elasticsearch,6c78aff830379dbaa11869919f6ade9b84fdff4b,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/6c78aff830379dbaa11869919f6ade9b84fdff4b
3373,3373.0,3547.0,elastic/elasticsearch,d70ebfd1d6f06c9f743e7c4eb9ce893980895a9c,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/d70ebfd1d6f06c9f743e7c4eb9ce893980895a9c
3374,3374.0,3548.0,elastic/elasticsearch,97bf4d717636c1fa77a2bcee2982f086a78e06b7,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/97bf4d717636c1fa77a2bcee2982f086a78e06b7
3375,3375.0,3549.0,elastic/elasticsearch,f5af79b9cdd9df393e4073f5b67cf9da82f4f0ee,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/f5af79b9cdd9df393e4073f5b67cf9da82f4f0ee
3376,3376.0,3550.0,elastic/elasticsearch,935c2e98b0cec6fa560cd7cb65939cbe5ca7c895,"Zen2: Turn to follower on follower check when no state accepted yet from new leader (#37003)

Improves on #36449 which did not cover the situation where a node had bumped its term during
the election, and not when receiving the first follower check. This was uncovered while refactoring
NodeJoinTests so that they don't need to access to an internal field of Coordinator anymore (which
can now be made private).",https://github.com/elastic/elasticsearch/commit/935c2e98b0cec6fa560cd7cb65939cbe5ca7c895
3377,3377.0,3551.0,elastic/elasticsearch,9137d92ca613b7fe40574789686575c4404089c1,"Refactor ingest node API docs (#36962)

This commit is a simple refactoring of the ingest node API docs,
breaking each API into a single file for ease of maintaining.",https://github.com/elastic/elasticsearch/commit/9137d92ca613b7fe40574789686575c4404089c1
3378,3378.0,3552.0,elastic/elasticsearch,bd2af2c4007af254371d1355076596f4d9a52340,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/bd2af2c4007af254371d1355076596f4d9a52340
3379,3379.0,3553.0,elastic/elasticsearch,fba710469a3c28819f2b2678eff99826d48ae769,Refactor the REST actions to clarify what endpoints are deprecated. (#36869),https://github.com/elastic/elasticsearch/commit/fba710469a3c28819f2b2678eff99826d48ae769
3380,3380.0,3554.0,elastic/elasticsearch,ca92d74e7e7102ffe52a9b2d6db3c89696b6dc67,"[Zen2] Change unsafe bootstrap nodes count to nodes list in tests (#36559)

This commit modifies ESSingleNodeTestCase and ESIntegTestCase and
several concrete test classes to use node names when bootstrapping the
cluster.

Today ClusterBootstrapService.INITIAL_MASTER_NODE_COUNT_SETTING
setting is used to bootstrap clusters in tests. Instead, we want to use
ClusterBootrstapService.INITIAL_MASTER_NODES_SETTING and get rid of
the former setting eventually.

There were two main problems when refactoring InternalTestCluster:

1. Nodes are created one-by-one in buildNode method. And node.name
is created in this method as well. It's not suitable for bootstrapping,
because we need to have the names of all master eligible nodes in
advance, before creating the node with bootstrapping configuration set.
We address this issue by separating buildNode into two methods:
getNodeSettings and buildNode. We first iterate over all nodes to
get nodes settings, then change the setting for the bootstrapping node
and then proceed with building the node.
2. If autoManageMinMasterNodes = false, there is no way for the test to
set the list of bootstrapping nodes because node names are not known in
advance. This problem is solved by adding updateNodesSettings method
to NodeConfigurationSource and ESIntegTestCase (which could be
overridden by concrete integration test class). Once we have the list
of settings for all nodes, the integration test class is allowed to
update it. In our case, we update the
ClusterBootrstapService.INITIAL_MASTER_NODES_SETTING setting.",https://github.com/elastic/elasticsearch/commit/ca92d74e7e7102ffe52a9b2d6db3c89696b6dc67
3381,3381.0,3555.0,elastic/elasticsearch,fb24469fe7526e15053d0fd3d92d4391513ea6df,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/fb24469fe7526e15053d0fd3d92d4391513ea6df
3382,3382.0,3556.0,elastic/elasticsearch,487a1c4f71262123136dd0f5e6a5cbf0f2696399,"Fix cluster state persistence for single-node discovery (#36825)

Single-node discovery is not persisting cluster states, which was caused by a recent 7.0-only
refactoring. This commit ensures that the cluster state is properly persisted when using single-node
discovery and adds a corresponding test.",https://github.com/elastic/elasticsearch/commit/487a1c4f71262123136dd0f5e6a5cbf0f2696399
3383,3383.0,3557.0,elastic/elasticsearch,c99fd6a53b805bb25e22ee8e769b4ffba19b56fb,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/c99fd6a53b805bb25e22ee8e769b4ffba19b56fb
3384,3384.0,3558.0,elastic/elasticsearch,e294056bbf3ce579c41847d0bbe4a407f9f3f1cd,"[ML] Merge the Jindex master feature branch (#36702)

* [ML] Job and datafeed mappings with index template (#32719)

Index mappings for the configuration documents

* [ML] Job config document CRUD operations (#32738)

* [ML] Datafeed config CRUD operations (#32854)

* [ML] Change JobManager to work with Job config in index  (#33064)

* [ML] Change Datafeed actions to read config from the config index (#33273)

* [ML] Allocate jobs based on JobParams rather than cluster state config (#33994)

* [ML] Return missing job error when .ml-config is does not exist (#34177)

* [ML] Close job in index (#34217)

* [ML] Adjust finalize job action to work with documents (#34226)

* [ML] Job in index: Datafeed node selector (#34218)

* [ML] Job in Index: Stop and preview datafeed (#34605)

* [ML] Delete job document (#34595)

* [ML] Convert job data remover to work with index configs (#34532)

* [ML] Job in index: Get datafeed and job stats from index (#34645)

* [ML] Job in Index: Convert get calendar events to index docs (#34710)

* [ML] Job in index: delete filter action (#34642)

This changes the delete filter action to search
for jobs using the filter to be deleted in the index
rather than the cluster state.

* [ML] Job in Index: Enable integ tests (#34851)

Enables the ml integration tests excluding the rolling upgrade tests and a lot of fixes to
make the tests pass again.

* [ML] Reimplement established model memory (#35500)

This is the 7.0 implementation of a master node service to
keep track of the native process memory requirement of each ML
job with an associated native process.

The new ML memory tracker service works when the whole cluster
is upgraded to at least version 6.6. For mixed version clusters
the old mechanism of established model memory stored on the job
in cluster state was used. This means that the old (and complex)
code to keep established model memory up to date on the job object
has been removed in 7.0.

Forward port of #35263

* [ML] Need to wait for shards to replicate in distributed test (#35541)

Because the cluster was expanded from 1 node to 3 indices would
initially start off with 0 replicas.  If the original node was
killed before auto-expansion to 1 replica was complete then
the test would fail because the indices would be unavailable.

* [ML] DelayedDataCheckConfig index mappings (#35646)

* [ML] JIndex: Restore finalize job action (#35939)

* [ML] Replace Version.CURRENT in streaming functions (#36118)

* [ML] Use 'anomaly-detector' in job config doc name (#36254)

* [ML] Job In Index: Migrate config from the clusterstate (#35834)

Migrate ML configuration from clusterstate to index for closed jobs
only once all nodes are v6.6.0 or higher

* [ML] Check groups against job Ids on update (#36317)

* [ML] Adapt to periodic persistent task refresh (#36633)

* [ML] Adapt to periodic persistent task refresh

If https://github.com/elastic/elasticsearch/pull/36069/files is
merged then the approach for reallocating ML persistent tasks
after refreshing job memory requirements can be simplified.
This change begins the simplification process.

* Remove AwaitsFix and implement TODO

* [ML] Default search size for configs

* Fix TooManyJobsIT.testMultipleNodes

Two problems:

1. Stack overflow during async iteration when lots of
   jobs on same machine
2. Not effectively setting search size in all cases

* Use execute() instead of submit() in MlMemoryTracker

We don't need a Future to wait for completion

* [ML][TEST] Fix NPE in JobManagerTests

* [ML] JIindex: Limit the size of bulk migrations (#36481)

* [ML] Prevent updates and upgrade tests (#36649)

* [FEATURE][ML] Add cluster setting that enables/disables config  migration (#36700)

This commit adds a cluster settings called `xpack.ml.enable_config_migration`.
The setting is `true` by default. When set to `false`, no config migration will
be attempted and non-migrated resources (e.g. jobs, datafeeds) will be able
to be updated normally.

Relates #32905

* [ML] Snapshot ml configs before migrating (#36645)

* [FEATURE][ML] Split in batches and migrate all jobs and datafeeds (#36716)

Relates #32905

* SQL: Fix translation of LIKE/RLIKE keywords (#36672)

* SQL: Fix translation of LIKE/RLIKE keywords

Refactor Like/RLike functions to simplify internals and improve query
 translation when chained or within a script context.

Fix #36039
Fix #36584

* Fixing line length for EnvironmentTests and RecoveryTests (#36657)

Relates #34884

* Add back one line removed by mistake regarding java version check and
COMPAT jvm parameter existence

* Do not resolve addresses in remote connection info (#36671)

The remote connection info API leads to resolving addresses of seed
nodes when invoked. This is problematic because if a hostname fails to
resolve, we would not display any remote connection info. Yet, a
hostname not resolving can happen across remote clusters, especially in
the modern world of cloud services with dynamically chaning
IPs. Instead, the remote connection info API should be providing the
configured seed nodes. This commit changes the remote connection info to
display the configured seed nodes, avoiding a hostname resolution. Note
that care was taken to preserve backwards compatibility with previous
versions that expect the remote connection info to serialize a transport
address instead of a string representing the hostname.

* [Painless] Add boxed type to boxed type casts for method/return (#36571)

This adds implicit boxed type to boxed types casts for non-def types to create asymmetric casting relative to the def type when calling methods or returning values. This means that a user calling a method taking an Integer can call it with a Byte, Short, etc. legally which matches the way def works. This creates consistency in the casting model that did not previously exist.

* SNAPSHOTS: Adjust BwC Versions in Restore Logic (#36718)

* Re-enables bwc tests with adjusted version conditions now that #36397 enables concurrent snapshots in 6.6+

* ingest: fix on_failure with Drop processor (#36686)

This commit allows a document to be dropped when a Drop processor
is used in the on_failure fork of the processor chain.

Fixes #36151

* Initialize startup `CcrRepositories` (#36730)

Currently, the CcrRepositoryManger only listens for settings updates
and installs new repositories. It does not install the repositories that
are in the initial settings. This commit, modifies the manager to
install the initial repositories. Additionally, it modifies the ccr
integration test to configure the remote leader node at startup, instead
of using a settings update.

* [TEST] fix float comparison in RandomObjects#getExpectedParsedValue

This commit fixes a test bug introduced with #36597. This caused some
test failure as stored field values comparisons would not work when CBOR
xcontent type was used.

Closes #29080

* [Geo] Integrate Lucene's LatLonShape (BKD Backed GeoShapes) as default `geo_shape` indexing approach (#35320)

This commit  exposes lucene's LatLonShape field as the
default type in GeoShapeFieldMapper. To use the new 
indexing approach, simply set ""type"" : ""geo_shape"" in 
the mappings without setting any of the strategy, precision, 
tree_levels, or distance_error_pct parameters. Note the 
following when using the new indexing approach:

* geo_shape query does not support querying by 
MULTIPOINT.
* LINESTRING and MULTILINESTRING queries do not 
yet support WITHIN relation.
* CONTAINS relation is not yet supported.
The tree, precision, tree_levels, distance_error_pct, 
and points_only parameters are deprecated.

* TESTS:Debug Log. IndexStatsIT#testFilterCacheStats

* ingest: support default pipelines + bulk upserts (#36618)

This commit adds support to enable bulk upserts to use an index's
default pipeline. Bulk upsert, doc_as_upsert, and script_as_upsert
are all supported.

However, bulk script_as_upsert has slightly surprising behavior since
the pipeline is executed _before_ the script is evaluated. This means
that the pipeline only has access the data found in the upsert field
of the script_as_upsert. The non-bulk script_as_upsert (existing behavior)
runs the pipeline _after_ the script is executed. This commit
does _not_ attempt to consolidate the bulk and non-bulk behavior for
script_as_upsert.

This commit also adds additional testing for the non-bulk behavior,
which remains unchanged with this commit.

fixes #36219

* Fix duplicate phrase in shrink/split error message (#36734)

This commit removes a duplicate ""must be a"" from the shrink/split error
messages.

* Deprecate types in get_source and exist_source (#36426)

This change adds a new untyped endpoint `{index}/_source/{id}` for both the
GET and the HEAD methods to get the source of a document or check for its
existance. It also adds deprecation warnings to RestGetSourceAction that emit
a warning when the old deprecated ""type"" parameter is still used. Also updating
documentation and tests where appropriate.

Relates to #35190

* Revert ""[Geo] Integrate Lucene's LatLonShape (BKD Backed GeoShapes) as default `geo_shape` indexing approach (#35320)""

This reverts commit 5bc7822562a6eefa4a64743233160cdc9f431adf.

* Enhance Invalidate Token API (#35388)

This change:

- Adds functionality to invalidate all (refresh+access) tokens for all users of a realm
- Adds functionality to invalidate all (refresh+access)tokens for a user in all realms
- Adds functionality to invalidate all (refresh+access) tokens for a user in a specific realm
- Changes the response format for the invalidate token API to contain information about the 
   number of the invalidated tokens and possible errors that were encountered.
- Updates the API Documentation

After back-porting to 6.x, the `created` field will be removed from master as a field in the 
response

Resolves: #35115
Relates: #34556

* Add raw sort values to SearchSortValues transport serialization (#36617)

In order for CCS alternate execution mode (see #32125) to be able to do the final reduction step on the CCS coordinating node, we need to serialize additional info in the transport layer as part of each `SearchHit`. Sort values are already present but they are formatted according to the provided `DocValueFormat` provided. The CCS node needs to be able to reconstruct the lucene `FieldDoc` to include in the `TopFieldDocs` and `CollapseTopFieldDocs` which will feed the `mergeTopDocs` method used to reduce multiple search responses (one per cluster) into one.

This commit adds such information to the `SearchSortValues` and exposes it through a new getter method added to `SearchHit` for retrieval. This info is only serialized at transport and never printed out at REST.

* Watcher: Ensure all internal search requests count hits (#36697)

In previous commits only the stored toXContent version of a search
request was using the old format. However an executed search request was
already disabling hit counts. In 7.0 hit counts will stay enabled by
default to allow for proper migration.

Closes #36177

* [TEST] Ensure shard follow tasks have really stopped.

Relates to #36696

* Ensure MapperService#getAllMetaFields elements order is deterministic (#36739)

MapperService#getAllMetaFields returns an array, which is created out of
an `ObjectHashSet`. Such set does not guarantee deterministic hash
ordering. The array returned by its toArray may be sorted differently
at each run. This caused some repeatability issues in our tests (see #29080)
as we pick random fields from the array of possible metadata fields,
but that won't be repeatable if the input array is sorted differently at
every run. Once setting the tests seed, hppc picks that up and the sorting is
deterministic, but failures don't repeat with the seed that gets printed out
originally (as a seed was not originally set).
See also https://issues.carrot2.org/projects/HPPC/issues/HPPC-173.

With this commit, we simply create a static sorted array that is used for
`getAllMetaFields`. The change is in production code but really affects
only testing as the only production usage of this method was to iterate
through all values when parsing fields in the high-level REST client code.
Anyways, this seems like a good change as returning an array would imply
that it's deterministically sorted.

* Expose Sequence Number based Optimistic Concurrency Control in the rest layer (#36721)

Relates #36148 
Relates #10708

* [ML] Mute MlDistributedFailureIT",https://github.com/elastic/elasticsearch/commit/e294056bbf3ce579c41847d0bbe4a407f9f3f1cd
3385,3385.0,3559.0,elastic/elasticsearch,ec0dc2c0e900e1703dea29ddb56e4916618fc49e,"[Geo] Integrate Lucene's LatLonShape (BKD Backed GeoShapes) as default `geo_shape` indexing approach (#36751)

* [Geo] Expose BKDBackedGeoShapes as new VECTOR strategy

This commit exposes lucene's LatLonShape field as a new
strategy in GeoShapeFieldMapper. To use the new indexing
approach, strategy should be set to ""vector"" in the
geo_shape field mapper. If the tree parameter is set
the mapper will throw an IAE. Note the following:

When using vector strategy:

* geo_shape query does not support querying by POINT,
MULTIPOINT, or GEOMETRYCOLLECTION.
* LINESTRING and MULTILINESTRING queries do not support
WITHIN relation.
* CONTAINS relation is not supported.
* The tree, precision, tree_levels, distance_error_pct,
and points_only parameters will not throw an exception
but they have no effect and will be marked as
deprecated..

All other features are supported.

* revert change to PercolatorFieldMapper

* fix ExistsQuery for geo_shape vector strategy

* add deprecation logging for tree, precision, tree_levels, distance_error_pct, and points_only

* initial update to geoshape docs, including mapping migration updates

* initial support for GeoCollection queries

* fix docs and javadoc errors

* clean up geocollection queries

* set deprecated mapping tests to NOTCONSOLE

* fix geo-shape mapper asciidoc mapping and test warnings

* add support for point queries using LatLonShapeBoundingBoxQuery

* update GeoShapeQueryBuilderTests to include POINT queries for VECTOR strategy. Other comment cleanups

* add lucene geometry build testing to ShapeBuilder tests

* remove deprecated prefix tree mapping from geo-shape.asciidoc

* refactor GeoShapeFieldMapper into LegacyGeoShapeFieldMapper and GeoShapeFieldMapper

Both classes derive from BaseGeoShapeFieldMapper that provides shared parameters:
coerce, ignoreMalformed, ignore_z_value, orientation.

* update docs to remove vector strategy

* fix GeometryCollectionBuilder#buildLucene to return the object created by the shape builder

* fix LineLength failure in GeoJsonShapeParserTests

* ShapeMapper refactor changes from PR feedback

* fix typo in geo-shape.asciidoc

* ignore circle test in docs

* update indexing-approach ref to geoshape-indexing-approach

* add warnings check for LegacyGeoShapeFieldMapper to AbstractBuilderTestCase

* fix deprecatedParameters setup

* update indexing approach

* fixing unexpected warnings failures

* move orientation back to field type

* remove if in LegacyGeoShapeFieldMapper#doXContent. Fix GeoShapeFieldMapper to work with double array as a point

* fix indexing-approach link in circle section of geoshape docs

* add strategy to deprecation warnings check

* fix test failures

* fix typo in QueryStringQueryBuilderTests

* fix total hits to totalHits().value

* fix version number

* add version check to BaseGeoShapeFieldMapper

* fix line length!

* revert version check in BaseGeoShapeFieldMapper

* Fix serialization of mappings of legacy shapes.",https://github.com/elastic/elasticsearch/commit/ec0dc2c0e900e1703dea29ddb56e4916618fc49e
3386,3386.0,3560.0,elastic/elasticsearch,cd3a1af77bf98c9646d41848b71252f7141ce34d,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/cd3a1af77bf98c9646d41848b71252f7141ce34d
3387,3387.0,3561.0,elastic/elasticsearch,0a0c969517f48966a452a24da9064edc0507be92,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/0a0c969517f48966a452a24da9064edc0507be92
3388,3388.0,3562.0,elastic/elasticsearch,6d9d5e397b9f2b008a6023dd2d65aa071efbdba2,"SQL: Fix translation of LIKE/RLIKE keywords (#36672)

* SQL: Fix translation of LIKE/RLIKE keywords

Refactor Like/RLike functions to simplify internals and improve query
 translation when chained or within a script context.

Fix #36039
Fix #36584",https://github.com/elastic/elasticsearch/commit/6d9d5e397b9f2b008a6023dd2d65aa071efbdba2
3389,3389.0,3563.0,elastic/elasticsearch,79999d37d48d254f6e521822ab455f88a857ecf8,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/79999d37d48d254f6e521822ab455f88a857ecf8
3390,3390.0,3564.0,elastic/elasticsearch,1f6f236d44e0d0547a36b637875d1af91d10802d,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/1f6f236d44e0d0547a36b637875d1af91d10802d
3391,3391.0,3565.0,elastic/elasticsearch,8e5dd20efb667d272fac4b2a151f8c09f0284024,"[Close Index API] Refactor MetaDataIndexStateService (#36354)

The commit changes how indices are closed in the MetaDataIndexStateService. 
It now uses a 3 steps process where writes are blocked on indices to be closed, 
then some verifications are done on shards using the TransportVerifyShardBeforeCloseAction 
added in #36249, and finally indices states are moved to CLOSE and their routing 
tables removed.

The closing process also takes care of using the pre-7.0 way to close indices if the 
cluster contains mixed version of nodes and a node does not support the TransportVerifyShardBeforeCloseAction. It also closes unassigned indices.

Related to #33888",https://github.com/elastic/elasticsearch/commit/8e5dd20efb667d272fac4b2a151f8c09f0284024
3392,3392.0,3566.0,elastic/elasticsearch,40953d70caf292dd0a3d105a8c0dd1a83ba347c0,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/40953d70caf292dd0a3d105a8c0dd1a83ba347c0
3393,3393.0,3567.0,elastic/elasticsearch,cd1bec3a06df97a5ec7c135f475d0059dc1bee64,"[refactor] add Environment in BootstrapContext (#36573)

There are certain BootstrapCheck checks that may need access environment-specific
values. Watcher's EncryptSensitiveDataBootstrapCheck passes in the node's environment
via a constructor to bypass the shortcoming in BootstrapContext. This commit
pulls in the node's environment into BootstrapContext.

Another case is found in #36519, where it is useful to check the state of the
data-path. Since PathUtils.get and Paths.get are forbidden APIs, we rely on
the environment to retrieve references to things like node data paths.

This means that the BootstrapContext will have the same Settings used in the
Environment, which currently differs from the Node's settings.",https://github.com/elastic/elasticsearch/commit/cd1bec3a06df97a5ec7c135f475d0059dc1bee64
3394,3394.0,3568.0,elastic/elasticsearch,dbcafbefc9c4adf8013dd0a3d552926e86b8e23a,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/dbcafbefc9c4adf8013dd0a3d552926e86b8e23a
3395,3395.0,3569.0,elastic/elasticsearch,f2e18a6bf6b5fa24213b3ce7d4e2bc76e1d08aca,"Add check for minimum required Docker version (#36497)

Our Docker build uses a multi-stage Docker build. This requires Docker
version 17.05 or greater. Without an explicit check here, the build
fails in a mysterious way such as ""invalid reference format"" that is
hard to track down (Google searches for ""Docker invalid reference
format"" do not turn up anything useful). This commit refactors our
existing Docker checks, and adds a new one for the minimum Docker
version.",https://github.com/elastic/elasticsearch/commit/f2e18a6bf6b5fa24213b3ce7d4e2bc76e1d08aca
3396,3396.0,3570.0,elastic/elasticsearch,d615add1b16655c0d30b50e800922a316bbecd17,"Add pipeline parent validation for auto date histogram (#35670)

Allow `auto_date_histogram` as a valid parent agg for derivative, 
cumulative sum, moving average, moving function and serial 
differencing pipeline aggregations.

Since all these aggs share the same requirement (sequentially
ordered parent aggs), this commit also refactors to share
the same validation code so that any newly added aggs won't
be forgotten.

Closes #35578",https://github.com/elastic/elasticsearch/commit/d615add1b16655c0d30b50e800922a316bbecd17
3397,3397.0,3571.0,elastic/elasticsearch,593d8637c4879f4919372d7e1aeffbf17da24157,Merge branch 'master' into close-index-api-refactoring,https://github.com/elastic/elasticsearch/commit/593d8637c4879f4919372d7e1aeffbf17da24157
3398,3398.0,3572.0,elastic/elasticsearch,a264cb6ddb809b8d7ef9375a2caea5a6f2e628a4,"Refactor AutoFollowCoordinator to track leader indices per remote cluster (#36031)

and replaced poll interval setting with a hardcoded poll interval.
The hard coded interval will be removed in a follow up change to make
use of cluster state API's wait_for_metatdata_version.

Before the auto following was bootstrapped from thread pool scheduler,
but now auto followers for new remote clusters are bootstrapped when
a new cluster state is published.

Originates from #35895
Relates to #33007",https://github.com/elastic/elasticsearch/commit/a264cb6ddb809b8d7ef9375a2caea5a6f2e628a4
3399,3399.0,3573.0,elastic/elasticsearch,35e3d77e2cebd78d1b5f88dac5238e8b060d328f,"[Zen2] Implement state recovery (#36013)

This commit implements proper metadata recovery for Zen2.

GatewayService is responsible for the recovery. In Zen1 GatewayService
creates an instance of Gateway, that is used to reach out to other cluster
nodes, get their state and calculate the most up-to-date state based on
versions. After that Gateway performs upgrade and archival of
 ClusterSettings and closes bad indices. Then recovered state is passed to GatewayService.GatewayRecoveryListener that mixes up current state
and restored state, removes state not recovered block, creates the
routing table and performs re-routing.

In Zen2 we should perform this kind of logic on cluster startup, except
mixing state (because there is nothing to mix) and opening routing table.

This commit refactors out all `ClusterUpdate` functions in a separate class
`ClusterStateUpdaters`, which is used by `Gateway` and `GatewayService`
in case of Zen1, and by `GatewayMetaState` and `GatewayService` in case of
Zen2.

This commit also switches all integration tests that are already using Zen2 from
InMemoryPersistedState to GatewayMetaState.",https://github.com/elastic/elasticsearch/commit/35e3d77e2cebd78d1b5f88dac5238e8b060d328f
3400,3400.0,3574.0,elastic/elasticsearch,54cf1f9d7442686f9cdc468f43e28373001ca7c3,[ML] Refactor control message writer to allow reuse for other processes (#36070),https://github.com/elastic/elasticsearch/commit/54cf1f9d7442686f9cdc468f43e28373001ca7c3
3401,3401.0,3575.0,elastic/elasticsearch,10447dd9624659537a040aef47f2b8605bb08c78,"Build: Fix jdbc jar to include deps (#35602)

This commit adds back bundling of all deps of the sql jdbc jar. This was
lost in a refactoring of how the shadow plugin is handled for the entire
elasticsearch project.",https://github.com/elastic/elasticsearch/commit/10447dd9624659537a040aef47f2b8605bb08c78
3402,3402.0,3576.0,elastic/elasticsearch,2e37f17a7d70b0f14532fdcd955a4f9ed9ad5bed,"Expose all permits acquisition in IndexShard and TransportReplicationAction (#35540)

This pull request exposes two new methods in the IndexShard and 
TransportReplicationAction classes in order to allow transport replication 
actions to acquire all index shard operation permits for their execution.

It first adds the acquireAllPrimaryOperationPermits() and the 
acquireAllReplicaOperationsPermits() methods to the IndexShard class 
which allow to acquire all operations permits on a shard while exposing 
a Releasable. It also refactors the TransportReplicationAction class to 
expose two protected methods (acquirePrimaryOperationPermit() and 
acquireReplicaOperationPermit()) that can be overridden when a transport 
replication action requires the acquisition of all permits on primary and/or 
replica shard during execution.

Finally, it adds a TransportReplicationAllPermitsAcquisitionTests which
 illustrates how a transport replication action can grab all permits before 
adding a cluster block in the cluster state, making subsequent operations 
that requires a single permit to fail).

Related to elastic #33888",https://github.com/elastic/elasticsearch/commit/2e37f17a7d70b0f14532fdcd955a4f9ed9ad5bed
3403,3403.0,3577.0,elastic/elasticsearch,60db06ed1dbf35e5d6d3b22ef2ef6b13643a6570,"[ILM] refactor ExplainLifecycleRequest to enforce indices (#35753)

Previously, it was possible to initialize a request
that does not include any indices. This results in undefined
behavior when generating the URL path to send to ES. By
enforcing indices to be defined, users will be more explicit
about the intention.",https://github.com/elastic/elasticsearch/commit/60db06ed1dbf35e5d6d3b22ef2ef6b13643a6570
3404,3404.0,3578.0,elastic/elasticsearch,f0a3d326022b92ead0a2b2bf9c5155a77d8ad8c8,"SQL: Introduce INTERVAL support (#35521)

Introduce INTERVAL as a DataType
Add INTERVAL to the grammar which supports the standard SQL declaration
 (without precision):
 > INTERVAL '1 23:45:01.123456789' DAY TO SECOND
 but also number for single unit intervals:
 > INTERVAL 1 YEAR
 as well as the plurals of the units:
 > INTERVAL 2 YEARS
Interval are internally supported as just another Literal being backed
 by java.time.Period and java.time.Duration
Move JDBC away from JDBCType enum to SQLType interface
Refactor DataType by moving it into server core and adding dedicated (and
 much simpler) JDBC driver type
Improve internal JDBC conversion by normalizing on the DataType
Rename JDBC columnInfo to JdbcColumnInfo to differentiate between it and
 the SQL ColumnInfo

Fix #29990",https://github.com/elastic/elasticsearch/commit/f0a3d326022b92ead0a2b2bf9c5155a77d8ad8c8
3405,3405.0,3579.0,elastic/elasticsearch,450db7fcf7b99066b42507be15727856765729ff,"[Tests] Fix slowness of AutoDateHistogramAggregatorTests (#35072)

Randomize test assertion and test set size instead of asserting on an
exhaustive list of dates with fixed test set size. Also refactor common 
objects used to avoid recreating them, avoid date to string conversion
and reduce duplicate test code

Closes #33181",https://github.com/elastic/elasticsearch/commit/450db7fcf7b99066b42507be15727856765729ff
3406,3406.0,3580.0,elastic/elasticsearch,4fea6b6f9b6d49bee3ec37d9cedc58045c3b6288,Refactor an ambigious TermVectorsRequest constructor. (#35614),https://github.com/elastic/elasticsearch/commit/4fea6b6f9b6d49bee3ec37d9cedc58045c3b6288
3407,3407.0,3581.0,elastic/elasticsearch,c6e2634bf838929947b20ad97f0c768d9d0bca61,"Docs: HLRC: refactor bulk, migrate and reindex apis (#35413)

fix typos and refactor to DRY up documentation for bulk, reindex and migration apis
relates #35345",https://github.com/elastic/elasticsearch/commit/c6e2634bf838929947b20ad97f0c768d9d0bca61
3408,3408.0,3582.0,elastic/elasticsearch,4cfdb0609e4efb81510f590fab95033e0904965f,"Adapt InternalCluster#fullRestart to call onNodeStopped when all nodes are stopped (#35494)

Refactors and simplifies the logic around stopping nodes, making sure that for a full cluster restart
onNodeStopped is only called after the nodes are actually all stopped (and in particular not while
starting up some nodes again). This change also ensures that a closed node client is not being used
anymore (which required a small change to a test).

Relates to #35049",https://github.com/elastic/elasticsearch/commit/4cfdb0609e4efb81510f590fab95033e0904965f
3409,3409.0,3583.0,elastic/elasticsearch,b9eb5f7b63918376f0c3b3c6b7f6a2d39bed67a7,"HLRC: Adding ml get filters api (#35502)

* HLRC: Adding ml get filters api

* refactoring setId name",https://github.com/elastic/elasticsearch/commit/b9eb5f7b63918376f0c3b3c6b7f6a2d39bed67a7
3410,3410.0,3584.0,elastic/elasticsearch,2da239fb5eb82ec397ea195b59c18542ee6d3f11,"[HLRC] Add GetRollupIndexCaps API (#35102)

Also refactors the caps response tests a bit to share the same
abstract class to reduce duplication of test code",https://github.com/elastic/elasticsearch/commit/2da239fb5eb82ec397ea195b59c18542ee6d3f11
3411,3411.0,3585.0,elastic/elasticsearch,a9641960e1be101c0bcd4e9bbd28c3a2a2cabeb5,"Refactor realm tests to use single settings (#35362)

Many realm tests were written to use separate setting objects for
""global settings"" and ""realm settings"".
Since #30241 there is no distinction between these settings, so these
tests can be cleaned up to use a single Settings object.",https://github.com/elastic/elasticsearch/commit/a9641960e1be101c0bcd4e9bbd28c3a2a2cabeb5
3412,3412.0,3586.0,elastic/elasticsearch,85a8b517bd659e3b036492da4fac6de942e8f053,"HLRest: refactor put_user to utilize `User` object (#35188)

This follows #33552 , when the `_authenticate` API added a new
`User` object for the API's response. This changes the `put_user`
API to also employ a `User` object in the request.
The User object changed slightly.
A bug with put_user only putting/updating enabled (but not disabled)
users has been fixed.",https://github.com/elastic/elasticsearch/commit/85a8b517bd659e3b036492da4fac6de942e8f053
3413,3413.0,3587.0,elastic/elasticsearch,4f35eea8fe614ed686a6617e9d11ac695b1189a6,"[TEST] Fix testConcurrentTermIncreaseOnReplicaShard

This test has a bug that got introduced during the refactoring of #32442. With 2 concurrent term increments,
we can only assert under the operation permit that we are in the correct operation term, not that there is
not already another term bump pending.

Closes #34862",https://github.com/elastic/elasticsearch/commit/4f35eea8fe614ed686a6617e9d11ac695b1189a6
3414,3414.0,3588.0,elastic/elasticsearch,409050e8de4cacbfac4b68ab12bbb928437a4499,"Refactor: Remove settings from transport action CTOR (#35208)

As settings are not used in the transport action constructor, this
removes the passing of the settings in all the transport actions.",https://github.com/elastic/elasticsearch/commit/409050e8de4cacbfac4b68ab12bbb928437a4499
3415,3415.0,3589.0,elastic/elasticsearch,ffacd6f0e4618d17dbcd432cfa350da6efb28491,"Testclusters: Refactor and fix for newly added tests (#34818)

* Testclusters: Refactor and fix for newly added tests
* Move state management outside of the config object",https://github.com/elastic/elasticsearch/commit/ffacd6f0e4618d17dbcd432cfa350da6efb28491
3416,3416.0,3590.0,elastic/elasticsearch,2fadec5c3d63a6615b83b2a287a78db1aba7522d,"ML: Add support for rollup Indexes in Datafeeds (#34654)

* Adding rollup support for datafeeds

* Fixing tests and adjusting formatting

* minor formatting chagne

* fixing some syntax and removing redundancies

* Refactoring and fixing failing test

* Refactoring, adding paranoid null check

* Moving rollup into the aggregation package

* making AggregationToJsonProcessor package private again

* Addressing test failure

* Fixing validations, chunking

* Addressing failing test

* rolling back RollupJobCaps changes

* Adding comment and cleaning up test

* Addressing review comments and test failures

* Moving builder logic into separate methods

* Addressing PR comments, adding test for rollup permissions

* Fixing test failure

* Adding rollup priv check on datafeed put

* Handling missing index when getting caps

* Fixing unused import",https://github.com/elastic/elasticsearch/commit/2fadec5c3d63a6615b83b2a287a78db1aba7522d
3417,3417.0,3591.0,elastic/elasticsearch,d85a654ebbdacb86ac0c51bf541d391d61a49ebd,"[ML] Refactor doc value format into ExtractedField (#35053)

This commit moves the knowledge of which doc value format
to be used down to the `ExtractedField` instead of being
in the data extractor.",https://github.com/elastic/elasticsearch/commit/d85a654ebbdacb86ac0c51bf541d391d61a49ebd
3418,3418.0,3592.0,elastic/elasticsearch,18015185271a32063a88ae34f6643bd1aac14014,"[CCR] Refactor stats APIs (#34912)

* Changed the auto follow stats to also include follow stats.
* Renamed the auto follow stats api to stats api and changed its url path
  from `/_ccr/auto_follow/stats` `/_ccr/stats`.
* Removed `/_ccr/stats` url path for the follow stats api, which makes
  the index parameter a required parameter.
* Fixed docs.",https://github.com/elastic/elasticsearch/commit/18015185271a32063a88ae34f6643bd1aac14014
3419,3419.0,3593.0,elastic/elasticsearch,a39a67cd38981c51c974ea6b1f3291bd7970fe9a,"[ML] Extract common native process base class (#34856)

We currently have two different native processes:
autodetect & normalizer. There are plans for introducing
a new process. All these share many things in common.
This commit refactors the processes to extend an
`AbstractNativeProcess` class that encapsulates those
commonalities with the purpose of reusing the code
for new processes in the future.",https://github.com/elastic/elasticsearch/commit/a39a67cd38981c51c974ea6b1f3291bd7970fe9a
3420,3420.0,3594.0,elastic/elasticsearch,1b879ea8ac3a4feeb88b4be6cbe285fa16253fa4,"Refactor children aggregator into a generic ParentJoinAggregator (#34845)

This commit adds a new ParentJoinAggregator that implements a join using global ordinals
in a way that can be reused by the `children` and the upcoming `parent` aggregation.
This new aggregator is a refactor of the existing ParentToChildrenAggregator with two main changes:
* It uses a dense bit array instead of a long array when the aggregation does not have any parent.
* It uses a single aggregator per bucket if it is nested under another aggregation.
For the latter case we use a `MultiBucketAggregatorWrapper` in the factory in order to ensure that each
instance of the aggregator handles a single bucket. This is more inlined with the strategy we use for other
aggregations like `terms` aggregation for instance since the number of buckets to handle should be low (thanks to the breadth_first strategy).
This change is also required for #34210 which adds the `parent` aggregation in the parent-join module.

Relates #34508",https://github.com/elastic/elasticsearch/commit/1b879ea8ac3a4feeb88b4be6cbe285fa16253fa4
3421,3421.0,3595.0,elastic/elasticsearch,8da1c9626a19853a692c30bbd30428e0a38c5f75,"Scripting: Add back params._source access in scripted metric aggs (#34777)

Access to special variables _source and _fields were accidentally
removed in recent refactorings. This commit adds them back, along with a
test.

closes #33884",https://github.com/elastic/elasticsearch/commit/8da1c9626a19853a692c30bbd30428e0a38c5f75
3422,3422.0,3596.0,elastic/elasticsearch,f904c41506e0161d682bc03adddb04b0bfb89369,"HLRC: Add get rollup job (#33921)

Adds support for the get rollup job to the High Level REST Client. I had
to do three interesting and unexpected things:
1. I ported the rollup state wiping code into the high level client
tests. I'll move this into the test framework in a followup and remove
the x-pack version.
2. The `timeout` in the rollup config was serialized using the
`toString` representation of `TimeValue` which produces fractional time
values which are more human readable but aren't supported by parsing. So
I switched it to `getStringRep`.
3. Refactor the xcontent round trip testing utilities so we can test
parsing of classes that don't implements `ToXContent`.",https://github.com/elastic/elasticsearch/commit/f904c41506e0161d682bc03adddb04b0bfb89369
3423,3423.0,3597.0,elastic/elasticsearch,15515a616ebb8dc9d1fa100baab2641b09b92776,"SQL: Internal refactoring of operators as functions (#34097)

Centralize and simplify the script generation between operators and functions which are currently decoupled. As part of this process most predicates (<, <=, etc...) were made ScalarFunction as their purpose and functionality is quite similar (see % and MOD functions).
Renamed ProcessDefinition to Pipe
Add ScriptWeaver as a mixin-in interface for script customization
Add logic for equals/lte/lt
Improve BinaryOperator/expression toString
Minimize duplication across string functions

Close #33975",https://github.com/elastic/elasticsearch/commit/15515a616ebb8dc9d1fa100baab2641b09b92776
3424,3424.0,3598.0,elastic/elasticsearch,bf6cf6b6d9e45ba5c27c293191b84ee21c2e6bbd,"refactor CompositeValuesSourceParserHelper for reusage by making it public (#33945)

refactor CompositeValuesSourceParserHelper for reusage by making it public and moving toXContent into it",https://github.com/elastic/elasticsearch/commit/bf6cf6b6d9e45ba5c27c293191b84ee21c2e6bbd
3425,3425.0,3599.0,elastic/elasticsearch,8e3a0fad9d71b9bf117975b1194a6019c1840d27,"[ML] Refactor job deletion logic into the transport action (#33891)

The job deletion logic was scattered around a few places:
the transport action, the job manager and the deletion task.
Overloading the task with deletion logic also meant extra
dependencies in the core package which should be unnecessary.

This commit consolidates all this logic into the transport action
and replaces the deletion task with a plain one that needs not be
aware of deletion logic.",https://github.com/elastic/elasticsearch/commit/8e3a0fad9d71b9bf117975b1194a6019c1840d27
3426,3426.0,3600.0,elastic/elasticsearch,f598297f55fa60df9fdefa4f34574d485b600b20,"Add predicate_token_filter (#33431)

This allows users to filter out tokens from a TokenStream using painless scripts, 
instead of having to write specialised Java code and packaging it up into a plugin.

The commit also refactors the AnalysisPredicateScript.Token class so that it wraps
and makes read-only an AttributeSource.",https://github.com/elastic/elasticsearch/commit/f598297f55fa60df9fdefa4f34574d485b600b20
3427,3427.0,3601.0,elastic/elasticsearch,8e05ce567fe734ed4d9eb299d5f4a972a200fcf9,"[ML] Rename input_fields to column_names in file structure (#33568)

This change tightens up the meaning of the ""input_fields"" field
in the file structure finder output.  Previously it was permitted
but not calculated for JSON and XML files.  Following this change
the field is called ""column_names"" and is only permitted for
delimited files.

Additionally the way the column names are set for headerless
delimited files is refactored to encapsulate the way they're
named to one line of the code rather than having the same
logic in two places.",https://github.com/elastic/elasticsearch/commit/8e05ce567fe734ed4d9eb299d5f4a972a200fcf9
3428,3428.0,3602.0,elastic/elasticsearch,b93507608a5f975f28a4c4639b2a822737bc1e84,"Merge branch 'master' into ccr

* master:
  Mute test watcher usage stats output
  [Rollup] Fix FullClusterRestart test
  Adjust soft-deletes version after backport into 6.5
  completely drop `index.shard.check_on_startup: fix` for 7.0 (#33194)
  Fix AwaitsFix issue number
  Mute SmokeTestWatcherWithSecurityIT testsi
  drop `index.shard.check_on_startup: fix` (#32279)
  tracked at
  [DOCS] Moves ml folder from x-pack/docs to docs (#33248)
  [DOCS] Move rollup APIs to docs (#31450)
  [DOCS] Rename X-Pack Commands section (#33005)
  TEST: Disable soft-deletes in ParentChildTestCase
  Fixes SecurityIntegTestCase so it always adds at least one alias (#33296)
  Fix pom for build-tools (#33300)
  Lazy evaluate java9home (#33301)
  SQL: test coverage for JdbcResultSet (#32813)
  Work around to be able to generate eclipse projects (#33295)
  Highlight that index_phrases only works if no slop is used (#33303)
  Different handling for security specific errors in the CLI. Fix for https://github.com/elastic/elasticsearch/issues/33230 (#33255)
  [ML] Refactor delimited file structure detection (#33233)
  SQL: Support multi-index format as table identifier (#33278)
  MINOR: Remove Dead Code from PathTrie (#33280)
  Enable forbiddenapis server java9 (#33245)",https://github.com/elastic/elasticsearch/commit/b93507608a5f975f28a4c4639b2a822737bc1e84
3429,3429.0,3603.0,elastic/elasticsearch,7345878d33a00ce95eae929f79b2da0b326d182d,"[ML] Refactor delimited file structure detection (#33233)

1. Use the term ""delimited"" rather than ""separated values""
2. Use a single factory class with arguments to specify the
   delimiter and identification constraints

This change makes it easier to add support for other
delimiter characters.",https://github.com/elastic/elasticsearch/commit/7345878d33a00ce95eae929f79b2da0b326d182d
3430,3430.0,3604.0,elastic/elasticsearch,0e5d42ca38a174153d64cd8fea91afe5e8ce7e4e,"Merge branch 'master' into ccr

* master:
  Adjust BWC version on mapping version
  Token API supports the client_credentials grant (#33106)
  Build: forked compiler max memory matches jvmArgs (#33138)
  Introduce mapping version to index metadata (#33147)
  SQL: Enable aggregations to create a separate bucket for missing values (#32832)
  Fix grammar in contributing docs
  SECURITY: Fix Compile Error in ReservedRealmTests (#33166)
  APM server monitoring (#32515)
  Support only string `format` in date, root object & date range (#28117)
  [Rollup] Move toBuilders() methods out of rollup config objects (#32585)
  Fix forbiddenapis on java 11  (#33116)
  Apply publishing to genreate pom (#33094)
  Have circuit breaker succeed on unknown mem usage
  Do not lose default mapper on metadata updates (#33153)
  Fix a mappings update test (#33146)
  Reload Secure Settings REST specs & docs (#32990)
  Refactor CachingUsernamePassword realm (#32646)",https://github.com/elastic/elasticsearch/commit/0e5d42ca38a174153d64cd8fea91afe5e8ce7e4e
3431,3431.0,3605.0,elastic/elasticsearch,c567ec4a0fee228be7d3c45c6be5c140cdb83db9,"Refactor CachingUsernamePassword realm (#32646)

Refactors the logic of authentication and lookup caching in
`CachingUsernamePasswordRealm`. Nothing changed about
the single-inflight-request or positive caching.",https://github.com/elastic/elasticsearch/commit/c567ec4a0fee228be7d3c45c6be5c140cdb83db9
3432,3432.0,3606.0,elastic/elasticsearch,67bfb765ee8b7958a4d7a26b17f653ae8955878d,"Refactor Netty4Utils#maybeDie (#33021)

In our Netty layer we have had to take extra precautions against Netty
catching throwables which prevents them from reaching the uncaught
exception handler. This code has taken on additional uses in NIO layer
and now in the scheduler engine because there are other components in
stack traces that could catch throwables and suppress them from reaching
the uncaught exception handler. This commit is a simple cleanup of the
iterative evolution of this code to refactor all uses into a single
method in ExceptionsHelper.",https://github.com/elastic/elasticsearch/commit/67bfb765ee8b7958a4d7a26b17f653ae8955878d
3433,3433.0,3607.0,elastic/elasticsearch,b02150a5ed8bd4f2dc393bfd3b6de0518149c468,"HLRC: close job refactor (#33031)

* HLRC: close job refactor

* Changing refactor to make job_id a string

* Changing set entity methodology",https://github.com/elastic/elasticsearch/commit/b02150a5ed8bd4f2dc393bfd3b6de0518149c468
3434,3434.0,3608.0,elastic/elasticsearch,28d12b05b77472d0596df319d7129cea3ba9154a,"Move ML tests to be sub-projects of ML (#33026)

This commit moves the ML QA tests to be a sub-project of ML. The purpose
of this refactoring is to enable ML developers to run
:x-pack:plugin:ml:check and run the vast majority of a ML tests with a
single command (this still does not contain the ML REST tests, nor the
upgrade tests). This simplifies local development for faster iteration.",https://github.com/elastic/elasticsearch/commit/28d12b05b77472d0596df319d7129cea3ba9154a
3435,3435.0,3609.0,elastic/elasticsearch,8fc213f237ccffc12870a7a0d845c91d8ecbab3b,"INGEST: Move all Pipeline State into IngestService (#32617)

* INGEST: Move all Pipeline State into IngestService

* Moves all pipeline state into the ingest service
   * Retains the existing pipeline store and pipeline execution service as inner classes to make the review easier, they should be flattened out in the next step
   * All tests for these classes were copied (and adapted) to the ingest service tests
* This is a refactoring step to enable a clean implementation of a pipeline processor (See #32473)",https://github.com/elastic/elasticsearch/commit/8fc213f237ccffc12870a7a0d845c91d8ecbab3b
3436,3436.0,3610.0,elastic/elasticsearch,3fa36807f87ad90af593e86f9ed843ced3260973,"Watcher: Properly find next valid date in cron expressions (#32734)

When a list/an array of cron expressions is provided, and one of those addresses
is already expired, the expired one will be considered as an option
instead of the valid next one.

This commit also reduces the visibility of the CronnableSchedule and
refactors a comparator to look like java 8.",https://github.com/elastic/elasticsearch/commit/3fa36807f87ad90af593e86f9ed843ced3260973
3437,3437.0,3611.0,elastic/elasticsearch,c7b1ba33aa217c8624d159c3aa5ac2a0cb6f31b8,"[ML] Refactor ProcessCtrl into Autodetect and Normalizer builders (#32720)

This moves the helper functionality for creating the autodetect
and mormalizer processes into corresponding builders.",https://github.com/elastic/elasticsearch/commit/c7b1ba33aa217c8624d159c3aa5ac2a0cb6f31b8
3438,3438.0,3612.0,elastic/elasticsearch,f58ed21720d186a3af5ee9eabc1e96a83a0aa6ca,"Refactor TransportShardBulkAction to better support retries (#31821)

Processing bulk request goes item by item. Sometimes during processing, we need to stop execution and wait for a new mapping update to be processed by the node. This is currently achieved by throwing a `RetryOnPrimaryException`, which is caught higher up. When the exception is caught, we wait for the next cluster state to arrive and process the request again. Sadly this is a problem because all operations that were already done until the mapping change was required are applied again and get new sequence numbers. This in turn means that the previously issued sequence numbers are never replicated to the replicas. That causes the local checkpoint of those shards to be stuck and with it all the seq# based infrastructure.

This commit refactors how we deal with retries with the goal of removing  `RetryOnPrimaryException` and `RetryOnReplicaException` (not done yet). It achieves so by introducing a class `BulkPrimaryExecutionContext` that is used the capture the execution state and allows continuing from where the execution stopped. The class also formalizes the steps each item has to go through:
1) A translation phase for updates
2) Execution phase (always index/delete)
3) Waiting for a mapping update to come in, if needed
4) Requires a retry (for updates and cases where the mapping are still not available after the put mapping call returns)
5) A finalization phase which allows updates to the index/delete result to an update result.",https://github.com/elastic/elasticsearch/commit/f58ed21720d186a3af5ee9eabc1e96a83a0aa6ca
3439,3439.0,3613.0,elastic/elasticsearch,6f93911955dfe0e694110271cb9dd0ab2991240d,"Fix AutoIntervalDateHistogram.testReduce random failures (#32301)

1. Refactor the test to use the same roundings as the implementation.
2. Refactor the test verification logic to use `innerIntervals` when rounding.",https://github.com/elastic/elasticsearch/commit/6f93911955dfe0e694110271cb9dd0ab2991240d
3440,3440.0,3614.0,elastic/elasticsearch,7aa8a0a92787b116edd9044c131115e68459d932,"INGEST: Extend KV Processor (#31789) (#32232)

* INGEST: Extend KV Processor (#31789)

Added more capabilities supported by LS to the KV processor:
* Stripping of brackets and quotes from values (`include_brackets` in corresponding LS filter)
* Adding key prefixes
* Trimming specified chars from keys and values

Refactored the way the filter is configured to avoid conditionals during execution.
Refactored Tests a little to not have to add more redundant getters for new parameters.

Relates #31786
* Add documentation",https://github.com/elastic/elasticsearch/commit/7aa8a0a92787b116edd9044c131115e68459d932
3441,3441.0,3615.0,elastic/elasticsearch,9e529d9d584ae6f6978ac09056b73d9ccdde4a3c,"Enable testing in FIPS140 JVM (#31666)

Ensure our tests can run in a FIPS JVM

JKS keystores cannot be used in a FIPS JVM as attempting to use one
in order to init a KeyManagerFactory or a TrustManagerFactory is not
allowed.( JKS keystore algorithms for private key encryption are not
FIPS 140 approved)
This commit replaces JKS keystores in our tests with the
corresponding PEM encoded key and certificates both for key and trust
configurations.
Whenever it's not possible to refactor the test, i.e. when we are
testing that we can load a JKS keystore, etc. we attempt to
mute the test when we are running in FIPS 140 JVM. Testing for the
JVM is naive and is based on the name of the security provider as
we would control the testing infrastrtucture and so this would be
reliable enough.
Other cases of tests being muted are the ones that involve custom
TrustStoreManagers or KeyStoreManagers, null TLS Ciphers and the
SAMLAuthneticator class as we cannot sign XML documents in the
way we were doing. SAMLAuthenticator tests in a FIPS JVM can be
reenabled with precomputed and signed SAML messages at a later stage.

IT will be covered in a subsequent PR",https://github.com/elastic/elasticsearch/commit/9e529d9d584ae6f6978ac09056b73d9ccdde4a3c
3442,3442.0,3616.0,elastic/elasticsearch,0edb096eb4763e2149c6c67aa8842198ecefb108,"Adds a new auto-interval date histogram (#28993)

* Adds a new auto-interval date histogram

This change adds a new type of histogram aggregation called `auto_date_histogram` where you can specify the target number of buckets you require and it will find an appropriate interval for the returned buckets. The aggregation works by first collecting documents in buckets at second interval, when it has created more than the target number of buckets it merges these buckets into minute interval bucket and continues collecting until it reaches the target number of buckets again. It will keep merging buckets when it exceeds the target until either collection is finished or the highest interval (currently years) is reached. A similar process happens at reduce time.

This aggregation intentionally does not support min_doc_count, offest and extended_bounds to keep the already complex logic from becoming more complex. The aggregation accepts sub-aggregations but will always operate in `breadth_first` mode deferring the computation of sub-aggregations until the final buckets from the shard are known. min_doc_count is effectively hard-coded to zero meaning that we will insert empty buckets where necessary.

Closes #9572

* Adds documentation

* Added sub aggregator test

* Fixes failing docs test

* Brings branch up to date with master changes

* trying to get tests to pass again

* Fixes multiBucketConsumer accounting

* Collects more buckets than needed on shards

This gives us more options at reduce time in terms of how we do the
final merge of the buckeets to produce the final result

* Revert ""Collects more buckets than needed on shards""

This reverts commit 993c782d117892af9a3c86a51921cdee630a3ac5.

* Adds ability to merge within a rounding

* Fixes nonn-timezone doc test failure

* Fix time zone tests

* iterates on tests

* Adds test case and documentation changes

Added some notes in the documentation about the intervals that can bbe
returned.

Also added a test case that utilises the merging of conseecutive buckets

* Fixes performance bug

The bug meant that getAppropriate rounding look a huge amount of time
if the range of the data was large but also sparsely populated. In
these situations the rounding would be very low so iterating through
the rounding values from the min key to the max keey look a long time
(~120 seconds in one test).

The solution is to add a rough estimate first which chooses the
rounding based just on the long values of the min and max keeys alone
but selects the rounding one lower than the one it thinks is
appropriate so the accurate method can choose the final rounding taking
into account the fact that intervals are not always fixed length.

Thee commit also adds more tests

* Changes to only do complex reduction on final reduce

* merge latest with master

* correct tests and add a new test case for 10k buckets

* refactor to perform bucket number check in innerBuild

* correctly derive bucket setting, update tests to increase bucket threshold

* fix checkstyle

* address code review comments

* add documentation for default buckets

* fix typo",https://github.com/elastic/elasticsearch/commit/0edb096eb4763e2149c6c67aa8842198ecefb108
3443,3443.0,3617.0,elastic/elasticsearch,3189ef49a5d4de87ec906764e7d703445df0c0dc,"[X-Pack] Beats centralized management: security role + licensing (#30520)

* Adding Beats x-pack plugin + index templates

* Adding built-in roles for Beats central management

* Fixing typo

* Refactoring: extract common code into method

* More refactoring for more code reuse

* Use a single index for Beats management

* Rename ""fragment"" to ""block""

* Adding configuration block type

* Expand kibana_system role to include Beats management index privileges

* Fixing syntax

* Adding test

* Adding asserting for reserved role

* Fixing privileges

* Updating template

* Removing beats plugin

* Fixing tests

* Fixing role variable name

* Fixing assertions

* Switching to preferred syntax for boolean false checks

* Making class final

* Making variables final

* Updating Basic license message to be more accurate",https://github.com/elastic/elasticsearch/commit/3189ef49a5d4de87ec906764e7d703445df0c0dc
3444,3444.0,3618.0,elastic/elasticsearch,8ecfcc3b80701668449959bd9e33de6d34a175e5,"muted tests that will be replaced by the shard follow task refactoring:
https://github.com/elastic/elasticsearch/pull/31581",https://github.com/elastic/elasticsearch/commit/8ecfcc3b80701668449959bd9e33de6d34a175e5
3445,3445.0,3619.0,elastic/elasticsearch,2c10cd3e1dfaef5054d44a373c63ec22c7da962a,"Merge branch 'master' into ccr

* master:
  Docs: Remove duplicate test setup
  Print output when the name checker IT fails (#31660)
  Fix syntax errors in get-snapshots docs (#31656)
  Docs: Fix description of percentile ranks example example (#31652)
  Add MultiSearchTemplate support to High Level Rest client (#30836)
  Add test for low-level client round-robin behaviour (#31616)
  SQL: Refactor package names of sql-proto and sql-shared-proto projects (#31622)
  Remove deprecation warnings to prepare for Gradle 5 (sourceSets.main.output.classesDirs) (#30389)
  Correct integTest enable logic (#31646)
  Fix missing get-snapshots docs reference #31645
  Do not check for Azure container existence (#31617)
  Merge AwsS3Service and InternalAwsS3Service in a S3Service class (#31580)
  Upgrade gradle wrapper to 4.8 (#31525)
  Only set vm.max_map_count if greater than default (#31512)
  Add Get Snapshots High Level REST API (#31537)
  QA: Merge query-builder-bwc to restart test (#30979)
  Update reindex.asciidoc (#31626)
  Docs: Skip xpack snippet tests if no xpack (#31619)
  mute CreateSnapshotRequestTests
  HLRest: Fix test for explain API
  [TEST] Fix RemoteClusterConnectionTests
  Add Create Snapshot to High-Level Rest Client (#31215)
  Remove legacy MetaDataStateFormat (#31603)
  Add explain API to high-level REST client (#31387)
  Preserve thread context when connecting to remote cluster (#31574)
  Unify headers for full text queries
  Remove redundant 'minimum_should_match'
  JDBC driver prepared statement set* methods  (#31494)
  [TEST] call yaml client close method from test suite (#31591)",https://github.com/elastic/elasticsearch/commit/2c10cd3e1dfaef5054d44a373c63ec22c7da962a
3446,3446.0,3620.0,elastic/elasticsearch,0b1a0641efb306caf073a63d5683fe0deade3f58,"SQL: Refactor package names of sql-proto and sql-shared-proto projects (#31622)

- renames project `sql-proto` to `sql-action`,
- renames package `sql.plugin` to `sql.action`
- renames project `sql-shared-client` to `sql-client`
- renames package `sql.shard.client` to `sql.client`
- renames project `sql-shared-proto` to `sql-proto`

Closes #31593",https://github.com/elastic/elasticsearch/commit/0b1a0641efb306caf073a63d5683fe0deade3f58
3447,3447.0,3621.0,elastic/elasticsearch,bf5866048262d897ede629293b6fe26c3b108b7a,"Remove all unused imports and fix CRLF (#31207)

The X-Pack opening and the recent other refactorings left a lot of 
unused imports in the codebase. This commit removes them all.",https://github.com/elastic/elasticsearch/commit/bf5866048262d897ede629293b6fe26c3b108b7a
3448,3448.0,3622.0,elastic/elasticsearch,e82e5cc2e86c8a32255d7d791d4062823fe1521c,"high level REST api: cancel task (#30745)

* Initial commit of rest high level exposure of cancel task

* fix javadocs

* address some code review comments

* update branch to use tasks namespace instead of cluster

* High-level client: list tasks failure to not lose nodeId

This commit reworks testing for `ListTasksResponse` so that random
fields insertion can be tested and xcontent equivalence can be checked
too. Proper exclusions need to be configured, and failures need to be
tested separately. This helped finding a little problem, whenever there
is a node failure returned, the nodeId was lost as it was never printed
out as part of the exception toXContent.

* added comment

* merge from master

* re-work CancelTasksResponseTests to separate XContent failure cases from non-failure cases

* remove duplication of logic in parser creation

* code review changes

* refactor TasksClient to support RequestOptions

* add tests for parent task id

* address final PR review comments, mostly formatting and such",https://github.com/elastic/elasticsearch/commit/e82e5cc2e86c8a32255d7d791d4062823fe1521c
3449,3449.0,3623.0,elastic/elasticsearch,01b5a46c24d24895aa3a4eb78917534161fb76d4,"Pass main class by environment variable on Windows (#31156)

A previous refactoring of the CLI scripts migrated all of the CLI tools
to shell to a common script, elasticsearch-cli. This approach is fine in
Bash where it is easy to tear arguments apart but it doesn't work so
well on Windows where quoting is insane. To avoid having to tear the
arguments apart to separate the first argument to elasticsearch-cli from
the remaining arguments, we instead choose a strategy where we can avoid
tearing the arguments apart. To do this, we will instead pass the main
class by an environment variable and then we can pass the arguments
straight through. This will let us avoid awful quoting issues on
Windows. This is the Windows side of that effort and the Bash side was
in a previous commit.",https://github.com/elastic/elasticsearch/commit/01b5a46c24d24895aa3a4eb78917534161fb76d4
3450,3450.0,3624.0,elastic/elasticsearch,95795c8935b2c421ae47dcbb0e2300ac2905ec5a,"Pass main class by environment variable (#31149)

A previous refactoring of the CLI scripts migrated all of the CLI tools
to shell to a common script, elasticsearch-cli. This approach is fine in
Bash where it is easy to tear arguments apart but it doesn't work so
well on Windows where quoting is insane. To avoid having to tear the
arguments apart to separate the first argument to elasticsearch-cli from
the remaining arguments, we instead choose a strategy where we can avoid
tearing the arguments apart. To do this, we will instead pass the main
class by an environment variable and then we can pass the arguments
straight through. This will let us avoid awful quoting issues on
Windows. This is the non-Windows side of that effort and the Windows
side will be in a follow-up.",https://github.com/elastic/elasticsearch/commit/95795c8935b2c421ae47dcbb0e2300ac2905ec5a
3451,3451.0,3625.0,elastic/elasticsearch,ba78aa8c02b28b5a375fa2155d16e0d4b6aeaf0c,"Merge branch 'master' into ccr

* master:
  Deprecates indexing and querying a context completion field without context (#30712)
  Refactor Sniffer and make it testable (#29638)
  [Docs] Fix typo in Min Aggregation reference (#30899)",https://github.com/elastic/elasticsearch/commit/ba78aa8c02b28b5a375fa2155d16e0d4b6aeaf0c
3452,3452.0,3626.0,elastic/elasticsearch,63f3a6113462525f8c882b0cbb7e364509f9566e,"Refactor Sniffer and make it testable (#29638)

This commit reworks the Sniffer component to simplify it and make it possible to test it.

In particular, it no longer takes out the host that failed when sniffing on failure, but rather relies on whatever the cluster returns. This is the result of some valid comments from #27985. Taking out one single host is too naive, hard to test and debug.

A new Scheduler abstraction is introduced to abstract the tasks scheduling away and make it possible to plug in any test implementation and take out timing aspects when testing.

Concurrency aspects have also been improved, synchronized methods are no longer required. At the same time, we were able to take #27697 and #25701 into account and fix them, especially now that we can more easily add tests.

Last but not least, unit tests are added for the Sniffer component, long overdue.

Closes #27697
Closes #25701",https://github.com/elastic/elasticsearch/commit/63f3a6113462525f8c882b0cbb7e364509f9566e
3453,3453.0,3627.0,elastic/elasticsearch,ca9f307b0a72286aaa6595f2a0087c1ddd6f75c6,"add move-to-step endpoint for lifecycles (#30636)


This change introduces a new rest endpoint for lifecycles that
allows users to explicitely jump to earlier or later steps in the
policy's execution. This is useful for re-running tasks that may
be stuck, or were incorrectly configured.

Endpoint can be found in this format:

POST _xpack/index_lifecycle/_move/<index_name>
{
  current_step: ...
  next_step: ...
}

This operates on a per-index basis and does not resolve the param to
multiple indices.

The action is validated so that the index's state is only modified if
all of the following are true:

- <index_name> has an existing policy associated with it
- current_step is the actual step the index is currently on (for sanity)
- next_step is a valid step within the policy-step-registry

* respond to reviewer

refactor to stop using MoveToNextStepUpdateTask directly

* remove getPolicyRegistry

* rename validateMoveToNextStep",https://github.com/elastic/elasticsearch/commit/ca9f307b0a72286aaa6595f2a0087c1ddd6f75c6
3454,3454.0,3628.0,elastic/elasticsearch,a75b8adce57c4fe803cb4b79e202f673e969daef,"Refactors ClientHelper to combine header logic (#30620)

* Refactors ClientHelper to combine header logic

This change removes all the `*ClientHelper` classes which were
repeating logic between plugins and instead adds
`ClientHelper.executeWithHeaders()` and
`ClientHelper.executeWithHeadersAsync()` methods to centralise the
logic for executing requests with stored security headers.

* Removes Watcher headers constant",https://github.com/elastic/elasticsearch/commit/a75b8adce57c4fe803cb4b79e202f673e969daef
3455,3455.0,3629.0,elastic/elasticsearch,2cb71d0947947c94ccd78741283df6c966aad1db,"Refactor IndicesOptions to not be byte-based (#30586)

* Refactor IndicesOptions to not be byte-based

This refactors IndicesOptions to be enum/enummap based rather than using a byte
as a bitmap for each of the options. This is necessary because we'd like to add
additional options, but we ran out of bits.

Backwards compatibility is kept for earlier versions so the option serialization
does not change the options.

Relates sort of to #30188",https://github.com/elastic/elasticsearch/commit/2cb71d0947947c94ccd78741283df6c966aad1db
3456,3456.0,3630.0,elastic/elasticsearch,f0e92676b13f0f5dd259f42bfec38a831a40cc2e,"Tests: Simplify VersionUtils released version splitting (#30322)

This commit refactors VersionUtils.resolveReleasedVersions to be
simpler, and in the process fixes the behavior to match that of
VersionCollection.groovy.

closes #30133",https://github.com/elastic/elasticsearch/commit/f0e92676b13f0f5dd259f42bfec38a831a40cc2e
3457,3457.0,3631.0,elastic/elasticsearch,057cdffed54745022509322e65600f10c415421e,"[ML] Refactor DataStreamDiagnostics to use array (#30129)

This commit refactors the DataStreamDiagnostics class
achieving the following advantages:

- simpler code; by encapsulating the moving bucket histogram
into its own class
- better performance; by using an array to store the buckets
instead of a map
- explicit handling of gap buckets; in preparation of fixing #30080",https://github.com/elastic/elasticsearch/commit/057cdffed54745022509322e65600f10c415421e
3458,3458.0,3632.0,elastic/elasticsearch,4a537ef03cc83ad4774258216a819ae8e549edae,"Bulk operation fail to replicate operations when a mapping update times out (#30244)

Starting with the refactoring in https://github.com/elastic/elasticsearch/pull/22778 (released in 5.3) we may fail to properly replicate operation when a mapping update on master fails. If a bulk
operations needs a mapping update half way, it will send a request to the master before continuing 
to index the operations. If that request times out or isn't acked (i.e., even one node in the cluster 
didn't process it within 30s), we end up throwing the exception and aborting the entire bulk. This is 
a problem because all operations that were processed so far are not replicated any more to the 
replicas.  Although these operations were never ""acked"" to the user (we threw an error) it cause the 
local checkpoint on the replicas to lag (on 6.x) and the primary and replica to diverge. 

This PR does a couple of things:
1) Most importantly, treat *any* mapping update failure as a document level failure, meaning only 
    the relevant indexing operation will fail.
2) Removes the mapping update callbacks from `IndexShard.applyIndexOperationOnPrimary` and 
    similar methods for simpler execution. We don't use exceptions any more when a mapping 
    update was successful.

I think we need to do more work here (the fact that a single slow node can prevent those mappings 
updates from being acked and thus fail operations is bad), but I want to keep this as small as I can 
(it is already too big).",https://github.com/elastic/elasticsearch/commit/4a537ef03cc83ad4774258216a819ae8e549edae
3459,3459.0,3633.0,elastic/elasticsearch,d7be9185c80a94e5f8b06cd372d950fad9707e36,"MapperService to wrap a single DocumentMapper. (#29511)

This refactors MapperService so that it wraps a single `DocumentMapper` rather
than a `Map<String, DocumentMapper>`. We will need follow-ups since I haven't
fixed most APIs that still expose collections of types of mappers, but this is
a start...",https://github.com/elastic/elasticsearch/commit/d7be9185c80a94e5f8b06cd372d950fad9707e36
3460,3460.0,3634.0,elastic/elasticsearch,689d628d67df02bfed08673fbe7d95a2497fa315,"move phase-after steps to have the previous phase's phase in its key (#4387)

Previously, phase X's `after` step had `X` as its associated phase. This causes confusion because
we have only entered phase `X` once the `after` step is complete. Therefore, this refactor
pushes the after's phase to be associated with the previous phase. This first phase is an exception. 
The first phase's `after` step is associated with the first phase (not some non-existent prior phase).",https://github.com/elastic/elasticsearch/commit/689d628d67df02bfed08673fbe7d95a2497fa315
3461,3461.0,3635.0,elastic/elasticsearch,73ee5a4aa039f04ed9868335cf07a5291f465c67,"introduce refactored ShrinkAction

this resulted in a few new steps being introduced

- AliasStep
- EnoughShardsWaitStep
- ShrinkStep
- ShrunkenIndexCheckStep",https://github.com/elastic/elasticsearch/commit/73ee5a4aa039f04ed9868335cf07a5291f465c67
3462,3462.0,3636.0,elastic/elasticsearch,ef34f982f11d706c3d57e1d78e0c6687c2daccf5,"refactor a collection of step-related things + shrink_step

- added ShrinkStep/Tests
- AsyncActionStep now passes in IndexMetaData instead of Index
- Delete usage of ClusterStateActionStep
- with ClusterStateActionStep gone, InitializePolicyContextStep
  is the only other ClusterState-nonWait step
- Migrate setting-updates to UpdateSettingsStep",https://github.com/elastic/elasticsearch/commit/ef34f982f11d706c3d57e1d78e0c6687c2daccf5
3463,3463.0,3637.0,elastic/elasticsearch,c341b41c547d4c32d11500799b0091e4b6960b15,"[TEST] Temporarily silence MovAvgIT tests due to change in double comparisons

#29409 removed the nearlyEquals() double comparison snippet, which
makes these tests very flaky because they can generate very large or
very small doubles which don't work well with absolute error comparison.

We need to either refactor these tests to guarantee they stay in a small
range (which could be difficult due to holt/holt-winters) or re-implement
the more robust double comparison.

Tracking issue: #29456",https://github.com/elastic/elasticsearch/commit/c341b41c547d4c32d11500799b0091e4b6960b15
3464,3464.0,3638.0,elastic/elasticsearch,f709fcd0833b80e276a2ad92e42c1dff71f8c27d,"Watcher: Refactor/Fix TransportWatcherServiceAction (elastic/x-pack-elasticsearch#4240)

This commit fixes several issues with the current implementation of
starting & stopping watcher

1. The WatcherServiceResponse was always returning a message, that the
   request was acknowledged, completely independent from the fact if it was
   or not.
2. A new cluster state instance was always returned, regardless if the
   state had changed or not (which is explicitely mentioned in the
   javadocs to check for this)
3. The AckedClusterStateUpdateTask now returns a proper WatcherServiceResponse
4. A failure now gets logged

Relates elastic/x-pack-elasticsearch#4225 (this is just a hunch for now)

Original commit: elastic/x-pack-elasticsearch@f4c1749f95a574dee3211c59250df3d206256b3c",https://github.com/elastic/elasticsearch/commit/f709fcd0833b80e276a2ad92e42c1dff71f8c27d
3465,3465.0,3639.0,elastic/elasticsearch,179074d3b0bf9cc684f1d5593d6b6fadf6b21d1f,"Refactors steps and adds some execution logic

This is far from complete but its necessary to push so the new step classes can be shared and used.",https://github.com/elastic/elasticsearch/commit/179074d3b0bf9cc684f1d5593d6b6fadf6b21d1f
3466,3466.0,3640.0,elastic/elasticsearch,4417580d053f1b61966b0c1f01881ae710c6a331,"Remove leftover tests.rest.spec property from docs (#29279)

We previously had a property to specify the location of the REST test
spec files but this was removed in a previous refactoring yet left
behind in the docs. This commit removes the last remaining vestige of
this parameter.",https://github.com/elastic/elasticsearch/commit/4417580d053f1b61966b0c1f01881ae710c6a331
3467,3467.0,3641.0,elastic/elasticsearch,2aaa0573875632efef83e79f60f3f5aa882d2331,"Propagate ignore_unmapped to inner_hits (#29261)

In 5.2 `ignore_unmapped` was added to `inner_hits` in order to ignore invalid mapping.
This value was automatically set to the value defined in the parent query (`nested`, `has_child`, `has_parent`) but the refactoring of the parent/child in 5.6 removed this behavior unintentionally.
This commit restores this behavior but also makes sure that we always automatically enforce this value when the query builder is used directly (previously this was only done by the XContent deserialization).

Closes #29071",https://github.com/elastic/elasticsearch/commit/2aaa0573875632efef83e79f60f3f5aa882d2331
3468,3468.0,3642.0,elastic/elasticsearch,57821cd55a01a2ae7ea06a3885624d84f32c4a07,moar refactor for steps,https://github.com/elastic/elasticsearch/commit/57821cd55a01a2ae7ea06a3885624d84f32c4a07
3469,3469.0,3643.0,elastic/elasticsearch,5288235ca3d8ad8437952aa77fd5b89075f21018,"Optimize the composite aggregation for match_all and range queries (#28745)

This change refactors the composite aggregation to add an execution mode that visits documents in the order of the values
present in the leading source of the composite definition. This mode does not need to visit all documents since it can early terminate
the collection when the leading source value is greater than the lowest value in the queue.
Instead of collecting the documents in the order of their doc_id, this mode uses the inverted lists (or the bkd tree for numerics) to collect documents
in the order of the values present in the leading source.
For instance the following aggregation:

```
""composite"" : {
  ""sources"" : [
    { ""value1"": { ""terms"" : { ""field"": ""timestamp"", ""order"": ""asc"" } } }
  ],
  ""size"": 10
}
```
... can use the field `timestamp` to collect the documents with the 10 lowest values for the field instead of visiting all documents.
For composite aggregation with more than one source the execution can early terminate as soon as one of the 10 lowest values produces enough
composite buckets. For instance if visiting the first two lowest timestamp created 10 composite buckets we can early terminate the collection since it
is guaranteed that the third lowest timestamp cannot create a composite key that compares lower than the one already visited.

This mode can execute iff:
 * The leading source in the composite definition uses an indexed field of type `date` (works also with `date_histogram` source), `integer`, `long` or `keyword`.
 * The query is a match_all query or a range query over the field that is used as the leading source in the composite definition.
 * The sort order of the leading source is the natural order (ascending since postings and numerics are sorted in ascending order only).

If these conditions are not met this aggregation visits each document like any other agg.",https://github.com/elastic/elasticsearch/commit/5288235ca3d8ad8437952aa77fd5b89075f21018
3470,3470.0,3644.0,elastic/elasticsearch,97703bf0da329c488fbb776cc00bfe19b1d8d1db,"[ML] Refactor method to process model size stats (elastic/x-pack-elasticsearch#4175)

Original commit: elastic/x-pack-elasticsearch@6262ff33a98c4a9fb35cae7bcffc1cfb6af5b3a4",https://github.com/elastic/elasticsearch/commit/97703bf0da329c488fbb776cc00bfe19b1d8d1db
3471,3471.0,3645.0,elastic/elasticsearch,57946a97dfb9cc40b21822e97c615280f111f69c,"X-Pack-Security: Making setup-passwords work with protected keystores (elastic/x-pack-elasticsearch#3918)

Changes are done in SetupPasswordTool to load the keystore
and set security settings to load password protected keys in SSL configuration.
Check for the verification mode and appropriately use hostname verifier.
Close the keystore after setup-password is complete.
Unit test for CommandLineHttpClient

TODO: TLS documentation needs to be fixed, which will be taken up as a separate
fix due to documentation refactoring in progress.

relates elastic/x-pack-elasticsearch#3760 

Original commit: elastic/x-pack-elasticsearch@72e8666e21ce971329af645e87b5900a9ade3fae",https://github.com/elastic/elasticsearch/commit/57946a97dfb9cc40b21822e97c615280f111f69c
3472,3472.0,3646.0,elastic/elasticsearch,b57bd695f237693a22c994cf544ec2ecbaebaa1c,"Small code cleanups and refactorings in persistent tasks (#29109)

This commit consists of small code cleanups and refactorings in the
persistent tasks framework. Most changes are in
PersistentTasksClusterService where some methods have been renamed
or merged together, documentation has been added, unused code removed
in order to improve readability of the code.",https://github.com/elastic/elasticsearch/commit/b57bd695f237693a22c994cf544ec2ecbaebaa1c
3473,3473.0,3647.0,elastic/elasticsearch,7afe5ad9438e13a9e1461513f561e68641879533,"Restore tiebreaker for cross fields query (#28935)

This commit restores the handling of tiebreaker for multi_match
cross fields query. This functionality was lost during a refactoring
of the multi_match query (#25115).

Fixes #28933",https://github.com/elastic/elasticsearch/commit/7afe5ad9438e13a9e1461513f561e68641879533
3474,3474.0,3648.0,elastic/elasticsearch,62293ec1c9b68b9dd6b18c5e4e57558804bae8a4,"Plugins: Consolidate plugin and module loading code (#28815)

At one point, modules and plugins were very different. But effectively
now they are the same, just from different directories. This commit
unifies the loading methods so they are simply two different
directories. Note that the main codepath to load plugin bundles had
duplication (was not calling getPluginBundles) since previous
refactorings to add meta plugins. Note this change also rewords the
primary exception message when a plugin descriptor is missing, as the
wording asking if the plugin was built before 2.0 isn't really
applicable anymore (it is highly unlikely someone tries to install a 1.x
plugin on any modern version).",https://github.com/elastic/elasticsearch/commit/62293ec1c9b68b9dd6b18c5e4e57558804bae8a4
3475,3475.0,3649.0,elastic/elasticsearch,f54cb567b627a36b3b4972a7d0f5c1321c208fd0,"Fixed es_release_notes.pl script to work with the new github labels

It also now ignores docs, test, non-issue, refactoring, and build",https://github.com/elastic/elasticsearch/commit/f54cb567b627a36b3b4972a7d0f5c1321c208fd0
3476,3476.0,3650.0,elastic/elasticsearch,1c489ee8671dadd54110b9f8290565f92c973927,"Refactor/to x content fragments2 (#2329)

* Moves more classes over to ToXContentObject/Fragment

* Removes ToXContentToBytes

* Removes ToXContent from Enums

* review comment fix

* slight change to use XContantHelper",https://github.com/elastic/elasticsearch/commit/1c489ee8671dadd54110b9f8290565f92c973927
3477,3477.0,3651.0,elastic/elasticsearch,5a8512bf4e28cfc24d220a266f2aaae6da7ab956,"Persistent Tasks: refactor PersistentTasksService to use ActionListener (#937)

PersistentTasksService methods are not using ActionListener<PersistentTask<?>> instead of PersistentTaskOperationListener.",https://github.com/elastic/elasticsearch/commit/5a8512bf4e28cfc24d220a266f2aaae6da7ab956
3478,3478.0,3652.0,elastic/elasticsearch,37fad048794707d37e7c97f478a06d3c42a41f3e,"Persistent Tasks: Merge NodePersistentTask and RunningPersistentTask (#842)

Refactors NodePersistentTask and RunningPersistentTask into a single AllocatedPersistentTask. Makes it possible to update Persistent Task Status via AllocatedPersistentTask.",https://github.com/elastic/elasticsearch/commit/37fad048794707d37e7c97f478a06d3c42a41f3e
3479,3479.0,3653.0,elastic/elasticsearch,b33fc05492656a73f1b6f7b8094945c50a240db4,"Request and Status in Persistent Tasks should be serialized using their writable names

Refactors xcontent serialization of Request and Status to use their writable names instead of action name. That simplifies the parsing logic, allows reuse of the same status object for multiple actions and is consistent with how named objects in xcontent are used.",https://github.com/elastic/elasticsearch/commit/b33fc05492656a73f1b6f7b8094945c50a240db4
3480,3480.0,3654.0,elastic/elasticsearch,f5f679f92120a21eab27014c5f2fe63521719202,"testTranslogReplayWithFailure: do not assume engine is recoverable when disk errors stop

The test currently makes the assumption that if underlying directory stops throwing exceptions, we can always open the engine. This is not the case as some errors can cause a corruption marker to be placed in the store.

This commit refactors the test to only check that everything is OK if the engine was successfully opened. On top of that, there is no point in checking replay with no errors as we have another test for that.

Closes #28426",https://github.com/elastic/elasticsearch/commit/f5f679f92120a21eab27014c5f2fe63521719202
3481,3481.0,3655.0,elastic/elasticsearch,36bd849cd357b9185388a35c7416891831d15d3b,"SQL: Refactor the type handling (elastic/x-pack-elasticsearch#3694)

Separates ES types and field metadata.

Relates to elastic/x-pack-elasticsearch#3556

Original commit: elastic/x-pack-elasticsearch@c9601f33904c8b04f763bce33f4db5a0d09b9d04",https://github.com/elastic/elasticsearch/commit/36bd849cd357b9185388a35c7416891831d15d3b
3482,3482.0,3656.0,elastic/elasticsearch,29ece3c79f061504fa75f52284ca89698681ed0a,"[ML] Refactor update calendar params (elastic/x-pack-elasticsearch#3714)

Original commit: elastic/x-pack-elasticsearch@a7ef33b58a8634ca0873b1f6db2330130618118d",https://github.com/elastic/elasticsearch/commit/29ece3c79f061504fa75f52284ca89698681ed0a
3483,3483.0,3657.0,elastic/elasticsearch,697a08e742bb28f39c4ec428a599f420cff3a9b6,"[ML] Refactor so ML doesn't require PersistentTasksService at startup (elastic/x-pack-elasticsearch#3682)

At present the PersistentTasksService is created inside the ML plugin.
This is undesirable, as other plugins will use persistent tasks in the
near future.

This change refactors the startup code so that the PersistentTasksService
no longer needs to be passed to any constructors for ML components.

A future change will still be required to actually move the initialization
of the PersistentTasksClusterService, PersistentTasksService and
PersistentTasksExecutorRegistry out of the ML plugin, but following this
change it should be fairly simple.

Original commit: elastic/x-pack-elasticsearch@3c2a8e020e31960437f7bdf5555d6da33cce96c2",https://github.com/elastic/elasticsearch/commit/697a08e742bb28f39c4ec428a599f420cff3a9b6
3484,3484.0,3658.0,elastic/elasticsearch,2ad6a3a53820c9d841afbe665f8bc8a498a5bb42,"Cleanup the handling for bootstrap passwords (elastic/x-pack-elasticsearch#3470)

Minor refactoring on the reserved realm:
- Removed some duplicated code
- Added in some additional assertions
- Extended some testing
- Removed use of the obsolete ""allow_default_passwords"" from the test.

Original commit: elastic/x-pack-elasticsearch@584171d2bdb8e663c1a1174e554c39343761226e",https://github.com/elastic/elasticsearch/commit/2ad6a3a53820c9d841afbe665f8bc8a498a5bb42
3485,3485.0,3659.0,elastic/elasticsearch,3627feded7bbcbf3f8e79fcb8d05d32520d455eb,"Refactors lifecycle type to its own class (#3381)

To clean up the parsing of the LifecyclePolicy this change moves the LifecycleType to its own class so it can be created in the normal parsing of LifecyclePolicy rather than having to parse to an intermediary object first. The LifecycleType is an interface which can be implemented for different lifecycle types. These types shiould be singletons and are register with the NamedXContentRegistry and NamedWriteableRegistry only so they are available when reading from a stream or parsing.",https://github.com/elastic/elasticsearch/commit/3627feded7bbcbf3f8e79fcb8d05d32520d455eb
3486,3486.0,3660.0,elastic/elasticsearch,a8997387b79b46d42de16c8e8226bb9e878b42cd,"[ML] Calendar jobs endpoints (elastic/x-pack-elasticsearch#3320)

* Calendar jobs endpoints

* Refactor put and delete calendar job to use the same action

* Check jobs exist when creating the calendar

* Address review comments

* Add isGroupOrJobMethod

* Increase default page size for calendar query


Original commit: elastic/x-pack-elasticsearch@7484799fe952cdf3b22b6045f122a45305057be9",https://github.com/elastic/elasticsearch/commit/a8997387b79b46d42de16c8e8226bb9e878b42cd
3487,3487.0,3661.0,elastic/elasticsearch,6839f99ed0f870db442c7bffb70456471643aa4f,"SQL: Switch CLI to core-cli's Command and make it testable (elastic/x-pack-elasticsearch#3232)

Switches CLI to use the standard Elasticsearch Command and refactors it to be more testable. It doesn't change any cli functionality except using the bright color while displaying query results.

relates elastic/x-pack-elasticsearch#2881, elastic/x-pack-elasticsearch#3203, elastic/x-pack-elasticsearch#2990

Original commit: elastic/x-pack-elasticsearch@841f306d5031a7263c528e9208f0ff3a23293c16",https://github.com/elastic/elasticsearch/commit/6839f99ed0f870db442c7bffb70456471643aa4f
3488,3488.0,3662.0,elastic/elasticsearch,171c48fd2fd252c4f95fcb5d933313614d809b7d,"[TESTS] Refactor yml test suite classes (elastic/x-pack-elasticsearch#3145)

* Use XPackRestIT as base class for XDocsClientYamlTestSuiteIT

* Remove the XPackRestTestCase class

* Address review comments

* Fix checkstyle checks

Original commit: elastic/x-pack-elasticsearch@c2a5e60c128654c0f9d9ab3cda8ef4839cd93510",https://github.com/elastic/elasticsearch/commit/171c48fd2fd252c4f95fcb5d933313614d809b7d
3489,3489.0,3663.0,elastic/elasticsearch,abd263fca914699495be6864e1742ed5485220e2,"Merge branch 'master' into ccr

* master:
  [DOCS] Fixed cross cluster search docs issue (#3113)
  Watcher: Add transform input for chained input (#2861)
  [DOCS] Fix cleaning up ML resources after tests
  [ML] Specify ML_ORIGIN when calling the job update endpoint internally (#3110)
  Refactor CLI commands as logging-aware commands
  [ML] Stop datafeed when job fails (#3107)",https://github.com/elastic/elasticsearch/commit/abd263fca914699495be6864e1742ed5485220e2
3490,3490.0,3664.0,elastic/elasticsearch,7199e2fa5ca4d18ecd94fa6aef87b4384d4aa6b1,Small refactoring,https://github.com/elastic/elasticsearch/commit/7199e2fa5ca4d18ecd94fa6aef87b4384d4aa6b1
3491,3491.0,3665.0,elastic/elasticsearch,87766cd4ef7e32ce88ea31e91eb28a7b925fe05b,Adds JavaDocs and comments and small refactoring,https://github.com/elastic/elasticsearch/commit/87766cd4ef7e32ce88ea31e91eb28a7b925fe05b
3492,3492.0,3666.0,elastic/elasticsearch,c777c1d36f4363e6d96486230ccd99457c0037dd,"Refactor CLI commands as logging-aware commands

We have to ensure logging is configured for any CLI command that depends
on core Elasticsearch (since it might directly or indirectly touch
logging). This commit does this for all commands in X-Pack.

Relates elastic/x-pack-elasticsearch#3112

Original commit: elastic/x-pack-elasticsearch@f77f9b5052e3973625cb98dfa8e84596c94e4b23",https://github.com/elastic/elasticsearch/commit/c777c1d36f4363e6d96486230ccd99457c0037dd
3493,3493.0,3667.0,elastic/elasticsearch,0519fa223c691e226c44bfdbb7ac5c4d6f5e1310,"Ensure logging is configured for CLI commands

Any CLI commands that depend on core Elasticsearch might touch classes
(directly or indirectly) that depends on logging. If they do this and
logging is not configured, Log4j will dump status error messages to the
console. As such, we need to ensure that any such CLI command configures
logging (with a trivial configuration that dumps log messages to the
console). Previously we did this in the base CLI command but with the
refactoring of this class out of core Elasticsearch, we no longer
configure logging there (since we did not want this class to depend on
settings and logging). However, this meant for some CLI commands (like
the plugin CLI) we were no longer configuring logging. This commit adds
base classes between the low-level command and multi-command classes
that ensure that logging is configured. Any CLI command that depends on
core Elasticsearch should use this infrastructure to ensure logging is
configured. There is one exception to this: Elasticsearch itself because
it takes reponsibility into its own hands for configuring logging from
Elasticsearch settings and log4j2.properties. We preserve this special
status.

Relates #27523",https://github.com/elastic/elasticsearch/commit/0519fa223c691e226c44bfdbb7ac5c4d6f5e1310
3494,3494.0,3668.0,elastic/elasticsearch,9e891de777cf982ee8f2c91ac83a85bfc0b1a43f,"refactors code to allow better testing

The client and index metadata have now been abstracted away from the Lifecycle classes behind IndexLifecycleContext. This allow us to test the state machine without having to worry about how the state is persisted and read. It also makes the classes much easier to read and reason about.",https://github.com/elastic/elasticsearch/commit/9e891de777cf982ee8f2c91ac83a85bfc0b1a43f
3495,3495.0,3669.0,elastic/elasticsearch,234e160508fd018fecf10c5aa174c24e5c87319e,"Expose indexing plans

This is an additional engine refactoring to expose indexing plans.

Relates #27375",https://github.com/elastic/elasticsearch/commit/234e160508fd018fecf10c5aa174c24e5c87319e
3496,3496.0,3670.0,elastic/elasticsearch,8904fc821015d951944555259d1247fd7fdbe757,"[Geo] Decouple geojson parse logic from ShapeBuilders

This is the first step to supporting WKT (and other future) format(s). The ShapeBuilders are quite messy and can be simplified by decoupling the parse logic from the build logic. This commit refactors the parsing logic into its own package separate from the Shape builders. It also decouples the GeoShapeType into a standalone enumerator that is responsible for validating the parsed data and providing the appropriate builder. This future-proofs the code making it easier to maintain and add new shape types.",https://github.com/elastic/elasticsearch/commit/8904fc821015d951944555259d1247fd7fdbe757
3497,3497.0,3671.0,elastic/elasticsearch,ddd3ed4f2247479471e7064903896aa4a7d50c1a,"Additional engine refactoring

A previous refactoring exposed some protected methods. However, there is
not currently a need to be exposing these methods so publicly so we pull
one of them back to being package-private and we remove the other one.

Relates #27324",https://github.com/elastic/elasticsearch/commit/ddd3ed4f2247479471e7064903896aa4a7d50c1a
3498,3498.0,3672.0,elastic/elasticsearch,3cc1a88f7feef8b364ed6e1fe1e8d28eaa1b9020,"Merge branch 'master' into ccr

* master:
  Refactor internal engine
  [Docs] #26541: add warning regarding the limit on the number of fields that can be queried at once in the multi_match query.
  [Docs] Fix note in bucket_selector
  [Docs] Fix indentation of examples (#27168)
  [Docs] Clarify `span_not` query behavior for non-overlapping matches (#27150)
  [Docs] Remove first person ""I"" from getting started (#27155)",https://github.com/elastic/elasticsearch/commit/3cc1a88f7feef8b364ed6e1fe1e8d28eaa1b9020
3499,3499.0,3673.0,elastic/elasticsearch,a566942219d8a84deee719adb46860f69499431a,"Refactor internal engine

This commit is a minor refactoring of internal engine to move hooks for
generating sequence numbers into the engine itself. As such, we refactor
tests that relied on this hook to use the new hook, and remove the hook
from the sequence number service itself.

Relates #27082",https://github.com/elastic/elasticsearch/commit/a566942219d8a84deee719adb46860f69499431a
3500,3500.0,3674.0,elastic/elasticsearch,8d5572a77b9354306a489b166f5d86037ba59c17,"SQL: improve validation of properties (both names and values) (elastic/x-pack-elasticsearch#2759)

* refactor Configuration class

move away from Properties
perform validation of settings names and values at startup
better exception handling

Original commit: elastic/x-pack-elasticsearch@d8a9edeccf1c51f676b81d44afcbdc73482f7c46",https://github.com/elastic/elasticsearch/commit/8d5572a77b9354306a489b166f5d86037ba59c17
3501,3501.0,3675.0,elastic/elasticsearch,6b1d0d1c8ec9ece3cb8c310e334b98ac1dd5d391,"SQL: Remove time threshold for rule executor (elastic/x-pack-elasticsearch#2750)

Refactor RuleExecutor to eliminate time-based thresholds

Original commit: elastic/x-pack-elasticsearch@ba131f80581cb19f39abb7c1874683b683131c8e",https://github.com/elastic/elasticsearch/commit/6b1d0d1c8ec9ece3cb8c310e334b98ac1dd5d391
3502,3502.0,3676.0,elastic/elasticsearch,a7fa5d3335327df75ad33dc3291cf8ed51c076ee," Remove dangerous `ByteBufStreamInput` methods (#27076)

This commit removes the `ByteBufStreamInput` `readBytesReference` and
`readBytesRef` methods. These methods are zero-copy which means that
they retain a reference to the underlying netty buffer. The problem is
that our `TcpTransport` is not designed to handle zero-copy. The netty
implementation sets the read index past the current message once it has
been deserialized, handled, and mostly likely dispatched to another
thread. This means that netty is free to release this buffer. So it is
unsafe to retain a reference to it without calling `retain`. And we
cannot call `retain` because we are not currently designed to handle
reference counting past the transport level.

This should not currently impact us as we wrap the `ByteBufStreamInput`
in `NamedWriteableAwareStreamInput` in the `TcpTransport`. This stream
essentially delegates to the underling stream. However, in the case of
`readBytesReference` and `readBytesRef` it leaves thw implementations
to the standard `StreamInput` methods. These methods call the read byte
array method which delegates to `ByteBufStreamInput`. The read byte
array method on `ByteBufStreamInput` copies so it is safe. The only
impact of this commit should be removing methods that could be dangerous
if they were eventually called due to some refactoring.",https://github.com/elastic/elasticsearch/commit/a7fa5d3335327df75ad33dc3291cf8ed51c076ee
3503,3503.0,3677.0,elastic/elasticsearch,a6ae6b5a9a52bd45f54d1f7769549cd6a95a0f35,"Docs: Add note to contributing docs warning against tool based refactoring (#26936)

This commit adds a warning to deter contributers from creating PRs
generated by tools to do large refactors just for the sake of
refactoring.",https://github.com/elastic/elasticsearch/commit/a6ae6b5a9a52bd45f54d1f7769549cd6a95a0f35
3504,3504.0,3678.0,elastic/elasticsearch,686eb0ab65a009f27f690d2432279df861294dad,"[ML] Refactor [Bucket|Record]QueryBuilder classes (elastic/x-pack-elasticsearch#2684)

Those classes used to be elasticsearch-agnostic wrappers
of the query parameters. However, we now do not need that
layer of abstraction. Instead we can make those builders
own the building of the SearchSourceBuilder, which
simplifies the JobProvider and makes them reusable.

Original commit: elastic/x-pack-elasticsearch@b079cce1d6bb0d8aeb2a952d6863dc929a5e6149",https://github.com/elastic/elasticsearch/commit/686eb0ab65a009f27f690d2432279df861294dad
3505,3505.0,3679.0,elastic/elasticsearch,c46e09902d4b75154e7c3bb3a65ffb1e124fca13,"[ML] Fix close job when the process has not launched yet (elastic/x-pack-elasticsearch#2616)

If a job close is requested after a job was opened but before
its process was launched, the job close returns successfully
without doing anything. The result is that the process hangs
around. This has been causing test failures as documented
int elastic/x-pack-elasticsearch#2360 and elastic/x-pack-elasticsearch#1270.

This commit fixes this problem by refactoring the
AutodetectProcessManager. It introduces a state pattern
to make clear the states of the process and it uses locking
to ensure a close waits for the job process to be created.

relates elastic/x-pack-elasticsearch#1270

Original commit: elastic/x-pack-elasticsearch@ff858bd1362abc0b9d6ce887ce44b35d1cdc26ab",https://github.com/elastic/elasticsearch/commit/c46e09902d4b75154e7c3bb3a65ffb1e124fca13
3506,3506.0,3680.0,elastic/elasticsearch,87293272d83471074c522c4704c3dce44aabfc72,"Arithmetic

* big refactor of Processor by introducing ProcessorDefinition an
immutable tree structure used for resolving multiple inputs across
folding (in particular for aggregations) which at runtime gets
translated into 'compiled' or small Processors

Add expression arithmetic, expression folding and type coercion

Folding
* for literals, scalars and inside the optimizer

Type validation happens per type hierarchy (numeric vs decimal) not type
Ceil/Floor/Round functions return long/int instead of double
ScalarFunction preserves ProcessorDefinition instead of functionId

Original commit: elastic/x-pack-elasticsearch@a703f8b455604f1471d1861c13afe2feb84e216c",https://github.com/elastic/elasticsearch/commit/87293272d83471074c522c4704c3dce44aabfc72
3507,3507.0,3681.0,elastic/elasticsearch,5f407062ad0918eb0ad556c533c2e3cbfe33895d,"Refactoring of Gateway*** classes (#26706)

- Removes mutual dependency between GatewayMetaState and TransportNodesListGatewayMetaState
- Deguices MetaDataIndexUpgradeService
- Deguices GatewayMetaState
- Makes Gateway the master-level component that is only responsible for coordinating the state recovery",https://github.com/elastic/elasticsearch/commit/5f407062ad0918eb0ad556c533c2e3cbfe33895d
3508,3508.0,3682.0,elastic/elasticsearch,4f3e740ba897fad42d2a0aa87b912c7012a93db4,"Refactor bootstrap check results and error messages

This commit refactors the X-Pack bootstrap checks to respond to a change
in core Elasticsearch where the checks now return a single result
object.

Relates elastic/x-pack-elasticsearch#2495

Original commit: elastic/x-pack-elasticsearch@230b05052975cf91ff468395d604b3ab4d2d870b",https://github.com/elastic/elasticsearch/commit/4f3e740ba897fad42d2a0aa87b912c7012a93db4
3509,3509.0,3683.0,elastic/elasticsearch,ca6bce75dab21297428c1086fb1906cf4c1953ce,"Refactor bootstrap check results and error messages

This commit refactors the bootstrap checks into a single result object
that encapsulates whether or not the check passed, and a failure message
if the check failed. This simpifies the checks, and enables the messages
to more easily be based on the state used to discern whether or not the
check passed.

Relates #26637",https://github.com/elastic/elasticsearch/commit/ca6bce75dab21297428c1086fb1906cf4c1953ce
3510,3510.0,3684.0,elastic/elasticsearch,9834081254ef8f81b492444089423020116a9076,"Fix reference to painless inside expression engine (#26528)

This was a simple copy/paste bug in an earlier refactoring.",https://github.com/elastic/elasticsearch/commit/9834081254ef8f81b492444089423020116a9076
3511,3511.0,3685.0,elastic/elasticsearch,c0753235222dea250295f0caa2a2f7c332b056e7,"Refactor create index service to be unit testable

This commit refactors MetaDataCreateIndexService so that it is unit
testable.

Relates #25961",https://github.com/elastic/elasticsearch/commit/c0753235222dea250295f0caa2a2f7c332b056e7
3512,3512.0,3686.0,elastic/elasticsearch,de6c275dcab4cd3d5b6dcf159812ab610c9eade8,"Refactor/to x content fragments2 (elastic/x-pack-elasticsearch#2329)

* Moves more classes over to ToXContentObject/Fragment

* Removes ToXContentToBytes

* Removes ToXContent from Enums

* review comment fix

* slight change to use XContantHelper

Original commit: elastic/x-pack-elasticsearch@0f2d3f328b3cb39f2e8f09ec6055f1376981c791",https://github.com/elastic/elasticsearch/commit/de6c275dcab4cd3d5b6dcf159812ab610c9eade8
3513,3513.0,3687.0,elastic/elasticsearch,73dff6d21f605a19de46ff662d584f031b5d06fc,"Add workaround for Javadoc generation issues on JDK 9 b181

The javadoc tool on JDK 9 has issues with the combination of anonymous classes and varargs parameters.
This commit simply refactors a few anonymous classes to private inner classes.",https://github.com/elastic/elasticsearch/commit/73dff6d21f605a19de46ff662d584f031b5d06fc
3514,3514.0,3688.0,elastic/elasticsearch,654378f504b676caedc4083c68b1493ed2e50d63,Resilience page - Remove 6.0.0 as a target for the discovery refactoring. (#26311),https://github.com/elastic/elasticsearch/commit/654378f504b676caedc4083c68b1493ed2e50d63
3515,3515.0,3689.0,elastic/elasticsearch,4bce7271659889d839388d7df5c61a6d2a5c3c7a,"Refactor simple_query_string to handle text part like multi_match and query_string (#26145)

This change is a continuation of #25726 that aligns field expansions for the simple_query_string with the query_string and multi_match query.
The main changes are:

 * For exact field name, the new behavior is to rewrite to a matchnodocs query when the field name is not found in the mapping.

 * For partial field names (with * suffix), the expansion is done only on keyword, text, date, ip and number field types. Other field types are simply ignored.

 * For all fields (*), the expansion is done on accepted field types only (see above) and metadata fields are also filtered.

The use_all_fields option is deprecated in this change and can be replaced by setting `*` in the fields parameter.
This commit also changes how text fields are analyzed. Previously the default search analyzer (or the provided analyzer) was used to analyze every text part
, ignoring the analyzer set on the field in the mapping. With this change, the field analyzer is used instead unless an analyzer has been forced in the parameter of the query.

Finally now that all full text queries can handle the special ""*"" expansion (`all_fields` mode), the `index.query.default_field` is now set to `*` for indices created in 6.",https://github.com/elastic/elasticsearch/commit/4bce7271659889d839388d7df5c61a6d2a5c3c7a
3516,3516.0,3690.0,elastic/elasticsearch,292dd8f992e101f9bffcd58c6c60a24ccbfec746,"(refactor) some opportunities to use diamond operator (#25585)

* (refactor) some opportunities to use diamond operator

* Update ExceptionRetryIT.java

update typo",https://github.com/elastic/elasticsearch/commit/292dd8f992e101f9bffcd58c6c60a24ccbfec746
3517,3517.0,3691.0,elastic/elasticsearch,351febe03137bb44573baa739a5331b98a35d7a7,"Introduce elasticsearch-env for Windows

This commit refactors the batch scripts on Windows to use the
elasticsearch-env.bat script, and introduces a Windows version of
x-pack-env.bat for reuse in the scripts as well.

Relates elastic/x-pack-elasticsearch#2124

Original commit: elastic/x-pack-elasticsearch@faacb40dcaf3a8bac12d22e32a8868eed3927ec2",https://github.com/elastic/elasticsearch/commit/351febe03137bb44573baa739a5331b98a35d7a7
3518,3518.0,3692.0,elastic/elasticsearch,c3784326ebbf049256659969fd4fcc4648714455,"Refactor field expansion for match, multi_match and query_string query (#25726)

This commit changes the way we handle field expansion in `match`, `multi_match` and `query_string` query.
 The main changes are:

- For exact field name, the new behavior is to rewrite to a matchnodocs query when the field name is not found in the mapping.

- For partial field names (with `*` suffix), the expansion is done only on `keyword`, `text`, `date`, `ip` and `number` field types. Other field types are simply ignored.

- For all fields (`*`), the expansion is done on accepted field types only (see above) and metadata fields are also filtered.

- The `*` notation can also be used to set `default_field` option on`query_string` query. This should replace the needs for the extra option `use_all_fields` which is deprecated in this change.

This commit also rewrites simple `*` query to matchalldocs query when all fields are requested (Fixes #25556). 

The same change should be done on `simple_query_string` for completeness.

`use_all_fields` option in `query_string` is also deprecated in this change, `default_field` should be set to `*` instead.

Relates #25551",https://github.com/elastic/elasticsearch/commit/c3784326ebbf049256659969fd4fcc4648714455
3519,3519.0,3693.0,elastic/elasticsearch,aeed4cb3e435de58bdd8912a808f4af37b9d3388,"Followup refactoring for elastic/elasticsearch#25787

Original commit: elastic/x-pack-elasticsearch@ab0e5c45efb508854c0ac48861fc625363756872",https://github.com/elastic/elasticsearch/commit/aeed4cb3e435de58bdd8912a808f4af37b9d3388
3520,3520.0,3694.0,elastic/elasticsearch,13da3eb53e2913daf1fa410c5342950ebea0a1fd,"Refactor QueryStringQuery for 6.0 (#25646)

This change refactors the query_string query to analyze the query text around logical operators of the query string the same way than a match_query/multi_match_query.
It also adds a type parameter that can be used to change the way multi fields query are built the same way than a multi_match query does.

Now that these queries share the same behavior regarding text analysis, some parameters are obsolete and have been deprecated:

split_on_whitespace: This setting is now ignored with a deprecation notice
if it is used explicitely. With this PR The query_string always splits on logical operator.
It simplifies the understanding of the other parameters that can have different meanings
depending on the value of split_on_whitespace.

auto_generate_phrase_queries: This setting is now ignored with a deprecation notice
if it is used explicitely. This setting only makes sense when the parser splits on whitespace.

use_dismax: This setting is now ignored with a deprecation notice
if it is used explicitely. The tie_breaker parameter is sufficient to handle best_fields/most_fields.

Fixes #25574",https://github.com/elastic/elasticsearch/commit/13da3eb53e2913daf1fa410c5342950ebea0a1fd
3521,3521.0,3695.0,elastic/elasticsearch,cf29dea577029d9fe1cbe6fb15f3d167e15e6ccb,"Huge protocol refactor

Too big. Sorry. Some good things though:
1. Share some code between CLI and JDBC. Probably a good thing
at this point, better as we go on, I think.
2. Add round trip tests for all of proto.
3. Remove the `data` member from `QueryInitResponse` and
`QueryPageResponse` so we response serialization is consistent with
everything else.

Original commit: elastic/x-pack-elasticsearch@c6940a32edee91b18857ff75c9b8a19c46bf1cbb",https://github.com/elastic/elasticsearch/commit/cf29dea577029d9fe1cbe6fb15f3d167e15e6ccb
3522,3522.0,3696.0,elastic/elasticsearch,84ee21ed26feed2e6e4337c550b533b29048a453,"Followup for elastic/elasticsearch#25658 (elastic/x-pack-elasticsearch#1984)

This is the xpack side fo elastic/elasticsearch#25658 which is mainly refactorings
of a ctor and added tests.

Original commit: elastic/x-pack-elasticsearch@d8e2a2a0577c7eb7171a4fc1ba3eecc3a9a44f33",https://github.com/elastic/elasticsearch/commit/84ee21ed26feed2e6e4337c550b533b29048a453
3523,3523.0,3697.0,elastic/elasticsearch,16f2de017db02a5d0c73ab944416ef439004e226,"Trivial refactorings after elastic/elasticsearch#25627

Original commit: elastic/x-pack-elasticsearch@1cb9c2f959e02001aab3d464d0a60072001853a4",https://github.com/elastic/elasticsearch/commit/16f2de017db02a5d0c73ab944416ef439004e226
3524,3524.0,3698.0,elastic/elasticsearch,baa87db5d10aeadd896cfbeaa3d42379a5abb6b5,"Harden global checkpoint tracker

This commit refactors the global checkpont tracker to make it more
resilient. The main idea is to make it more explicit what state is
actually captured and how that state is updated through
replication/cluster state updates etc. It also fixes the issue where the
local checkpoint information is not being updated when a shard becomes
primary. The primary relocation handoff becomes very simple too, we can
just verbatim copy over the internal state.

Relates #25468",https://github.com/elastic/elasticsearch/commit/baa87db5d10aeadd896cfbeaa3d42379a5abb6b5
3525,3525.0,3699.0,elastic/elasticsearch,8aa0a5c11144722dcde1fb9a5f3d01324ac65eed,"Improve REST error handling when endpoint does not support HTTP verb, add OPTIONS support (#24437)

* Improved REST endpoint exception handling, see #15335

Also improved OPTIONS http method handling to better conform with the
http spec.

* Tidied up formatting and comments

See #15335

* Tests for #15335

* Cleaned up comments, added section number

* Swapped out tab indents for space indents

* Test class now extends ESSingleNodeTestCase

* Capture RestResponse so it can be examined in test cases

Simple addition to surface the RestResponse object so we can run tests
against it (see issue #15335).

* Refactored class name, included feedback

See #15335.

* Unit test for REST error handling enhancements

Randomizing unit test for enhanced REST response error handling. See
issue #15335 for more details.

* Cleaned up formatting

* New constructor to set HTTP method

Constructor added to support RestController test cases.

* Refactored FakeRestRequest, streamlined test case.

* Cleaned up conflicts

* Tests for #15335

* Added functionality to ignore or include path wildcards

See #15335

* Further enhancements to request handling

Refactored executeHandler to prioritize explicit path matches. See
#15335 for more information.

* Cosmetic fixes

* Refactored method handlers

* Removed redundant import

* Updated integration tests

* Refactoring to address issue #17853

* Cleaned up test assertions

* Fixed edge case if OPTIONS method randomly selected as invalid method

In this test, an OPTIONS method request is valid, and should not return
a 405 error.

* Remove redundant static modifier

* Hook the multiple PathTrie attempts into RestHandler.dispatchRequest

* Add missing space

* Correctly retrieve new handler for each Trie strategy

* Only copy headers to threadcontext once

* Fix test after REST header copying moved higher up

* Restore original params when trying the next trie candidate

* Remove OPTIONS for invalidHttpMethodArray so a 405 is guaranteed in tests

* Re-add the fix I already added and got removed during merge :-/

* Add missing GET method to test

* Add documentation to migration guide about breaking 404 -> 405 changes

* Explain boolean response, pull into local var

* fixup! Explain boolean response, pull into local var

* Encapsulate multiple HTTP methods into PathTrie<MethodHandlers>

* Add PathTrie.retrieveAll where all matching modes can be retrieved

Then TrieMatchingMode can be package private and not leak into RestController

* Include body of error with 405 responses to give hint about valid methods

* Fix missing usageService handler addition

I accidentally removed this :X

* Initialize PathTrieIterator modes with Arrays.asList

* Use ""== false"" instead of !

* Missing paren :-/",https://github.com/elastic/elasticsearch/commit/8aa0a5c11144722dcde1fb9a5f3d01324ac65eed
3526,3526.0,3700.0,elastic/elasticsearch,30b5ca7ab71b74a6f92a49f6dbcf9dfe87abc8a4,"Refactor PathTrie and RestController to use a single trie for all methods (#25459)

* Refactor PathTrie and RestController to use a single trie for all methods

This changes `PathTrie` and `RestController` to use a single `PathTrie` for all
endpoints, it also allows retrieving the endpoints' supported HTTP methods more
easily.

This is a spin-off and prerequisite of #24437

* Use EnumSet instead of multiple if conditions

* Make MethodHandlers package-private and final

* Remove duplicate registerHandler method

* Remove public modifier",https://github.com/elastic/elasticsearch/commit/30b5ca7ab71b74a6f92a49f6dbcf9dfe87abc8a4
3527,3527.0,3701.0,elastic/elasticsearch,3eb1258b0d6ff28240292d97e295cc12b6891b4c,"Add to CSV infra plus some refactoring of the JDBC one

Original commit: elastic/x-pack-elasticsearch@3e002c91c2c5e77e10e1ec1b8aa85f3a9428e7f4",https://github.com/elastic/elasticsearch/commit/3eb1258b0d6ff28240292d97e295cc12b6891b4c
3528,3528.0,3702.0,elastic/elasticsearch,5a4a47332c5a9a21531eb29c3ab4fd264e7fcf36,"Use a single method to update shard state

This commit refactors index shard to provide a single method for
updating the shard state on an incoming cluster state update.

Relates #25431",https://github.com/elastic/elasticsearch/commit/5a4a47332c5a9a21531eb29c3ab4fd264e7fcf36
3529,3529.0,3703.0,elastic/elasticsearch,403cf8eba3ec7212e41bb4a8d1241bdbd40d2fae,"Watcher: Refactoring of TriggeredWatchStore (elastic/x-pack-elasticsearch#1848)

* The TriggeredWatchStore now only has one method to put triggered
  watches
* All code is async in TriggeredWatchStore, locking has been removed
* The dedicated WatchRecord.Fields interface has been removed
* TriggeredWatchTests integration test has been moved to a unit test

Original commit: elastic/x-pack-elasticsearch@bc4b5820fb40977ab79854965c82eb46a94923ea",https://github.com/elastic/elasticsearch/commit/403cf8eba3ec7212e41bb4a8d1241bdbd40d2fae
3530,3530.0,3704.0,elastic/elasticsearch,c6a03bc5497dda8aeffe36e56e8ce45c4ad09f73,"Introduce primary context (#25122)

* Introduce primary context

The target of a primary relocation is not aware of the state of the
replication group. In particular, it is not tracking in-sync and
initializing shards and their checkpoints. This means that after the
target shard is started, its knowledge of the replication group could
differ from that of the relocation source. In particular, this differing
view can lead to it computing a global checkpoint that moves backwards
after it becomes aware of the state of the entire replication
group. This commit addresses this issue by transferring a primary
context during relocation handoff.

* Fix test

* Add assertion messages

* Javadocs

* Barrier between marking a shard in sync and relocating

* Fix misplaced call

* Paranoia

* Better latch countdown

* Catch any exception

* Fix comment

* Fix wait for cluster state relocation test

* Update knowledge via upate local checkpoint API

* toString

* Visibility

* Refactor permit

* Push down

* Imports

* Docs

* Fix compilation

* Remove assertion

* Fix compilation

* Remove context wrapper

* Move PrimaryContext to new package

* Piping for cluster state version

This commit adds piping for the cluster state version to the global
checkpoint tracker. We do not use it yet.

* Remove unused import

* Implement versioning in tracker

* Fix test

* Unneeded public

* Imports

* Promote on our own

* Add tests

* Import

* Newline

* Update comment

* Serialization

* Assertion message

* Update stale comment

* Remove newline

* Less verbose

* Remove redundant assertion

* Tracking -> in-sync

* Assertions

* Just say no

Friends do not let friends block the cluster state update thread on
network operations.

* Extra newline

* Add allocation ID to assertion

* Rename method

* Another rename

* Introduce sealing

* Sealing tests

* One more assertion

* Fix imports

* Safer sealing

* Remove check

* Remove another sealed check",https://github.com/elastic/elasticsearch/commit/c6a03bc5497dda8aeffe36e56e8ce45c4ad09f73
3531,3531.0,3705.0,elastic/elasticsearch,232d59b8554d8e4784c00fe11b049ff9ffb8105e,"[ML] Give kill a chance to stop autodetect before closing input (elastic/x-pack-elasticsearch#1824)

* Give kill a chance to kill the process before closing input

* Remove variable that can be refactored out

Original commit: elastic/x-pack-elasticsearch@42f7a3cece92c381859a958d5608049ff2e43e86",https://github.com/elastic/elasticsearch/commit/232d59b8554d8e4784c00fe11b049ff9ffb8105e
3532,3532.0,3706.0,elastic/elasticsearch,701dc53c2a21e742e56b94c0cd3c1db24c1a2a53,"[ML] Refactor aggregation response handling to make more flexible (elastic/x-pack-elasticsearch#1795)

Currently, aggregated datafeeds construct JSON from the aggregation
response by traversing all nested aggregations. In order to
achieve this, multiple leaf aggregations are not supported. Also,
scenarios it makes it impossible to effectively use pipeline
aggregations as it will not ignore the intermediate bucket
aggregations.

This commit refactors AggregationToJsonProcessor in order to
support the above scenarios. This is achieved by only converting
the fields of interest, that is the job analysis fields.

Original commit: elastic/x-pack-elasticsearch@8b575956ca1aca5de19c1b1d6ed85d17cadb93dc",https://github.com/elastic/elasticsearch/commit/701dc53c2a21e742e56b94c0cd3c1db24c1a2a53
3533,3533.0,3707.0,elastic/elasticsearch,93e29d290f8e14b06966af92f1bcbedd4d15475c,"Tests: Refactor NodeTests settings (#25309)

This pull request aims to use the method baseSettings already present in the class.",https://github.com/elastic/elasticsearch/commit/93e29d290f8e14b06966af92f1bcbedd4d15475c
3534,3534.0,3708.0,elastic/elasticsearch,02da8e7cd962b1fc7bcc7f14cdb6d0e88b2c3305,"[ML] Use bulk request to persist model plots  (elastic/x-pack-elasticsearch#1714)

* Use bulk request to persist model plots and model size stats

* Revert persisting model size stats in the bulk request

* Refactor results persister

Original commit: elastic/x-pack-elasticsearch@f51297bfc246d3bdc4bfbdb830cfcd37b619a44f",https://github.com/elastic/elasticsearch/commit/02da8e7cd962b1fc7bcc7f14cdb6d0e88b2c3305
3535,3535.0,3709.0,elastic/elasticsearch,aa3134c093e2bfb0a8adfcf3cbc30e9b1949d525,"Refactor TransportShardBulkAction.executeUpdateRequest and add tests

This splits `executeUpdateRequest` into separate parts and adds some unit tests
for the behavior in it. The actual behavior has not been changed.",https://github.com/elastic/elasticsearch/commit/aa3134c093e2bfb0a8adfcf3cbc30e9b1949d525
3536,3536.0,3710.0,elastic/elasticsearch,1eb785d8eebd41f0d87e53fd44e96ad982ebdb60,"[TEST] Minor refactorings in BasicDistributedJobsIT

Original commit: elastic/x-pack-elasticsearch@eab0fe759e3fcdb5939837bdf67f234726259637",https://github.com/elastic/elasticsearch/commit/1eb785d8eebd41f0d87e53fd44e96ad982ebdb60
3537,3537.0,3711.0,elastic/elasticsearch,36a5cf8f35e5cbaa1ff857b5a5db8c02edc1a187,"Automatically early terminate search query based on index sorting (#24864)

This commit refactors the query phase in order to be able
to automatically detect queries that can be early terminated.
If the index sort matches the query sort, the top docs collection is early terminated
on each segment and the computing of the total number of hits that match the query is delegated to a simple TotalHitCountCollector.
This change also adds a new parameter to the search request called `track_total_hits`.
It indicates if the total number of hits that match the query should be tracked.
If false, queries sorted by the index sort will not try to compute this information and 
and will limit the collection to the first N documents per segment.
Aggregations are not impacted and will continue to see every document
even when the index sort matches the query sort and `track_total_hits` is false.

Relates #6720",https://github.com/elastic/elasticsearch/commit/36a5cf8f35e5cbaa1ff857b5a5db8c02edc1a187
3538,3538.0,3712.0,elastic/elasticsearch,39e59b49b16a8f82b174ba8066c4769b06a37eb0,"Extract a common base class for scroll executions (#24979)

Today there is a lot of code duplication and different handling of errors
in the two different scroll modes. Yet, it's not clear if we keep both of
them but this simplification will help to further refactor this code to also
add cross cluster search capabilities.

This refactoring also fixes bugs when shards failed due to the node dropped out of the cluster in between scroll requests and failures during the fetch phase of the scroll. Both places where simply ignoring the failure and logging to debug. This can cause issues like #16555",https://github.com/elastic/elasticsearch/commit/39e59b49b16a8f82b174ba8066c4769b06a37eb0
3539,3539.0,3713.0,elastic/elasticsearch,15e53280dca638a85251f57cae29c5646000c564,"[ML] Allow datafeed to start when job is opening (elastic/x-pack-elasticsearch#1611)

The goal of this change is to allow datafeeds to start
when the job is in the opening state. This makes the API
more async and it allows clients like the ML UI to open a
job and start its datafeed without having to manage the
complexity of dealing with timeouts due to the job taking
time to open due to restoring a large state.

In order to achieve this, this commit does a number of things:

  - accepts a start datafeed request when the job is opening
  - adds logic to the DatafeedManager to wait before running the
  datafeed task until the job is opened
  - refactord the datafeed node selection logic into its own class
  - splitd selection issues in critical and non-critical with regard
  to creating the datafeed task
  - refactord the unit tests to make simpler to write & understand
  - adds unit tests for added and modified functionality
  - changes the response when the datafeed cannot be started to
  be a conflict exception

relates elastic/x-pack-elasticsearch#1535

Original commit: elastic/x-pack-elasticsearch@c83196155d93d522d25ae19fcdea121bbabf7945",https://github.com/elastic/elasticsearch/commit/15e53280dca638a85251f57cae29c5646000c564
3540,3540.0,3714.0,elastic/elasticsearch,ac94253dce99f12742085e02ed891dc397ba2272,"Clarify acquiring index shard permit

In previous work, we refactored the delay mechanism in index shard
operation permits to allow for async delaying of acquisition. This
refactoring made explicit when permit acquisition is disabled whereas
previously we were relying on an implicit condition, namely that all
permits were acquired by the thread trying to delay acquisition. When
using the implicit mechanism, we tried to acquire a permit and if this
failed, we returned a null releasable as an indication that our
operation should be queued. Yet, now we know when we are delayed and we
should not even try to acquire a permit. If we try to acquire a permit
and one is not available, we know that we are not delayed, and so
acquisition should be successful. If it is not successful, something is
deeply wrong. This commit takes advantage of this refactoring to
simplify the internal implementation.

Relates #24971",https://github.com/elastic/elasticsearch/commit/ac94253dce99f12742085e02ed891dc397ba2272
3541,3541.0,3715.0,elastic/elasticsearch,6d9ce957d4aa2916ba2c3f467bda70fdf6325647,"Drop name from TokenizerFactory (#24869)

Drops `TokenizerFactory#name`, replacing it with
`CustomAnalyzer#getTokenizerName` which is much better targeted at
its single use case inside the analysis API.

Drops a test that I would have had to refactor which is duplicated by
`AnalysisModuleTests`.

To keep this change from blowing up in size I've left two mostly
mechanical changes to be done in followups:
1. `TokenizerFactory` can now be entirely dropped and replaced with
`Supplier<Tokenizer>`.
2. `AbstractTokenizerFactory`'s ctor still takes a `String` parameter
where the name once was.",https://github.com/elastic/elasticsearch/commit/6d9ce957d4aa2916ba2c3f467bda70fdf6325647
3542,3542.0,3716.0,elastic/elasticsearch,8aaea51a0a0d822e67404e3af6b970e8a323b877,"Scripting: Move context definitions to instance type classes (#24883)

This is a simple refactoring to move the context definitions into the
type that they use. While we have multiple context names for the same
class at the moment, this will eventually become one ScriptContext per
instance type, so the pattern of a static member on the interface called
CONTEXT can be used. This commit also moves the consolidated list of
contexts provided by core ES into ScriptModule.",https://github.com/elastic/elasticsearch/commit/8aaea51a0a0d822e67404e3af6b970e8a323b877
3543,3543.0,3717.0,elastic/elasticsearch,1325681a03e2b10f564660181012036fb3ffeeb5,"Fix error message if an incompatible node connects (#24884)

This message broken in recent refactoring, this commit also adds a
basic unit-test to ensure we maintain the correct version.",https://github.com/elastic/elasticsearch/commit/1325681a03e2b10f564660181012036fb3ffeeb5
3544,3544.0,3718.0,elastic/elasticsearch,3b58334efb459af1e34ba2bfce4d2eb483ab1d7b,"Refactor script context generic types (elastic/x-pack-elasticsearch#1547)

This is the xpack side of
https://github.com/elastic/elasticsearch/pull/24877

Original commit: elastic/x-pack-elasticsearch@4f3a1a27e6640ac7ec2bd593140a7d063a87ac95",https://github.com/elastic/elasticsearch/commit/3b58334efb459af1e34ba2bfce4d2eb483ab1d7b
3545,3545.0,3719.0,elastic/elasticsearch,fe83df2a503fbd7b91d3151fbd6c520375674008,"Refactor update shard logic for primaries

This commit is a simple refactoring of the update shard logic for
primaries. Namely, there was some duplicated code here that was annoying
to have to read twice so it is now collapsed with this commit.",https://github.com/elastic/elasticsearch/commit/fe83df2a503fbd7b91d3151fbd6c520375674008
3546,3546.0,3720.0,elastic/elasticsearch,1bb7651dba5b991da4195019ae285513277c2d7c,"[ML] Refactor filters API to not use _type (elastic/x-pack-elasticsearch#1483)

- Removes dependence on _type for filters.
- Changes the put filter API to take the id in the URI
- Prepares .ml-meta index to be able to host more types in future

Relates elastic/x-pack-elasticsearch#668

Original commit: elastic/x-pack-elasticsearch@d4cffa9382faabb2493d134c01a55cc05106e20f",https://github.com/elastic/elasticsearch/commit/1bb7651dba5b991da4195019ae285513277c2d7c
3547,3547.0,3721.0,elastic/elasticsearch,9f23c2c1715b6dcdd96862b7584663c13e9b4192,"[ML] Wait for closing jobs in a close request (elastic/x-pack-elasticsearch#1398)

* Remove repeated calls to validateAndReturnJobTask

* Wait for closing job

* Refactor resolving job ids

* More close job unit tests

* Don’t finalise closing jobs twice

Original commit: elastic/x-pack-elasticsearch@20616d6f0adc3ef418fea4fbc00d16eb609a53c8",https://github.com/elastic/elasticsearch/commit/9f23c2c1715b6dcdd96862b7584663c13e9b4192
3548,3548.0,3722.0,elastic/elasticsearch,e7d352b489272a87b05019869857656de7fb82fc,"Compound order for histogram aggregations. (#22343)

This commit adds support for histogram and date_histogram agg compound order by refactoring and reusing terms agg order code. The major change is that the Terms.Order and Histogram.Order classes have been replaced/refactored into a new class BucketOrder. This is a breaking change for the Java Transport API. For backward compatibility with previous ES versions the (date)histogram compound order will use the first order. Also the _term and _time aggregation order keys have been deprecated; replaced by _key.

Relates to #20003: now that all these aggregations use the same order code, it should be easier to move validation to parse time (as a follow up PR).

Relates to #14771: histogram and date_histogram aggregation order will now be validated at reduce time.

Closes #23613: if a single BucketOrder that is not a tie-breaker is added with the Java Transport API, it will be converted into a CompoundOrder with a tie-breaker.",https://github.com/elastic/elasticsearch/commit/e7d352b489272a87b05019869857656de7fb82fc
3549,3549.0,3723.0,elastic/elasticsearch,1907c46689d62b60b7b67e0a3b0fdfd0ec3397ca,"Refactor UpdateHelper into unit-testable pieces

This starts breaking up the `UpdateHelper.prepare` method so that each piece can
be individually unit tested. No actual functionality has changed.

Note however, that I did add a TODO about `ctx.op` leniency, which I'd love to
remove as a separate PR if desired.",https://github.com/elastic/elasticsearch/commit/1907c46689d62b60b7b67e0a3b0fdfd0ec3397ca
3550,3550.0,3724.0,elastic/elasticsearch,06364cf6f00feb5ed7494c90b5ac72bdf0703949,"You had one job Netty logging guard

In pre-release versions of Elasticsearch 5.0.0, users were subject to
log messages of the form ""your platform does not.*reliably.*potential
system instability"". This is because we disable Netty from being unsafe,
and Netty throws up this scary info-level message when unsafe is
unavailable, even if it was unavailable because the user requested that
it be unavailabe. Users were rightly confused, and concerned. So, we
contributed a guard to Netty to prevent this log message from showing up
when unsafe was explicitly disabled. This guard shipped with all
versions of Netty that shipped starting with Elasticsearch
5.0.0. Unfortunately, this guard was lost in an unrelated refactoring
and now with the 4.1.10.Final upgrade, users will again see this
message. This commit is a hack around this until we can get a fix
upstream again.

Relates #24469",https://github.com/elastic/elasticsearch/commit/06364cf6f00feb5ed7494c90b5ac72bdf0703949
3551,3551.0,3725.0,elastic/elasticsearch,f7fb02f21fb2d1b206d0e7cddeea5d5d09953d7f,"Ensure we always respect a user specified filter in the AD realm (elastic/x-pack-elasticsearch#1161)

When the active directory realm was refactored to add support for authenticating against multiple
domains, only the default authenticator respected the user_search.filter setting. This commit moves
this down to the base authenticator and also changes the UPN filter to not include sAMAccountName
in the filter.

Original commit: elastic/x-pack-elasticsearch@d2c19c9bee12608d1b620d8f965d7a6a2a9baaf8",https://github.com/elastic/elasticsearch/commit/f7fb02f21fb2d1b206d0e7cddeea5d5d09953d7f
3552,3552.0,3726.0,elastic/elasticsearch,4c9b4132c9f7639780e4eab8e7832ad324f5c7ef,"[TEST] Refactor ML integration test framework

- Removes need to handle exception from action methods
- Clearly renames DatafeedJobIT to DatafeedJobsRestIT to distinguish
  from DatafeedJobsIT
- Refactors DatafeedJobsIT to reuse MlNativeAutodetectIntegTestCase

Original commit: elastic/x-pack-elasticsearch@5bd0c013912166bc79baaa9e3d6f2832cfa01057",https://github.com/elastic/elasticsearch/commit/4c9b4132c9f7639780e4eab8e7832ad324f5c7ef
3553,3553.0,3727.0,elastic/elasticsearch,bc45d10e82e169e93d331866c7e2a7f3cae51db7,"Remove most usages of 1-arg Script ctor (#24325)

The one argument ctor for `Script` creates a script with the
default language but most usages of are for testing and either
don't care about the language or are for use with
`MockScriptEngine`. This replaces most usages of the one argument
ctor on `Script` with calls to `ESTestCase#mockScript` to make
it clear that the tests don't need the default scripting language.

I've also factored out some copy and pasted script generation
code into a single place. I would have had to change that code
to use `mockScript` anyway, so it was easier to perform the
refactor.

Relates to #16314",https://github.com/elastic/elasticsearch/commit/bc45d10e82e169e93d331866c7e2a7f3cae51db7
3554,3554.0,3728.0,elastic/elasticsearch,c17de49a6dc1d54fcfee3754211ae67a06bdcec7,"[percolator] Fix memory leak when percolator uses bitset or field data cache.

The percolator doesn't close the IndexReader of the memory index any more.
Prior to 2.x the percolator had its own SearchContext (PercolatorContext) that did this,
but that was removed when the percolator was refactored as part of the 5.0 release.

I think an alternative way to fix this is to let percolator not use the bitset and fielddata caches,
that way we prevent the memory leak.

Closes #24108",https://github.com/elastic/elasticsearch/commit/c17de49a6dc1d54fcfee3754211ae67a06bdcec7
3555,3555.0,3729.0,elastic/elasticsearch,2b8fa64cf74c06733a891de3cf9d0f0904d8996a,"ESIntegTestCase.indexRandom should not introduce types. (#24202)

Since we plan on removing types, `indexRandom` should not introduce new types.
This commit refactors `indexRandom` to reuse existing types.",https://github.com/elastic/elasticsearch/commit/2b8fa64cf74c06733a891de3cf9d0f0904d8996a
3556,3556.0,3730.0,elastic/elasticsearch,525101b64d9a22ffff9a29c0309444f721ebb763,"Query string default field (#24214)

Currently any `query_string` query that use a wildcard field with no matching field is rewritten with the `_all` field.

For instance:
````
#creating test doc
PUT testing/t/1
{
  ""test"": {
    ""field_one"": ""hello"",
    ""field_two"": ""world""
  }
}
#searching abc.* (does not exist) -> hit
GET testing/t/_search
{
  ""query"": {
    ""query_string"": {
      ""fields"": [
        ""abc.*""
      ],
      ""query"": ""hello""
    }
  }
}
````

This bug first appeared in 5.0 after the query refactoring and impacts only users that use `_all` as default field.
Indices created in 6.x will not have this problem since `_all` is deactivated in this version.

This change fixes this bug by returning a MatchNoDocsQuery for any term that expand to an empty list of field.",https://github.com/elastic/elasticsearch/commit/525101b64d9a22ffff9a29c0309444f721ebb763
3557,3557.0,3731.0,elastic/elasticsearch,22e07959909dca567e68e875d718f04cc38a27f2,"Extract batch executor out of cluster service (#24102)

Refactoring that extracts the task batching functionality from ClusterService and makes it a reusable component that can be tested in isolation.",https://github.com/elastic/elasticsearch/commit/22e07959909dca567e68e875d718f04cc38a27f2
3558,3558.0,3732.0,elastic/elasticsearch,c7e9231a868c90bc062ccdbcd82f1387f6cedda6,"Plugins: Remove leniency for missing plugins dir (#24173)

This leniency was left in after plugin installer refactoring for 2.0
because some tests still relied on it. However, the need for this
leniency no longer exists.",https://github.com/elastic/elasticsearch/commit/c7e9231a868c90bc062ccdbcd82f1387f6cedda6
3559,3559.0,3733.0,elastic/elasticsearch,8f666a74f8aae6c86062dbce37dc0f5b1d4228f6,"Test: Fix plugin integ test to depend on bundling plugin (#24170)

This was broken in the recent refactoring to add dependsOn directly to
cluster configuration.",https://github.com/elastic/elasticsearch/commit/8f666a74f8aae6c86062dbce37dc0f5b1d4228f6
3560,3560.0,3734.0,elastic/elasticsearch,ffaac5a08a116157c6e939dee3ea792450ef1c1e,"Simplify BulkProcessor handling and retry logic (#24051)

This commit collapses the SyncBulkRequestHandler and
AsyncBulkRequestHandler into a single BulkRequestHandler. The new
handler executes a bulk request and awaits for the completion if the
BulkProcessor was configured with a concurrentRequests setting of 0.
Otherwise the execution happens asynchronously.

As part of this change the Retry class has been refactored.
withSyncBackoff and withAsyncBackoff have been replaced with two
versions of withBackoff. One method takes a listener that will be
called on completion. The other method returns a future that will been
complete on request completion.",https://github.com/elastic/elasticsearch/commit/ffaac5a08a116157c6e939dee3ea792450ef1c1e
3561,3561.0,3735.0,elastic/elasticsearch,8e2299f994bab84d34ef2cefd34976d75f11da39,"Remove support default settings

Support for default settings has been removed in core and so some
methods were refactored. This commit responds to this change in core.

Original commit: elastic/x-pack-elasticsearch@b22c612de46e48ac4ca1560bb69cd3ce0b0e60c4",https://github.com/elastic/elasticsearch/commit/8e2299f994bab84d34ef2cefd34976d75f11da39
3562,3562.0,3736.0,elastic/elasticsearch,b636ca79d579dbef3965b578fa8253aa6189e263,"Engine: version logic on replicas should not be hard coded (#23998)

The refactoring in #23711 hardcoded version logic for replica to assume monotonic versions. Sadly that's wrong for `FORCE` and `VERSION_GTE`. Instead we should use the methods in VersionType to detect conflicts.

Note - once replicas use sequence numbers for out of order delivery, this logic goes away.",https://github.com/elastic/elasticsearch/commit/b636ca79d579dbef3965b578fa8253aa6189e263
3563,3563.0,3737.0,elastic/elasticsearch,73b8aad9a377a396c2323fa146ea6bd03162578a,"Settings: Disallow secure setting to exist in normal settings (#23976)

This commit removes the ""legacy"" feature of secure settings, which setup
a parallel setting that was a fallback in the insecure
elasticsearch.yml. This was previously used to allow the new secure
setting name to be that of the old setting name, but is now not in use
due to other refactorings. It is much cleaner to just have all secure
settings use new setting names. If in the future we want to reuse the
previous setting name, once support for the insecure settings have been
removed, we can then rename the secure setting.  This also adds a test
for the behavior.",https://github.com/elastic/elasticsearch/commit/73b8aad9a377a396c2323fa146ea6bd03162578a
3564,3564.0,3738.0,elastic/elasticsearch,e2a30331ba7528adb17260a7ce46f69ca0133db9,"Refactor StartDataFeed to more intelligently wait on shard status (elastic/x-pack-elasticsearch#974)

Rather than using an async call, this leverages
the Assignment logic while selecting nodes.

Now with 300% more tests!

Original commit: elastic/x-pack-elasticsearch@300d628f72228a322d78749cf150aa5874406c81",https://github.com/elastic/elasticsearch/commit/e2a30331ba7528adb17260a7ce46f69ca0133db9
3565,3565.0,3739.0,elastic/elasticsearch,75b4f408e05fc19de6fce775132239f1e22c99ac,"Refactor InternalEngine's index/delete flow for better clarity (#23711)

The InternalEngine Index/Delete methods (plus satellites like version loading from Lucene) have accumulated some cruft over the years making it hard to clearly the code flows for various use cases (primary indexing/recovery/replicas etc). This PR refactors those methods for better readability. The methods are broken up into smaller sub methods, albeit at the price of less code I reused.

To support the refactoring I have considerably beefed up the versioning tests.

This PR is a spin-off from #23543 , which made it clear this is needed.",https://github.com/elastic/elasticsearch/commit/75b4f408e05fc19de6fce775132239f1e22c99ac
3566,3566.0,3740.0,elastic/elasticsearch,d11fbfa70cca7dc287c46e1bea5a177c17f8dc15,"Persistent Tasks: refactor PersistentTasksService to use ActionListener (elastic/x-pack-elasticsearch#937)

PersistentTasksService methods are not using ActionListener<PersistentTask<?>> instead of PersistentTaskOperationListener.

Original commit: elastic/x-pack-elasticsearch@f95d8bda3d87d2363cf6377fcf1b059bd02f13e4",https://github.com/elastic/elasticsearch/commit/d11fbfa70cca7dc287c46e1bea5a177c17f8dc15
3567,3567.0,3741.0,elastic/elasticsearch,4125f012b94032ff91c25a71fb12fef4f470b3e5,"Streamline shard index availability in all SearchPhaseResults (#23788)

Today we have the shard target and the target request ID available in SearchPhaseResults.
Yet, the coordinating node maintains a shard index to reference the request, response tuples
internally which is also used in many other classes to reference back from fetch results to
query results etc. Today this shard index is implicitly passed via the index in AtomicArray
which causes an undesirable dependency on this interface.
This commit moves the shard index into the SearchPhaseResult and removes some dependencies
on AtomicArray. Further removals will follow in the future. The most important refactoring here
is the removal of AtomicArray.Entry which used to be created for every element in the atomic array
to maintain the shard index during result processing. This caused an unnecessary indirection, dependency
and potentially thousands of unnecessary objects in every search phase.",https://github.com/elastic/elasticsearch/commit/4125f012b94032ff91c25a71fb12fef4f470b3e5
3568,3568.0,3742.0,elastic/elasticsearch,f2654b58724ee5eaca0fdc96213691cd2299114d,"[ML] Changed job and datafeed lifecycle management

* Removed OPENING and CLOSING job states. Instead when persistent task has been created and
   status hasn't been set then this means we haven't yet started, when the executor changes it to STARTED we have.
   The coordinating node will monitor cs for a period of time until that happens and then returns or times out.
* Refactored job close api to go to node running job task and close job there.
* Changed unexpected job and datafeed exception messages to not mention the state and instead mention that job/datafeed haven't yet started/stopped.

Original commit: elastic/x-pack-elasticsearch@37e778b58593c5d5d52208f72891f65fb9668c46",https://github.com/elastic/elasticsearch/commit/f2654b58724ee5eaca0fdc96213691cd2299114d
3569,3569.0,3743.0,elastic/elasticsearch,c8081bde91f19ba86585900e720ce2ee1de12a83,"Further refactor and extend testing for `TransportShardBulkAction`

This moves `updateReplicaRequest` to `createPrimaryResponse` and separates the
translog updating to be a separate function so that the function purpose is more
easily understood (and testable).

It also separates the logic for `MappingUpdatePerformer` into two functions,
`updateMappingsIfNeeded` and `verifyMappings` so they don't do too much in a
single function. This allows finer-grained error testing for when a mapping
fails to parse or be applied.

Finally, it separates parsing and version validation for
`executeIndexRequestOnReplica` into a separate
method (`prepareIndexOperationOnReplica`) and adds a test for it.

Relates to #23359",https://github.com/elastic/elasticsearch/commit/c8081bde91f19ba86585900e720ce2ee1de12a83
3570,3570.0,3744.0,elastic/elasticsearch,9fc6ce83eef8e4ab7c7104e41a181b16d39e4947,"Persistent Tasks: Merge NodePersistentTask and RunningPersistentTask (elastic/x-pack-elasticsearch#842)

Refactors NodePersistentTask and RunningPersistentTask into a single AllocatedPersistentTask. Makes it possible to update Persistent Task Status via AllocatedPersistentTask.

Original commit: elastic/x-pack-elasticsearch@8f59d7b81937fb8830ad466eaa1a3e51a9e734bc",https://github.com/elastic/elasticsearch/commit/9fc6ce83eef8e4ab7c7104e41a181b16d39e4947
3571,3571.0,3745.0,elastic/elasticsearch,27a313c07df9cf9db5258de4ff8d79660928b994,"[ML] Correctly initialise model size stats on job reopen (elastic/x-pack-elasticsearch#822)

This commit ensures that upon reopening a job, the in-memory
model size stats are correctly initialized from the ones
last persisted in the results index.

This fixes the bug that could be seen upon opening a job
that has processed data and immediately calling its _stats
API only to see the model size stats are zero.

In addition, this PR refactors getting the parameters needed to
open an autodetect job:

- Previously, there was a method chaining together multiple
callbacks to the job provider.
- These methods were retrieving data via GETs which is not
going to work with index rollover.

Note, this PR is not eliminating all GETs. More work is needed
to fully support index rollover.

relates elastic/x-pack-elasticsearch#801

Original commit: elastic/x-pack-elasticsearch@1ef1d44b32abef6d85e3671357a1f9835aa29e7b",https://github.com/elastic/elasticsearch/commit/27a313c07df9cf9db5258de4ff8d79660928b994
3572,3572.0,3746.0,elastic/elasticsearch,28d6b505ed978a52d3d23dbb5cfbe4421f62a90d,"[ML] Minor refactoring to improve code readability

Original commit: elastic/x-pack-elasticsearch@ef2d5fcab64a910e9dd8589866d69ee47c4aec77",https://github.com/elastic/elasticsearch/commit/28d6b505ed978a52d3d23dbb5cfbe4421f62a90d
3573,3573.0,3747.0,elastic/elasticsearch,c52689a9a07b222feca7d6093bc5d6c2adf4f305,"[ML] Add job_id filter to job alias

This fixes returning results only for the job asked
when a shared index is used.

The commit also refactors the field count check to
use the field mappings API and solves a bug where the
check blows due to the _default_ type not having properties.

[Zach] Minor test tweak to MlJobIT

Original commit: elastic/x-pack-elasticsearch@729f8868795dcf49992af4b3db8c928fa1d22b21",https://github.com/elastic/elasticsearch/commit/c52689a9a07b222feca7d6093bc5d6c2adf4f305
3574,3574.0,3748.0,elastic/elasticsearch,fd991f32f929e0473d254272cae8ba23236fcd2e,"Refactor TransportShardBulkAction and add unit tests

This refactors the `TransportShardBulkAction` to split it appart and make it
unit-testable, and then it also adds unit tests that use these methods.

In particular, this makes `executeBulkItemRequest` shorter and more readable",https://github.com/elastic/elasticsearch/commit/fd991f32f929e0473d254272cae8ba23236fcd2e
3575,3575.0,3749.0,elastic/elasticsearch,08b7cb6bca6e6cef9d042b1a0f7f77674404786f,"[ML] Refactor Auditor (elastic/x-pack-elasticsearch#631)

* Refactor Auditor
* Inject Auditor


Original commit: elastic/x-pack-elasticsearch@d9efe5fcef0769f49251444dbf4ee097ac295565",https://github.com/elastic/elasticsearch/commit/08b7cb6bca6e6cef9d042b1a0f7f77674404786f
3576,3576.0,3750.0,elastic/elasticsearch,615dd0f2405bfd8f7e471f3abe8d6a0040325e4d,"Request and Status in Persistent Tasks should be serialized using their writable names

Refactors xcontent serialization of Request and Status to use their writable names instead of action name. That simplifies the parsing logic, allows reuse of the same status object for multiple actions and is consistent with how named objects in xcontent are used.

Original commit: elastic/x-pack-elasticsearch@3d059ea952f832e70aa595678937525e8e5bb0fe",https://github.com/elastic/elasticsearch/commit/615dd0f2405bfd8f7e471f3abe8d6a0040325e4d
3577,3577.0,3751.0,elastic/elasticsearch,de8049fd2ae33c5979115f3c04f3b657971758a5,"Tests: Ensure multi node integ tests wait on first node

When a rest integ test has multiple nodes, each node is supposed to not
start configuring itself until the first node has been started, so that
the unicast host information can be written. However, this was never
explicitly setup to occur, and we were just very lucky with the current
gradle version and stability of the code always produced a task graph
that had node0 starting first. With the recent refactorings to integ
tests, the order has changed. This commit fixes the ordering by adding
an explicit dependency between the first node and the other nodes.",https://github.com/elastic/elasticsearch/commit/de8049fd2ae33c5979115f3c04f3b657971758a5
3578,3578.0,3752.0,elastic/elasticsearch,4041545cfa6a1652f9d3b7508da350d3467f3802,"[ML] Put back check for inconsistent job id

Lost during the refactor, this checks to make sure an ID in both the URL and the
body match.

Original commit: elastic/x-pack-elasticsearch@ef96275c9962c2d390a77aa8275a129959cdc9b2",https://github.com/elastic/elasticsearch/commit/4041545cfa6a1652f9d3b7508da350d3467f3802
3579,3579.0,3753.0,elastic/elasticsearch,497147c30db1a37fe8d2c5c1f6445cee9e1e9976,"Watcher: Include watch status in history (elastic/elasticsearch#4875)

In order to help watcher UI easily gather the status of a watch
and its actions, we should write the watch status in the history
as well.

This commit is doing exactly that. Tests ensure, that the status is not searchable,
as in the watch mapping itself.

This also requires the history template to be changed, thus the counter of the template
had to be increased as well.

Some minor refactorings by making ctors private that dont need to be public
have been happening as well.

Closes elastic/elasticsearch#4735

Original commit: elastic/x-pack-elasticsearch@df8352ceb5519c1cba06999db180bec275403524",https://github.com/elastic/elasticsearch/commit/497147c30db1a37fe8d2c5c1f6445cee9e1e9976
3580,3580.0,3754.0,elastic/elasticsearch,f09c4e1cdb6e080af57ac996805de20d6e771491,"Expose `search.highlight.term_vector_multi_value` as a node level setting (#22999)

This setting was missed in the great settings refactoring and should be exposed
via node level settings.",https://github.com/elastic/elasticsearch/commit/f09c4e1cdb6e080af57ac996805de20d6e771491
3581,3581.0,3755.0,elastic/elasticsearch,4c0d2a492d4998e4832a796e0f492ced7b90aa4f,"Refactor get methods (elastic/elasticsearch#747)

Original commit: elastic/x-pack-elasticsearch@d300be2dde9f37a198926a2c5cc8ae45917929d0",https://github.com/elastic/elasticsearch/commit/4c0d2a492d4998e4832a796e0f492ced7b90aa4f
3582,3582.0,3756.0,elastic/elasticsearch,621643a5c3790191d553968c017dfed7df3683f0,"Build: Only add ASL license to pom for elasticsearch project (#22664)

The extra plugins that may be attached to the elasticsearch build
contain their own license. In the past, the ASL license elasticsearch
uses was avoided by specially checking for the gradle project prefix of
`:x-plugins`. However, since refactoring to the elasticsearch-extra dir
structure, this mechanism was broken. This change fixes the pom license
adding to only be applied to projects that fall under the root project
(ie elasticsearch).",https://github.com/elastic/elasticsearch/commit/621643a5c3790191d553968c017dfed7df3683f0
3583,3583.0,3757.0,elastic/elasticsearch,bc04bda8d62e1d2a44310255d5f2a2a452c8bf80,"Remember the index each result came from (elastic/elasticsearch#727)

* Delete unused batched ModelSnapshot iterator

* Pass source index with normalisable results

* Refactor Normalizable

* Rework persisting renormalised results

* Spell normalize with a ‘z’

* Rename ResultIndex -> ResultWithIndex

* Expand wildcard import

* Make Normalisable child type an enum

Original commit: elastic/x-pack-elasticsearch@52450abafd4341a936d2da82c103a66da2dfc35e",https://github.com/elastic/elasticsearch/commit/bc04bda8d62e1d2a44310255d5f2a2a452c8bf80
3584,3584.0,3758.0,elastic/elasticsearch,20ab4be59f072e21c3cb5877d4aebfae43e98680,"Cluster Explain API uses the allocation process to explain shard allocation decisions (#22182)

This PR completes the refactoring of the cluster allocation explain API and improves it in the following two high-level ways:

 1. The explain API now uses the same allocators that the AllocationService uses to make shard allocation decisions. Prior to this PR, the explain API would run the deciders against each node for the shard in question, but this was not executed on the same code path as the allocators, and many of the scenarios in shard allocation were not captured due to not executing through the same code paths as the allocators.

 2. The APIs have changed, both on the Java and JSON level, to accurately capture the decisions made by the system. The APIs also now report on shard moving and rebalancing decisions, whereas the previous API did not report decisions for moving shards which cannot remain on their current node or rebalancing shards to form a more balanced cluster.

Note: this change affects plugin developers who may have a custom implementation of the ShardsAllocator interface. The method weighShards has been removed and no longer has any utility. In order to support the new explain API, however, a custom implementation of ShardsAllocator must now implement ShardAllocationDecision decideShardAllocation(ShardRouting shard, RoutingAllocation allocation) which provides a decision and explanation for allocating a single shard. For implementations that do not support explaining a single shard allocation via the cluster allocation explain API, this method can simply return an UnsupportedOperationException.",https://github.com/elastic/elasticsearch/commit/20ab4be59f072e21c3cb5877d4aebfae43e98680
3585,3585.0,3759.0,elastic/elasticsearch,baea17b53fbdb7eae92607ed18f3d18110849712,"Separate cluster update tasks that are published from those that are not (#21912)

This commit factors out the cluster state update tasks that are published (ClusterStateUpdateTask) from those that are not (LocalClusterUpdateTask), serving as a basis for future refactorings to separate the publishing mechanism out of ClusterService.",https://github.com/elastic/elasticsearch/commit/baea17b53fbdb7eae92607ed18f3d18110849712
3586,3586.0,3760.0,elastic/elasticsearch,850f51db01a9b35a9a080c93bbada053d4e350f0,"Internal: Refactor SettingCommand into EnvironmentAwareCommand (#22175)

* Internal: Refactor SettingCommand into EnvironmentAwareCommand

This change renames and changes the behavior of SettingCommand to have
its primary method take in a fully initialized Environment for
elasticsearch instead of just a map of settings. All of the subclasses
of SettingCommand already did this at some point, so this just removes
duplication.",https://github.com/elastic/elasticsearch/commit/850f51db01a9b35a9a080c93bbada053d4e350f0
3587,3587.0,3761.0,elastic/elasticsearch,ccf8cb7e0d01b4104cb089baac239ac35461f566,"Refactor delete interim results (elastic/elasticsearch#470)

* Collapse ElasticsearchBulkDeleter into JobDataDeleter

* Add blocking delete to JobDataDeleter

* Delete interim results only after all the results are parsed.

* Remove unused deleteModelSizeStats and deleteModelDebugOutput methods.

Document missing javadoc tags

Original commit: elastic/x-pack-elasticsearch@19975416735f0fee4abefbfd9c8e0095a0a375de",https://github.com/elastic/elasticsearch/commit/ccf8cb7e0d01b4104cb089baac239ac35461f566
3588,3588.0,3762.0,elastic/elasticsearch,3f1d7be07af1f67fc823eccb4968d8dd7b8f8d00,"Refactor shard limit allocation decider

This commit simplifies the shard limit allocation decider, removing some
duplicated code into a common method.

Relates #21845",https://github.com/elastic/elasticsearch/commit/3f1d7be07af1f67fc823eccb4968d8dd7b8f8d00
3589,3589.0,3763.0,elastic/elasticsearch,53adc100ad36a64d6f9f32265148e6cf701d5d28,"Refactor deleting old results (elastic/elasticsearch#431)

* Refactor deleting old results

* Reinstate quiet logging when deleting interim results

Original commit: elastic/x-pack-elasticsearch@01ea95469cde3168534494f9582237f111db42f8",https://github.com/elastic/elasticsearch/commit/53adc100ad36a64d6f9f32265148e6cf701d5d28
3590,3590.0,3764.0,elastic/elasticsearch,1fea75cc4f456c7c2dacc1e85034fc30262066e3,"Refactor ci script to choose test based on single cli arg

We prefer just passing a single cli argument that allows the script to
choose the corresponding gradle command from a preset list of
choices. For now, valid options are `packagingtests` or `tests`. The
script defaults to `tests` if no argument is supplied.

Original commit: elastic/x-pack-elasticsearch@f6315b1ad5c938afe5c1302c3fb119ebbe99800e",https://github.com/elastic/elasticsearch/commit/1fea75cc4f456c7c2dacc1e85034fc30262066e3
3591,3591.0,3765.0,elastic/elasticsearch,41ae784a6fdeb26696c3b7acfc2ddded6eae0ab0,"Refactor handling of bind permissions

This commit refactors the handling of bind permissions, which is in need
of a little cleanup. For example, in its current state, the code for
handling permissions for transport profiles is split across two
methods. This commit refactors this code hopefully making it easier to
work with in future changes. This change is mostly mechanical, no
functionality is changed.

Relates #21742",https://github.com/elastic/elasticsearch/commit/41ae784a6fdeb26696c3b7acfc2ddded6eae0ab0
3592,3592.0,3766.0,elastic/elasticsearch,221caa1c5e62b2cc78c8b9a823882469f517a634,"Refactor handling for bad default permissions

This commit refactors the handling of bad default permissions that come
from the system security policy.

Relates #21735",https://github.com/elastic/elasticsearch/commit/221caa1c5e62b2cc78c8b9a823882469f517a634
3593,3593.0,3767.0,elastic/elasticsearch,15e8cf7bcbaee2d6e527cd0fb312f105e3d261e9,"Consolidate GetJob/GetJobs (elastic/elasticsearch#342)

In the same vein of GetBucket/GetBuckets and GetCategory/GetCategories.

This one was a bit more involved, since previously GetJobs didn't support 
configuring the various metrics. So now all metrics can be configured when 
requesting both a single job, or a range of jobs. It also unifies the request 
body handling between the two and adds POST handlers.

And similar to the other refactorings, the SingleDoc response is gone in 
favor of always returning an array of hits.

Original commit: elastic/x-pack-elasticsearch@ac47bb9bf610a212447254c40f1c87ba1a9de7d0",https://github.com/elastic/elasticsearch/commit/15e8cf7bcbaee2d6e527cd0fb312f105e3d261e9
3594,3594.0,3768.0,elastic/elasticsearch,6a6e1bed55271bfd10fdb29cb7ab42c45aaec888,"Remove JVMCheck

This commit removes JVMCheck. Previously there were three checks in this
class:
 - check for super word bug in JDK 7
 - check for G1GC bugs in JDK 8
 - check for broken IBM JDKs

The first check is obsolete since we require JDK 8 now. The second check
is refactored into a bootstrap check. The third check is removed since
we do not even support the IBM JDK.

Relates #21389",https://github.com/elastic/elasticsearch/commit/6a6e1bed55271bfd10fdb29cb7ab42c45aaec888
3595,3595.0,3769.0,elastic/elasticsearch,bb94f3a2b26f96c55832c6e9ee11de3fd47b11dd,"Watcher: Refactor tests to ensure use of timewarp (elastic/elasticsearch#3973)

Ensure that tests never sleep, but run using timewarping,
so that sleeping can be removed from the test code.

Original commit: elastic/x-pack-elasticsearch@40fc3814f9d2983d50e71f9348a4fa712ea4d30f",https://github.com/elastic/elasticsearch/commit/bb94f3a2b26f96c55832c6e9ee11de3fd47b11dd
3596,3596.0,3770.0,elastic/elasticsearch,230ebc9ff62de2c04b85843b4a7d24fea2b54a83,"Merge pull request elastic/elasticsearch#3840 from rjernst/disco_zen_ping

x-plugins side of zen ping refactoring

Original commit: elastic/x-pack-elasticsearch@7767471a9a152cf30076a79d93bf73e0b26f7b38",https://github.com/elastic/elasticsearch/commit/230ebc9ff62de2c04b85843b4a7d24fea2b54a83
3597,3597.0,3771.0,elastic/elasticsearch,7dd418829987c9587f3b7d34d8095e958d9142f9,"Cleanup ScriptType (elastic/elasticsearch#3922)

Refactored ScriptType to clean up some of the variable and method names. Added more documentation. Deprecated the 'in' ParseField in favor of 'stored' to match the indexed scripts being replaced by stored scripts.

Original commit: elastic/x-pack-elasticsearch@d7c7bd73625c0a803750f048cc467ac2f37dc12b",https://github.com/elastic/elasticsearch/commit/7dd418829987c9587f3b7d34d8095e958d9142f9
3598,3598.0,3772.0,elastic/elasticsearch,185dff73461ae384f44fda5c7883fa6ba5e8c466,"Cleanup ScriptType (#21179)

Refactored ScriptType to clean up some of the variable and method names. Added more documentation. Deprecated the 'in' ParseField in favor of 'stored' to match the indexed scripts being replaced by stored scripts.",https://github.com/elastic/elasticsearch/commit/185dff73461ae384f44fda5c7883fa6ba5e8c466
3599,3599.0,3773.0,elastic/elasticsearch,54a71289ccf46bbe5d7e73b4fde2b9b78c248964,"Merge pull request elastic/elasticsearch#3902 from jdconrad/stype

Refactor ScriptType to be a top-level class.

Original commit: elastic/x-pack-elasticsearch@22862a3727b3ae877a9228fdd30a3baf9fdb47b3",https://github.com/elastic/elasticsearch/commit/54a71289ccf46bbe5d7e73b4fde2b9b78c248964
3600,3600.0,3774.0,elastic/elasticsearch,7a7d6ea8e67b3ec6f74ff73a75fa876245ebd546,"Merge pull request #21136 from jdconrad/stype

Refactor ScriptType to be a top-level class.",https://github.com/elastic/elasticsearch/commit/7a7d6ea8e67b3ec6f74ff73a75fa876245ebd546
3601,3601.0,3775.0,elastic/elasticsearch,72a49015cc970607f3a5e2946ce13ae9f2b8026f,"Refactor ScriptType to be a top-level class.

Original commit: elastic/x-pack-elasticsearch@39afcbfdf5159e05489b425545818bde57dfa54a",https://github.com/elastic/elasticsearch/commit/72a49015cc970607f3a5e2946ce13ae9f2b8026f
3602,3602.0,3776.0,elastic/elasticsearch,512a77a633831f0513a47df1555f9759f4fb3d3f,Refactor ScriptType to be a top-level class.,https://github.com/elastic/elasticsearch/commit/512a77a633831f0513a47df1555f9759f4fb3d3f
3603,3603.0,3777.0,elastic/elasticsearch,3d2e885157d8a18239bcf81dbc11019ddc2b537f,"Separates decision making from decision application in BalancedShardsAllocator  (#20634)

Refactors the BalancedShardsAllocator to create a method that
provides an allocation decision for allocating a single
unassigned shard or a single started shard that can no longer
remain on its current node.  Having a separate method that
provides a detailed decision on the allocation of a single shard
will enable the cluster allocation explain API to directly
invoke these methods to provide allocation explanations.",https://github.com/elastic/elasticsearch/commit/3d2e885157d8a18239bcf81dbc11019ddc2b537f
3604,3604.0,3778.0,elastic/elasticsearch,6dc4b0b74997ef0a711d2a4199dd8471f2d5537c,"x-plugins side of zen ping refactoring

see elastic/elasticsearchelastic/elasticsearch#21049

Original commit: elastic/x-pack-elasticsearch@57a0405eb73b76548dcd8c0bad132adc0f8de6dd",https://github.com/elastic/elasticsearch/commit/6dc4b0b74997ef0a711d2a4199dd8471f2d5537c
3605,3605.0,3779.0,elastic/elasticsearch,293a24e8e81504781f1782375550c66ce8ac5e6f,"Plugins: Add back user agent when downloading plugins (#20872)

This adds back a User-Agent header, which we had before large plugin
script refactorings for 5.0. The value is now
`elasticsearch-plugin-installer`.",https://github.com/elastic/elasticsearch/commit/293a24e8e81504781f1782375550c66ce8ac5e6f
3606,3606.0,3780.0,elastic/elasticsearch,ba4a3db03b7519624eee7c9acccaefeb4480a5fa,"Use ConstructingObjectParser for parsing DirectCandidateGenerator

When refactoring DirectCandidateGeneratorBuilder recently, the
ConstructingObjectParser that we have today was not available. Instead we used
some workaround, but it is better to remove this now and use
ConstructingObjectParser instead.",https://github.com/elastic/elasticsearch/commit/ba4a3db03b7519624eee7c9acccaefeb4480a5fa
3607,3607.0,3781.0,elastic/elasticsearch,8ab7ca5284581d59b3988024894a934504371092,"Source filtering should treat dots in field names as sub objects. (#20736)

Mappings treat dots in field names as sub objects, for instance

```
{
  ""a.b"": ""c""
}
```

generates the same dynamic mappings as

```
{
  ""a"": {
    ""b"": ""c""
  }
}
```

Source filtering should be consistent with this behaviour so that an include
list containing `a` should include fields whose name is `a.b`.

To make this change easier, source filtering was refactored to use automata.
The ability to treat dots in field names as sub objects is provided by the
`makeMatchDotsInFieldNames` method of `XContentMapValues`.

Closes #20719",https://github.com/elastic/elasticsearch/commit/8ab7ca5284581d59b3988024894a934504371092
3608,3608.0,3782.0,elastic/elasticsearch,01a6b7c4085efcaa314c01b6d22c5b59771d776c,"[TEST] Refactor Geo test names to follow naming and style convention

This commit closes a stale issue where GeoJson parsing tests used a combination of underscore and camel case.

closes #8998",https://github.com/elastic/elasticsearch/commit/01a6b7c4085efcaa314c01b6d22c5b59771d776c
3609,3609.0,3783.0,elastic/elasticsearch,821004d5cd4cb9d923ae00271f60759cdb901beb,"[TEST] Refactor LegacyGeohashMappingGeoPointTests to 2.x indices only

These tests should only exist to ensure backcompat with 2.x indices.",https://github.com/elastic/elasticsearch/commit/821004d5cd4cb9d923ae00271f60759cdb901beb
3610,3610.0,3784.0,elastic/elasticsearch,f9530dfe8f360183b42c32828c62743017fc0e47,"remove FetchSubPhaseContext in favour of generic fetch sub phase builder of type object

The context was an object where the parsed info are stored. That is more of what we call the builder since after the search refactoring. No need for generics in FetchSubPhaseParser then. Also the previous setHitsExecutionNeeded wasn't useful, it can be removed as well, given that once there is a parsed ext section, it will become a builder that can be retrieved by the sub fetch phase. The sub fetch phase is responsible for doing nothing in case the builder is not set, meaning that the fetch sub phase is plugged in but the request didn't have the corresponding section.",https://github.com/elastic/elasticsearch/commit/f9530dfe8f360183b42c32828c62743017fc0e47
3611,3611.0,3785.0,elastic/elasticsearch,a96c76dcbd082fd01e29099e8f64becd5f299966,"Remove FetchSubPhaseParseElement

With the search refactoring we don't use SearchParseElement anymore to define our own parsing code but only for plugins. There was an abstract subclass called FetchSubPhaseParseElement in our production code, only used in one of our tests. We can remove that abstract class as it is not needed and not that useful for the test that depends on it.",https://github.com/elastic/elasticsearch/commit/a96c76dcbd082fd01e29099e8f64becd5f299966
3612,3612.0,3786.0,elastic/elasticsearch,aef2e5d90ef99b4ede25804ef9b3b024146f5d88,"Remove `token_filter` in _analyze API

Fix wording in docs
Refactoring RestAnalyzeActionTests using expectThrows()

Closes #20283",https://github.com/elastic/elasticsearch/commit/aef2e5d90ef99b4ede25804ef9b3b024146f5d88
3613,3613.0,3787.0,elastic/elasticsearch,cc993de9968bc77fa7674c797fd30a554b2c856f,"Simplify shard-level bulk operation execution

This commit refactors execution of shard-level
bulk operations to use the same failure handling
for index, delete and update operations.",https://github.com/elastic/elasticsearch/commit/cc993de9968bc77fa7674c797fd30a554b2c856f
3614,3614.0,3788.0,elastic/elasticsearch,6f115a532d3161e4d2af2d92a13c26e307cbc731,"[Monitoring] Remove ""agent"" package

This removes the ""agent"" package from org.elasticsearch.xpack.monitoring.agent.*, so that now everything is simply org.elasticsearch.xpack.monitoring.*.

Follow-on work will be refactoring some of the other code, but this is a first step now that it's always the agent (in effect).

Original commit: elastic/x-pack-elasticsearch@14025cb17c114dfdc5df76394d8106e678eeb700",https://github.com/elastic/elasticsearch/commit/6f115a532d3161e4d2af2d92a13c26e307cbc731
3615,3615.0,3789.0,elastic/elasticsearch,b0ceecc3ebe2d5d2a4e2abc94a89785ac6ca2d6a,Refactored to use Settings object,https://github.com/elastic/elasticsearch/commit/b0ceecc3ebe2d5d2a4e2abc94a89785ac6ca2d6a
3616,3616.0,3790.0,elastic/elasticsearch,9eb63fb8850d3157a3f0b60ccfcd34374d6937d5,"Refactor GeoPointFieldMapperLegacy and Legacy BBox query helpers

This is a house cleaning commit that refactors GeoPointFieldMapperLegacy to LegacyGeoPointFieldMapper for consistency with Legacy Numerics and IP field mappers.

IndexedGeoBoundingBoxQuery and InMemoryGeoBoundingBoxQuery are also deprecated and refactored as Legacy classes.",https://github.com/elastic/elasticsearch/commit/9eb63fb8850d3157a3f0b60ccfcd34374d6937d5
3617,3617.0,3791.0,elastic/elasticsearch,a2a92b96297a8ac0012b4d8921b3bf4623c4043d,"Add roundtrip xcontent test to DiscountedCumulativeGainAt

This factors the roundtripping out of RatedDocumentTests. Makes
RankedListQualityMetric and RatedDocument implement FromXContenBuilder
to be able to do the aforementioned refactoring in a generic way. Adds
a roundtrip test to DiscountedCumulativeGainAt.

Open questions:

DiscountedCumulativeGain didn't have a constructor that accepted all possible
parameters as arguments. Added one. I guess we still want to keep the one
that only requires the position argument?

To make roundtripping work I had to change the NAME parameter when generating
XContent for DiscountedCumulativeGainAt - all remaining unit tests seem to be
passing (haven't checked the REST tests yet) - need to figure out why that was
there to begin with.",https://github.com/elastic/elasticsearch/commit/a2a92b96297a8ac0012b4d8921b3bf4623c4043d
3618,3618.0,3792.0,elastic/elasticsearch,af44ea04408696c526c1781540a122db6eacef7f,"security: move to a single SSLService

This change refactors the ssl services into a single class and reduces the number of
public methods that are exposed by the class. As part of this change, ssl configurations
must be loaded during construction of the service otherwise an exception will be thrown
when trying to retrieve the configuration. Additionally, the reloading of key material and
trust material is now handled by the SSLService instead of the SSLConfiguration. The
SSLConfiguration class has been made package private as its usage has been contained
to the ssl package entirely.

See elastic/elasticsearch#2971

Original commit: elastic/x-pack-elasticsearch@46e4535bb10a1c423cad2bcc022586fce574ef6a",https://github.com/elastic/elasticsearch/commit/af44ea04408696c526c1781540a122db6eacef7f
3619,3619.0,3793.0,elastic/elasticsearch,a01475a20b8a5b14da67c9979cdd953aefcc7598,"#19781 Refactored Rounding simplify Date Histogram code

Refactored Rounding simplify Date Histogram code",https://github.com/elastic/elasticsearch/commit/a01475a20b8a5b14da67c9979cdd953aefcc7598
3620,3620.0,3794.0,elastic/elasticsearch,785624e96b03c5fc011bfd89429036d758b404b7,"Restore interrupted status on when closing client

When closing a transport client that depends on Netty 4, interrupted
exceptions can be thrown while shutting down some Netty threads. This
commit refactors the handling of these exceptions to finish shutting
down and then just restore the interrupted status.",https://github.com/elastic/elasticsearch/commit/785624e96b03c5fc011bfd89429036d758b404b7
3621,3621.0,3795.0,elastic/elasticsearch,4923da93c83b0b0708747105f427aab03047168b,Refactors wait_for_active_shards index settings tests,https://github.com/elastic/elasticsearch/commit/4923da93c83b0b0708747105f427aab03047168b
3622,3622.0,3796.0,elastic/elasticsearch,d93f7d60850f23f0f19457bf3488249db57a5c81,Refactors ActiveShardCount,https://github.com/elastic/elasticsearch/commit/d93f7d60850f23f0f19457bf3488249db57a5c81
3623,3623.0,3797.0,elastic/elasticsearch,9d873141059064bb25c200de258d8bacd85eb52e,"Refactored Painless link nodes into expression nodes to simplify
load/store operations of variable/method chains.

Closes #19459",https://github.com/elastic/elasticsearch/commit/9d873141059064bb25c200de258d8bacd85eb52e
3624,3624.0,3798.0,elastic/elasticsearch,b26fb2f0de657ae1f1f486d0cf5259a2025e20f8,"Merge pull request elastic/elasticsearch#2795 from cjcenizal/7467/refactored-app-switcher-link

Update nav_control to use app-switcher-link directive.

Original commit: elastic/x-pack-elasticsearch@af290dd6c6c1c023cd998c5add2b6e3144f8d829",https://github.com/elastic/elasticsearch/commit/b26fb2f0de657ae1f1f486d0cf5259a2025e20f8
3625,3625.0,3799.0,elastic/elasticsearch,efc5de782b82272ab5509c27748b52ec005ec63a,"Watcher: Refactor integration test into rest test (elastic/elasticsearch#2864)

As the specified integration tests were better suited as REST tests, I changed them into
those and removed the (partially already unused) java classes.

Original commit: elastic/x-pack-elasticsearch@f26d8d94e8cb80ecec2cf0f56c764a13eec12c24",https://github.com/elastic/elasticsearch/commit/efc5de782b82272ab5509c27748b52ec005ec63a
3626,3626.0,3800.0,elastic/elasticsearch,a4f09d2b814595d7cca111cbc59d72fcf2dfb57d,"Restore parameter name auto_generate_phrase_queries (#19514)

During query refactoring the query string query parameter
'auto_generate_phrase_queries' was accidentally renamed
to 'auto_generated_phrase_queries'.

With this commit we restore the old name.

Closes #19512",https://github.com/elastic/elasticsearch/commit/a4f09d2b814595d7cca111cbc59d72fcf2dfb57d
3627,3627.0,3801.0,elastic/elasticsearch,c7e4f51d56f64cf82e55407e97d3cc61b5f9ad94,"Watcher: Prioritize configured response content type in HttpInput (elastic/elasticsearch#2790)

When a HTTP input has a configured response content, then this should
always be treated as preferred over the content type that is returned
by the server in order to give the user the power to decide.

This also refactors the code a bit to make it more readable.

Closes elastic/elasticsearch#2211

Original commit: elastic/x-pack-elasticsearch@ecdb4f931c98f313135fa12765715bb34ad0d474",https://github.com/elastic/elasticsearch/commit/c7e4f51d56f64cf82e55407e97d3cc61b5f9ad94
3628,3628.0,3802.0,elastic/elasticsearch,fcaeea298813b81c7773237ab48790df1958ba00,"Merge pull request elastic/elasticsearch#2643 from cjcenizal/refactor/merge-bootstrap-pagination

Merge Bootstrap pagination styles into paginated_table.less.

Original commit: elastic/x-pack-elasticsearch@4948e59cbf154e5505e782b2d32aa76a39a0bb3e",https://github.com/elastic/elasticsearch/commit/fcaeea298813b81c7773237ab48790df1958ba00
3629,3629.0,3803.0,elastic/elasticsearch,c557663b90dc3ac3f0ae7391cb6eac543812a946,"Make discovery-azure work again

The discovery-plugin has been broken since 2.x because the code was not compliant with the security manager and because plugins have been refactored.

closes #18637, #15630",https://github.com/elastic/elasticsearch/commit/c557663b90dc3ac3f0ae7391cb6eac543812a946
3630,3630.0,3804.0,elastic/elasticsearch,0ec07833a8f7fc9b8a2928444f2809514d8330ce,[TEST] refactor search yaml tests (#19109),https://github.com/elastic/elasticsearch/commit/0ec07833a8f7fc9b8a2928444f2809514d8330ce
3631,3631.0,3805.0,elastic/elasticsearch,4f49a261a748b6fa75e0da46b11f4f4a8011ab47,"Refactor InternalEngine inner methods

This commit refactors InternalEngine#innerIndex and
InternalEngine#innerDelete to collapse some common logic into a single
method. This has the advantage that it shrinks the bytecode size of
InternalEngine#innerIndex so that it can be inlined.",https://github.com/elastic/elasticsearch/commit/4f49a261a748b6fa75e0da46b11f4f4a8011ab47
3632,3632.0,3806.0,elastic/elasticsearch,b0efca64735eae2f0bd3573389083dd4c4eef175,"Merge pull request #18951 from rmuir/refactor_variables

Refactor painless variables handling",https://github.com/elastic/elasticsearch/commit/b0efca64735eae2f0bd3573389083dd4c4eef175
3633,3633.0,3807.0,elastic/elasticsearch,e8826708c170b39713729904ebe5494b5d1d3a76,Refactor variables,https://github.com/elastic/elasticsearch/commit/e8826708c170b39713729904ebe5494b5d1d3a76
3634,3634.0,3808.0,elastic/elasticsearch,eeb964c8869284cfe97543ae9ee5f99c86eb8f1c,"security: default role checks authenticating realm

This change makes the default role check the authenticating realm when authorizing
a request for the current user (or run as user) where the user is trying to change their
own password. We need to do this, otherwise we open up the potential of a user in one
realm changing the password of a user in another realm.

As part of this work, the authentication service has been refactored and simplified. A
new object, Authentication, is now returned when authenticating. Currently, this object
contains the user, authenticating realm information, and if it is a run as request the
information of the realm that looked up the user.

Closes elastic/elasticsearch#2089

Original commit: elastic/x-pack-elasticsearch@3fd9c37a166905e10249832abbfbd3eae4f168e3",https://github.com/elastic/elasticsearch/commit/eeb964c8869284cfe97543ae9ee5f99c86eb8f1c
3635,3635.0,3809.0,elastic/elasticsearch,ae6ce1c42e0b9693f329f243806806276b278760,Small refactoring and cleanup to separate the polymorphic and megamorphic case,https://github.com/elastic/elasticsearch/commit/ae6ce1c42e0b9693f329f243806806276b278760
3636,3636.0,3810.0,elastic/elasticsearch,b69e8aadbdab0902d989e2a52d63acf055a25b9c,refactor tests,https://github.com/elastic/elasticsearch/commit/b69e8aadbdab0902d989e2a52d63acf055a25b9c
3637,3637.0,3811.0,elastic/elasticsearch,f8738c853b4be8c22c2da5da5d6374a0ab68e4ce,"Merge pull request #18847 from rmuir/refactor_def_math

painless: refactor def math",https://github.com/elastic/elasticsearch/commit/f8738c853b4be8c22c2da5da5d6374a0ab68e4ce
3638,3638.0,3812.0,elastic/elasticsearch,7ecb4ca4e99ef2b1fed12284a135b1c7fd113ad9,Refactor def math,https://github.com/elastic/elasticsearch/commit/7ecb4ca4e99ef2b1fed12284a135b1c7fd113ad9
3639,3639.0,3813.0,elastic/elasticsearch,1d761775107b3b4c73d2b968c352b805225284eb,"Adds aggregation profiling (not including reduce phase)

Add Aggregation profiling initially only be for the shard phases (i.e. the reduce phase will not be profiled in this change)

This change refactors the query profiling class to extract abstract classes where it is useful for other profiler types to share code.",https://github.com/elastic/elasticsearch/commit/1d761775107b3b4c73d2b968c352b805225284eb
3640,3640.0,3814.0,elastic/elasticsearch,294fabb817a565283840d376a56ac02406265060,"Graph refactored package name to new xpack convention as per issue 2383

Original commit: elastic/x-pack-elasticsearch@ae798f64e87310f1c81c368c250e8e8b26ea6db1",https://github.com/elastic/elasticsearch/commit/294fabb817a565283840d376a56ac02406265060
3641,3641.0,3815.0,elastic/elasticsearch,acc9cea8f606b5093df074a4213e094844cc3ecd,"Fix compilation issue in RefreshListenersTests

This commit fixes a compilation issue in RefreshListenersTests that
arose from code being integrated into master, and then a large pull
request refactoring the handling of thread pools was later merged into
master.",https://github.com/elastic/elasticsearch/commit/acc9cea8f606b5093df074a4213e094844cc3ecd
3642,3642.0,3816.0,elastic/elasticsearch,576a543a2811e276d3a39bac1cfd5a7aafc086d0,"Register watcher thread pool

This commit register the watcher thread pool in the thread pool module
in core, and also makes the necessary changes to reflect a refactoring
that took place in core.

Relates elastic/elasticsearch#2397

Original commit: elastic/x-pack-elasticsearch@be298a7578f6eeb9731bd27aaa5afceb94ffcdfc",https://github.com/elastic/elasticsearch/commit/576a543a2811e276d3a39bac1cfd5a7aafc086d0
3643,3643.0,3817.0,elastic/elasticsearch,da74323141a69bd06fc19a70bc072143e9f0e986,"Register thread pool settings

This commit refactors the handling of thread pool settings so that the
individual settings can be registered rather than registering the top
level group. With this refactoring, individual plugins must now register
their own settings for custom thread pools that they need, but a
dedicated API is provided for this in the thread pool module. This
commit also renames the prefix on the thread pool settings from
""threadpool"" to ""thread_pool"". This enables a hard break on the settings
so that:
 - some of the settings can be given more sensible names (e.g., the max
   number of threads in a scaling thread pool is now named ""max"" instead
   of ""size"")
 - change the soft limit on the number of threads in the bulk and
   indexing thread pools to a hard limit
 - the settings names for custom plugins for thread pools can be
   prefixed (e.g., ""xpack.watcher.thread_pool.size"")
 - remove dynamic thread pool settings

Relates #18674",https://github.com/elastic/elasticsearch/commit/da74323141a69bd06fc19a70bc072143e9f0e986
3644,3644.0,3818.0,elastic/elasticsearch,a60b8948ba1d836a6eac7cff095519e618939ed8,"Merge branch 'master' into feature/seq_no

* master: (184 commits)
  Add back pending deletes (#18698)
  refactor matrix agg documentation from modules to main agg section
  Implement ctx.op = ""delete"" on _update_by_query and _reindex
  Close SearchContext if query rewrite failed
  Wrap lines at 140 characters (:qa projects)
  Remove log file
  painless: Add support for the new Java 9 MethodHandles#arrayLength() factory (see https://bugs.openjdk.java.net/browse/JDK-8156915)
  More complete exception message in settings tests
  Use java from path if JAVA_HOME is not set
  Fix uncaught checked exception in AzureTestUtils
  [TEST] wait for yellow after setup doc tests (#18726)
  Fix recovery throttling to properly handle relocating non-primary shards (#18701)
  Fix merge stats rendering in RestIndicesAction (#18720)
  [TEST] mute RandomAllocationDeciderTests.testRandomDecisions
  Reworked docs for index-shrink API (#18705)
  Improve painless compile-time exceptions
  Adds UUIDs to snapshots
  Add test rethrottle test case for delete-by-query
  Do not start scheduled pings until transport start
  Adressing review comments
  ...",https://github.com/elastic/elasticsearch/commit/a60b8948ba1d836a6eac7cff095519e618939ed8
3645,3645.0,3819.0,elastic/elasticsearch,371c73e14023917f3892090d2d3d7ff9ac1216b9,refactor matrix agg documentation from modules to main agg section,https://github.com/elastic/elasticsearch/commit/371c73e14023917f3892090d2d3d7ff9ac1216b9
3646,3646.0,3820.0,elastic/elasticsearch,6ff8124640f7b5f7288bab2be93430a14089b6ba,"Merge pull request elastic/elasticsearch#2388 from areek/extract_scheduler_engine_to_xpack

[refactor] extract trigger package and scheduler engine to top-level x-pack directory

Original commit: elastic/x-pack-elasticsearch@0a89cf2ca303e56c3a50401ab326e1bd26e37622",https://github.com/elastic/elasticsearch/commit/6ff8124640f7b5f7288bab2be93430a14089b6ba
3647,3647.0,3821.0,elastic/elasticsearch,54215ae4d58853a9650e08f4268de4ff8232032e,"Merge pull request elastic/elasticsearch#2386 from areek/move_clock_module_to_xpack

[refactor] move clock module to x-pack package

Original commit: elastic/x-pack-elasticsearch@750d3962cb14dbfaf4bea1c1b238e02e6d9b6272",https://github.com/elastic/elasticsearch/commit/54215ae4d58853a9650e08f4268de4ff8232032e
3648,3648.0,3822.0,elastic/elasticsearch,a40366800d89c8b84ac46460dd28841b70d2ebb9,"Merge pull request elastic/elasticsearch#2361 from tsullivan/monitoring-ui-fix-bytes-indices-listing

monitoring ui: refactor indices listing with JSX

Original commit: elastic/x-pack-elasticsearch@fc6cc4ed79b738dc821141253c81e3dec7ab69a8",https://github.com/elastic/elasticsearch/commit/a40366800d89c8b84ac46460dd28841b70d2ebb9
3649,3649.0,3823.0,elastic/elasticsearch,ad7229fe723fb2fa4ef4ba016ae145d10323c5c3,"Merge branch 'master' into feature/seq_no

* master: (158 commits)
  Document the hack
  Refactor property placeholder use of env. vars
  Force java9 log4j hack in testing
  Fix log4j buggy java version detection
  Make java9 work again
  Don't mkdir directly in deb init script
  Fix env. var placeholder test so it's reproducible
  Remove ScriptMode class in favor of boolean true/false
  [rest api spec] fix doc urls
  Netty request/response tracer should wait for send
  Filter client/server VM options from jvm.options
  [rest api spec] fix url for reindex api docs
  Remove use of a Fields class in snapshot responses that contains x-content keys, in favor of declaring/using the keys directly.
  Limit retries of failed allocations per index (#18467)
  Proxy box method to use valueOf.
  Use the build-in valueOf method instead of the custom one.
  Fixed tests and added a comment to the box method.
  Fix boxing.
  Do not decode path when sending error
  Fix race condition in snapshot initialization
  ...",https://github.com/elastic/elasticsearch/commit/ad7229fe723fb2fa4ef4ba016ae145d10323c5c3
3650,3650.0,3824.0,elastic/elasticsearch,ba14aca2185ef578280f8b05516794423d9a24e0,"Refactor property placeholder use of env. vars

This commit is a slight refactoring of the use of environment variables
in replacing property placeholders. In commit
115f983827c0c29652bd444c072b658b76651317 the constructor for
Settings.Builder was made package visible to provide a hook for tests to
mock obtaining environment variables. But we do not need to go that far
and can instead provide a small hook for this for tests without opening
up the constructor. Thus, in this commit we refactor
Settings.Builder#replacePropertyPlaceholders to a package-visible method
that accepts a function providing environment variables by names. The
public-visible method just delegates to this method passing in
System::getenv and tests can use the package-visible method to mock the
behavior they need without relying on external environment variables.",https://github.com/elastic/elasticsearch/commit/ba14aca2185ef578280f8b05516794423d9a24e0
3651,3651.0,3825.0,elastic/elasticsearch,cfedda5291372002c5fa6016ad11edc51d85c85e,"Default azure container should be `elasticsearch-snapshots`

This bug has been introduced in 5.0 when we refactored settings",https://github.com/elastic/elasticsearch/commit/cfedda5291372002c5fa6016ad11edc51d85c85e
3652,3652.0,3826.0,elastic/elasticsearch,584be0b3f82fcd498465091166f4c5dbe248e7db,"Refactor JvmGcMonitorService for testing

This commit refactors the JvmGcMonitorService so that it can be
tested. In particular, hooks are added to verify that the
JvmMonitorService correctly observes slow GC events, and that the
JvmGcMonitorService logs the correct messages.

Relates #18378",https://github.com/elastic/elasticsearch/commit/584be0b3f82fcd498465091166f4c5dbe248e7db
3653,3653.0,3827.0,elastic/elasticsearch,bb1fe7797a4f3a52b0967f8e4726ecb1908a2237,"Merge pull request #18382 from uschindler/painless_writerRefactoring

painless: Refactor WriterUtils to extend ASM GeneratorAdapter",https://github.com/elastic/elasticsearch/commit/bb1fe7797a4f3a52b0967f8e4726ecb1908a2237
3654,3654.0,3828.0,elastic/elasticsearch,75f27df376cf66624bcfdf1d155edaad83a6f489,"painless: Refactor WriterUtils to extends ASM GeneratorAdapter as ""MethodWriter"" for easy usage (and more coming later)",https://github.com/elastic/elasticsearch/commit/75f27df376cf66624bcfdf1d155edaad83a6f489
3655,3655.0,3829.0,elastic/elasticsearch,83df20b83b1a89384462942453ffdfc1a45d42d5,"Merge pull request #18370 from colings86/refactor/query-profiler

Refactor of query profile classes to make way for other profile implementations",https://github.com/elastic/elasticsearch/commit/83df20b83b1a89384462942453ffdfc1a45d42d5
3656,3656.0,3830.0,elastic/elasticsearch,e37e8af5e2a84e5f7538fed99cb207b4cd140d8d,Refactor of query profile classes to make way for other profile implementations,https://github.com/elastic/elasticsearch/commit/e37e8af5e2a84e5f7538fed99cb207b4cd140d8d
3657,3657.0,3831.0,elastic/elasticsearch,c41268b66a557115520d49d07220f0ab6f441717,"Merge pull request elastic/elasticsearch#2205 from ycombinator/gh-2002

Refactoring license checking to use server.plugins.xpackMain.info object

Original commit: elastic/x-pack-elasticsearch@b8be8cf25361ada447deeab4f9832534aa79ff8e",https://github.com/elastic/elasticsearch/commit/c41268b66a557115520d49d07220f0ab6f441717
3658,3658.0,3832.0,elastic/elasticsearch,3f0acdd70e0c597bc6e38c8aca439bdb808ddd31,"refactor tribe integ tests to test monitoring transport actions

Original commit: elastic/x-pack-elasticsearch@4c8735d4a8c4dce6e059afd9a30eb53925f0f326",https://github.com/elastic/elasticsearch/commit/3f0acdd70e0c597bc6e38c8aca439bdb808ddd31
3659,3659.0,3833.0,elastic/elasticsearch,5b12eef2d3759cb944027c8ad42c7b8266e4a646,"Fix ObjectPath#evalContext edge cases

This commit fixes an issue that was introduced in ObjectPath#evalContext
when refactoring from Strings#splitStringToArray to
String#split. Namely, the former would return an empty array when
receiving a null or empty string as input but the latter will NPE on a
null string and return an array containing the empty string on an empty
string input.

Original commit: elastic/x-pack-elasticsearch@2f509f9fa0885243c96bb404c127d2e5a3aa659a",https://github.com/elastic/elasticsearch/commit/5b12eef2d3759cb944027c8ad42c7b8266e4a646
3660,3660.0,3834.0,elastic/elasticsearch,15f33e61b74d4c65291f0ad157f89bd898f3ab96,"Kill redundant conditional in BootstrapCheck#check

This commit removes an unnecessary if statement in Bootstrap#check. The
removed if statement was duplicating the conditionals in the nested if
statements and was merely an artifact of an earlier refactoring.",https://github.com/elastic/elasticsearch/commit/15f33e61b74d4c65291f0ad157f89bd898f3ab96
3661,3661.0,3835.0,elastic/elasticsearch,74edbe6332ddec79843e9bbc64af0a0bad2fc50a,"Watcher: Refactoring, move to org.elasticsearch.xpack

This refactors the org.elasticsearch.watcher over to
org.elasticsearch.xpack.watcher

This also adds all watcher actions to the KnownActionsTests,
as watcher actions had not been taken care of until here.

Original commit: elastic/x-pack-elasticsearch@a046dc7c6af8549859ecce268e93d40a72d78fcb",https://github.com/elastic/elasticsearch/commit/74edbe6332ddec79843e9bbc64af0a0bad2fc50a
3662,3662.0,3836.0,elastic/elasticsearch,27f0a68a28afa8ed2f2deeb6dac0796c0c0a8ff3,"X-Pack Notification: Settings refactoring, removed 'service'

The service part is now obsolete with moving to `xpack.notification`.

Original commit: elastic/x-pack-elasticsearch@a7907f24a5c3e7593c9f76b064bd9e691a9442a3",https://github.com/elastic/elasticsearch/commit/27f0a68a28afa8ed2f2deeb6dac0796c0c0a8ff3
3663,3663.0,3837.0,elastic/elasticsearch,12ff8853f05d37f04c93e6ba3c931c08b6d08df0,"Monitoring/Watcher: Load version of templates in a static way (elastic/elasticsearch#2040)

The old implementation was to use properties at build-time. This however did not work,
as the tests could not be run in the IDE. This has been removed of monitoring for some
time already, but needs to be removed from watcher as well.

This commit uses static variables and refactors the code a bit. First, there is a generic
TemplateUtils class, to be used in monitoring and watcher. Also the watcher code has been changed
to copy the needed variables into the template registry class instead of keeping it in the
WatcherModule.

This commit also includes some refactoring to remove the version parameter in marvel, was static anyway

Closes elastic/elasticsearch#1372

Original commit: elastic/x-pack-elasticsearch@fbfc22ea09dbc4e1aa5162ab75b13ba444b39eea",https://github.com/elastic/elasticsearch/commit/12ff8853f05d37f04c93e6ba3c931c08b6d08df0
3664,3664.0,3838.0,elastic/elasticsearch,233fe86ee4ba3ee3dec83d331da99ade01dceae9,"Makes Script type writeable

Used to be Streamable. Left-over of the PROTOTYPE related refactoring by
@nik9000

Closes #17753",https://github.com/elastic/elasticsearch/commit/233fe86ee4ba3ee3dec83d331da99ade01dceae9
3665,3665.0,3839.0,elastic/elasticsearch,ace83d9d2a97cfe8a8aa9bdd7b46ce71713fb494,"Refactor UUID-generating methods out of Strings

This commit refactors the UUID-generating methods out of Strings into
their own class. The primary motive for this refactoring is to avoid a
chain of class initializers from loading this class earlier than
necessary. This was discovered when it was noticed that starting
Elasticsearch without any active network interfaces leads to some
logging statements being executed before logging had been
initailized. Thus:
 - these UUID methods have no place being on Strings
 - removing them reduces spooky action-at-distance loading of this class
 - removed the troublesome, logging statements from MacAddressProvider,
   logging using statically-initialized instances of ESLogger are prone
   to this problem

Relates #17837",https://github.com/elastic/elasticsearch/commit/ace83d9d2a97cfe8a8aa9bdd7b46ce71713fb494
3666,3666.0,3840.0,elastic/elasticsearch,666172284b53a94abfebc8a93e632259836e5ed1,"Refactor BootstrapCheckTests to use expectThrows

This commit modifies all uses of the pattern try/catch/assert in
BootstrapCheckTests to use expectThrows/assert.

Closes #17731",https://github.com/elastic/elasticsearch/commit/666172284b53a94abfebc8a93e632259836e5ed1
3667,3667.0,3841.0,elastic/elasticsearch,120e13148bf8944e3dea01f0de73fcedad030fd7,"Handle core search refactoring

Original commit: elastic/x-pack-elasticsearch@fb512063ca2ecc89a78b57a92f79650a797a0442",https://github.com/elastic/elasticsearch/commit/120e13148bf8944e3dea01f0de73fcedad030fd7
3668,3668.0,3842.0,elastic/elasticsearch,cc55c8ed48f60d17afd643e039445ad6ec9cf02d,"Merge pull request elastic/elasticsearch#1968 from tsullivan/monitoring-ui-metrics-refactor

Monitoring UI: refactor server/lib/metrics.js for more generalization and less duplication

Original commit: elastic/x-pack-elasticsearch@160bf7724d64e0e1deba6eb217942634b8b629e9",https://github.com/elastic/elasticsearch/commit/cc55c8ed48f60d17afd643e039445ad6ec9cf02d
3669,3669.0,3843.0,elastic/elasticsearch,b08d453a0a1de1cb090a72b2ad956b69037a70bd,"Fix EC2 Discovery settings (#17651)

Fixes two bugs introduced by the settings refactoring in #16602",https://github.com/elastic/elasticsearch/commit/b08d453a0a1de1cb090a72b2ad956b69037a70bd
3670,3670.0,3844.0,elastic/elasticsearch,66cc2029cd4016afb6ac45587c5980d11431dd77,Refactor old state version check to ZenDiscovery,https://github.com/elastic/elasticsearch/commit/66cc2029cd4016afb6ac45587c5980d11431dd77
3671,3671.0,3845.0,elastic/elasticsearch,28431946350fd9c61eaa4dee23bee5c44eeaff2c,"Merge pull request #17441 from cbuescher/remove-RescoreParseElement

Remove RescoreParseElement after refactoring to RescoreBuilder.",https://github.com/elastic/elasticsearch/commit/28431946350fd9c61eaa4dee23bee5c44eeaff2c
3672,3672.0,3846.0,elastic/elasticsearch,06184ee006ac9fa3733eb221e74739d4f3081ec9,"Remove RescoreParseElement

The refactoring of RescoreBuilder and QueryRescoreBuilder moved parsing
previously in RescoreParseElement into the builders. This removes the
left over parse element.",https://github.com/elastic/elasticsearch/commit/06184ee006ac9fa3733eb221e74739d4f3081ec9
3673,3673.0,3847.0,elastic/elasticsearch,4007ff44b76a52ecbe2d4965b262c6f58998c9aa,"Monitoring: Fix synchronization in Exporters

This commit fixes an issue in synchronization in Exporters class. The export() method is synchronized and when used with LocalExport can provoke a deadlock. LocalExporter exports data locally using bulk requests that can trigger cluster state updates for mapping updates. If a exporters settings update sneaks in, the settings update waits for the export to terminate but the export waits for the settings to be updated... and boom.

This commit removes the synchronized and refactor Exporters/LocalExporter to use state and dedicated instance of LocalBulk for each export so that synchronizing methods is not necessary anymore.

It also lower down some random settings in MonitoringBulkTests because the previous settings almost always fill the bulk thread pool.

closes elastic/elasticsearch#1769

Original commit: elastic/x-pack-elasticsearch@f50c916f8bab268048f6c2033d8a4821cb2135c2",https://github.com/elastic/elasticsearch/commit/4007ff44b76a52ecbe2d4965b262c6f58998c9aa
3674,3674.0,3848.0,elastic/elasticsearch,7e2696c57017a53b1dab3204228dce23857d899e,"Refactored inner hits parsing and intoduced InnerHitBuilder

Both top level and inline inner hits are now covered by InnerHitBuilder.
Although there are differences between top level and inline inner hits,
they now make use of the same builder logic.

The parsing of top level inner hits slightly changed to be more readable.
Before the nested path or parent/child type had to be specified as encapsuting
json object, now these settings are simple fields. Before this was required
to allow streaming parsing of inner hits without missing contextual information.

Once some issues are fixed with inline inner hits (around multi level hierachy of inner hits),
top level inner hits will be deprecated and removed in the next major version.",https://github.com/elastic/elasticsearch/commit/7e2696c57017a53b1dab3204228dce23857d899e
3675,3675.0,3849.0,elastic/elasticsearch,1c16d63a9a498a555f90291d51d9f415444518f5,"Merge pull request #17394 from camilojd/refactor/replace-getrandom

Refactor: replace all ocurrences of ESTestCase.getRandom() with LuceneTestCase.random()",https://github.com/elastic/elasticsearch/commit/1c16d63a9a498a555f90291d51d9f415444518f5
3676,3676.0,3850.0,elastic/elasticsearch,7be11a36cdfb87201b205341b28a91872533443c,"Refactor: replace all ocurrences of ESTestCase.getRandom() for random().
Remove getRandom().",https://github.com/elastic/elasticsearch/commit/7be11a36cdfb87201b205341b28a91872533443c
3677,3677.0,3851.0,elastic/elasticsearch,0c70a9d5bd6c6fe230bdcf1bf33351161504c3b2,"fix bug introduced with refactoring of DiscoveryNode constructors

Transport client was replacing the address of the nodes connecting to with the ones received from the liveness api rather keeping the original listed nodes. Written a test for that.",https://github.com/elastic/elasticsearch/commit/0c70a9d5bd6c6fe230bdcf1bf33351161504c3b2
3678,3678.0,3852.0,elastic/elasticsearch,ad5438a6a96a3100dcf6750db1c5cfa4e9df886b,"Use expectThrows in YamlSettingsLoaderTests

This commit refactors the unit tests in YamlSettingsLoaderTests to use
exceptThrows for simplification.",https://github.com/elastic/elasticsearch/commit/ad5438a6a96a3100dcf6750db1c5cfa4e9df886b
3679,3679.0,3853.0,elastic/elasticsearch,f9500b1d6a2689980cfd130a8844b1e2a2108109,"Use expectThrows in JsonSettingsLoaderTests

This commit refactors the unit tests in JsonSettingsLoaderTests to use
exceptThrows for simplification.",https://github.com/elastic/elasticsearch/commit/f9500b1d6a2689980cfd130a8844b1e2a2108109
3680,3680.0,3854.0,elastic/elasticsearch,c0fa00a2fdb27a7501cac62870d5a83c3771fec8,"Use expectThrows in PropertiesSettingsLoaderTests

This commit refactors the unit tests in PropertiesSettingsLoaderTests to
use exceptThrows for simplification.",https://github.com/elastic/elasticsearch/commit/c0fa00a2fdb27a7501cac62870d5a83c3771fec8
3681,3681.0,3855.0,elastic/elasticsearch,7323c373391f54cbeaf56ac27bd7b702c2c97d31,"Refactor PropertiesSettingsLoader

This commit refactors PropertiesSettingsLoader to remove some duplicate
code.",https://github.com/elastic/elasticsearch/commit/7323c373391f54cbeaf56ac27bd7b702c2c97d31
3682,3682.0,3856.0,elastic/elasticsearch,201fc06f8d7e28a0940365314a786ac6230f7ace,"Fix TaskId#isSet to return true when id is set and not other way around

During refactoring the name was changed, but the logic wasn't. This commit fixes the logic to match the name.",https://github.com/elastic/elasticsearch/commit/201fc06f8d7e28a0940365314a786ac6230f7ace
3683,3683.0,3857.0,elastic/elasticsearch,b614e3e075b8cba168b00a071023ab313cb61fb1,"Switch to using refactored SortBuilder in SearchSourceBuilder and elsewhere

Switching from using list of BytesReference to real SortBuilder list in
SearchSourceBuilder, TopHitsAggregatorBuilder and TopHitsAggregatorFactory.
Removing SortParseElement and related sort parsers.",https://github.com/elastic/elasticsearch/commit/b614e3e075b8cba168b00a071023ab313cb61fb1
3684,3684.0,3858.0,elastic/elasticsearch,2f1af552a94e1b04fa9b75e40a78bb95518c22c3,"Bring back operation rollback on unexpected mapping change during recovery

We lost some accounting code in the translog recover code during refactoring
which triggers a very rare assertion. If we fail on a recovery target with an
illegal mapping update (which can happen if the clusterstate is behind), then
we miss to rollback the # of processed ops in that batch and once we resume
the batch we trip an assertion that the stats are off.

This commit brings back the code lost in 8bc2332d9ab028a5415a9606cd349790d3f5dc99
and improves the comment that explains why we need this rollback logic.",https://github.com/elastic/elasticsearch/commit/2f1af552a94e1b04fa9b75e40a78bb95518c22c3
3685,3685.0,3859.0,elastic/elasticsearch,e50eeeaffb33d7eaa0f7c2ebc71f1208460f4fcd,"Refactor fielddata mappings. #17148

The fielddata settings in mappings have been refatored so that:
 - text and string have a `fielddata` (boolean) setting that tells whether it
   is ok to load in-memory fielddata. It is true by default for now but the
   plan is to make it default to false for text fields.
 - text and string have a `fielddata_frequency_filter` which contains the same
   thing as `fielddata.filter.frequency` used to (but validated at parsing time
   instead of being unchecked settings)
 - regex fielddata filtering is not supported anymore and will be dropped from
   mappings automatically on upgrade.
 - text, string and _parent fields have an `eager_global_ordinals` (boolean)
   setting that tells whether to load global ordinals eagerly on refresh.
 - in-memory fielddata is not supported on keyword fields anymore at all.
 - the `fielddata` setting is not supported on other fields that text and string
   and will be dropped when upgrading if specified.",https://github.com/elastic/elasticsearch/commit/e50eeeaffb33d7eaa0f7c2ebc71f1208460f4fcd
3686,3686.0,3860.0,elastic/elasticsearch,14f45c17847723bf9968d5a7d0753f4bb4b9463f,"Merge pull request #17146 from cbuescher/sort-add-build

For the refactoring of SortBuilders related to #10217, each SortBuilder needs to get a build()
method that produces a SortField according to the SortBuilder parameters on the shard.",https://github.com/elastic/elasticsearch/commit/14f45c17847723bf9968d5a7d0753f4bb4b9463f
3687,3687.0,3861.0,elastic/elasticsearch,6db6c15d0662f6fc310a3f97eddddd3b9c432aec,"Add tests of POSIX handling for installing plugins

This commit refactors the unit tests for installing plugins to test
against mock filesystems (as well as the native filesystem) for better
test coverage. This commit also adds tests that cover the POSIX
attributes handling when installing plugins (e.g., ensuring that the
plugins directory has the right permissions, the bin directory has
execute permissions, and the config directory has the same owner and
group as its parent).",https://github.com/elastic/elasticsearch/commit/6db6c15d0662f6fc310a3f97eddddd3b9c432aec
3688,3688.0,3862.0,elastic/elasticsearch,554eb8aa87fbd7d516b8b30b88d5008b04b91796,"Refactor POSIX handling when installing plugins

This commit refactors the handling of POSIX filesystem attributes when
install plugins.",https://github.com/elastic/elasticsearch/commit/554eb8aa87fbd7d516b8b30b88d5008b04b91796
3689,3689.0,3863.0,elastic/elasticsearch,4335997017d3a7862757bc19dd817f86f5b34d9b,"Aggregations: Fixes the defaults for `keyed` in the percentiles aggregations

During the aggregation refactoring the default value for `keyed` in the `percentiles` and `percentile_ranks` aggregation was inadvertently changed from `true` to `false`. This change reverts the defaults to the old (correct) value",https://github.com/elastic/elasticsearch/commit/4335997017d3a7862757bc19dd817f86f5b34d9b
3690,3690.0,3864.0,elastic/elasticsearch,e3b7e5d75a876cd21846248b64532f49bce8203e,"percolator: Replace percolate api with the new percolator query

Also replaced the PercolatorQueryRegistry with the new PercolatorQueryCache.

The PercolatorFieldMapper stores the rewritten form of each percolator query's xcontext
in a binary doc values field. This make sure that the query rewrite happens only during
indexing (some queries for example fetch shapes, terms in remote indices) and
the speed up the loading of the queries in the percolator query cache.

Because the percolator now works inside the search infrastructure a number of features
(sorting fields, pagination, fetch features) are available out of the box.

The following feature requests are automatically implemented via this refactoring:

Closes #10741
Closes #7297
Closes #13176
Closes #13978
Closes #11264
Closes #10741
Closes #4317",https://github.com/elastic/elasticsearch/commit/e3b7e5d75a876cd21846248b64532f49bce8203e
3691,3691.0,3865.0,elastic/elasticsearch,1908d6dc7366ae1a72e1d0390470622ceca5ecda,"Add build() method to SortBuilder implementations

For the current refactoring of SortBuilders related to #10217,
each SortBuilder should get a build() method that produces a
SortField according to the SortBuilder parameters on the shard.

This change also slightly refactors the current parse method in
SortParseElement to extract an internal parse method that returns
a list of sort fields only needs a QueryShardContext as input
instead of a full SearchContext. This allows using this internal
parse method for testing.",https://github.com/elastic/elasticsearch/commit/1908d6dc7366ae1a72e1d0390470622ceca5ecda
3692,3692.0,3866.0,elastic/elasticsearch,8e79737b063626dc1dd0122faa3e6be9f6f05d7f,"Merge pull request elastic/elasticsearch#1696 from abeyad/suggester-wiring

Suggester refactoring requires a Suggester to parse X-Content to Builder

Original commit: elastic/x-pack-elasticsearch@26f4d840680c3fd3577adab1616aa0e4e2bb5b8f",https://github.com/elastic/elasticsearch/commit/8e79737b063626dc1dd0122faa3e6be9f6f05d7f
3693,3693.0,3867.0,elastic/elasticsearch,055234c893ea9402fe7eb1af742ef53f31670818,"Merge branch 'feature-suggest-refactoring'

Refactors all suggestion builders to be able to be parsed on
the coordinating node and serialized as objects to the shards.
Specifically, all SuggestionBuilder implementations implement
NamedWritable for serialization, a fromXContent() method that
handles parsing xContent and a build() method that is called
on the shard to create the SuggestionContext.

Relates to #10217",https://github.com/elastic/elasticsearch/commit/055234c893ea9402fe7eb1af742ef53f31670818
3694,3694.0,3868.0,elastic/elasticsearch,7d8149cb8633b56b320094ad2f4d9a71a2e8a06c,"Suggester refactoring requires a Suggester to parse X-Content to Builder

As part of the search refactoring effort, we need to pass a Suggester
to the methods that parse X-Content to a SuggestBuilder in every
instance where we are parsing search/suggest requests.

Original commit: elastic/x-pack-elasticsearch@7f815c617a736feaa6d7f53333ba3fd2c4dd741f",https://github.com/elastic/elasticsearch/commit/7d8149cb8633b56b320094ad2f4d9a71a2e8a06c
3695,3695.0,3869.0,elastic/elasticsearch,6ddf9ae92fc4b10e7561c2e289c59d1b67fe4cc3,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/6ddf9ae92fc4b10e7561c2e289c59d1b67fe4cc3
3696,3696.0,3870.0,elastic/elasticsearch,39667b5793b8c684ed7d8c8571611740a0fd8288,"Merge branch 'master' into feature-suggest-refactoring

 Conflicts:
	docs/reference/migration/migrate_5_0/java.asciidoc",https://github.com/elastic/elasticsearch/commit/39667b5793b8c684ed7d8c8571611740a0fd8288
3697,3697.0,3871.0,elastic/elasticsearch,b4b874f0d81f123c70d6c27714844d75f8df6b4e,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/b4b874f0d81f123c70d6c27714844d75f8df6b4e
3698,3698.0,3872.0,elastic/elasticsearch,4b5783bdd9d74a3bb997ae04bbf55ae7e05ec18b,"Merge pull request #16127 from MaineC/enhancement/15178-sort-fieldsortbuilder

Refactor FieldSortBuilder to add serialization support",https://github.com/elastic/elasticsearch/commit/4b5783bdd9d74a3bb997ae04bbf55ae7e05ec18b
3699,3699.0,3873.0,elastic/elasticsearch,345e988bbcceb5f6ff203820d3ee8bcb5abecd29,"Merge pull request #17072 from s1monw/add_backwards_rest_tests

Add infrastructure to run REST tests on a multi-version cluster

This change adds the infrastructure to run the rest tests on a multi-node
cluster that users 2 different minor versions of elasticsearch. It doesn't implement
any dedicated BWC tests but rather leverages the existing REST tests.

Since we don't have a real version to test against, the tests uses the current version
until the first minor / RC is released to ensure the infrastructure works.

Given the amount of problems this change already found I think it's worth having this run with our test suite by default. The structure of this infra will likely change over time but for now it's a step into the right direction. We will likely want to split it up into integTests and integBwcTests etc. so each plugin can have it's own bwc tests but that's left for future refactoring.",https://github.com/elastic/elasticsearch/commit/345e988bbcceb5f6ff203820d3ee8bcb5abecd29
3700,3700.0,3874.0,elastic/elasticsearch,f527a034a39d5889d036451f01f4e8ff5f2e0e82,Merge remote-tracking branch 'upstream/master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/f527a034a39d5889d036451f01f4e8ff5f2e0e82
3701,3701.0,3875.0,elastic/elasticsearch,40f3501d7f105a1703fd823bb7d701ba1fe342da,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/40f3501d7f105a1703fd823bb7d701ba1fe342da
3702,3702.0,3876.0,elastic/elasticsearch,5bff6e421843dffe9a2a1a856a257398cc3a858e,"Refactor FieldSortBuilder

* adds json parsing,
* refactors json serialisation,
* adds writable parsing and serialisation,
* adds json and writable roundtrip test",https://github.com/elastic/elasticsearch/commit/5bff6e421843dffe9a2a1a856a257398cc3a858e
3703,3703.0,3877.0,elastic/elasticsearch,97638c95fc662728f0c0aff8d450274b9a27ad65,"Merge branch 'master' into feature-suggest-refactoring

 Conflicts:
	docs/reference/migration/migrate_5_0.asciidoc",https://github.com/elastic/elasticsearch/commit/97638c95fc662728f0c0aff8d450274b9a27ad65
3704,3704.0,3878.0,elastic/elasticsearch,31dcb3e18bc62945d2557cf804c7b2feff8b61ca,"Merge pull request #16873 from abeyad/suggester-wiring-refactoring

Change internal representation of suggesters",https://github.com/elastic/elasticsearch/commit/31dcb3e18bc62945d2557cf804c7b2feff8b61ca
3705,3705.0,3879.0,elastic/elasticsearch,daeffb149c1cb7dbfa0892d7e6a3ae451af00f20,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/daeffb149c1cb7dbfa0892d7e6a3ae451af00f20
3706,3706.0,3880.0,elastic/elasticsearch,807d0852181da5ae332eafab4ce26980610c03c4,Merge remote-tracking branch 'upstream/feature-suggest-refactoring' into suggester-wiring-refactoring,https://github.com/elastic/elasticsearch/commit/807d0852181da5ae332eafab4ce26980610c03c4
3707,3707.0,3881.0,elastic/elasticsearch,69c83b3459f100055c316f364cea3cd58d713b52,"Merge branch 'master' into feature-suggest-refactoring

 Conflicts:
	core/src/main/java/org/elasticsearch/action/suggest/TransportSuggestAction.java
        core/src/main/java/org/elasticsearch/search/suggest/SuggestParseElement.java
	core/src/main/java/org/elasticsearch/search/suggest/SuggestionSearchContext.java
	core/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggester.java",https://github.com/elastic/elasticsearch/commit/69c83b3459f100055c316f364cea3cd58d713b52
3708,3708.0,3882.0,elastic/elasticsearch,11b18a996378bd83065fdc835c7dee9921c44aa0,"Sort: Make ScoreSortBuilder implement NamedWriteable and add fromXContent parsing

This change makes ScoreSortBuilder implement NamedWriteable, adds
equals() and hashCode() and also implements parsing ScoreSortBuilder
back from xContent. This is needed for the ongoing Search refactoring.",https://github.com/elastic/elasticsearch/commit/11b18a996378bd83065fdc835c7dee9921c44aa0
3709,3709.0,3883.0,elastic/elasticsearch,98249507cff3e363ecb4c5f06f14f0bb96da1ad5,"Add missing index name to indexing slow log

This was lost in refactoring even on the 2.x branch. The slow-log
is not per index not per shard anymore such that we don't add the
shard ID as the logger prefix. This commit adds back the index
name as part of the logging message not as a prefix on the logger
for better testabilitly.

Closes #17025",https://github.com/elastic/elasticsearch/commit/98249507cff3e363ecb4c5f06f14f0bb96da1ad5
3710,3710.0,3884.0,elastic/elasticsearch,1264f37a1b48b4348feaf9df05c8c551a834e015,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/1264f37a1b48b4348feaf9df05c8c551a834e015
3711,3711.0,3885.0,elastic/elasticsearch,350e3a485094cf57113f1c8d340c68e536a733b5,"Merge pull request #16955 from cbuescher/timezone-dateRangeAgg

Date range aggregations used to be unable to use a `time_zone` parameter to e.g. be applied 
int date math roundings like in `now/d` (see #10130 as an example). After the aggregation 
refactoring, the time_zone parameter has been pulled up to ValuesSourceAggregatorBuilder 
and can now be used in date range aggregations as well. 

This change adds randomized time zone settings to the existing IT tests to verify that the 
`time_zone` parameter is honored when calculating the bucket boundaries. Also moving 
the DateRangeTests from module-groovy/messy back to core as DateRangeIT, sharing 
common script mocks with DateHistogramIT and adding documentation for the 
`time_zone` parameter in the date range aggregation docs.

Closes #10130",https://github.com/elastic/elasticsearch/commit/350e3a485094cf57113f1c8d340c68e536a733b5
3712,3712.0,3886.0,elastic/elasticsearch,7ec5075a87668190f871b9103b03012b0df551ce,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/7ec5075a87668190f871b9103b03012b0df551ce
3713,3713.0,3887.0,elastic/elasticsearch,9135c3c9676b1022adc4a53ae8013bae90c6a9da,"Only wait for initial state unless we already got a master

This seems to be an error introduced in refactoring around #16821
where we now wait 30seconds by default if the node already joined
a cluster and got a master. This can slow down tests dramatically
espeically on slow boxes and notebooks.

Closes #16956",https://github.com/elastic/elasticsearch/commit/9135c3c9676b1022adc4a53ae8013bae90c6a9da
3714,3714.0,3888.0,elastic/elasticsearch,a8e52eb520933baa18ae2665711ae1fbc906fd6c,"Monitoring: Clean up and refactoring

This commit removes various constructors in monitoring documents and add a single constructeur that accepts a monitoring id and version. It also renames *Renderer classes to *Resolver and centralizes the logic of resolving the index name, type name and id in 1 place. It changes Exporter so that they use these resolvers to know in which index a given document must be indexed.

Original commit: elastic/x-pack-elasticsearch@c2349a95a66f3f18b91f6d5a87a55a0e1d20b3c7",https://github.com/elastic/elasticsearch/commit/a8e52eb520933baa18ae2665711ae1fbc906fd6c
3715,3715.0,3889.0,elastic/elasticsearch,ef4db5c1e45f98aca78d18e2ae8a3660eec41c35,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/ef4db5c1e45f98aca78d18e2ae8a3660eec41c35
3716,3716.0,3890.0,elastic/elasticsearch,9ad591900242a09343dfcb89fcf0d060c19a2175,"Refactor bootstrap checks

This commit refactors the bootstrap checks into a dedicated class. The
refactoring provides a model for different limits per operating system,
and provides a model for unit tests for individual checks.

Closes #16844",https://github.com/elastic/elasticsearch/commit/9ad591900242a09343dfcb89fcf0d060c19a2175
3717,3717.0,3891.0,elastic/elasticsearch,c0e5e40e02faf1893feca99225e1febe0a7b57b9,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/c0e5e40e02faf1893feca99225e1febe0a7b57b9
3718,3718.0,3892.0,elastic/elasticsearch,aecf51cb42ea1abf1399989a23cae296542bfe6c,"Merge branch 'master' into feature-suggest-refactoring

 Conflicts:
	core/src/main/java/org/elasticsearch/rest/action/search/RestSearchAction.java",https://github.com/elastic/elasticsearch/commit/aecf51cb42ea1abf1399989a23cae296542bfe6c
3719,3719.0,3893.0,elastic/elasticsearch,a7053afdb962b2e710cc1b1c1d2dff3b99658a83,"Merge branch 'master' into feature-suggest-refactoring

 Conflicts:
	docs/reference/migration/migrate_5_0.asciidoc",https://github.com/elastic/elasticsearch/commit/a7053afdb962b2e710cc1b1c1d2dff3b99658a83
3720,3720.0,3894.0,elastic/elasticsearch,7a42014909ba319fccdd19617cc599f75681ee03,"Upgrade Azure Storage client to 4.0.0

We are using `2.0.0` today but Azure team now recommends:

```xml
<dependency>
    <groupId>com.microsoft.azure</groupId>
    <artifactId>azure-storage</artifactId>
    <version>4.0.0</version>
</dependency>
```

This new version fix the timeout issues we have seen with azure storage although #15080 adds a timeout support.
Azure storage client 2.0.0 was not passing correctly this value when it was calling Azure services.

Note that the timeout is a server side timeout and not client side timeout.
It means that it will raise only a timeout when:

* upload of blob is complete
* if azure service is not able to process the blob (and store it) within a given time range.

In which case it will raise an exception which elasticsearch can deal with:

```
java.io.IOException
    at __randomizedtesting.SeedInfo.seed([91BC11AEF16E073F:6886FA5308FCE4D8]:0)
    at com.microsoft.azure.storage.core.Utility.initIOException(Utility.java:643)
    at com.microsoft.azure.storage.blob.BlobOutputStream.writeBlock(BlobOutputStream.java:444)
    at com.microsoft.azure.storage.blob.BlobOutputStream.access$000(BlobOutputStream.java:53)
    at com.microsoft.azure.storage.blob.BlobOutputStream$1.call(BlobOutputStream.java:388)
    at com.microsoft.azure.storage.blob.BlobOutputStream$1.call(BlobOutputStream.java:385)
    at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
Caused by: com.microsoft.azure.storage.StorageException: Operation could not be completed within the specified time.
    at com.microsoft.azure.storage.StorageException.translateException(StorageException.java:89)
    at com.microsoft.azure.storage.core.StorageRequest.materializeException(StorageRequest.java:305)
    at com.microsoft.azure.storage.core.ExecutionEngine.executeWithRetry(ExecutionEngine.java:175)
    at com.microsoft.azure.storage.blob.CloudBlockBlob.uploadBlockInternal(CloudBlockBlob.java:1006)
    at com.microsoft.azure.storage.blob.CloudBlockBlob.uploadBlock(CloudBlockBlob.java:978)
    at com.microsoft.azure.storage.blob.BlobOutputStream.writeBlock(BlobOutputStream.java:438)
    ... 9 more
```

The following code was used to test this against Azure platform:

```java
public void testDumb() throws URISyntaxException, StorageException, IOException, InvalidKeyException {
    String connectionString = ""MY-AZURE-STRING"";

    CloudStorageAccount storageAccount = CloudStorageAccount.parse(connectionString);
    CloudBlobClient client = storageAccount.createCloudBlobClient();
    client.getDefaultRequestOptions().setTimeoutIntervalInMs(1000);
    CloudBlobContainer container = client.getContainerReference(""dumb"");
    container.createIfNotExists();
    CloudBlockBlob blob = container.getBlockBlobReference(""blob"");

    File sourceFile = File.createTempFile(""sourceFile"", "".tmp"");

    try {
        int fileSize = 10000000;

        byte[] buffer = new byte[fileSize];
        Random random = new Random();
        random.nextBytes(buffer);

        logger.info(""Generate local file"");
        FileOutputStream fos = new FileOutputStream(sourceFile);
        fos.write(buffer);
        fos.close();
        logger.info(""End generate local file"");

        FileInputStream fis = new FileInputStream(sourceFile);

        logger.info(""Start uploading"");
        blob.upload(fis, fileSize);
        logger.info(""End uploading"");

    }
    finally {
        if (sourceFile.exists()) {
            sourceFile.delete();
        }
    }
}
```

With 2.0.0, the above code was not raising any exception. With 4.0.0, the exception is now thrown correctly.

The default timeout is 5 minutes. See https://github.com/Azure/azure-storage-java/blob/master/microsoft-azure-storage/src/com/microsoft/azure/storage/core/Utility.java#L352-L375

Closes #12567.

Release notes from 2.0.0:

 * Removed deprecated table AtomPub support.
 * Removed deprecated constructors which take service clients in favor of constructors which take credentials.
 * Added support for ""Add"" permissions on Blob SAS.
 * Added support for ""Create"" permissions on Blob and File SAS.
 * Added support for IP Restricted SAS and Protocol SAS.
 * Added support for Account SAS to all services.
 * Added support for Minute and Hour Metrics to FileServiceProperties and added support for File Metrics to CloudAnalyticsClient.
 * Removed deprecated startCopyFromBlob() on CloudBlob. Use startCopy() instead.
 * Removed deprecated Credentials and StorageKey classes. Please use the appropriate methods on StorageCredentialsAccountAndKey instead.

 * Fixed a bug in table where a select on a non-existent field resulted in a null reference exception if the corresponding field in the TableEntity was not nullable.
 * Fixed a bug in table where JsonParser was automatically closing the response stream before it was completely drained causing socket exhaustion.
 * Fixed a bug in StorageCredentialsAccountAndKey.updateKey(String) which prevented valid keys from being set.
 * Added CloudBlobContainer.listBlobs(final String, final boolean) method.
 * Fixed a bug in blob where using AccessConditions on block blob uploads larger than 64MB done with the upload* methods or block blob uploads done openOutputStream with would fail if the blob did not already exist.
 * Added support for setting a proxy per request. Proxy can be set on an OperationContext instance and will be used when that instance is passed to the request method.

 * Added support for SAS to the Azure File service.
 * Added support for Append Blob.
 * Added support for Access Control Lists (ACL) to File Shares.
 * Added support for getting and setting of CORS rules to File service.
 * Added support for ShareStats to File Shares.
 * Added support for copying an Azure File to another Azure File or a Block Blob asynchronously, and aborting Azure File copy operations asynchronously.
 * Added support for copying a Blob to an Azure File asynchronously.
 * Added support for setting a maximum quota property on a File Share.
 * Removed deprecated AuthenticationScheme and its getter and setter. In the future only SharedKey will be used.
 * Removed deprecated getter/setters for all request option properties on the service clients. Please use the default request options getter/setters instead.
 * Removed getSubDirectoryReference() for blob directories and file directories. Use getDirectoryReference() instead.
 * Removed getEntityClass() in TableQuery. Please use getClazzType() instead.
 * Added client-side verification for lease duration and break periods.
 * Deprecated the setters in table for timestamp as this property is only modifiable by the service.
 * Deprecated startCopyFromBlob() on CloudBlob. Use startCopy() instead.
 * Deprecated the Credentials and StorageKey classes. Please use the appropriate methods on StorageCredentialsAccountAndKey instead.
 * Deprecated constructors which take service clients in favor of constructors which take credentials.
 * Fixed a bug where the DateBackwardCompatibility flag was not applied if set on the CloudTableClient default request options.
 * Changed library behavior to retry all exceptions thrown when parsing a response object.
 * Changed behavior to stop removing query parameters passed in with the resource URI if that URI contains a SAS token. Some query parameters such as comp, restype, snapshot and api-version will still be removed.
 * Added support for logging StringToSign to SharedKey and SAS.
 * **Added a connect timeout to prevent hangs when establishing the network connection.**
 * **Made performance enhancements to the BlobOutputStream class.**

 * Fixed a bug where maximum execution time was ignored for file, queue, and table services.
 * **Changed the socket timeout to be set to the service side timeout plus 5 minutes when maximum execution time is not set.**
 * **Changed the socket timeout to default to 5 minutes rather than infinite when neither service side timeout or maximum execution time are set.**
 * Fixed a bug where MD5 was calculated for commitBlockList even though UseTransactionalMD5 was set to false.
 * Fixed a bug where selecting fields that did not exist returned an error rather than an EntityProperty with a null value.
 * Fixed a bug where table entities with a single quote in their partition or row key could be inserted but not operated on in any other way.

 * Fixed a bug for all listing API's where next() would sometimes throw an exception if hasNext() had not been called even if there were more elements to iterate on.
 * Added sequence number to the blob properties. This is populated for page blobs.
 * Creating a page blob sets its length property.
 * Added support for page blob sequence numbers and sequence number access conditions.
 * Fixed a bug in abort copy where the lease access condition was not sent to the service.
 * Fixed an issue in startCopyFromBlob where if the URI of the source blob contained certain non-ASCII characters they would not be encoded appropriately. This would result in Authorization failures.
 * Fixed a small performance issue in XML serialization.
 * Fixed a bug in BlobOutputStream and FileOutputStream where flush added data to a request pool rather than immediately committing it to the Azure service.
 * Refactored to remove the blob, queue, and file package dependency on table in the error handling code.
 * Added additional client-side logging for REST requests, responses, and errors.

Closes #15976.",https://github.com/elastic/elasticsearch/commit/7a42014909ba319fccdd19617cc599f75681ee03
3721,3721.0,3895.0,elastic/elasticsearch,379bd94c2a3d6360eb07a4481940202b173d0a0c,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/379bd94c2a3d6360eb07a4481940202b173d0a0c
3722,3722.0,3896.0,elastic/elasticsearch,cc8109bc87fa449883411d4d267f447cbbbf7458,"Watcher: Fix naming of data attachments to use id in email attachments

This is a small fix to use specified id when sending data attachments.
The current solution always used ""data"".

Also a minor refactoring was made to include get the different parser impls
from the EmailAttachmentsParser instead of specifying them twice in the
EmailAction.

Closes elastic/elasticsearch#1503

Original commit: elastic/x-pack-elasticsearch@9354e83c8b8cde7a6f78fc4d80b4a08080ae1d77",https://github.com/elastic/elasticsearch/commit/cc8109bc87fa449883411d4d267f447cbbbf7458
3723,3723.0,3897.0,elastic/elasticsearch,a7f6488216ec1eecc7c8e288b7ab80778ff645d8,"Merge remote-tracking branch 'upstream/master' into
feature-suggest-refactoring",https://github.com/elastic/elasticsearch/commit/a7f6488216ec1eecc7c8e288b7ab80778ff645d8
3724,3724.0,3898.0,elastic/elasticsearch,d7170197f69ed0845b0fb13d939efda6e5b12afe,"Handle core's log refactoring

Original commit: elastic/x-pack-elasticsearch@9e2e41db9006e704f504bc4be61385257e01124f",https://github.com/elastic/elasticsearch/commit/d7170197f69ed0845b0fb13d939efda6e5b12afe
3725,3725.0,3899.0,elastic/elasticsearch,78534847a3f7aac4dc6dd91a30c9aa881632ffbe,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/78534847a3f7aac4dc6dd91a30c9aa881632ffbe
3726,3726.0,3900.0,elastic/elasticsearch,d888b5c267fd9ebb3becee1c297949898ee0e9d3,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/d888b5c267fd9ebb3becee1c297949898ee0e9d3
3727,3727.0,3901.0,elastic/elasticsearch,5320d538f153e93432a435ab450ca7361748cb25,Merge remote-tracking branch 'upstream/master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/5320d538f153e93432a435ab450ca7361748cb25
3728,3728.0,3902.0,elastic/elasticsearch,77ffdbcbb435bc33df0b651c300487369bd99d43,"Merge pull request elastic/elasticsearch#1519 from colings86/refactor/aggRefactoringChanges

X-Plugin changes due to the changes in the Aggregations Java API

Original commit: elastic/x-pack-elasticsearch@524be093de22db53d6ae429cdb3b683e3734dffb",https://github.com/elastic/elasticsearch/commit/77ffdbcbb435bc33df0b651c300487369bd99d43
3729,3729.0,3903.0,elastic/elasticsearch,1a46628daaea0a0a55649bb557976e2c9ef63733,"Merge branch 'master' into feature/aggs-refactoring

# Conflicts:
#	core/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java",https://github.com/elastic/elasticsearch/commit/1a46628daaea0a0a55649bb557976e2c9ef63733
3730,3730.0,3904.0,elastic/elasticsearch,c3d652030cae3d74a5006eedb2dce1b9c5ce3bd8,updated Java API docs with the changes due to aggregator refactoring,https://github.com/elastic/elasticsearch/commit/c3d652030cae3d74a5006eedb2dce1b9c5ce3bd8
3731,3731.0,3905.0,elastic/elasticsearch,beea413820fa7bce3f47e6ff617ac985deab2bd4,Merge remote-tracking branch 'upstream/master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/beea413820fa7bce3f47e6ff617ac985deab2bd4
3732,3732.0,3906.0,elastic/elasticsearch,ed3f7903f47d1894bbe9ae74e25ec00eec361c1c,Merge branch 'master' into feature/aggs-refactoring,https://github.com/elastic/elasticsearch/commit/ed3f7903f47d1894bbe9ae74e25ec00eec361c1c
3733,3733.0,3907.0,elastic/elasticsearch,b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33,"Merge pull request #16610 from s1monw/test_indices_request_cache

Refactor IndicesRequestCache to make it testable.",https://github.com/elastic/elasticsearch/commit/b5aee2075f1b5a9fd6a3a0f3b7594e5d51c57b33
3734,3734.0,3908.0,elastic/elasticsearch,5a22da1eba53872425100ce72991647f0c52e83f,Merge remote-tracking branch 'upstream/feature-suggest-refactoring' into term-suggest-build,https://github.com/elastic/elasticsearch/commit/5a22da1eba53872425100ce72991647f0c52e83f
3735,3735.0,3909.0,elastic/elasticsearch,eed557742f5db7cd82d22b69a84220cc598fd744,"Refactors building query specific objects from the term suggestion
builder and merges changes between the suggestion builders to context
object implementations.",https://github.com/elastic/elasticsearch/commit/eed557742f5db7cd82d22b69a84220cc598fd744
3736,3736.0,3910.0,elastic/elasticsearch,ffe339ae316a846763d89a6283842c24c2694663,"Refactoring for 5.0 - phase 5

- Moved all settings in Marvel from `marvel.*` to `xpack.monitoring.*`
- Cleaned up marvel settings in general - they're all now under `MarvelSettings` class
- fixed some integration tests along the way (they were configured wrong and never actually tested anything)
- Updated the docs accordingly
- Added `migration-5_0.asciidoc` under the Marvel docs to explain how to migrate from Marvel 2.x to XPack 5.0.
- Replaced all `marvel` mentions in the logs to `monitoring`
- Removed the `xpack.monitoring.template.version` setting from the templates
- renamed the templates to `monitoring-es-data.json` and `monitoring-es.json`
- monitoring indices are now `.monitoring-es-<version>-data` and `.monitoring-es-<version>-<timestamp>`

Original commit: elastic/x-pack-elasticsearch@17f2abe17def48c75975158a43dd570f0cf0e2b2",https://github.com/elastic/elasticsearch/commit/ffe339ae316a846763d89a6283842c24c2694663
3737,3737.0,3911.0,elastic/elasticsearch,d538dd64c28c39a7eace380b50e999d116984152,"Refactor IndicesRequestCache to make it testable.

This commit moves IndicesRequestCache into o.e.indics and makes all API in this
class package private. All references to SearchReqeust, SearchContext etc. have been factored
out and relevant glue code has been added to IndicesService. The IndicesRequestCache is not a
simple class without any hard dependencies on ThreadPool nor SearchService or IndexShard. This now
allows to add unittests.
This commit also removes two settings `indices.requests.cache.clean_interval` and `indices.fielddata.cache.clean_interval`
in favor of `indices.cache.clean_interval` which cleans both caches.",https://github.com/elastic/elasticsearch/commit/d538dd64c28c39a7eace380b50e999d116984152
3738,3738.0,3912.0,elastic/elasticsearch,4a9c84d86d508f68722eeb8686277a22545cbcff,"Merge branch 'master' into feature/aggs-refactoring

# Conflicts:
#	core/src/main/java/org/elasticsearch/search/SearchService.java
#	test/framework/src/main/java/org/elasticsearch/search/MockSearchService.java",https://github.com/elastic/elasticsearch/commit/4a9c84d86d508f68722eeb8686277a22545cbcff
3739,3739.0,3913.0,elastic/elasticsearch,e000808836b384388c3a5350656693c0c6c9d4ad,"Merge branch 'master' into feature-suggest-refactoring

 Conflicts:
	core/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java",https://github.com/elastic/elasticsearch/commit/e000808836b384388c3a5350656693c0c6c9d4ad
3740,3740.0,3914.0,elastic/elasticsearch,2038429f63cd31721c0522d2d49eab66303c68fb,initial refactoring of completion suggester,https://github.com/elastic/elasticsearch/commit/2038429f63cd31721c0522d2d49eab66303c68fb
3741,3741.0,3915.0,elastic/elasticsearch,1f760bd1bd5f79494f30b18fc1be54f586c13e0b,Merge branch 'master' into feature/aggs-refactoring,https://github.com/elastic/elasticsearch/commit/1f760bd1bd5f79494f30b18fc1be54f586c13e0b
3742,3742.0,3916.0,elastic/elasticsearch,421ed1228b545a07db4710f0ee56959d70e64d45,"Merge branch 'master' into feature-suggest-refactoring

 Conflicts:
	core/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java",https://github.com/elastic/elasticsearch/commit/421ed1228b545a07db4710f0ee56959d70e64d45
3743,3743.0,3917.0,elastic/elasticsearch,42c9eead6073c446546346e68bfb02741c3ed1bf,"Refactoring for 5.0 - phase 4

 - renaming `ShieldPlugin` to `Shield` (it's no longer a plugin)
 - renaming `WatcherPlugin` to `Watcher` (it's no longer a plugin)
 - renaming `MarvelPlugin` to `Marvel` (it's no longer a plugin)
 - renaming `LicensePlugin` to `Licensing` (it's no longer a plugin)
 - renamed setting:`watcher.enabled` -> `xpack.watcher.enabled`
 - renamed setting:`marvel.enabled` -> `xpack.marvel.enabled`

Original commit: elastic/x-pack-elasticsearch@35a6540b114612eac2fb73d3ec06b73b947276f7",https://github.com/elastic/elasticsearch/commit/42c9eead6073c446546346e68bfb02741c3ed1bf
3744,3744.0,3918.0,elastic/elasticsearch,ccee05792b6273677e78311b8f3c8582143890b2,Clean up of some NORELEASE comments for Agg refactoring,https://github.com/elastic/elasticsearch/commit/ccee05792b6273677e78311b8f3c8582143890b2
3745,3745.0,3919.0,elastic/elasticsearch,04681ef6165a40192a6e268ca2df861d9d017f47,Merge remote-tracking branch 'upstream/feature-suggest-refactoring' into term-suggest-build,https://github.com/elastic/elasticsearch/commit/04681ef6165a40192a6e268ca2df861d9d017f47
3746,3746.0,3920.0,elastic/elasticsearch,16d01088dedf82326ca2c2cbeffdd13f3d54221f,"Merge pull request #16505 from cbuescher/suggestBuilder-refactoring

Add fromXContent method to SuggestBuilder",https://github.com/elastic/elasticsearch/commit/16d01088dedf82326ca2c2cbeffdd13f3d54221f
3747,3747.0,3921.0,elastic/elasticsearch,3a6a1d5dc2d02a0f3ec117e70f5ef7e1c90209a2,"Shield refactoring for 5.0 - phase 3

 - Consolidated the `bin` and `config` directories of watcher, shield and marvel under a single `config/xpack` and `bin/xpack` directories.

 - updated docs accordingly

Original commit: elastic/x-pack-elasticsearch@c2aa6132fa1ae29ced85db60686c5d8ea57ba586",https://github.com/elastic/elasticsearch/commit/3a6a1d5dc2d02a0f3ec117e70f5ef7e1c90209a2
3748,3748.0,3922.0,elastic/elasticsearch,92f027159a964663d7bbc09c0827b1039d4573c5,"Shield refactoring for 5.0 - phase 2

 - Started to move configuration under the `xpack` name
 - Cleaned up `ShieldPlugin`
 - renamed `ShieldClient` to `SecurityClient`
 - Introduced `XPackClient` that wraps security and watcher clients

Original commit: elastic/x-pack-elasticsearch@f05be0c180496daa26238f3a0e7cf06aa80315b5",https://github.com/elastic/elasticsearch/commit/92f027159a964663d7bbc09c0827b1039d4573c5
3749,3749.0,3923.0,elastic/elasticsearch,80bbb4a385cb88800837fbe2d9a5367dcbfaaaf9,"Merge branch 'master' into feature/aggs-refactoring

# Conflicts:
#	core/src/main/java/org/elasticsearch/percolator/PercolateContext.java
#	core/src/main/java/org/elasticsearch/search/aggregations/bucket/filter/FilterParser.java
#	core/src/main/java/org/elasticsearch/search/aggregations/bucket/filters/FiltersParser.java
#	core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsParametersParser.java
#	core/src/main/java/org/elasticsearch/search/internal/DefaultSearchContext.java
#	core/src/test/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParserTests.java
#	test/framework/src/main/java/org/elasticsearch/test/TestSearchContext.java",https://github.com/elastic/elasticsearch/commit/80bbb4a385cb88800837fbe2d9a5367dcbfaaaf9
3750,3750.0,3924.0,elastic/elasticsearch,fab3b5568f0e238fbefbb1352789f8a61fc8ef0e,"Merge branch 'master' into feature-suggest-refactoring

 Conflicts:
	core/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionContext.java",https://github.com/elastic/elasticsearch/commit/fab3b5568f0e238fbefbb1352789f8a61fc8ef0e
3751,3751.0,3925.0,elastic/elasticsearch,02ecfd6279755b4650228d0202542e13c2c129a4,Merge branch 'master' into feature/aggs-refactoring,https://github.com/elastic/elasticsearch/commit/02ecfd6279755b4650228d0202542e13c2c129a4
3752,3752.0,3926.0,elastic/elasticsearch,2ae6420fd64f8b063b1a055ef37e85f7d0ba055a,"Suggest: Add parsing from xContent to PhraseSuggestionBuilder

For the ongoing search refactoring (#10217) the PhraseSuggestionBuilder
gets a way of parsing from xContent that will eventually replace the
current SuggestParseElement. This PR adds the fromXContent method
to the PhraseSuggestionBuilder and also adds parsing code for the
common suggestion parameters to SuggestionBuilder.

Also adding links from the Suggester implementations registeres in the
Suggesters registry to the corresponding prototype that is going to
be used for parsing once the refactoring is done and we switch from
parsing on shard to parsing on coordinating node.",https://github.com/elastic/elasticsearch/commit/2ae6420fd64f8b063b1a055ef37e85f7d0ba055a
3753,3753.0,3927.0,elastic/elasticsearch,2dec12903842af471fe43b73b5acd7bbff8e9b61,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/2dec12903842af471fe43b73b5acd7bbff8e9b61
3754,3754.0,3928.0,elastic/elasticsearch,baf57f809aadf72988e4473f7cc4d1bf56de42cd,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/baf57f809aadf72988e4473f7cc4d1bf56de42cd
3755,3755.0,3929.0,elastic/elasticsearch,f06f17f328574aeb8178156e407952ec47d58713,"Merge branch 'master' into feature/aggs-refactoring

# Conflicts:
#	core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java
#	core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java",https://github.com/elastic/elasticsearch/commit/f06f17f328574aeb8178156e407952ec47d58713
3756,3756.0,3930.0,elastic/elasticsearch,225adcfaeb1683729d8f7c19a788645c099563b1,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/225adcfaeb1683729d8f7c19a788645c099563b1
3757,3757.0,3931.0,elastic/elasticsearch,c0006426a72694fc32bef4dacac915da61fc50eb,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/c0006426a72694fc32bef4dacac915da61fc50eb
3758,3758.0,3932.0,elastic/elasticsearch,592f5499cdf725a633022d2bc2a66e4e5f703e89,"More robust handling of CORS HTTP Access Control

Uses a refactored version of Netty's CORS implementation to provide more
robust cross-origin resource request functionality.  The CORS specific
Elasticsearch parameters remain the same, just the underlying
implementation has changed.

It has also been refactored in a way that allows dropping in Netty's
CORS handler as a replacement once Elasticsearch is upgraded to Netty 4.",https://github.com/elastic/elasticsearch/commit/592f5499cdf725a633022d2bc2a66e4e5f703e89
3759,3759.0,3933.0,elastic/elasticsearch,2b11aa589559a25c4f1a704f4c8ea1869d1697c7,"Merge pull request #16278 from abeyad/feature-suggest-refactoring

Refactored the term suggestion builder for the query refactoring effort",https://github.com/elastic/elasticsearch/commit/2b11aa589559a25c4f1a704f4c8ea1869d1697c7
3760,3760.0,3934.0,elastic/elasticsearch,882cd5c6ee69250e370137f8d9e5a8e7e5b06eec,"Refactored the term suggestion builder for the query refactoring effort

Added the term suggestion builder's serialization/deserialization and
equals/hashCode methods.",https://github.com/elastic/elasticsearch/commit/882cd5c6ee69250e370137f8d9e5a8e7e5b06eec
3761,3761.0,3935.0,elastic/elasticsearch,5d9d91b76142f76babc8069bd384e864416ca426,Merge branch 'master' into feature/aggs-refactoring,https://github.com/elastic/elasticsearch/commit/5d9d91b76142f76babc8069bd384e864416ca426
3762,3762.0,3936.0,elastic/elasticsearch,db4c6c96a3aa904005fc1985548cb0f8061e9201,Minor refactoring and indentation fixes,https://github.com/elastic/elasticsearch/commit/db4c6c96a3aa904005fc1985548cb0f8061e9201
3763,3763.0,3937.0,elastic/elasticsearch,b7e3323ded9dc0b5cb0febf7ea011f416f8f31f0,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/b7e3323ded9dc0b5cb0febf7ea011f416f8f31f0
3764,3764.0,3938.0,elastic/elasticsearch,e039ef412f4e17c2d63041ef19f0d79b03b69568,"Shield refactoring for 5.0

 - Consolidated `InternalMarvelUser`, `InternalWatcherUser` and `InternalShieldUser` into a single `XPackUser` - this is the single internal user for xpack that has all the permissions internally required by xpack (for marvel, watcher and shield)

 - Renamed `InternalSystemUser` to `SystemUser`

 - Removed the notion of ""reserved roles"". Now that we have a single internal user we know its role. The authz service now checks to see if the current user is the internal xpack user, and if so, it just uses its role (and not trying to resolve it from the role store). With this model, it's no longer possible for outside users to use the internal role (it's fully internal)

 - Consolidated the notion of an `InternalClient` (in Marvel it was knows as the `SecuredClient`). This is an ES client that xpack is using to manage itself. If shield is enabled, it will execute all request on behalf of the internal xpack user.

 - Removed the verification of the license plugin on plugin installation - no need to do it anymore as the license plugin is part of the distribution.

Original commit: elastic/x-pack-elasticsearch@c851410f9395edeb224f0aa9cdfb7abdba67b10b",https://github.com/elastic/elasticsearch/commit/e039ef412f4e17c2d63041ef19f0d79b03b69568
3765,3765.0,3939.0,elastic/elasticsearch,df45c7559403d7722ea9d75d8bb6bd491c2a81e6,"Merge pull request #16151 from MaineC/enhancement/15178-sort-geosortbuilder

Refactor GeoSortBuilder",https://github.com/elastic/elasticsearch/commit/df45c7559403d7722ea9d75d8bb6bd491c2a81e6
3766,3766.0,3940.0,elastic/elasticsearch,c9d54c0c83e35e3b969d1942fff8981243423329,"Cleanup and refactoring

 - removed `/_shield/roles` and `/_shield/users` endpoints (only keeping the singular forms)
 - fixed `ClearRealmsCacheTests` to use the correct endpoint for clearing the realms cache
 - used action name constants where possible in `InternalShieldUser`

Original commit: elastic/x-pack-elasticsearch@d1481de3893c8bbbc34f9df468a0f9dcb82e534f",https://github.com/elastic/elasticsearch/commit/c9d54c0c83e35e3b969d1942fff8981243423329
3767,3767.0,3941.0,elastic/elasticsearch,a241983c9d7def1927406cf7db9a9b5c7c23442a,"Merge branch 'master' into feature/aggs-refactoring

# Conflicts:
#	core/src/test/java/org/elasticsearch/search/aggregations/AggregationsBinaryIT.java
#	core/src/test/java/org/elasticsearch/search/aggregations/bucket/FilterIT.java
#	core/src/test/java/org/elasticsearch/search/aggregations/bucket/FiltersIT.java
#	core/src/test/java/org/elasticsearch/search/aggregations/bucket/GeoDistanceIT.java
#	core/src/test/java/org/elasticsearch/search/aggregations/bucket/NestedIT.java
#	core/src/test/java/org/elasticsearch/search/aggregations/bucket/SamplerIT.java
#	core/src/test/java/org/elasticsearch/search/aggregations/pipeline/DerivativeIT.java
#	modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/BucketSelectorTests.java
#	modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/TDigestPercentileRanksTests.java",https://github.com/elastic/elasticsearch/commit/a241983c9d7def1927406cf7db9a9b5c7c23442a
3768,3768.0,3942.0,elastic/elasticsearch,7cae28f96ad35ff2dc56d8df866e601a0a187bba,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/7cae28f96ad35ff2dc56d8df866e601a0a187bba
3769,3769.0,3943.0,elastic/elasticsearch,220bf7bd4b5f03e8415eda4b14a8ba2308692661,"Merge pull request #16185 from cbuescher/ref-DirectCandidateGenerator

As a prerequisite for refactoring the whole PhraseSuggestionBuilder
to be able to be parsed and streamed from the coordinating node, the
DirectCandidateGenerator must implement Writeable, be able to parse
a new instance (fromXContent()) and later when transported to the
shard to generate a PhraseSuggestionContext.DirectCandidateGenerator.
Also adding equals/hashCode and tests and moving DirectCandidateGenerator
to its own DirectCandidateGeneratorBuilder class.",https://github.com/elastic/elasticsearch/commit/220bf7bd4b5f03e8415eda4b14a8ba2308692661
3770,3770.0,3944.0,elastic/elasticsearch,96b2930ac7e9cfd7d81435286026c24c12051f6a,"Cleanup and refactoring

 - Moved all role action classes to live under `o.e.s.action.role`
 - Moved all realm related action classes (for now just the clear cache) to live under `o.e.s.action.realm`
 - Moved all user action classes to live under `o.e.s.action.user`
 - Moved all the rest actions to live under `o.e.s.rest.action`
 - Changed the `clear role cache` endpoint to `/_shield/role/{id}/_clear_cache` (aligned with all other role endpoints)
 - Changed `InternalShieldUserHolder` to the `InternalShieldUser` singleton user... to be aligned with `InternalMarvelUser` and `InternalWatcherUser`.
 - Removed the dedicated audit log user. The new `InternalShieldUser` is now the user that manages and writes to the audit log indices
 - Extracted the `User.System` class to a top level `InternalSystemUser` class (to be aligned with the other internal user classes)
 - Removed the `SystemRole` class (the `InternalSystemUser` class now holds all the needed info/logic)

Original commit: elastic/x-pack-elasticsearch@cf82b257d1a81a2410247c02663f9b8f0e16f972",https://github.com/elastic/elasticsearch/commit/96b2930ac7e9cfd7d81435286026c24c12051f6a
3771,3771.0,3945.0,elastic/elasticsearch,61c435e6a9b3d2888a2c8e6d65e643bcde14d280,"PhraseSuggestionBuilde: Refactor DirectCandidateGenerator

As a prerequisite for refactoring the whole PhraseSuggestionBuilder
to be able to be parsed and streamed from the coordinating node, the
DirectCandidateGenerator must implement Writeable, be able to parse
a new instance (fromXContent()) and later when transported to the
shard to generate a PhraseSuggestionContext.DirectCandidateGenerator.
Also adding equals/hashCode and tests and moving DirectCandidateGenerator
to its own DirectCandidateGeneratorBuilder class.",https://github.com/elastic/elasticsearch/commit/61c435e6a9b3d2888a2c8e6d65e643bcde14d280
3772,3772.0,3946.0,elastic/elasticsearch,838edab168c2999af7ba16f000c1180814e98570,"Use index name rather than the index object to check against existence in the set

This is an issue due to some refactoring we did along the lines of Index.java etc.
We pass the index object to Set#contains which should actually be only it's name.

Closes #16299",https://github.com/elastic/elasticsearch/commit/838edab168c2999af7ba16f000c1180814e98570
3773,3773.0,3947.0,elastic/elasticsearch,859f9e69b7927d06fa866b6fd3016366ddff52ba,"Merge branch 'master' into feature/aggs-refactoring

# Conflicts:
#	core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java
#	core/src/main/java/org/elasticsearch/percolator/PercolateContext.java
#	core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/ScriptHeuristic.java
#	core/src/main/java/org/elasticsearch/search/internal/DefaultSearchContext.java
#	core/src/test/java/org/elasticsearch/search/aggregations/bucket/significant/SignificanceHeuristicTests.java",https://github.com/elastic/elasticsearch/commit/859f9e69b7927d06fa866b6fd3016366ddff52ba
3774,3774.0,3948.0,elastic/elasticsearch,75e93c2eca755a1c22594e1aa1dfe56c8825d0d0,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/75e93c2eca755a1c22594e1aa1dfe56c8825d0d0
3775,3775.0,3949.0,elastic/elasticsearch,b039360d2ea974b9827df90ee7d425ca15c638d6,"Merge pull request #16130 from cbuescher/refactor-smoothingModel

Enable Writeable serialization and parsing from xContent for SmoothingModels",https://github.com/elastic/elasticsearch/commit/b039360d2ea974b9827df90ee7d425ca15c638d6
3776,3776.0,3950.0,elastic/elasticsearch,e785e11aa1ced1ff659401816f8ff7a175065598,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/e785e11aa1ced1ff659401816f8ff7a175065598
3777,3777.0,3951.0,elastic/elasticsearch,186fa2f75574e489c793bd39e09e9c8f6522fb40,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/186fa2f75574e489c793bd39e09e9c8f6522fb40
3778,3778.0,3952.0,elastic/elasticsearch,09c8a21e83916d20edce959813aba055ab15b202,Merge branch 'master' into feature-suggest-refactoring,https://github.com/elastic/elasticsearch/commit/09c8a21e83916d20edce959813aba055ab15b202
3779,3779.0,3953.0,elastic/elasticsearch,c00c0fa020a2ab3391a38312aba898db517f9f47,"Initial refactoring for phrase suggester

Adding initial serialization methods (readFrom, writeTo) to the
PhraseSuggestionBuilder, also adding the base test framework for
serialiazation testing, equals and hashCode. Moving SuggestionBuilder
out of the global SuggestBuilder for better readability.",https://github.com/elastic/elasticsearch/commit/c00c0fa020a2ab3391a38312aba898db517f9f47
3780,3780.0,3954.0,elastic/elasticsearch,187009c12c4b7c10f03270fa9c9ea8f919417a6c,Merge branch 'master' into feature/aggs-refactoring,https://github.com/elastic/elasticsearch/commit/187009c12c4b7c10f03270fa9c9ea8f919417a6c
3781,3781.0,3955.0,elastic/elasticsearch,087e55cc510a535e661b12c5c1488f1684919da1,"Script mode settings

This commit converts the script mode settings to the new settings
infrastructure. This is a major refactoring of the handling of script
mode settings. This refactoring is necessary because these settings are
determined at runtime based on the registered script engines and the
registered script contexts.",https://github.com/elastic/elasticsearch/commit/087e55cc510a535e661b12c5c1488f1684919da1
3782,3782.0,3956.0,elastic/elasticsearch,8eb97c5509a16b0a24e29d48a6a6a651a871f192,"Script settings

This commit is the x-plugins side of the refactoring of script settings.

Relates elastic/elasticsearchelastic/elasticsearch#16197

Original commit: elastic/x-pack-elasticsearch@4c429933b95a53943e006a2ebc44b17c93217cd5",https://github.com/elastic/elasticsearch/commit/8eb97c5509a16b0a24e29d48a6a6a651a871f192
3783,3783.0,3957.0,elastic/elasticsearch,641aaab8967d9b2765daba06bbdff1c2d77f40c5,"Merge branch 'master' into feature/aggs-refactoring

# Conflicts:
#	core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java
#	core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java
#	core/src/main/java/org/elasticsearch/search/SearchModule.java",https://github.com/elastic/elasticsearch/commit/641aaab8967d9b2765daba06bbdff1c2d77f40c5
3784,3784.0,3958.0,elastic/elasticsearch,97114af8aeb33d0a9e4fb98685f003762a4b209e,"Merge pull request #16014 from cbuescher/refactor/rescore-fromXContent

RescoreBuilder: Add parsing and creating of RescoreSearchContext

Adding the ability to parse from xContent to the rescore builder. Also making RescoreBuilder an abstract base class that encapsulates the window_size setting, with QueryRescoreBuilder as its only implementation at the moment.

Relates to #15559",https://github.com/elastic/elasticsearch/commit/97114af8aeb33d0a9e4fb98685f003762a4b209e
3785,3785.0,3959.0,elastic/elasticsearch,3b35754f5900286acdeb9ada7d2a988a9d177ecd,"Merge branch 'master' into feature/aggs-refactoring

# Conflicts:
#	core/src/test/java/org/elasticsearch/percolator/PercolateDocumentParserTests.java",https://github.com/elastic/elasticsearch/commit/3b35754f5900286acdeb9ada7d2a988a9d177ecd
3786,3786.0,3960.0,elastic/elasticsearch,80d79c9c11ab00c0a56756399ac70715e53bcc47,"Remove deprecated parameters

This is in preparation of refactoring.

Relates to #15178",https://github.com/elastic/elasticsearch/commit/80d79c9c11ab00c0a56756399ac70715e53bcc47
3787,3787.0,3961.0,elastic/elasticsearch,d63b8a25f8ccfa68d34681505a9be27daef38c5b,Merge branch 'master' into feature/aggs-refactoring,https://github.com/elastic/elasticsearch/commit/d63b8a25f8ccfa68d34681505a9be27daef38c5b
3788,3788.0,3962.0,elastic/elasticsearch,cd8320b1716642ae4b0daec6ebc7623d041df674,"Merge branch 'master' into feature/aggs-refactoring

# Conflicts:
#	core/src/main/java/org/elasticsearch/search/aggregations/bucket/filter/FilterAggregator.java
#	core/src/main/java/org/elasticsearch/search/aggregations/bucket/filters/FiltersAggregator.java
#	core/src/main/java/org/elasticsearch/search/SearchModule.java",https://github.com/elastic/elasticsearch/commit/cd8320b1716642ae4b0daec6ebc7623d041df674
3789,3789.0,3963.0,elastic/elasticsearch,d9422b5e8995d81b79ed4b9791b86e5791cb78a5,"Bring back node throttle type which was lost after index setting refactoring

This has caused some test failures lately especially on window (which is likely caused
by the rather bad performance of the windows test machines).
See one failure here:
 http://build-us-00.elastic.co/job/es_core_master_window-2008/2934/

This fix has now also a unittest that tests this issue separately.",https://github.com/elastic/elasticsearch/commit/d9422b5e8995d81b79ed4b9791b86e5791cb78a5
3790,3790.0,3964.0,elastic/elasticsearch,ac237b269caf2776fa28ed841f768558154bd7a2,"Add handling of channel failures when starting a shard

This commit adds handling of channel failures when starting a shard to
o.e.c.a.s.ShardStateAction. This means that shard started requests
that timeout or occur when there is no master or the master leaves
after the request is sent will now be retried from here. The listener
for a shard state request will now only be notified upon successful
completion of the shard state request, or when a catastrophic
non-channel failure occurs.

This commit also refactors the handling of shard failure requests so
that the two shard state actions of shard failure and shard started
now share the same channel-retry and notification logic.",https://github.com/elastic/elasticsearch/commit/ac237b269caf2776fa28ed841f768558154bd7a2
3791,3791.0,3965.0,elastic/elasticsearch,e6f9cbce8f76096ea7366922e731cc9e93fb83b9,"Merge branch 'master' into feature/aggs-refactoring

# Conflicts:
#	core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java
#	core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java",https://github.com/elastic/elasticsearch/commit/e6f9cbce8f76096ea7366922e731cc9e93fb83b9
3792,3792.0,3966.0,elastic/elasticsearch,3d98756e64784652b81b9db2680bbde5295922e0,Merge branch 'refactor/rescore-builder-equals-hash',https://github.com/elastic/elasticsearch/commit/3d98756e64784652b81b9db2680bbde5295922e0
3793,3793.0,3967.0,elastic/elasticsearch,360fe98ca0fc2befdf24b1bd859127f73c61aeab,Merge branch 'master' into feature/aggs-refactoring,https://github.com/elastic/elasticsearch/commit/360fe98ca0fc2befdf24b1bd859127f73c61aeab
3794,3794.0,3968.0,elastic/elasticsearch,f429cb08d718ec57036766915c58a84ff67865bf,Merge branch 'master' into feature/aggs-refactoring,https://github.com/elastic/elasticsearch/commit/f429cb08d718ec57036766915c58a84ff67865bf
3795,3795.0,3969.0,elastic/elasticsearch,57c579e7b70a98e101489b1cb9a59ee092fcb3ef,"Geo: Add validation of shapes to shape builders

So far the validation of geo shapes was only taking place in the
parse methods in ShapeBuilder. With the recent refactoring we no
longer can rely on shapes being parsed from json, so the same kind
of validation should take place when just using the java api.

A lot of validation concerns the number of points a shape needs to
have in order to be valid. Since this is not possible with current
builders where points can be added one by one, the builder constructors
are changed to require the mandatory parameters and validate those
already at construction time. To help with constructing longer lists
of points, a new utility PointsListBuilder is instroduces which can
produce list of coordinates accepted by most of the other shape builder
constructors.

Also adding tests for invalid shape exceptions to the already existing
shape builder tests.",https://github.com/elastic/elasticsearch/commit/57c579e7b70a98e101489b1cb9a59ee092fcb3ef
3796,3796.0,3970.0,elastic/elasticsearch,9d7d89d04d63d100b963fe15bbb60d84d51e75dc,Merge branch 'master' into feature/aggs-refactoring,https://github.com/elastic/elasticsearch/commit/9d7d89d04d63d100b963fe15bbb60d84d51e75dc
3797,3797.0,3971.0,elastic/elasticsearch,adac314328376e0f5067dea6bcffde08ffd6b054,"revert move of IngestPlugin class

This was moved accidentally as part of a previous refactoring.",https://github.com/elastic/elasticsearch/commit/adac314328376e0f5067dea6bcffde08ffd6b054
3798,3798.0,3972.0,elastic/elasticsearch,3b7d1b47f71879a463d5b22530304d9b0a9c9fe0,"Merge branch 'master' into feature/aggs-refactoring

# Conflicts:
#	core/src/main/java/org/elasticsearch/percolator/PercolatorService.java
#	core/src/main/java/org/elasticsearch/percolator/QueryCollector.java",https://github.com/elastic/elasticsearch/commit/3b7d1b47f71879a463d5b22530304d9b0a9c9fe0
3799,3799.0,3973.0,elastic/elasticsearch,ef16113697c19be0e907bd47237a531c4b093ad7,"Merge pull request #15735 from jasontedor/master-node-change-predicate

Refactor master node change predicate for reuse",https://github.com/elastic/elasticsearch/commit/ef16113697c19be0e907bd47237a531c4b093ad7
3800,3800.0,3974.0,elastic/elasticsearch,2d6adf64286152470cfdfe669171c1a5fe0f6f37,"Percolator refactoring:
* Added percolator field mapper that extracts the query terms and indexes these terms with the percolator query.
* At percolate time these extracted terms are used to query percolator queries that are like to be evaluated. This can significantly cut down the time it takes to percolate. Whereas before all percolator queries were evaluated if they matches with the document being percolated.
* Changes made to percolator queries are no longer immediately visible, a refresh needs to happen before the changes are visible.
* By default the percolate api only returns upto 10 matches instead of returning all matching percolator queries.
* Made percolate more modular, so that it is easier to add unit tests.
* Added unit tests for the percolator.

Closes #12664
Closes #13646",https://github.com/elastic/elasticsearch/commit/2d6adf64286152470cfdfe669171c1a5fe0f6f37
3801,3801.0,3975.0,elastic/elasticsearch,2c33f781929be230c7b7c5ee5d59334d45bfa5ce,"Merge branch 'master' into feature/aggs-refactoring

# Conflicts:
#	core/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ChildrenParser.java
#	core/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceParser.java
#	test/framework/src/main/java/org/elasticsearch/test/TestSearchContext.java",https://github.com/elastic/elasticsearch/commit/2c33f781929be230c7b7c5ee5d59334d45bfa5ce
3802,3802.0,3976.0,elastic/elasticsearch,06851b7224a32db122d58529fd2a111d8f5507e1,"Merge pull request #15736 from jasontedor/shard-state-action-cluster-state-refactoring

Make cluster state external to o.e.c.a.s.ShardStateAction",https://github.com/elastic/elasticsearch/commit/06851b7224a32db122d58529fd2a111d8f5507e1
3803,3803.0,3977.0,elastic/elasticsearch,a70f76f76305e5bdc8161f9836d6850f75442aec,"Make cluster state external to o.e.c.a.s.ShardStateAction

This commit modifies the handling of cluster states in
o.e.c.a.s.ShardStateAction so that all necessary state is obtained
externally to the ShardStateAction#shardFailed and
ShardStateAction#shardStarted methods. This refactoring permits the
removal of the ClusterService field from ShardStateAction.",https://github.com/elastic/elasticsearch/commit/a70f76f76305e5bdc8161f9836d6850f75442aec
3804,3804.0,3978.0,elastic/elasticsearch,c47340f2f1a9eae52279e0c70885ebe2675fcd03,"Refactor master node change predicate for reuse

This commit migrates a ClusterStateObserver.ChangePredicate for
detecting a master node change into a separate class for reuse
elsewhere.",https://github.com/elastic/elasticsearch/commit/c47340f2f1a9eae52279e0c70885ebe2675fcd03
3805,3805.0,3979.0,elastic/elasticsearch,f535c2702493c7d4415a1fce7bdae13cedad1186,"Make mapping updates more robust.

This changes a couple of things:

Mappings are truly immutable. Before, each field mapper stored a
MappedFieldTypeReference that was shared across fields that have the same name
across types. This means that a mapping update could have the side-effect of
changing the field type in other types when updateAllTypes is true. This works
differently now: after a mapping update, a new copy of the mappings is created
in such a way that fields across different types have the same MappedFieldType.
See the new Mapper.updateFieldType API which replaces MappedFieldTypeReference.

DocumentMapper is now immutable and MapperService.merge has been refactored in
such a way that if an exception is thrown while eg. lookup structures are being
updated, then the whole mapping update will be aborted. As a consequence,
FieldTypeLookup's checkCompatibility has been folded into copyAndAddAll.

Synchronization was simplified: given that mappings are truly immutable, we
don't need the read/write lock so that no documents can be parsed while a
mapping update is being processed. Document parsing is not performed under a
lock anymore, and mapping merging uses a simple synchronized block.",https://github.com/elastic/elasticsearch/commit/f535c2702493c7d4415a1fce7bdae13cedad1186
3806,3806.0,3980.0,elastic/elasticsearch,d104d6d6520b55d053c60d1f45559992f049a7a3,"Refactor hdfs unit tests to be simple and check every configuration
error condition",https://github.com/elastic/elasticsearch/commit/d104d6d6520b55d053c60d1f45559992f049a7a3
3807,3807.0,3981.0,elastic/elasticsearch,cac2ca845f4a65281b93ccaddbfccf0ea7e07b5c,Aggregations Refactor: Refactor Top Hits Aggregation,https://github.com/elastic/elasticsearch/commit/cac2ca845f4a65281b93ccaddbfccf0ea7e07b5c
3808,3808.0,3982.0,elastic/elasticsearch,1aea0faa86194fa64e007a2461695e134476eca2,Aggregations Refactor: Refactor Sampler Aggregation,https://github.com/elastic/elasticsearch/commit/1aea0faa86194fa64e007a2461695e134476eca2
3809,3809.0,3983.0,elastic/elasticsearch,8f63c46d276c5d73a649ec9318200faa7d268f7b,Aggregations Refactor: Refactor Terms Aggregation,https://github.com/elastic/elasticsearch/commit/8f63c46d276c5d73a649ec9318200faa7d268f7b
3810,3810.0,3984.0,elastic/elasticsearch,6df27fe0e03d58b9d54ff1880a849a8765e036f3,Aggregations Refactor: Refactor Filters Aggregation,https://github.com/elastic/elasticsearch/commit/6df27fe0e03d58b9d54ff1880a849a8765e036f3
3811,3811.0,3985.0,elastic/elasticsearch,6b711e9401faa3b8673565cf2f946d5ddf2d5567,Aggregations Refactor: Refactor Range Aggregations,https://github.com/elastic/elasticsearch/commit/6b711e9401faa3b8673565cf2f946d5ddf2d5567
3812,3812.0,3986.0,elastic/elasticsearch,2b5aa09ccf84b65ad9469b7055f025efec1d47d5,Aggregations Refactor: Refactor Moving Average Aggregation,https://github.com/elastic/elasticsearch/commit/2b5aa09ccf84b65ad9469b7055f025efec1d47d5
3813,3813.0,3987.0,elastic/elasticsearch,80e58e32a41b79d16d4152e32af1d8ae31d236fa,Aggregations Refactor: Refactor Bucket Selector Aggregation,https://github.com/elastic/elasticsearch/commit/80e58e32a41b79d16d4152e32af1d8ae31d236fa
3814,3814.0,3988.0,elastic/elasticsearch,1b89c44cb536e87bafae619cecc6f43416f61a8e,Aggregations Refactor: Refactor Bucket Script Aggregation,https://github.com/elastic/elasticsearch/commit/1b89c44cb536e87bafae619cecc6f43416f61a8e
3815,3815.0,3989.0,elastic/elasticsearch,a0e60bf228beff892112184322f246d9b966e5b7,"Aggregations Refactor: Refactor Avg Bucket, Min Bucket, Max Bucket, Sum Bucket, Percentiles Bucket, Stats Bucket and Extended Stats Bucket Aggregations",https://github.com/elastic/elasticsearch/commit/a0e60bf228beff892112184322f246d9b966e5b7
3816,3816.0,3990.0,elastic/elasticsearch,75f20c494dc8370c8fd20d0a594e1c638a5eb02b,Aggregations Refactor: Refactor Serial Differencing Aggregation,https://github.com/elastic/elasticsearch/commit/75f20c494dc8370c8fd20d0a594e1c638a5eb02b
3817,3817.0,3991.0,elastic/elasticsearch,b1e72d171fab3c651c5982b321da8c4a57f001bc,Aggregations Refactor: Refactor Geo Centroid Aggregation,https://github.com/elastic/elasticsearch/commit/b1e72d171fab3c651c5982b321da8c4a57f001bc
3818,3818.0,3992.0,elastic/elasticsearch,e8e25ad4f120d0eb13594614f8722abe5efebe58,Aggregations Refactor: Refactor Cumulative Sum Aggregation,https://github.com/elastic/elasticsearch/commit/e8e25ad4f120d0eb13594614f8722abe5efebe58
3819,3819.0,3993.0,elastic/elasticsearch,a495a75bfcf0efc7fe3a6827334ac401b732f082,Aggregations Refactor: Refactor Children Aggregation,https://github.com/elastic/elasticsearch/commit/a495a75bfcf0efc7fe3a6827334ac401b732f082
3820,3820.0,3994.0,elastic/elasticsearch,ea6f312abe70de7113e4ce3214fbc691c5085385,Aggregations Refactor: Refactor Nested and Reverse Nested Aggregations,https://github.com/elastic/elasticsearch/commit/ea6f312abe70de7113e4ce3214fbc691c5085385
3821,3821.0,3995.0,elastic/elasticsearch,cf7e525244f7e18ae78f4cd584459a405b31a2b7,Aggregations Refactor: Refactor Missing Aggregation,https://github.com/elastic/elasticsearch/commit/cf7e525244f7e18ae78f4cd584459a405b31a2b7
3822,3822.0,3996.0,elastic/elasticsearch,c3460651d15481d252bbeb2b65765829165405b6,Aggregations Refactor: Refactor Filter Aggregation,https://github.com/elastic/elasticsearch/commit/c3460651d15481d252bbeb2b65765829165405b6
3823,3823.0,3997.0,elastic/elasticsearch,39a951f1c03f6e2b0be8e5bafd4cad7f9d65f928,Aggregations Refactor: Refactor Cardinality Aggregation,https://github.com/elastic/elasticsearch/commit/39a951f1c03f6e2b0be8e5bafd4cad7f9d65f928
3824,3824.0,3998.0,elastic/elasticsearch,8499e27dc53bbbb67e2d0c1453001e89829c4ae8,Aggregations Refactor: Refactor Scripted Metric Aggregation,https://github.com/elastic/elasticsearch/commit/8499e27dc53bbbb67e2d0c1453001e89829c4ae8
3825,3825.0,3999.0,elastic/elasticsearch,94e867906c2d7ece36d6d303d4a058e53e3d6af8,Aggregations Refactor: Refactor Geobounds Aggregation,https://github.com/elastic/elasticsearch/commit/94e867906c2d7ece36d6d303d4a058e53e3d6af8
3826,3826.0,4000.0,elastic/elasticsearch,113df32b3aba448f29b0d5852478649cf00aed97,Aggregations Refactor: Refactor Percentiles and Percentile Ranks Aggregation,https://github.com/elastic/elasticsearch/commit/113df32b3aba448f29b0d5852478649cf00aed97
3827,3827.0,4001.0,elastic/elasticsearch,2772e88447b955798d44358f777f894e2e6d3e98,Aggregations Refactor: Refactor Geohash Grid Aggregation,https://github.com/elastic/elasticsearch/commit/2772e88447b955798d44358f777f894e2e6d3e98
3828,3828.0,4002.0,elastic/elasticsearch,ac772c70e9792888683fe9bb542389e71a8031ec,Aggregations Refactor: Refactor Derivative Aggregation,https://github.com/elastic/elasticsearch/commit/ac772c70e9792888683fe9bb542389e71a8031ec
3829,3829.0,4003.0,elastic/elasticsearch,3aa726ffe3dd7f404098be74771491148c7338af,Aggregations Refactor: Refactor Value Count Aggregation,https://github.com/elastic/elasticsearch/commit/3aa726ffe3dd7f404098be74771491148c7338af
3830,3830.0,4004.0,elastic/elasticsearch,6795a59f14573f343cb520c4f5f6d428ca9f84e0,Aggregations Refactor: Refactor Stats and Extended_Stats Aggregations,https://github.com/elastic/elasticsearch/commit/6795a59f14573f343cb520c4f5f6d428ca9f84e0
3831,3831.0,4005.0,elastic/elasticsearch,4e008952b23b748a2c91e3a7e5830486060a44ed,Aggregations Refactor: Refactor Min Aggregation,https://github.com/elastic/elasticsearch/commit/4e008952b23b748a2c91e3a7e5830486060a44ed
3832,3832.0,4006.0,elastic/elasticsearch,5da1898f11b66bf1a9158ab011cfaeac5147da62,"Aggregations Refactor: Refactor Max, Avg, and Sum Aggregations",https://github.com/elastic/elasticsearch/commit/5da1898f11b66bf1a9158ab011cfaeac5147da62
3833,3833.0,4007.0,elastic/elasticsearch,97c2f7b037a5953deef03ccfb1c077b493d50d62,Aggregations Refactor: Refactor Histogram and Date Histogram Aggregation,https://github.com/elastic/elasticsearch/commit/97c2f7b037a5953deef03ccfb1c077b493d50d62
3834,3834.0,4008.0,elastic/elasticsearch,8c37c6f8962b77c12dc10e294503b95ebc8ccf4e,Aggregations Refactor: Refactor Global Aggregation,https://github.com/elastic/elasticsearch/commit/8c37c6f8962b77c12dc10e294503b95ebc8ccf4e
3835,3835.0,4009.0,elastic/elasticsearch,712b7116f48c982be8d398bfc14e97baa86f3ae1,"Aggregation refactor: make aggregationFactory implement NamedWritable

Also makes AggregatorFactories implement Writable",https://github.com/elastic/elasticsearch/commit/712b7116f48c982be8d398bfc14e97baa86f3ae1
3836,3836.0,4010.0,elastic/elasticsearch,855c199f608e5ad428b53a357101f1efd8f1f4eb,"Preparing ValuesSourceAggregatorFactory/Parser for refactoring

This change adds AbstractValuesSourceParser which will be the new class used to create ValuesSourceAggregatorFactory objects. AbstractValuesSourceParser parses all the parameters required for ValuesSource and passes to the sub-class to parse any other (implementation specific) parameters. After parsing is complete it will call createFactory on the implementing class to create the AggregatorFactory object and then set the ValuesSource specific parameters before returning it.

ValuesSourceAggregatorFactory also now has setter methods so that it can be used as the 'builder' object in the future.",https://github.com/elastic/elasticsearch/commit/855c199f608e5ad428b53a357101f1efd8f1f4eb
3837,3837.0,4011.0,elastic/elasticsearch,7a3f6fc1ba43fb4c644bbedd6f870dcc9f656e96,"Refactor ValuesSource to separate Parsing from Factory logic

ValuesSourceConfig is now evaluated in the ValuesSourceAggregatorFactory instead of ValueSourceParser. This means that the ValueSourceParser purely deals with parsing the XContent and the logic requiring access to the mappings etc. on the shard is left to the ValuesSourceAggregatorFactory. This means that, in the future, the parsing logic can be moved to the coordinating node.",https://github.com/elastic/elasticsearch/commit/7a3f6fc1ba43fb4c644bbedd6f870dcc9f656e96
3838,3838.0,4012.0,elastic/elasticsearch,2f97ff09256429b585252d26724aa0c21ec8c27a,"Merge pull request #15010 from cbuescher/refactor-shapebuilders

Make remaining ShapeBuilders implement Writeable",https://github.com/elastic/elasticsearch/commit/2f97ff09256429b585252d26724aa0c21ec8c27a
3839,3839.0,4013.0,elastic/elasticsearch,9a70dbb51ab9a5140691c6822ee7002ddd366337,"Add ability to profile query and collectors

Provides a new flag which can be enabled on a per-request basis.
When `""profile"": true` is set, the search request will execute in a
mode that collects detailed timing information for query components.

```
GET /test/test/_search
{
   ""profile"": true,
   ""query"": {
      ""match"": {
         ""foo"": ""bar""
      }
   }
}
```

Closes #14889

Squashed commit of the following:

commit a92db5723d2c61b8449bd163d2f006d12f9889ad
Merge: 117dd99 3f87b08
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Thu Dec 17 09:44:10 2015 -0500

    Merge remote-tracking branch 'upstream/master' into query_profiler

commit 117dd9992e8014b70203c6110925643769d80e62
Merge: 9b29d68 82a64fd
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Dec 15 13:27:18 2015 -0500

    Merge remote-tracking branch 'upstream/master' into query_profiler

    Conflicts:
    	core/src/main/java/org/elasticsearch/search/SearchService.java

commit 9b29d6823a71140ecd872df25ff9f7478e7fe766
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Dec 14 16:13:23 2015 -0500

    [TEST] Profile flag needs to be set, ensure searches go against primary only for consistency

commit 4d602d8ad1f8cbc7b475450921fa3bc7d395b34f
Merge: 8b48e87 7742c1e
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Dec 14 10:56:25 2015 -0500

    Merge remote-tracking branch 'upstream/master' into query_profiler

commit 8b48e876348b163ab730eeca7fa35142165b05f9
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Dec 14 10:56:01 2015 -0500

    Delegate straight to in.matchCost, no need for profiling

commit fde3b0587911f0b5f15e779c671d0510cbd568a9
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Dec 14 10:28:23 2015 -0500

    Documentation tweaks, renaming build_weight -> create_weight

commit 46f5e011ee23fe9bb8a1f11ceb4fa9d19fe48e2e
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Dec 14 10:27:52 2015 -0500

    Profile TwoPhaseIterator should override matchCost()

commit b59f894ddb11b2a7beebba06c4ec5583ff91a7b2
Merge: 9aa1a3a b4e0c87
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Dec 9 14:23:26 2015 -0500

    Merge remote-tracking branch 'upstream/master' into query_profiler

commit 9aa1a3a25c34c9cd9fffaa6114c25a0ec791307d
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Dec 9 13:41:48 2015 -0500

    Revert ""Move some of the collector wrapping logic into ProfileCollectorBuilder""

    This reverts commit 02cc31767fb76a7ecd44a302435e93a05fb4220e.

commit 57f7c04cea66b3f98ba2bec4879b98e4fba0b3c0
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Dec 9 13:41:31 2015 -0500

    Revert ""Rearrange if/else to make intent clearer""

    This reverts commit 59b63c533fcaddcdfe4656e86a6f6c4cb1bc4a00.

commit 2874791b9c9cd807113e75e38be465f3785c154e
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Dec 9 13:38:13 2015 -0500

    Revert ""Move state into ProfileCollectorBuilder""

    This reverts commit 0bb3ee0dd96170b06f07ec9e2435423d686a5ae6.

commit 0bb3ee0dd96170b06f07ec9e2435423d686a5ae6
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Thu Dec 3 11:21:55 2015 -0500

    Move state into ProfileCollectorBuilder

commit 59b63c533fcaddcdfe4656e86a6f6c4cb1bc4a00
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Dec 2 17:21:12 2015 -0500

    Rearrange if/else to make intent clearer

commit 511db0af2f3a86328028b88a6b25fa3dfbab963b
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Dec 2 17:12:06 2015 -0500

    Rename WEIGHT -> BUILD_WEIGHT

commit 02cc31767fb76a7ecd44a302435e93a05fb4220e
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Dec 2 17:11:22 2015 -0500

    Move some of the collector wrapping logic into ProfileCollectorBuilder

commit e69356d3cb4c60fa281dad36d84faa64f5c32bc4
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Nov 30 15:12:35 2015 -0500

    Cleanup imports

commit c1b4f284f16712be60cd881f7e4a3e8175667d62
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Nov 30 15:11:25 2015 -0500

    Review cleanup: Make InternalProfileShardResults writeable

commit 9e61c72f7e1787540f511777050a572b7d297636
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Nov 30 15:01:22 2015 -0500

    Review cleanup: Merge ProfileShardResult, InternalProfileShardResult.  Convert to writeable

commit 709184e1554f567c645690250131afe8568a5799
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Nov 30 14:38:08 2015 -0500

    Review cleanup: Merge ProfileResult, InternalProfileResult.  Convert to writeable

commit 7d72690c44f626c34e9c608754bc7843dd7fd8fe
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Nov 30 14:01:34 2015 -0500

    Review cleanup: use primitive (and default) for profile flag

commit 97d557388541bbd3388cdcce7d9718914d88de6d
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Nov 30 13:09:12 2015 -0500

    Review cleanup: Use Collections.emptyMap() instead of building an empty one explicitly

commit 219585b8729a8b0982e653d99eb959efd0bef84e
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Nov 30 13:08:12 2015 -0500

    Add todo to revisit profiler architecture in the future

commit b712edb2160e032ee4b2f2630fadf131a0936886
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Nov 30 13:05:32 2015 -0500

    Split collector serialization from timing, use writeable instead of streamable

    Previously, the collector timing was done in the same class that was serialized, which required
    leaving the collector null when serializing.  Besides being a bit gross, this made it difficult to
    change the class to Writeable.

    This splits up the timing (InternalProfileCollector + ProfileCollector) and the serialization of
    the times (CollectorResult).  CollectorResult is writeable, and also acts as the public interface.

commit 6ddd77d066262d4400e3d338b11cebe7dd27ca78
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Nov 25 13:15:12 2015 -0500

    Remove dead code

commit 06033f8a056e2121d157654a65895c82bbe93a51
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Nov 25 12:49:51 2015 -0500

    Review cleanup:  Delegate to in.getProfilers()

    Note:  Need to investigate how this is used exactly so we can add a test, it isn't touched by a
    normal inner_hits query...

commit a77e13da21b4bad1176ca2b5d5b76034fb12802f
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Nov 25 11:59:58 2015 -0500

    Review cleanup:  collapse to single `if` statement

commit e97bb6215a5ebb508b0293ac3acd60d5ae479be1
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Nov 25 11:39:43 2015 -0500

    Review cleanup: Return empty map instead of null for profile results

    Note: we still need to check for nullness in SearchPhaseController, since an empty/no-hits result
    won't have profiling instantiated (or any other component like aggs or suggest).  Therefore
    QuerySearchResult.profileResults() is still @Nullable

commit db8e691de2a727389378b459fa76c942572e6015
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Nov 25 10:14:47 2015 -0500

    Review cleanup: renaming, formatting fixes, assertions

commit 9011775fe80ba22c2fd948ca64df634b4e32772d
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Thu Nov 19 20:09:52 2015 -0500

    [DOCS] Add missing annotation

commit 4b58560b06f08d4b99b149af20916ee839baabd7
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Thu Nov 19 20:07:17 2015 -0500

    [DOCS] Update documentation for new format

commit f0458c58e5538ed8ec94849d4baf3250aa9ec841
Author: Adrien Grand <jpountz@gmail.com>
Date:   Tue Nov 17 10:14:09 2015 +0100

    Reduce visibility of internal classes.

commit d0a7d319098e60b028fa772bf8a99b2df9cf6146
Merge: e158070 1bdf29e
Author: Adrien Grand <jpountz@gmail.com>
Date:   Tue Nov 17 10:09:18 2015 +0100

    Merge branch 'master' into query_profiler

commit e158070a48cb096551f3bb3ecdcf2b53bbc5e3c5
Author: Adrien Grand <jpountz@gmail.com>
Date:   Tue Nov 17 10:08:48 2015 +0100

    Fix compile error due to bad html in javadocs.

commit a566b5d08d659daccb087a9afbe908ec3d96cd6e
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Nov 16 17:48:37 2015 -0500

    Remove unused collector

commit 4060cd72d150cc68573dbde62ca7321c47f75703
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Nov 16 17:48:10 2015 -0500

    Comment cleanup

commit 43137952bf74728f5f5d5a8d1bfc073e0f9fe4f9
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Nov 16 17:32:06 2015 -0500

    Fix negative formatted time

commit 5ef3a980266326aff12d4fe380f73455ff28209f
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Nov 13 17:10:17 2015 +0100

    Fix javadocs.

commit 276114d29e4b17a0cc0982cfff51434f712dc59e
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Nov 13 16:25:23 2015 +0100

    Fix: include rewrite time as well...

commit 21d9e17d05487bf4903ae3d2ab6f429bece2ffef
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Nov 13 15:10:15 2015 +0100

    Remove TODO about profiling explain.

commit 105a31e8e570efb879447159c3852871f5cf7db4
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Nov 13 14:59:30 2015 +0100

    Fix nocommit now that the global collector is a root collector.

commit 2e8fc5cf84adb1bfaba296808c329e5f982c9635
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Nov 13 14:53:38 2015 +0100

    Make collector wrapping more explicit/robust (and a bit less magical).

commit 5e30b570b0835e1ce79a57933a31b6a2d0d58e2d
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Nov 13 12:44:03 2015 +0100

    Simplify recording API a bit.

commit 9b453afced6adc0a59ca1d67d90c28796b105185
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Nov 13 10:54:25 2015 +0100

    Fix serialization-related nocommits.

commit ad97b200bb123d4e9255e7c8e02f7e43804057a5
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Nov 13 10:46:30 2015 +0100

    Fix DFS.

commit a6de06986cd348a831bd45e4f524d2e14d9e03c3
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Nov 12 19:29:16 2015 +0100

    Remove forbidden @Test annotation.

commit 4991a28e19501109af98026e14756cb25a56f4f4
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Nov 12 19:25:59 2015 +0100

    Limit the impact of query profiling on the SearchContext API.

    Rule is: we can put as much as we want in the search.profile package but should
    aim at touching as little as possible other areas of the code base.

commit 353d8d75a5ce04d9c3908a0a63d4ca6e884c519a
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Nov 12 18:05:09 2015 +0100

    Remove dead code.

commit a3ffafb5ddbb5a2acf43403c946e5ed128f47528
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Nov 12 15:30:35 2015 +0100

    Remove call to forbidden String.toLowerCase() API.

commit 1fa8c7a00324fa4e32bd24135ebba5ecf07606f1
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Nov 12 15:30:27 2015 +0100

    Fix compilation.

commit 2067f1797e53bef0e1a8c9268956bc5fb8f8ad97
Merge: 22e631f fac472f
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Nov 12 15:21:12 2015 +0100

    Merge branch 'master' into query_profiler

commit 22e631fe6471fed19236578e97c628d5cda401a9
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Nov 3 18:52:05 2015 -0500

    Fix and simplify serialization of shard profile results

commit 461da250809451cd2b47daf647343afbb4b327f2
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Nov 3 18:32:22 2015 -0500

    Remove helper methods, simpler without them

commit 5687aa1c93d45416d895c2eecc0e6a6b302139f2
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Nov 3 18:29:32 2015 -0500

    [TESTS] Fix tests for new rewrite format

commit ba9e82857fc6d4c7b72ef4d962d2102459365299
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Fri Oct 30 15:28:14 2015 -0400

    Rewrites begone! Record all rewrites as a single time metric

commit 5f28d7cdff9ee736651d564f71f713bf45fb1d91
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Thu Oct 29 15:36:06 2015 -0400

    Merge duplicate rewrites into one entry

    By using the Query as the key in a map, we can easily merge rewrites together.  This means
    the preProcess(), assertion and main query rewrites all get merged together.  Downside is that
    rewrites of the same Query (hashcode) but in different places get lumped together.  I think the
    simplicity of the solution is better than the slight loss in output fidelity.

commit 9a601ea46bb21052746157a45dcc6de6bc350e9c
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Thu Oct 29 15:28:27 2015 -0400

    Allow multiple ""searches"" per profile (e.g. query + global agg)

commit ee30217328381cd83f9e653d3a4d870c1d2bdfce
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Thu Oct 29 11:29:18 2015 -0400

    Update comment, add nullable annotation

commit 405c6463a64e118f170959827931e8c6a1661f13
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Thu Oct 29 11:04:30 2015 -0400

    remove out-dated comment

commit 2819ae8f4cf1bfd5670dbd1c0e06195ae457b58f
Author: Adrien Grand <jpountz@gmail.com>
Date:   Tue Oct 27 19:50:47 2015 +0100

    Don't render children in the profiles when there are no children.

commit 7677c2ddefef321bbe74660471603d202a4ab66f
Author: Adrien Grand <jpountz@gmail.com>
Date:   Tue Oct 27 19:50:35 2015 +0100

    Set the profiler on the ContextIndexSearcher.

commit 74a4338c35dfed779adc025ec17cfd4d1c9f66f5
Author: Adrien Grand <jpountz@gmail.com>
Date:   Tue Oct 27 19:50:01 2015 +0100

    Fix json rendering.

commit 6674d5bebe187b0b0d8b424797606fdf2617dd27
Author: Adrien Grand <jpountz@gmail.com>
Date:   Tue Oct 27 19:20:19 2015 +0100

    Revert ""nocommit - profiling never enabled because setProfile() on ContextIndexSearcher never called""

    This reverts commit d3dc10949024342055f0d4fb7e16c7a43423bfab.

commit d3dc10949024342055f0d4fb7e16c7a43423bfab
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Fri Oct 23 17:20:57 2015 -0400

    nocommit - profiling never enabled because setProfile() on ContextIndexSearcher never called

    Previously, it was enabled by using DefaultSearchContext as a third-party ""proxy"", but since
    the refactor to make it unit testable, setProfile() needs to be called explicitly.  Unfortunately,
    this is not possible because SearchService only has access to an IndexSearcher.  And it is not
    cast'able to a DefaultIndexSearcher.

commit b9ba9c5d1f93b9c45e97b0a4e35da6f472c9ea53
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Fri Oct 23 16:27:00 2015 -0400

    [TESTS] Fix unit tests

commit cf5d1e016b2b4a583175e07c16c7152f167695ce
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Fri Oct 23 16:22:34 2015 -0400

    Increment token after recording a rewrite

commit b7d08f64034e498533c4a81bff8727dd8ac2843e
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Fri Oct 23 16:14:09 2015 -0400

    Fix NPE if a top-level root doesn't have children

commit e4d3b514bafe2a3a9db08438c89f0ed68628f2d6
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Fri Oct 23 16:05:47 2015 -0400

    Fix NPE when profiling is disabled

commit 445384fe48ed62fdd01f7fc9bf3e8361796d9593
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Fri Oct 23 16:05:37 2015 -0400

    [TESTS] Fix integration tests

commit b478296bb04fece827a169e7522df0a5ea7840a3
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Fri Oct 23 15:43:24 2015 -0400

    Move rewrites to their own section, remove reconciliation

    Big commit because the structural change affected a lot of the wrapping code.  Major changes:

    - Rewrites are now in their own section in the response
    - Reconciliation is gone...we don't attempt to roll the rewrites into the query tree structure
    - InternalProfileShardResults (plural) simply holds a Map<String, InternalProfileShardResult> and
    helps to serialize / ToXContent
    - InternalProfileShardResult (singular) is now the holder for all shard-level profiling details. Currently
    this includes query, collectors and rewrite.  In the future it would hold suggest, aggs, etc
    - When the user requests the profiled results, they get back a Map<String, ProfileShardResult>
    instead of doing silly helper methods to convert to maps, etc
    - Shard details are baked into a string instead of serializing the object

commit 24819ad094b208d0e94f17ce9c3f7c92f7414124
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Fri Oct 23 10:25:38 2015 -0400

    Make Profile results immutable by removing relative_time

commit bfaf095f45fed74194ef78160a8e5dcae1850f9e
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Oct 23 10:54:59 2015 +0200

    Add nocommits.

commit e9a128d0d26d5b383b52135ca886f2c987850179
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Oct 23 10:39:37 2015 +0200

    Move all profile-related classes to the same package.

commit f20b7c7fdf85384ecc37701bb65310fb8c20844f
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Oct 23 10:33:14 2015 +0200

    Reorganize code a bit to ease unit testing of ProfileCollector.

commit 3261306edad6a0c70f59eaee8fe58560f61a75fd
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Oct 22 18:07:28 2015 +0200

    Remove irrelevant nocommit.

commit a6ac868dad12a2e17929878681f66dbd0948d322
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Oct 22 18:06:45 2015 +0200

    Make CollectorResult's reason a free-text field to ease bw compat.

commit 5d0bf170781a950d08b81871cd1e403e49f3cc12
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Oct 22 16:50:52 2015 +0200

    Add unit tests for ProfileWeight/ProfileScorer.

commit 2cd88c412c6e62252504ef69a59216adbb574ce4
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Oct 22 15:55:17 2015 +0200

    Rename InternalQueryProfiler to Profiler.

commit 84f5718fa6779f710da129d9e0e6ff914fd85e36
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Oct 22 15:53:58 2015 +0200

    Merge InternalProfileBreakdown into ProfileBreakdown.

commit 135168eaeb8999c8117ea25288104b0961ce9b35
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Oct 22 13:56:57 2015 +0200

    Make it possible to instantiate a ContextIndexSearcher without SearchContext.

commit 5493fb52376b48460c4ce2dedbe00cc5f6620499
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Oct 22 11:53:29 2015 +0200

    Move ProfileWeight/Scorer to their own files.

commit bf2d917b9dae3b32dfc29c35a7cac4ccb7556cce
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Oct 22 11:38:24 2015 +0200

    Fix bug that caused phrase queries to fail.

commit b2bb0c92c343334ec1703a221af24a1b55e36d53
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Oct 22 11:36:17 2015 +0200

    Parsing happens on the coordinating node now.

commit 416cabb8621acb5cd8dfa77374fd23e428f52fe9
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Oct 22 11:22:17 2015 +0200

    Fix compilation (in particular remove guava deps).

commit f996508645f842629d403fc2e71c1890c0e2cac9
Merge: 4616a25 bc3b91e
Author: Adrien Grand <jpountz@gmail.com>
Date:   Thu Oct 22 10:44:38 2015 +0200

    Merge branch 'master' into query_profiler

commit 4616a25afffe9c24c6531028f7fccca4303d2893
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Oct 20 12:11:32 2015 -0400

    Make Java Count API compatible with profiling

commit cbfba74e16083d719722500ac226efdb5cb2ff55
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Oct 20 12:11:19 2015 -0400

    Fix serialization of profile query param, NPE

commit e33ffac383b03247046913da78c8a27e457fae78
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Oct 20 11:17:48 2015 -0400

    TestSearchContext should return null Profiler instead of exception

commit 73a02d69b466dc1a5b8a5f022464d6c99e6c2ac3
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Oct 19 12:07:29 2015 -0400

    [DOCS] Update docs to reflect new ID format

commit 36248e388c354f954349ecd498db7b66f84ce813
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Oct 19 12:03:03 2015 -0400

    Use the full [node][index][shard] string as profile result ID

commit 5cfcc4a6a6b0bcd6ebaa7c8a2d0acc32529a80e1
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Thu Oct 15 17:51:40 2015 -0400

    Add failing test for phrase matching

    Stack trace generated:

    [2015-10-15 17:50:54,438][ERROR][org.elasticsearch.search.profile] shard [[JNj7RX_oSJikcnX72aGBoA][test][2]], reason [RemoteTransportException[[node_s0][local[1]][indices:data/read/search[phase/query]]]; nested: QueryPhaseExecutionException[Query Failed [Failed to execute main query]]; nested: AssertionError[nextPosition() called more than freq() times!]; ], cause [java.lang.AssertionError: nextPosition() called more than freq() times!
    	at org.apache.lucene.index.AssertingLeafReader$AssertingPostingsEnum.nextPosition(AssertingLeafReader.java:353)
    	at org.apache.lucene.search.ExactPhraseScorer.phraseFreq(ExactPhraseScorer.java:132)
    	at org.apache.lucene.search.ExactPhraseScorer.access$000(ExactPhraseScorer.java:27)
    	at org.apache.lucene.search.ExactPhraseScorer$1.matches(ExactPhraseScorer.java:69)
    	at org.elasticsearch.common.lucene.search.ProfileQuery$ProfileScorer$2.matches(ProfileQuery.java:226)
    	at org.apache.lucene.search.ConjunctionDISI$TwoPhaseConjunctionDISI.matches(ConjunctionDISI.java:175)
    	at org.apache.lucene.search.ConjunctionDISI$TwoPhase.matches(ConjunctionDISI.java:213)
    	at org.apache.lucene.search.ConjunctionDISI.doNext(ConjunctionDISI.java:128)
    	at org.apache.lucene.search.ConjunctionDISI.nextDoc(ConjunctionDISI.java:151)
    	at org.apache.lucene.search.ConjunctionScorer.nextDoc(ConjunctionScorer.java:62)
    	at org.elasticsearch.common.lucene.search.ProfileQuery$ProfileScorer$1.nextDoc(ProfileQuery.java:205)
    	at org.apache.lucene.search.Weight$DefaultBulkScorer.scoreAll(Weight.java:224)
    	at org.apache.lucene.search.Weight$DefaultBulkScorer.score(Weight.java:169)
    	at org.apache.lucene.search.BulkScorer.score(BulkScorer.java:39)
    	at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:795)
    	at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:509)
    	at org.elasticsearch.search.query.QueryPhase.execute(QueryPhase.java:347)
    	at org.elasticsearch.search.query.QueryPhase.execute(QueryPhase.java:111)
    	at org.elasticsearch.search.SearchService.loadOrExecuteQueryPhase(SearchService.java:366)
    	at org.elasticsearch.search.SearchService.executeQueryPhase(SearchService.java:378)
    	at org.elasticsearch.search.action.SearchServiceTransportAction$SearchQueryTransportHandler.messageReceived(SearchServiceTransportAction.java:368)
    	at org.elasticsearch.search.action.SearchServiceTransportAction$SearchQueryTransportHandler.messageReceived(SearchServiceTransportAction.java:365)
    	at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:280)
    	at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

commit 889fe6383370fe919aaa9f0af398e3040209e40b
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Thu Oct 15 17:30:38 2015 -0400

    [DOCS] More docs

commit 89177965d031d84937753538b88ea5ebae2956b0
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Thu Oct 15 09:59:09 2015 -0400

    Fix multi-stage rewrites to recursively find most appropriate descendant rewrite

    Previously, we chose the first rewrite that matched.  But in situations where a query may
    rewrite several times, this won't build the tree correctly.  Instead we need to recurse
    down all the rewrites until we find the most appropriate ""leaf"" rewrite

    The implementation of this is kinda gross: we recursively call getRewrittenParentToken(),
    which does a linear scan over the rewriteMap and tries to find rewrites with a larger token
    value (since we know child tokens are always larger).  Can almost certainly find a better
    way to do this...

commit 0b4d782b5348e5d03fd26f7d91bc4a3fbcb7f6a5
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Oct 14 19:30:06 2015 -0400

    [Docs] Documentation checkpoint

commit 383636453f6610fcfef9070c21ae7ca11346793e
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Sep 16 16:02:22 2015 -0400

    Comments

commit a81e8f31e681be16e89ceab9ba3c3e0a018f18ef
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Sep 16 15:48:49 2015 -0400

    [TESTS] Ensure all tests use QUERY_THEN_FETCH, DFS does not profile

commit 1255c2d790d85fcb9cbb78bf2a53195138c6bc24
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Sep 15 16:43:46 2015 -0400

    Refactor rewrite handling to handle identical rewrites

commit 85b7ec82eb0b26a6fe87266b38f5f86f9ac0c44f
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Sep 15 08:51:14 2015 -0400

    Don't update parent when a token is added as root -- Fixes NPE

commit 109d02bdbc49741a3b61e8624521669b0968b839
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Sep 15 08:50:40 2015 -0400

    Don't set the rewritten query if not profiling -- Fixes NPE

commit 233cf5e85f6f2c39ed0a2a33d7edd3bbd40856e8
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Sep 14 18:04:51 2015 -0400

    Update tests to new response format

commit a930b1fc19de3a329abc8ffddc6711c1246a4b15
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Sep 14 18:03:58 2015 -0400

    Fix serialization

commit 69afdd303660510c597df9bada5531b19d134f3d
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Sep 14 15:11:31 2015 -0400

    Comments and cleanup

commit 64e7ca7f78187875378382ec5d5aa2462ff71df5
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Sep 14 14:40:21 2015 -0400

    Move timing into dedicated class, add proper rewrite integration

commit b44ff85ddbba0a080e65f2e7cc8c50d30e95df8e
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Sep 14 12:00:38 2015 -0400

    Checkpoint - Refactoring to use a token-based dependency tree

commit 52cedd5266d6a87445c6a4cff3be8ff2087cd1b7
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Fri Sep 4 19:18:19 2015 -0400

    Need to set context profiling flag before calling queryPhase.preProcess

commit c524670cb1ce29b4b3a531fa2bff0c403b756f46
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Sep 4 18:00:37 2015 +0200

    Reduce profiling overhead a bit.

    This removes hash-table lookups everytime we start/stop a profiling clock.

commit 111444ff8418737082236492b37321fc96041e09
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Sep 4 16:18:59 2015 +0200

    Add profiling of two-phase iterators.

    This is useful for eg. phrase queries or script filters, since they are
    typically consumed through their two-phase iterator instead of the scorer.

commit f275e690459e73211bc8494c6de595c0320f4c0b
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Sep 4 16:03:21 2015 +0200

    Some more improvements.

    I changed profiling to disable bulk scoring, since it makes it impossible to
    know where time is spent. Also I removed profiling of operations that are
    always fast (eg. normalization) and added nextDoc/advance.

commit 3c8dcd872744de8fd76ce13b6f18f36f8de44068
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Sep 4 14:39:50 2015 +0200

    Remove println.

commit d68304862fb38a3823aebed35a263bd9e2176c2f
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Sep 4 14:36:03 2015 +0200

    Fix some test failures introduced by the rebase...

commit 04d53ca89fb34b7a21515d770c32aaffcc513b90
Author: Adrien Grand <jpountz@gmail.com>
Date:   Fri Sep 4 13:57:35 2015 +0200

    Reconcile conflicting changes after rebase

commit fed03ec8e2989a0678685cd6c50a566cec42ea4f
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Thu Aug 20 22:40:39 2015 -0400

    Add Collectors to profile results

    Profile response element has now been re-arranged so that everything is listed per-shard to
    facilitate grouping elements together.  The new `collector` element looks like this:

    ```
    ""profile"": {
      ""shards"": [
         {
            ""shard_id"": ""keP4YFywSXWALCl4m4k24Q"",
            ""query"": [...],
            ""collector"": [
               {
                  ""name"": ""MultiCollector"",
                  ""purpose"": ""search_multi"",
                  ""time"": ""16.44504400ms"",
                  ""relative_time"": ""100.0000000%"",
                  ""children"": [
                     {
                        ""name"": ""FilteredCollector"",
                        ""purpose"": ""search_post_filter"",
                        ""time"": ""4.556013000ms"",
                        ""relative_time"": ""27.70447437%"",
                        ""children"": [
                           {
                              ""name"": ""SimpleTopScoreDocCollector"",
                              ""purpose"": ""search_sorted"",
                              ""time"": ""1.352166000ms"",
                              ""relative_time"": ""8.222331299%"",
                              ""children"": []
                           }
                        ]
                     },
                     {
                        ""name"": ""BucketCollector: [[non_global_term, another_agg]]"",
                        ""purpose"": ""aggregation"",
                        ""time"": ""10.40379400ms"",
                        ""relative_time"": ""63.26400829%"",
                        ""children"": []
                     },
           ...
    ```

commit 1368b495c934be642c00f6cbf9fc875d7e6c07ff
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Aug 19 12:43:03 2015 -0400

    Move InternalProfiler to profile package

commit 53584de910db6d4a6bb374c9ebb954f204882996
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Aug 18 18:34:58 2015 -0400

    Only reconcile rewrite timing when rewritten query is different from original

commit 9804c3b29d2107cd97f1c7e34d77171b62cb33d0
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Aug 18 16:40:15 2015 -0400

    Comments and cleanup

commit 8e898cc7c59c0c1cc5ed576dfed8e3034ca0967f
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Aug 18 14:19:07 2015 -0400

    [TESTS] Fix comparison test to ensure results sort identically

commit f402a29001933eef29d5a62e81c8563f1c8d0969
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Aug 18 14:17:59 2015 -0400

    Add note about DFS being unable to profile

commit d446e08d3bc91cd85b24fc908e2d82fc5739d598
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Aug 18 14:17:23 2015 -0400

    Implement some missing methods

commit 13ca94fb86fb037a30d181b73d9296153a63d6e4
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Aug 18 13:10:54 2015 -0400

    [TESTS] Comments & cleanup

commit c76c8c771fdeee807761c25938a642612a6ed8e7
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Aug 18 13:06:08 2015 -0400

    [TESTS] Fix profileMatchesRegular to handle NaN scores and nearlyEqual floats

commit 7e7a10ecd26677b2239149468e24938ce5cc18e1
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Aug 18 12:22:16 2015 -0400

    Move nearlyEquals() utility function to shared location

commit 842222900095df4b27ff3593dbb55a42549f2697
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Aug 18 12:04:35 2015 -0400

    Fixup rebase conflicts

commit 674f162d7704dd2034b8361358decdefce1f76ce
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Aug 17 15:29:35 2015 -0400

    [TESTS] Update match and bool tests

commit 520380a85456d7137734aed0b06a740e18c9cdec
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Aug 17 15:28:09 2015 -0400

    Make naming consistent re: plural

commit b9221501d839bb24d6db575d08e9bee34043fc65
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Aug 17 15:27:39 2015 -0400

    Children need to be added to list after serialization

commit 05fa51df940c332fbc140517ee56e849f2d40a72
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Aug 17 15:22:41 2015 -0400

    Re-enable bypass for non-profiled queries

commit f132204d264af77a75bd26a02d4e251a19eb411d
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Aug 17 15:21:14 2015 -0400

    Fix serialization of QuerySearchResult, InternalProfileResult

commit 27b98fd475fc2e9508c91436ef30624bdbee54ba
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Aug 10 17:39:17 2015 -0400

    Start to add back tests, refactor Java api

commit bcfc9fefd49307045108408dc160774666510e85
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Aug 4 17:08:10 2015 -0400

    Checkpoint

commit 26a530e0101ce252450eb23e746e48c2fd1bfcae
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Tue Jul 14 13:30:32 2015 -0400

    Add createWeight() checkpoint

commit f0dd61de809c5c13682aa213c0be65972537a0df
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Mon Jul 13 12:36:27 2015 -0400

    checkpoint

commit 377ee8ce5729b8d388c4719913b48fae77a16686
Author: Zachary Tong <zacharyjtong@gmail.com>
Date:   Wed Mar 18 10:45:01 2015 -0400

    checkpoint",https://github.com/elastic/elasticsearch/commit/9a70dbb51ab9a5140691c6822ee7002ddd366337
3840,3840.0,4014.0,elastic/elasticsearch,c7a001dcb46656f8cd4d9ca1505aa9358c4fab90,"Merge pull request #15376 from cbuescher/highlight-refactoring-searchSource

Use HighlightBuilder in SearchSourceBuilder",https://github.com/elastic/elasticsearch/commit/c7a001dcb46656f8cd4d9ca1505aa9358c4fab90
3841,3841.0,4015.0,elastic/elasticsearch,f5d307e426ae75f24f45949bc4da9aa3197a7ae0,"BulkItemResponse returns status code instead of status name

In commit fafeb3a, we've refactored REST response handling logic
and returned HTTP status names instead of HTTP status codes for
bulk item responses. With this commit we restore the original
behavior.

Checked with @bleskes.",https://github.com/elastic/elasticsearch/commit/f5d307e426ae75f24f45949bc4da9aa3197a7ae0
3842,3842.0,4016.0,elastic/elasticsearch,81d63639670a3c04ef780722d947e467a0c54f6b,"Remove benchmark package

Tons of ancient ""benchmarks"" exist in elasticsearch. These are main
methods that do some kind of construction of ES classes and time various
things. The problem with these is they are not maintained, and not run.
Refactorings that touch anything that is common in these classes is very
painful. Going through these, almost all would simply not work in 2.x
without modifications (because they do not set path.home).

This change removes the entire benchmark package. If someone needs to
run a benchmark like this, they can look at history for examples if
necessary (although these examples are often not realistic and should
just start real elasticsearch processes in a shell script). Longer term,
we should make this easier to do by having the build support adding real
benchmarks which can be run in jenkins (so we know they actually run,
instead of doing refactorings with pure guesswork as to whether the
benchmark would run correctly).",https://github.com/elastic/elasticsearch/commit/81d63639670a3c04ef780722d947e467a0c54f6b
3843,3843.0,4017.0,elastic/elasticsearch,025e9818e7c3f428aa46187572c40ce7f93fd197,Refactors TransportReplicationAction to decouple request routing and shard operation logic,https://github.com/elastic/elasticsearch/commit/025e9818e7c3f428aa46187572c40ce7f93fd197
3844,3844.0,4018.0,elastic/elasticsearch,b4e0c876d53121bd4a0dcd8acca1f3a3caa84356,"Merge pull request #15321 from martinstuga/Refactor-StatsAggegator#15264

Correct typo in class name of StatsAggregator (Closes #14730)",https://github.com/elastic/elasticsearch/commit/b4e0c876d53121bd4a0dcd8acca1f3a3caa84356
3845,3845.0,4019.0,elastic/elasticsearch,2e299860e5ecc98c1f566d2f15625d26a0e0dd51,refactor mustache to lang-mustache plugin. No rest tests yet.,https://github.com/elastic/elasticsearch/commit/2e299860e5ecc98c1f566d2f15625d26a0e0dd51
3846,3846.0,4020.0,elastic/elasticsearch,414c04eb66fb7619b5280e726bc91aac52dd7fc3,"Restore chunksize of 512kb on recovery and remove configurability

This commit restores the chunk size of 512kb lost in a previous but unreleased
refactoring. At the same time it removes the configurability of:
 * `indices.recovery.file_chunk_size` - now fixed to 512kb
 * `indices.recovery.translog_ops` - removed without replacement
 * `indices.recovery.translog_size` - now fixed to 512kb
 * `indices.recovery.compress` - file chunks are not compressed due to lucene's compression but translog operations are.

The compress option is gone entirely and compression is used where it makes sense. On sending files of the index
we don't compress as we rely on the lucene compression for stored fields etc.

Relates to #15161",https://github.com/elastic/elasticsearch/commit/414c04eb66fb7619b5280e726bc91aac52dd7fc3
3847,3847.0,4021.0,elastic/elasticsearch,25d60e152fa4dfe57555388916e8125e8283653f,"Tribe: Fix tribe node to load config file for internal client nodes

The tribe node creates one local client node for each cluster it
connects to. Refactorings in #13383 broke this so that each local client
node now tries to load the full elasticsearch.yml that the real tribe
node uses.

This change fixes the problem by adding a TribeClientNode which is a
subclass of Node. The Environment the node uses is now passed in (in
place of Settings), and the TribeClientNode simply does not use
InternalSettingsPreparer.prepareEnvironment.

The tests around tribe nodes are not great. The existing tests pass, but
I also manually tested by creating 2 local clusters, and configuring and
starting a tribe node. With this I was able to see in the logs the tribe
node connecting to each cluster.

closes #13383",https://github.com/elastic/elasticsearch/commit/25d60e152fa4dfe57555388916e8125e8283653f
3848,3848.0,4022.0,elastic/elasticsearch,aa69c4a20b106079e9f67dfd1ecaa5a8e05f8ba7,"Add fromXContent method to HighlightBuilder

For the search refactoring the HighlightBuilder needs a way to
create new instances by parsing xContent. For bwc this PR start
by moving over and slightly modifying the parsing from
HighlighterParseElement and keeps parsing for top level highlighter
and field options separate. Also adding tests for roundtrip
of random builder (rendering it to xContent and parsing it and
making sure the original builder properties are preserved)",https://github.com/elastic/elasticsearch/commit/aa69c4a20b106079e9f67dfd1ecaa5a8e05f8ba7
3849,3849.0,4023.0,elastic/elasticsearch,536e7e126833e91f7aa5168528711685d6a9770d,"Remove ancient deprecated and alternative recovery settings

Several settings have been deprecated or are replaced with new settings after refactorings
in version 1.x. This commit removes the support for these settings.

The settings are:

 * `index.shard.recovery.translog_size`
 * `index.shard.recovery.translog_ops`
 * `index.shard.recovery.file_chunk_size`
 * `index.shard.recovery.concurrent_streams`
 * `index.shard.recovery.concurrent_small_file_streams`
 * `indices.recovery.max_size_per_sec`",https://github.com/elastic/elasticsearch/commit/536e7e126833e91f7aa5168528711685d6a9770d
3850,3850.0,4024.0,elastic/elasticsearch,17e6195fd605be8f34d3af857aeb6c7d0ffea697,"Build: Fix updateShas to not barf on disabled license checks and even compile correctly

These were just results of not testing properly after refactoring.

closes #15224",https://github.com/elastic/elasticsearch/commit/17e6195fd605be8f34d3af857aeb6c7d0ffea697
3851,3851.0,4025.0,elastic/elasticsearch,6f2c36dcb709f2907ffe79bc4907c88e3f343a66,"Merge pull request #15113 from cbuescher/highligh-builder-refactoring

Make HighlighterBuilder implement Writable, equals and hashCode",https://github.com/elastic/elasticsearch/commit/6f2c36dcb709f2907ffe79bc4907c88e3f343a66
3852,3852.0,4026.0,elastic/elasticsearch,027a9b18448cf79a026598795dfe1b30cb1fe523,"Refactor HighlighterBuilder

This change pulls out the common fields that HighlighterBuilder shares with
its nested Field class into a new abstract CommonHighlighterOptions superclass
which also gets equals() and hashCode() method and methods to serialize the
common fields to a StreamOutput and read them from a stream.

Relates to #15044",https://github.com/elastic/elasticsearch/commit/027a9b18448cf79a026598795dfe1b30cb1fe523
3853,3853.0,4027.0,elastic/elasticsearch,e507ef807a57a998cc8aa56a3b3137228e3471d2,"Merge pull request #14933 from cbuescher/shapes-refactor-point

Make PointBuilder, CircleBuilder & EnvelopeBuilder implement Writable",https://github.com/elastic/elasticsearch/commit/e507ef807a57a998cc8aa56a3b3137228e3471d2
3854,3854.0,4028.0,elastic/elasticsearch,5ca9f3ff8f6c5a424902d031587943482ede34e9,"Geo: Make ShapeBuilders implement Writable

We recently refactored the queries to make them parsable on the
coordinating note and adding serialization and equals/hashCode
capability to them. So far ShapeBuilders nested inside queries
were still transported as a byte array that needs to be parsed
later on the shard receiving the query. To be able to also
serialize geo shapes this way, we also need to make all the
implementations of ShapeBuilder implement Writable.

This PR adds this to PointBuilder and also adds tests for
serialization, equality and hashCode.",https://github.com/elastic/elasticsearch/commit/5ca9f3ff8f6c5a424902d031587943482ede34e9
3855,3855.0,4029.0,elastic/elasticsearch,c650d31ef1992f0bc289ab4e8906f0f351ac3041,"Build: Improve integ test startup behavior

As part of the refactoring to allow --debug-jvm with gradle run, the way
java options are passed for integ tests was changed. However, we need to
make sure the jvm argline passed goes to ES_GC_OPTS because this
allows overriding things like which garbage collector we run, which we
do for testing from jenkins. This change adds back ES_GC_OPTS.",https://github.com/elastic/elasticsearch/commit/c650d31ef1992f0bc289ab4e8906f0f351ac3041
3856,3856.0,4030.0,elastic/elasticsearch,12941bd4b745cb81a3d82264a0152200219885b0,"Geo: remove InternalLineStringBuilder

This is a first step in reducing the number of ShapeBuilders since
before we start making the remaining implement Writable for the
search request refactoring. This shape builder seems to have been
only used in tests, and those tests didn't do much to begin with,
so this removed them.

Relates to #14416",https://github.com/elastic/elasticsearch/commit/12941bd4b745cb81a3d82264a0152200219885b0
3857,3857.0,4031.0,elastic/elasticsearch,6a2fa73fb5309935ed5b42d4cfa8f47b47dacc59,"Merge pull request #14808 from ywelsch/refactor/delayed-allocation

Simplify delayed shard allocation",https://github.com/elastic/elasticsearch/commit/6a2fa73fb5309935ed5b42d4cfa8f47b47dacc59
3858,3858.0,4032.0,elastic/elasticsearch,0623684521e1dc37ec374974d3ba10bb005b351f,"Geo: Moving static factory methods to ShapeBuilders

Currently the abstract ShapeBuilder class serves too many different
purposes, making it hard to refactor and maintain the code. In order
to reduce the size and responsibilities, this PR moved all the
static factory methods used as a shortcut to create new shape builders
out to a new ShapeBuilders class, similar to how QueryBuilders is
used already.",https://github.com/elastic/elasticsearch/commit/0623684521e1dc37ec374974d3ba10bb005b351f
3859,3859.0,4033.0,elastic/elasticsearch,992c601a7bde9c1a3adbcd41f6d22d0a45941fcb,"Merge pull request elastic/elasticsearch#647 from simianhacker/rest-refactor

Remove Time Picker for Clusters Listing Page

Original commit: elastic/x-pack-elasticsearch@89bf0c210eefc029e6e9ba6ea8f82bc4a17ddce1",https://github.com/elastic/elasticsearch/commit/992c601a7bde9c1a3adbcd41f6d22d0a45941fcb
3860,3860.0,4034.0,elastic/elasticsearch,fcc553220c77a16e90d2b55431971c478d8bdef3,"Merge pull request elastic/elasticsearch#639 from tsullivan/chris-rest-refactor

Refactoring to REST architecture for single point of data retrieval from front-end controllers

Original commit: elastic/x-pack-elasticsearch@3734c48709cef74a1407c5f42357de5da655f109",https://github.com/elastic/elasticsearch/commit/fcc553220c77a16e90d2b55431971c478d8bdef3
3861,3861.0,4035.0,elastic/elasticsearch,33ca2ec597a3eb0488f823b2a342a6c2cd5ad043,"Merge pull request #14222 from ywelsch/fix/refactor-transport-master-node-action

Refactor retry logic for TransportMasterNodeAction",https://github.com/elastic/elasticsearch/commit/33ca2ec597a3eb0488f823b2a342a6c2cd5ad043
3862,3862.0,4036.0,elastic/elasticsearch,0575744a39152c695842195d05ed6b213b4e9c16,"Refactor retry logic for TransportMasterNodeAction

- Same as for TransportInstanceSingleOperationAction and TransportReplicationAction, onClusterServiceClose consistently throws a NodeClosedException now.
- Added retry logic if master could not publish cluster state or stepped down before publishing (ZenDiscovery). The test IndexingMasterFailoverIT shows the issue.
- Simplified retry logic by moving bits from different places into shared retry method.
  - Removed boolean flag retrying that aborted retrying after a single master node change (now we retry until timeout).
  - Two existing predicates that deal with master node changes unified in a single predicate masterNodeChangedPredicate

Closes #14222",https://github.com/elastic/elasticsearch/commit/0575744a39152c695842195d05ed6b213b4e9c16
3863,3863.0,4037.0,elastic/elasticsearch,43b729f34c63f39851afeff3c4e3f73fd7a8ea56,"[TEST] test query and search source parsing from different XContent types

We used to test only json parsing as we relied on QueryBuilder#toString which uses the json format. This commit makes sure that we now output the randomly generated queries using a random format, and that we are always able to parse them correctly.

This revealed a couple of issues with binary objects that haven't been migrated yet to be structured Writeable objects. We used to keep them in the format they were sent while parsing, which led to problems when printing them out as we expected them to always be in json format. Also we can't compare different BytesReference objects that hold the same content but in different formats (unless we want to parse them as part of equal and hashcode, doesn't seem like a good idea) and verify that we have parsed the right objects if they can be different formats. The fix is to always keep binary objects in json format. Best fix would be not to have binary objects, which we'll get to once we are done with the search refactoring.

Closes #14415",https://github.com/elastic/elasticsearch/commit/43b729f34c63f39851afeff3c4e3f73fd7a8ea56
3864,3864.0,4038.0,elastic/elasticsearch,9ee315a9c840e2189404edfb2a33b9e352e6f098,"Build: Improve integ test to match ant behavior

Many other improvements:
* Use spaces in ES path
* Use space in path for plugin file installation
* Use a different cwd than ES home
* Use jps to ensure process being stopped is actually elasticsearch
* Stop ES if pid file already exists
* Delete pid file when successfully killed

Also, refactored the cluster formation code to be a little more organized.

closes #14464",https://github.com/elastic/elasticsearch/commit/9ee315a9c840e2189404edfb2a33b9e352e6f098
3865,3865.0,4039.0,elastic/elasticsearch,04dc3d4c91b56d39dfa272e11f352f8fe0be99cf,"Merge branch 'chris-rest-refactor' of github.com:tsullivan/elasticsearch-marvel into rest-refactor

Original commit: elastic/x-pack-elasticsearch@f05242978fff24fb7f314b0d101a20dc01acdb22",https://github.com/elastic/elasticsearch/commit/04dc3d4c91b56d39dfa272e11f352f8fe0be99cf
3866,3866.0,4040.0,elastic/elasticsearch,695be800efe165500d7ef9a1d8c549f0ae5ce3ef,"Merge branch '2.1' of github.com:elasticsearch/elasticsearch-marvel into rest-refactor

Original commit: elastic/x-pack-elasticsearch@236829a0829b777623e2f56df44de78ee91a08c3",https://github.com/elastic/elasticsearch/commit/695be800efe165500d7ef9a1d8c549f0ae5ce3ef
3867,3867.0,4041.0,elastic/elasticsearch,1eceb0b568fdff32840b9958bee0df6292bc5e17,"Merge branch 'rest-refactor' of github.com:simianhacker/elasticsearch-marvel into rest-refactor

Original commit: elastic/x-pack-elasticsearch@897e1a0ad0d8ea1c05b0f13ae213cb4c2e67fef4",https://github.com/elastic/elasticsearch/commit/1eceb0b568fdff32840b9958bee0df6292bc5e17
3868,3868.0,4042.0,elastic/elasticsearch,dacfe7736535a688defacb9d5cad2ffbede469b5,"Merge branch '2.1' of github.com:elasticsearch/elasticsearch-marvel into rest-refactor

Original commit: elastic/x-pack-elasticsearch@3ac660d1479ccbdcb0b42d01ffc2f21f913e5846",https://github.com/elastic/elasticsearch/commit/dacfe7736535a688defacb9d5cad2ffbede469b5
3869,3869.0,4043.0,elastic/elasticsearch,7e6008f0b9a84c16ba3cd6aeb8a6395e8fbfe88e,"refactor GroovySecurityTests into a unit test.

This was basically a resurrected form of the tests for the old sandbox.
We use it to check that groovy scripts some degree of additional containment.

The other scripting plugins (javascript, python) already have this as a unit test,
its much easier to debug any problems that way.

closes #14484",https://github.com/elastic/elasticsearch/commit/7e6008f0b9a84c16ba3cd6aeb8a6395e8fbfe88e
3870,3870.0,4044.0,elastic/elasticsearch,9246ca98fe7b5a3c7ec0a4a4484cfdeb550356ab,rest test refactor,https://github.com/elastic/elasticsearch/commit/9246ca98fe7b5a3c7ec0a4a4484cfdeb550356ab
3871,3871.0,4045.0,elastic/elasticsearch,09d2b4130003191631857d5b8a59c22c84ea8fbb,"Merge pull request #14452 from s1monw/refactor_query_shard_context

Cleanup query parsing and remove IndexQueryParserService",https://github.com/elastic/elasticsearch/commit/09d2b4130003191631857d5b8a59c22c84ea8fbb
3872,3872.0,4046.0,elastic/elasticsearch,759948f6c1ff4259d27e5bbe19a97a8515968c4b,Merge branch 'master' into refactor_query_shard_context,https://github.com/elastic/elasticsearch/commit/759948f6c1ff4259d27e5bbe19a97a8515968c4b
3873,3873.0,4047.0,elastic/elasticsearch,43323c354115617b6f04eeb32b568a8092b9cab3,"Fix bug in cat thread pool

This commit fixes a bug in cat thread pool. This bug resulted from a
refactoring of the handling of thread pool types. To get the previously
displayed thread pool type from the ThreadPoolType object,
ThreadPoolType#getType needs to be called.",https://github.com/elastic/elasticsearch/commit/43323c354115617b6f04eeb32b568a8092b9cab3
3874,3874.0,4048.0,elastic/elasticsearch,b56bbf62dd88225d2c396fc023e2bb44cc8698fc,"Validate query api: move query parsing on the coordinating node

 Similarly to what we did with the search api, we can now also move query parsing on the coordinating node for the validate query api. Given that the explain api is a single shard operation (compared to search which is instead a broadcast operation), this doesn't change a lot in how the api works internally. The main benefit is that we can simplify the java api by requiring a structured query object to be provided rather than a bytes array that will get parsed on the data node. Previously if you specified a QueryBuilder it would be serialized in json format and would get reparsed on the data node, while now it doesn't go through parsing anymore (as expected), given that after the query-refactoring we are able to properly stream queries natively. Note that the WrapperQueryBuilder can be used from the java api to provide a query as a string, in that case the actual parsing of the inner query will happen on the data node.

Relates to #10217
Closes #14384",https://github.com/elastic/elasticsearch/commit/b56bbf62dd88225d2c396fc023e2bb44cc8698fc
3875,3875.0,4049.0,elastic/elasticsearch,8c535e0f6e662e72b155e18de8c63507ffd89033,"Refactor Geo utilities to Lucene 5.4

Remove local lucene/XGeo* classes and refactor to Lucene 5.4 Geo Utility classes.",https://github.com/elastic/elasticsearch/commit/8c535e0f6e662e72b155e18de8c63507ffd89033
3876,3876.0,4050.0,elastic/elasticsearch,ea750de39f2f1ae312515d0770cb6487787a72db,"Explain api: move query parsing to the coordinating node

Similarly to what we did with the search api, we can now also move query parsing on the coordinating node for the explain api. Given that the explain api is a single shard operation (compared to search which is instead a broadcast operation), this doesn't change a lot in how the api works internally. The main benefit is that we can simplify the java api by requiring a structured query object to be provided rather than a bytes array that will get parsed on the data node. Previously if you specified a QueryBuilder it would be serialized in json format and would get reparsed on the data node, while now it doesn't go through parsing anymore (as expected), given that after the query-refactoring we are able to properly stream queries natively.

Closes #14270",https://github.com/elastic/elasticsearch/commit/ea750de39f2f1ae312515d0770cb6487787a72db
3877,3877.0,4051.0,elastic/elasticsearch,dc900a08a6c6f346656105fa0e2484ed186f8461,"Remove ""query"" query and fix related parsing bugs

We have two types of parse methods for queries: one for the inner query, to be used once the parser is positioned within the query element, and one for the whole query source, including the query element that wraps the actual query.

With the search refactoring we ended up using the former in count, cat count and delete by query, whereas we should have used the former.  It ends up working properly given that we have a registered (deprecated) query called ""query"", which used to allow to wrap a filter into a query, but this has the following downsides:
1) prevents us from removing the deprecated ""query"" query
2) we end up supporting a top level query that is not wrapped within a query element (pre 1.0 syntax iirc that shouldn't be supported anymore)

This commit finally removes the ""query"" query and fixes the related parsing bugs. We also had some tests that were providing queries in the wrong format, those have been fixed too.

Closes #13326
Closes #14304",https://github.com/elastic/elasticsearch/commit/dc900a08a6c6f346656105fa0e2484ed186f8461
3878,3878.0,4052.0,elastic/elasticsearch,3ba4dfa3a66146214c2e9fc8a4d07b35bb039e0f,"Merge pull request #14206 from s1monw/refactor_shard_failure_listener

Refactor ShardFailure listener infrastructure",https://github.com/elastic/elasticsearch/commit/3ba4dfa3a66146214c2e9fc8a4d07b35bb039e0f
3879,3879.0,4053.0,elastic/elasticsearch,b772b513e004369f7c2c7fedea9b8715088e029c,"Refactor ShardFailure listener infrastructure

Today we leak the notion of an engine outside of the shard abstraction
which is not desirable. This commit refactors the infrastrucutre to use
use already existing interfaces to communicate if a shard has failed and
prevents engine private classes to be implemented on a higher level.
This change is purely cosmentical...",https://github.com/elastic/elasticsearch/commit/b772b513e004369f7c2c7fedea9b8715088e029c
3880,3880.0,4054.0,elastic/elasticsearch,7ec03c040b79962acfb80504cb09ca6bdb6432ab,"[TEST] fix test problem after search refactoring

Original commit: elastic/x-pack-elasticsearch@10d4f061ced5b19fd88d00e93ae3c930c4d10102",https://github.com/elastic/elasticsearch/commit/7ec03c040b79962acfb80504cb09ca6bdb6432ab
3881,3881.0,4055.0,elastic/elasticsearch,215a554555eb4fe30fd9169eb39d31e10e5466b8,"Tests: Fixing more tests in Watcher after query refactoring

Original commit: elastic/x-pack-elasticsearch@1a0b654c5644257d8f6e2e1c0b090e72fb999036",https://github.com/elastic/elasticsearch/commit/215a554555eb4fe30fd9169eb39d31e10e5466b8
3882,3882.0,4056.0,elastic/elasticsearch,4cd02142a2c0269fe1f11b000078fc8fae1398c8,"fixes for compile errors due to search request refactoring in core

Original commit: elastic/x-pack-elasticsearch@8808789912137c1938ba3dcc3f617c30ba7e3616",https://github.com/elastic/elasticsearch/commit/4cd02142a2c0269fe1f11b000078fc8fae1398c8
3883,3883.0,4057.0,elastic/elasticsearch,cf3e92ae92356e5225bce1ced3e6e612ac850b3c,Merge branch 'master' into feature/search-request-refactoring,https://github.com/elastic/elasticsearch/commit/cf3e92ae92356e5225bce1ced3e6e612ac850b3c
3884,3884.0,4058.0,elastic/elasticsearch,c618f75b7640365387ad790bb6e485e16990da9f,"Merge branch 'master' into feature/search-request-refactoring

# Conflicts:
#	core/src/main/java/org/elasticsearch/search/SearchService.java",https://github.com/elastic/elasticsearch/commit/c618f75b7640365387ad790bb6e485e16990da9f
3885,3885.0,4059.0,elastic/elasticsearch,ca76712de6d2b41a350d13b92e51ebdff39e3df2,Merge branch 'master' into feature/search-request-refactoring,https://github.com/elastic/elasticsearch/commit/ca76712de6d2b41a350d13b92e51ebdff39e3df2
3886,3886.0,4060.0,elastic/elasticsearch,6819224d2c541f7482050679250c7d98c005dfeb,"Merge branch 'master' into feature/search-request-refactoring

# Conflicts:
#	core/src/main/java/org/elasticsearch/search/SearchService.java
#	core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffIT.java
#	core/src/test/java/org/elasticsearch/search/fetch/FetchSubPhasePluginIT.java",https://github.com/elastic/elasticsearch/commit/6819224d2c541f7482050679250c7d98c005dfeb
3887,3887.0,4061.0,elastic/elasticsearch,f6a613fa8824bf2601eaa9eb5f7a75bb6ff835e1,"[marvel] Integrated the new unified license model

- Added the notion of `Licensee.Status` (holds both the `License.OperationMode` and the `LicenseState`)
- Added a support base class for all `Licensee` implementations. The idea behind this is that implementations will centralized the licensing logic in one class (same as `MarvelLicensee` does), but if there's a requirement for more ""proactiveness"" on license status change, different components can register a `Licensee.Listener` to be notified on license changes.
- Since we introduced `License.OperationMode` as part of the license refactoring, there's no need anymore for Marvel's `Mode` enum.

Closes elastic/elasticsearch#690

Original commit: elastic/x-pack-elasticsearch@8a66bc163fbef86b2decf906065a17a88fe2502f",https://github.com/elastic/elasticsearch/commit/f6a613fa8824bf2601eaa9eb5f7a75bb6ff835e1
3888,3888.0,4062.0,elastic/elasticsearch,daf4a9765c5dbb515391300c7c037b01f0a1aa34,"[License] Feature agnostic licensing model

This commit changes the license plugin to work with license that are not tied to any specific feature in a bwc way. It refactors the license plugin api into a lighter weight API, enabling the license plugin to manage license expiration and acknowledgment triggers.

closes elastic/elasticsearch#683, elastic/elasticsearch#686, elastic/elasticsearch#687, elastic/elasticsearch#691

Original commit: elastic/x-pack-elasticsearch@537cd3933a6a293bba3ce389d5ba7916c7a50549",https://github.com/elastic/elasticsearch/commit/daf4a9765c5dbb515391300c7c037b01f0a1aa34
3889,3889.0,4063.0,elastic/elasticsearch,7400cbe5fdafeb20ef0cf3cefa9c47053b2055de,"Remove UpdateTests' dependency on groovy.

This test had to be moved to lang-groovy when groovy has been made a plugin.
I refactored it a bit to use mock plugins instead so that groovy is not
necessary anymore and it can come back to core.",https://github.com/elastic/elasticsearch/commit/7400cbe5fdafeb20ef0cf3cefa9c47053b2055de
3890,3890.0,4064.0,elastic/elasticsearch,e0a78fdf2ce6d1cb3ec92719a14d935df1b95ccf,Merge branch 'master' into feature/search-request-refactoring,https://github.com/elastic/elasticsearch/commit/e0a78fdf2ce6d1cb3ec92719a14d935df1b95ccf
3891,3891.0,4065.0,elastic/elasticsearch,4557d1b560fdd3d7ec0f2aeea6f82a2031ce423e,"Merge branch 'master' into feature/search-request-refactoring

# Conflicts:
#	plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/FunctionScoreTests.java",https://github.com/elastic/elasticsearch/commit/4557d1b560fdd3d7ec0f2aeea6f82a2031ce423e
3892,3892.0,4066.0,elastic/elasticsearch,1915c74e93e13f1b9e755cfdda0343b1475577ee,Merge branch 'master' into feature/search-request-refactoring,https://github.com/elastic/elasticsearch/commit/1915c74e93e13f1b9e755cfdda0343b1475577ee
3893,3893.0,4067.0,elastic/elasticsearch,f89de33548a417769a6ea21016475bbc83ee2a89,Merge branch 'master' into feature/search-request-refactoring,https://github.com/elastic/elasticsearch/commit/f89de33548a417769a6ea21016475bbc83ee2a89
3894,3894.0,4068.0,elastic/elasticsearch,a3a2432ebdbedd7cf51306dc34d65a05a1967b3c,Merge branch 'master' into feature/search-request-refactoring,https://github.com/elastic/elasticsearch/commit/a3a2432ebdbedd7cf51306dc34d65a05a1967b3c
3895,3895.0,4069.0,elastic/elasticsearch,3a0d1841d9dc99b752d13118ea303f1497c28fc0,"Query refactoring: simplify IndexQueryParserService parse methods and prepare the field for #13859

Relates to #13859",https://github.com/elastic/elasticsearch/commit/3a0d1841d9dc99b752d13118ea303f1497c28fc0
3896,3896.0,4070.0,elastic/elasticsearch,ec51e8e31de0f3831ea5a86390f7a0bdcef1e453,Merge branch 'master' into feature/search-request-refactoring,https://github.com/elastic/elasticsearch/commit/ec51e8e31de0f3831ea5a86390f7a0bdcef1e453
3897,3897.0,4071.0,elastic/elasticsearch,9430e17f707bde61418f31d1b080ed087ed4cd4c,"Yet more ImmutableMap#of removal

Did some refactoring of PathTrie along the way to remove warnings. Added a
simple toString to it to make it easier to debug.",https://github.com/elastic/elasticsearch/commit/9430e17f707bde61418f31d1b080ed087ed4cd4c
3898,3898.0,4072.0,elastic/elasticsearch,a3abfab865788a3828424f78801d19ebd5a78b81,"Query refactoring: set has_parent & has_child types context properly

While refactoring has_child and has_parent query we lost an important detail around types. The types that the inner query gets executed against shouldn't be the main types of the search request but the parent or child type set to the parent query. We used to use QueryParseContext#setTypesWithPrevious as part of XContentStructure class which has been deleted, without taking care though of setting the types and restoring them as part of the innerQuery#toQuery call.

Meanwhile also we make sure that the original context types are restored in PercolatorQueriesRegistry

Closes #13863",https://github.com/elastic/elasticsearch/commit/a3abfab865788a3828424f78801d19ebd5a78b81
3899,3899.0,4073.0,elastic/elasticsearch,117d8d2606cc343aa793b769b9b771219d8007d9,Merge branch 'master' into feature/search-request-refactoring,https://github.com/elastic/elasticsearch/commit/117d8d2606cc343aa793b769b9b771219d8007d9
3900,3900.0,4074.0,elastic/elasticsearch,6bb7b9b56743951423bdc1b1e0e1842b5fb76f5e,"Merge pull request #13766 from s1monw/store_recovery_helper

Refactor StoreRecoveryService to be a simple package private util class",https://github.com/elastic/elasticsearch/commit/6bb7b9b56743951423bdc1b1e0e1842b5fb76f5e
3901,3901.0,4075.0,elastic/elasticsearch,3b5ed08d4998f8e966b95e0f81031a21f196309f,"Refactor StoreRecoveryService to be a simple package private util class

StoreRecoveryService used to be a pretty heavy class with lots of dependencies.
This class was basically not testable in isolation and had an async API with a listener.
This commit refactors this class to be a simple utility classs with a sync API hidden behind
the IndexShard interface. It includes single node tests and moves all the async properities to
the caller side.
Note, this change also removes the mapping update on master from the store recovery code since
it's not needed anymore in 3.0 because all stores have been subject to sync mapping updates such
that the master already has all the mappings for documents that made it into the transaction log.

Closes #13766",https://github.com/elastic/elasticsearch/commit/3b5ed08d4998f8e966b95e0f81031a21f196309f
3902,3902.0,4076.0,elastic/elasticsearch,a21238beda0f60e74387f1ba0274bb1a5c3ab615,"Merge branch 'master' into feature/search-request-refactoring

# Conflicts:
#	plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ChildQuerySearchTests.java
#	plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/IndexedScriptTests.java
#	plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SearchFieldsTests.java
#	plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SearchStatsTests.java
#	plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SearchTimeoutTests.java
#	plugins/lang-groovy/src/test/java/org/elasticsearch/messy/tests/SimpleSortTests.java
#	plugins/lang-groovy/src/test/java/org/elasticsearch/script/groovy/GroovyScriptTests.java
#	plugins/lang-groovy/src/test/java/org/elasticsearch/script/groovy/GroovySecurityTests.java",https://github.com/elastic/elasticsearch/commit/a21238beda0f60e74387f1ba0274bb1a5c3ab615
3903,3903.0,4077.0,elastic/elasticsearch,3162097ce86e52e7946bcb42fc5562e43e425e1a,"disabled licensing tests until license refactoring is done

Original commit: elastic/x-pack-elasticsearch@e5673fedd9d72893381a9a02ef4ce0fcdd11dc0d",https://github.com/elastic/elasticsearch/commit/3162097ce86e52e7946bcb42fc5562e43e425e1a
3904,3904.0,4078.0,elastic/elasticsearch,05c003188b60b2c75da9b4dce72b54482bcb4ff1,Merge branch 'master' into feature/search-request-refactoring,https://github.com/elastic/elasticsearch/commit/05c003188b60b2c75da9b4dce72b54482bcb4ff1
3905,3905.0,4079.0,elastic/elasticsearch,eaafc62f538e00958dfc0cc034a96fe6c01b1c4a,[DOCS] added query-refactoring changes to 3.0 migrate guide,https://github.com/elastic/elasticsearch/commit/eaafc62f538e00958dfc0cc034a96fe6c01b1c4a
3906,3906.0,4080.0,elastic/elasticsearch,3d3197342ded0a697c94a02d81dce011c88a9fc1,Merge branch 'master' into merge/query-refactoring,https://github.com/elastic/elasticsearch/commit/3d3197342ded0a697c94a02d81dce011c88a9fc1
3907,3907.0,4081.0,elastic/elasticsearch,44722700b0ab7b2abf40b36fb9ef5d635e9da6d0,"Merge branch 'feature/query-refactoring' into feature/search-request-refactoring

# Conflicts:
#	core/src/test/java/org/elasticsearch/search/fetch/FetchSubPhasePluginIT.java",https://github.com/elastic/elasticsearch/commit/44722700b0ab7b2abf40b36fb9ef5d635e9da6d0
3908,3908.0,4082.0,elastic/elasticsearch,3ac4da5f847bf56f227d197ea6d3782f3bc5e8c0,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/3ac4da5f847bf56f227d197ea6d3782f3bc5e8c0
3909,3909.0,4083.0,elastic/elasticsearch,629ac8e014e5272aae80d2540f47f2d1ae44baa4,"Java api: remove TermsLookupQueryBuilder

TermsLookupQueryBuilder was left around only for bw comp reasons, but TermsQueryBuilder is its replacement. We can remove it now that it is clear query refactoring goes in master (3.0).",https://github.com/elastic/elasticsearch/commit/629ac8e014e5272aae80d2540f47f2d1ae44baa4
3910,3910.0,4084.0,elastic/elasticsearch,9f08d48d340783fc8096b52d3c8f3631c2e21312,"Merge branch 'feature/query-refactoring' into feature/search-request-refactoring

# Conflicts:
#	core/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java
#	core/src/test/java/org/elasticsearch/script/IndexedScriptIT.java
#	core/src/test/java/org/elasticsearch/script/OnDiskScriptIT.java",https://github.com/elastic/elasticsearch/commit/9f08d48d340783fc8096b52d3c8f3631c2e21312
3911,3911.0,4085.0,elastic/elasticsearch,74d641181e77beb4bc350493bab6f69872665691,"Query Refactoring: validate GeoShapeQueryBuilder strategy and relation parameter

Before the refactoring we didn't check any invalid settings for strategy and relation
in the GeoShapeQueryBuilder. However, using SpatialStrategy.TERM and ShapeRelation.INTERSECTS
together is invalid and we tried to protect against that in the validate() method.

This PR moves these checks to setter for strategy and relation and adds tests for the new
behaviour.

Relates to #10217",https://github.com/elastic/elasticsearch/commit/74d641181e77beb4bc350493bab6f69872665691
3912,3912.0,4086.0,elastic/elasticsearch,34de79370f2b7e220d254484ebb2e01cb94b74f2,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/ElasticsearchException.java",https://github.com/elastic/elasticsearch/commit/34de79370f2b7e220d254484ebb2e01cb94b74f2
3913,3913.0,4087.0,elastic/elasticsearch,db9c2796b34943d62df46074c85e8f6acf48f79e,"Query refactoring: last //norelease addressed

Some methods had default implementation while queries were going to be refactored, now that they are all refactored all those methods can be made abstract.",https://github.com/elastic/elasticsearch/commit/db9c2796b34943d62df46074c85e8f6acf48f79e
3914,3914.0,4088.0,elastic/elasticsearch,aae7faa88e55db81d3fa61a6fdb91fe14558efbd,"Query refactoring: minor cleanups before we merge into master

Remove ParseFieldMatcher duplication query in both contexts. QueryParseContext is still contained in QueryShardContext, as parsing still happens in the shards here and there. Most of the norelease comments have been removed simply because the scope of the refactoring has become smaller. Some could only be removed once everything, the whole search request, gets parsed on the coordinating node. We will get there eventually.",https://github.com/elastic/elasticsearch/commit/aae7faa88e55db81d3fa61a6fdb91fe14558efbd
3915,3915.0,4089.0,elastic/elasticsearch,a9c6e4c051ca5d682a40a956c67949ee47b69f44,"Merge branch 'feature/query-refactoring' into feature/search-request-refactoring

# Conflicts:
#	core/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java
#	core/src/main/java/org/elasticsearch/index/query/TemplateQueryParser.java",https://github.com/elastic/elasticsearch/commit/a9c6e4c051ca5d682a40a956c67949ee47b69f44
3916,3916.0,4090.0,elastic/elasticsearch,eb8ea6362698a08378e7eea6841b70e0132b81a4,"Query Refactoring: remove deprecated methods and temporary classes

After all queries now have a `toQuery` method and the parsers all
support `fromXContent` it is possible to remove the following
workarounds and deprecated methods we kept around while doing the
refactoring:

* remove the BaseQueryParser and BaseQueryParserTemp. All parsers
  implement QueryParser directly now
* remove deprecated methods in QueryParseContext that either returned
  a Query or a Filter.
* remove the temporary QueryWrapperQueryBuilder

Relates to #10217",https://github.com/elastic/elasticsearch/commit/eb8ea6362698a08378e7eea6841b70e0132b81a4
3917,3917.0,4091.0,elastic/elasticsearch,08ae68c19544a3bcf4e517d78093bac8ef60949f,"Merge branch 'feature/query-refactoring' into feature/search-request-refactoring

# Conflicts:
#	core/src/test/java/org/elasticsearch/search/functionscore/DecayFunctionScoreIT.java
#	core/src/test/java/org/elasticsearch/search/functionscore/FunctionScoreFieldValueIT.java
#	core/src/test/java/org/elasticsearch/search/functionscore/FunctionScoreIT.java
#	core/src/test/java/org/elasticsearch/search/rescore/QueryRescorerIT.java",https://github.com/elastic/elasticsearch/commit/08ae68c19544a3bcf4e517d78093bac8ef60949f
3918,3918.0,4092.0,elastic/elasticsearch,dbb01f5b43704ee75c92aff30ed2ee62b791e0d8,"Query Refactoring: Move MoreLikeThisQueryBuilder validation to constructor

The current MoreLikeThisQueryBuilder validation checks for existence of at
least one `like` text or item. This is hard to check in setters, so this PR
tries to change the construction of the query so that we can do these checks
already at construction time.

Changing to using arrays for fieldnames, likeTexts, likeItems, unlikeTexts
and unlikeItems. `likeTexts` and/or `likeItems` need to be specified at
construction time to validate we have at least one item there.

Relates to #10217",https://github.com/elastic/elasticsearch/commit/dbb01f5b43704ee75c92aff30ed2ee62b791e0d8
3919,3919.0,4093.0,elastic/elasticsearch,7eedd84dc38edd097ee8b43ad71859f11bc52501,"Query refactoring: refactor query_string query and score functions

Refactor the function_score query so it can be parsed on the coordinating node, split parse into fromXContent and toQuery, make FunctionScoreQueryBuilder Writeable.

Closes #13653",https://github.com/elastic/elasticsearch/commit/7eedd84dc38edd097ee8b43ad71859f11bc52501
3920,3920.0,4094.0,elastic/elasticsearch,cfb1e6c6c24570a7c7ef791c48d39ecdeab558eb,Refactor file script tests to be real unit tests,https://github.com/elastic/elasticsearch/commit/cfb1e6c6c24570a7c7ef791c48d39ecdeab558eb
3921,3921.0,4095.0,elastic/elasticsearch,1aae68d2e8b0ad8e7524ccd0119bd56375bfcca6,"Merge branch 'master' into feature/query-refactoring

 Conflicts:
	core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/GeoPolygonQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java
	core/src/main/java/org/elasticsearch/index/query/QueryParser.java",https://github.com/elastic/elasticsearch/commit/1aae68d2e8b0ad8e7524ccd0119bd56375bfcca6
3922,3922.0,4096.0,elastic/elasticsearch,03035a28a37ba986b8cfa32c396579a02839d256,"Query Refactoring: moving validation to setters and constructors

Moving validation from validate() to constructors and setters for the
following query builders:

* GeoDistanceQueryBuilder
* GeoDistanceRangeQueryBuilder
* GeoPolygonQueryBuilder
* GeoShapeQueryBuilder
* GeohashCellQuery
* TermsQueryBuilder

Relates to #10217",https://github.com/elastic/elasticsearch/commit/03035a28a37ba986b8cfa32c396579a02839d256
3923,3923.0,4097.0,elastic/elasticsearch,7bcdae28cacb0026be85616343d00faef23d3276,"Merge pull request #13695 from rmuir/factor_out_scripts

Get lang-javascript, lang-python, securemock ready for script refactoring",https://github.com/elastic/elasticsearch/commit/7bcdae28cacb0026be85616343d00faef23d3276
3924,3924.0,4098.0,elastic/elasticsearch,f0733bd829afd670b6fa17c78de72e4ad60f465c,"Get lang-javascript, lang-python, securemock ready for script refactoring.

I want to refactor scripting engines so we can contain dangerous ""God-like"" permissions
like createClassloader/sun.reflect. These are used for dynamic class generation (scripts, mocks).
This will mean some refactoring to ES core.

But first lets get the plugins in order first. I removed those permissions globally, and
fixed grants for lang-javascript, lang-python, securemock so that everything works.

lang-javascript needs no code changes, because rhino is properly written :)
lang-python needs accesscontroller blocks. securemock was already working as of 1.1

This is just a baby step, to try to do some of this incrementally! It doesn't yet provide
us anything.",https://github.com/elastic/elasticsearch/commit/f0733bd829afd670b6fa17c78de72e4ad60f465c
3925,3925.0,4099.0,elastic/elasticsearch,cc69de5c5fc91d1cfcdb29c6696eff224cdf3545,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/cc69de5c5fc91d1cfcdb29c6696eff224cdf3545
3926,3926.0,4100.0,elastic/elasticsearch,77ffabc471a36ebbaba2474066ef5c9644b7080f,"Merge pull request #11969 from MaineC/feature/geo-bounding-box-refactoring

Refactoring of GeoBoundingBoxQueryBuilder and -Parser",https://github.com/elastic/elasticsearch/commit/77ffabc471a36ebbaba2474066ef5c9644b7080f
3927,3927.0,4101.0,elastic/elasticsearch,91b97a6f7bda843a030e5c0cefacfcd2b5be8e2c,"Refactors GeoBoundingBoxQueryBuilder/-Parser

This add equals, hashcode, read/write methods, validation, separates toQuery
and JSON parsing and adds serialization and query generation tests.

Deprecates two types of initializing the bounding box: In our documentation we
speak about specifying top/left and bottom/right corner of a bounding box. Here
we also allow for top/right and bottom/left. This adds not only to the amount
of code but also testing needed w/o too much benefit for the user other than
more chances to confuse top/right/bottom/left/latitude/longitude IMHO.

Missing: The toQuery method with type set to ""indexed"" is not tested at the
moment.

Cleanup changes unrelated to base refactoring:
* Switched from type String to enum for types in GeoBoundingBoxQueryBuilder.
* Switched to using type GeoPoint for storing the bounding box coordinates
  instead of array of double values.

Relates to #10217 for the query refactoring part.
Relates to #12016 for how missing mappings are handled.

Adds a utility class for generating random geo data.

Adds some missing documentation.

Extend test to MEMORY type config

Fix final review comments and rebase",https://github.com/elastic/elasticsearch/commit/91b97a6f7bda843a030e5c0cefacfcd2b5be8e2c
3928,3928.0,4102.0,elastic/elasticsearch,2da1baf5467923f4c08895defca546ee57b96ef1,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/2da1baf5467923f4c08895defca546ee57b96ef1
3929,3929.0,4103.0,elastic/elasticsearch,1228a9fe55582f99afff2c356408008b069c704b,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/1228a9fe55582f99afff2c356408008b069c704b
3930,3930.0,4104.0,elastic/elasticsearch,197313c19be74f40222bf20f742071e1b266d5d0,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/197313c19be74f40222bf20f742071e1b266d5d0
3931,3931.0,4105.0,elastic/elasticsearch,a8368b5dcd449dbdfe592855ae909dfc473f84c5,"Merge pull request #13631 from s1monw/refactor_query_parsing_exception

Rename QueryParsingException to a more generic ParsingException",https://github.com/elastic/elasticsearch/commit/a8368b5dcd449dbdfe592855ae909dfc473f84c5
3932,3932.0,4106.0,elastic/elasticsearch,bab9523c5688f254a75b3e975f0f5ae934dc0190,"Merge branch 'master' into feature/query-refactoring

 Conflicts:
	core/src/main/java/org/elasticsearch/ElasticsearchException.java",https://github.com/elastic/elasticsearch/commit/bab9523c5688f254a75b3e975f0f5ae934dc0190
3933,3933.0,4107.0,elastic/elasticsearch,37b46fb79c622fec79e220b4ac93d548b59982ae,"Query Refactoring: moving validation to constructors and setters

This PR is the second batch in moving the query validation we started
to collect in the validate() method to the corresponding setters
and constructors.",https://github.com/elastic/elasticsearch/commit/37b46fb79c622fec79e220b4ac93d548b59982ae
3934,3934.0,4108.0,elastic/elasticsearch,887399eebfb053cc0741ea82bbd7ddc3403a6c71,"Query Refactoring: moving validation to constructors and setters

This PR is an initial step to move the query validation we started
to collect in the validate() method to the corresponding setters
and constructors.",https://github.com/elastic/elasticsearch/commit/887399eebfb053cc0741ea82bbd7ddc3403a6c71
3935,3935.0,4109.0,elastic/elasticsearch,af9166d84d0807274ab6584a2e9676086ea5f2f2,"Use a dedicated id to serialize EsExceptions instead of it's class name.

Classnames change quickly due to refactorings etc. If that happens in a minor release
we loose the ability to deserialize the exceptoin coming from another node sicne we today
look it up by classname. This change uses a dedicated static id instead of the classname
to lookup the actual class.",https://github.com/elastic/elasticsearch/commit/af9166d84d0807274ab6584a2e9676086ea5f2f2
3936,3936.0,4110.0,elastic/elasticsearch,a3c68f690bd3d4baaf7e1c18f8e70e4412514a73,"Refactors MultiMatchQueryBuilder and Parser

Relates to #10217

This PR is against the query-refactoring branch.

Closes #13405",https://github.com/elastic/elasticsearch/commit/a3c68f690bd3d4baaf7e1c18f8e70e4412514a73
3937,3937.0,4111.0,elastic/elasticsearch,ff74e94260f482ed6a32ad33db6dba7de52e452f,"Merge branch 'master' into feature/query-refactoring

 Conflicts:
    core/src/main/java/org/elasticsearch/common/unit/Fuzziness.java
    core/src/main/java/org/elasticsearch/index/mapper/internal/IdFieldMapper.java
    core/src/main/java/org/elasticsearch/index/query/IdsQueryParser.java
    core/src/main/java/org/elasticsearch/index/query/functionscore/random/RandomScoreFunctionParser.java
    core/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchIT.java",https://github.com/elastic/elasticsearch/commit/ff74e94260f482ed6a32ad33db6dba7de52e452f
3938,3938.0,4112.0,elastic/elasticsearch,8fb1aa97810034f1679dc3afa7aafc649d3e038f,"Refactors GeoDistanceQueryBuilder/-Parser

Splits parsing and Lucene query generation. Switches from storing lat/lon
separately to using GeoPoint instead.

Relates to #10217",https://github.com/elastic/elasticsearch/commit/8fb1aa97810034f1679dc3afa7aafc649d3e038f
3939,3939.0,4113.0,elastic/elasticsearch,a13336da5482d5ab2ebdf7cbb8120b551848e279,"Refactors MoreLikeThisQueryBuilder and Parser

Relates to #10217

This PR is against the query-refactoring branch.

Closes #13486",https://github.com/elastic/elasticsearch/commit/a13336da5482d5ab2ebdf7cbb8120b551848e279
3940,3940.0,4114.0,elastic/elasticsearch,4096244ec29ad1948c010c89a6c44e479e674117,"Also adds tests for date fields for match query builder

PR is against the query refactoring branch.

Closes #13585",https://github.com/elastic/elasticsearch/commit/4096244ec29ad1948c010c89a6c44e479e674117
3941,3941.0,4115.0,elastic/elasticsearch,dbaa90a3f8f3823662db3e611d16c4254f6037cc,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/dbaa90a3f8f3823662db3e611d16c4254f6037cc
3942,3942.0,4116.0,elastic/elasticsearch,90f24c1a79705cdf63e232517b87905744ae5b3d,"Merge branch 'master' into feature/query-refactoring

 Conflicts:
	core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/GeoPolygonQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/GeohashCellQuery.java
	core/src/main/java/org/elasticsearch/index/query/WrapperQueryBuilder.java
	core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java",https://github.com/elastic/elasticsearch/commit/90f24c1a79705cdf63e232517b87905744ae5b3d
3943,3943.0,4117.0,elastic/elasticsearch,adaa998225794d47ba17fd40efb5108ab47879a4,Query Refactoring: adding illegal argument checks to MatchQueryBuilder,https://github.com/elastic/elasticsearch/commit/adaa998225794d47ba17fd40efb5108ab47879a4
3944,3944.0,4118.0,elastic/elasticsearch,73f7df510e45d36e9892dfbbf219a66df2d7322e,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/HasParentQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/functionscore/factor/FactorParser.java
	core/src/test/java/org/elasticsearch/ExceptionSerializationTests.java
	core/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchBenchmark.java
	core/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchShortCircuitBenchmark.java
	core/src/test/java/org/elasticsearch/index/query/SimpleIndexQueryParserTests.java
	core/src/test/java/org/elasticsearch/percolator/PercolatorIT.java
	core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java
	docs/reference/query-dsl/has-parent-query.asciidoc",https://github.com/elastic/elasticsearch/commit/73f7df510e45d36e9892dfbbf219a66df2d7322e
3945,3945.0,4119.0,elastic/elasticsearch,2118936deb54e305f614f34234e0358e3572631b,"Query Refactoring: Refactor of GeoShapeQuery

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings.

Relates to #10217

PR goes against the query-refactoring branch",https://github.com/elastic/elasticsearch/commit/2118936deb54e305f614f34234e0358e3572631b
3946,3946.0,4120.0,elastic/elasticsearch,cac72c9207baec556c6ec2c0eca30a8a48a8e387,"Query Refactoring: Refactor of GeoPolygonQuery

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings.

Relates to #10217

PR goes against the query-refactoring branch",https://github.com/elastic/elasticsearch/commit/cac72c9207baec556c6ec2c0eca30a8a48a8e387
3947,3947.0,4121.0,elastic/elasticsearch,56b3db6ba3463d244ea777b527b7a786caa5042c,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/AndQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/AndQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/FQueryFilterParser.java
	core/src/main/java/org/elasticsearch/index/query/FilteredQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/FilteredQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/IndicesQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/LimitQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/LimitQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/OrQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/OrQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/QueryFilterBuilder.java
	core/src/main/java/org/elasticsearch/index/query/QueryFilterParser.java
	core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java
	core/src/main/java/org/elasticsearch/index/query/ScriptQueryParser.java
	core/src/main/java/org/elasticsearch/indices/query/IndicesQueriesRegistry.java
	core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortParser.java
	core/src/main/java/org/elasticsearch/search/sort/SortParseElement.java
	core/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchShortCircuitBenchmark.java
	core/src/test/java/org/elasticsearch/index/query/SimpleIndexQueryParserTests.java",https://github.com/elastic/elasticsearch/commit/56b3db6ba3463d244ea777b527b7a786caa5042c
3948,3948.0,4122.0,elastic/elasticsearch,90fac17a2dfe8adc7b877d8bed525447f252e201,"Query refactoring: MatchQueryBuilder

This add equals, hashcode, read/write methods, separates toQuery and JSON parsing and adds tests.
Also moving MatchQueryBuilder.Type to MatchQuery to MatchQuery, adding serialization and hashcode,
equals there.

Relates to #10217",https://github.com/elastic/elasticsearch/commit/90fac17a2dfe8adc7b877d8bed525447f252e201
3949,3949.0,4123.0,elastic/elasticsearch,484fcd49e571f1d4d334e10e7660f129cbee7a94,"Query refactoring: query_string

Relates to #10217",https://github.com/elastic/elasticsearch/commit/484fcd49e571f1d4d334e10e7660f129cbee7a94
3950,3950.0,4124.0,elastic/elasticsearch,db705ab4609c48961333d984d21d4a26f8b86781,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java
	core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/HasParentQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryParser.java
	core/src/main/java/org/elasticsearch/index/search/child/ChildrenQuery.java
	core/src/test/java/org/elasticsearch/index/query/SimpleIndexQueryParserTests.java
	core/src/test/java/org/elasticsearch/index/search/child/AbstractChildTestCase.java
	core/src/test/java/org/elasticsearch/index/search/child/ChildrenConstantScoreQueryTests.java
	core/src/test/java/org/elasticsearch/index/search/child/ChildrenQueryTests.java
	core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchBwcIT.java
	core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java
	core/src/test/resources/org/elasticsearch/index/query/simple-query-string.json",https://github.com/elastic/elasticsearch/commit/db705ab4609c48961333d984d21d4a26f8b86781
3951,3951.0,4125.0,elastic/elasticsearch,19792516baca62f62c719e1e00d6b88d35cf7a60,"Query Refactoring: Refactor of GeoDistanceRangeQuery

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings.

Also this PR removes the check that the index is created before 2.0 for the normalize parameter. The parameter is now always parsed but as a deprecated parameter. We cannot and should not access the index version during parsing.

Relates to #10217

PR goes against the query-refactoring branch",https://github.com/elastic/elasticsearch/commit/19792516baca62f62c719e1e00d6b88d35cf7a60
3952,3952.0,4126.0,elastic/elasticsearch,4f0ae05da52592966dabc94ac8b454766f8e1662,"Query Refactoring: Refactor of GeohashCellQuery

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings.

Relates to #10217

PR goes against the query-refactoring branch",https://github.com/elastic/elasticsearch/commit/4f0ae05da52592966dabc94ac8b454766f8e1662
3953,3953.0,4127.0,elastic/elasticsearch,c2ccb2157c22a885a9b892c3e6f728d2e87724d6,"Refactors TemplateQueryBuilder and Parser

Relates to #10217

This PR is against the query-refactoring branch.

Closes #13253",https://github.com/elastic/elasticsearch/commit/c2ccb2157c22a885a9b892c3e6f728d2e87724d6
3954,3954.0,4128.0,elastic/elasticsearch,a45ee273e33be2198ab33715057f5ee9d63ddca6,"MLT: builder takes a new Item object like its parser

Previously the parser could take any Term Vectors request, but this would be
not the case of the builder which would still use MultiGetRequest.Item. This
introduces a new Item class which is used by both the builder and parser.

Beyond that the rest is mostly cleanups such as:

1) Deprecating the ignoreLike methods, in favor to using unlike.

2) Deprecating and renaming MoreLikeThisBuilder#addItem to addLikeItem.

3) Ordering the methods of MoreLikeThisBuilder more logically.

This change is needed for the upcoming query refactoring of MLT.

Closes #13372",https://github.com/elastic/elasticsearch/commit/a45ee273e33be2198ab33715057f5ee9d63ddca6
3955,3955.0,4129.0,elastic/elasticsearch,18bec264f95b0d3641b0c9ee38d8c9486cb66ea6,"Split HasChildQueryParser into toQuery and formXContent

This is an intial commit that splits HasChildQueryParser / Builder into
the two seperate steps. This one is particularly nasty since it transports
a pretty wild InnerHits object that needs heavy refactoring. Yet, this commit
has still some nocommits and needs more tests and maybe another cleanup but
it's a start to get the code out there.",https://github.com/elastic/elasticsearch/commit/18bec264f95b0d3641b0c9ee38d8c9486cb66ea6
3956,3956.0,4130.0,elastic/elasticsearch,f2605b34d6c93d4c1a7cedcbb1d748a66c52afa3,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/ScriptQueryParser.java",https://github.com/elastic/elasticsearch/commit/f2605b34d6c93d4c1a7cedcbb1d748a66c52afa3
3957,3957.0,4131.0,elastic/elasticsearch,be3409f1dbd38de5b61c5a29160828048501ef84,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/AndQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/BoolQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/ExistsQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/GeoShapeQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/MissingQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/OrQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java
	core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringParser.java
	core/src/main/java/org/elasticsearch/index/query/SpanContainingQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/SpanWithinQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/TermsQueryParser.java
	core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortParser.java
	core/src/test/java/org/elasticsearch/index/query/SimpleIndexQueryParserTests.java
	core/src/test/java/org/elasticsearch/index/search/child/AbstractChildTestCase.java",https://github.com/elastic/elasticsearch/commit/be3409f1dbd38de5b61c5a29160828048501ef84
3958,3958.0,4132.0,elastic/elasticsearch,17460ae92d432948e79d3e880c082b6990170e39,"Refactor ignore_malformed and coerce from geo_point field type to mapper

This commit moves ignore_malformed and coerce options from the GeoPointFieldType to the Builder in GeoPointFieldMapper. This makes these options consistent with other types in 2.0.",https://github.com/elastic/elasticsearch/commit/17460ae92d432948e79d3e880c082b6990170e39
3959,3959.0,4133.0,elastic/elasticsearch,8bd7cdbdad05348aac409e64088cd29415e9c4ef,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/FilteredQueryParser.java",https://github.com/elastic/elasticsearch/commit/8bd7cdbdad05348aac409e64088cd29415e9c4ef
3960,3960.0,4134.0,elastic/elasticsearch,107a4b14e097ec9786fbb15c528de448a902c8ed,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/107a4b14e097ec9786fbb15c528de448a902c8ed
3961,3961.0,4135.0,elastic/elasticsearch,fa93cc7b89e4a55e89d1e16fdcba7153a6dcceb5,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/test/java/org/elasticsearch/ExceptionSerializationTests.java",https://github.com/elastic/elasticsearch/commit/fa93cc7b89e4a55e89d1e16fdcba7153a6dcceb5
3962,3962.0,4136.0,elastic/elasticsearch,52be313c69de9358944943ef2df4b7e3cdd77b15,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/BoolQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/IdsQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringParser.java
	core/src/main/java/org/elasticsearch/index/query/TemplateQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/TermsQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/functionscore/fieldvaluefactor/FieldValueFactorFunctionParser.java
	core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/GND.java
	core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/JLHScore.java
	core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/NXYSignificanceHeuristic.java
	core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/PercentageScore.java
	core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/ScriptHeuristic.java
	core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsSignificanceScoreIT.java",https://github.com/elastic/elasticsearch/commit/52be313c69de9358944943ef2df4b7e3cdd77b15
3963,3963.0,4137.0,elastic/elasticsearch,faf526dccb51df866a8a6fc28fdb30ac0b4373b6,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/faf526dccb51df866a8a6fc28fdb30ac0b4373b6
3964,3964.0,4138.0,elastic/elasticsearch,dd65bd0fe831124f03de6acc5a5396ff318961fb,"Internal: add comments to XContentStructure

Added comments to make sure we don't forget to remove the class once the refactoring is done.",https://github.com/elastic/elasticsearch/commit/dd65bd0fe831124f03de6acc5a5396ff318961fb
3965,3965.0,4139.0,elastic/elasticsearch,c3070062db7ce1fc5e7278ead94288f1498217bd,"Internal: small QueryShardContext cleanup

Added some comments about changes that we might be able to make later on in the refactoring. Also exposed handleTermsLookup in the context directly, removed unused similarityService getter and corrected simpleMatchToIndexNames call according to changes happened on master (the method variant that accept types will go away, types are ignored anyway).",https://github.com/elastic/elasticsearch/commit/c3070062db7ce1fc5e7278ead94288f1498217bd
3966,3966.0,4140.0,elastic/elasticsearch,cc408ddd452318b0ff4e20129852ce2f88815ea3,"[TEST] refactor DummyQueryBuilder and corresponding parser

DummyQueryParser properly implements now fromXContent and the corresponding builder supports converting to the corresponding lucene query through toQuery method.",https://github.com/elastic/elasticsearch/commit/cc408ddd452318b0ff4e20129852ce2f88815ea3
3967,3967.0,4141.0,elastic/elasticsearch,78d097de39906fae207accf413bf6a6878aa5d80,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/AndQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/AndQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/BoolQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/DisMaxQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/DisMaxQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/GeoPolygonQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/HasParentQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/OrQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/OrQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/PrefixQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/RegexpQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/SpanNearQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/SpanOrQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/TermQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/TermsQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/support/InnerHitsQueryParserHelper.java
	core/src/test/java/org/elasticsearch/index/query/SimpleIndexQueryParserTests.java",https://github.com/elastic/elasticsearch/commit/78d097de39906fae207accf413bf6a6878aa5d80
3968,3968.0,4142.0,elastic/elasticsearch,1af0a392214875152808f52992c3e98da8633fd8,"Refactors TermsQueryBuilder and Parser

Refactors TermsQueryBuilder and Parser for #10217.

This PR is against the query-refactoring branch.

Closes #12042",https://github.com/elastic/elasticsearch/commit/1af0a392214875152808f52992c3e98da8633fd8
3969,3969.0,4143.0,elastic/elasticsearch,efadf87371e8cf97b49a0761499108be2a5d7853,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/efadf87371e8cf97b49a0761499108be2a5d7853
3970,3970.0,4144.0,elastic/elasticsearch,96b5cebfb1fcecb4bf3533e38a138cc47017774a,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/QueryStringQueryParser.java",https://github.com/elastic/elasticsearch/commit/96b5cebfb1fcecb4bf3533e38a138cc47017774a
3971,3971.0,4145.0,elastic/elasticsearch,59cb67c7bd0ab6311115b20954e013412b676b29,"Merge branch 'master' into feature/query-refactoring

 Conflicts:
	core/src/main/java/org/elasticsearch/index/query/support/NestedInnerQueryParseSupport.java",https://github.com/elastic/elasticsearch/commit/59cb67c7bd0ab6311115b20954e013412b676b29
3972,3972.0,4146.0,elastic/elasticsearch,8757af2d928355a799290207d9128adae4c78fa1,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/8757af2d928355a799290207d9128adae4c78fa1
3973,3973.0,4147.0,elastic/elasticsearch,2d42839eefa506e568fdb2b7045fa260ef2354c5,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java",https://github.com/elastic/elasticsearch/commit/2d42839eefa506e568fdb2b7045fa260ef2354c5
3974,3974.0,4148.0,elastic/elasticsearch,650a86e2cef139a0207e6ea815ecb394582ef642,"Merge pull request #12985 from s1monw/cleanup_release_script

Refactor script for RC creation",https://github.com/elastic/elasticsearch/commit/650a86e2cef139a0207e6ea815ecb394582ef642
3975,3975.0,4149.0,elastic/elasticsearch,5458d07ea28b80abfb28d1c6c096c9ec88ca10fd,"Refactor script for RC creation

The script now allows to run all required steps at once and alternatively
prints out manual instructions to run the steps individually. It also has
flags and options to run debug builds from a local checkout.",https://github.com/elastic/elasticsearch/commit/5458d07ea28b80abfb28d1c6c096c9ec88ca10fd
3976,3976.0,4150.0,elastic/elasticsearch,b18e4702782668e36648bd24083c0d2c16732a18,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/b18e4702782668e36648bd24083c0d2c16732a18
3977,3977.0,4151.0,elastic/elasticsearch,345a30a2a725af3b53ca1d476a1361baa367b2af,"Merge branch 'master' into feature/query-refactoring

	core/src/test/java/org/elasticsearch/plugins/PluginManagerIT.java
	core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsSignificanceScoreIT.java",https://github.com/elastic/elasticsearch/commit/345a30a2a725af3b53ca1d476a1361baa367b2af
3978,3978.0,4152.0,elastic/elasticsearch,0b34c73b933f4d5d29750aa3330e8a591d516ab1,"Merge pull request #12810 from MaineC/feature/simple-query-string-test

Brings Lucene query assertions to QB test.

Theser assertions were originally added as part of the SimpleQueryStringQueryBuilder refactoring but removed later as there were more extensive tests in place already. This commit brings them back in as the other tests have been removed.

This relates to #10217 and #11274",https://github.com/elastic/elasticsearch/commit/0b34c73b933f4d5d29750aa3330e8a591d516ab1
3979,3979.0,4153.0,elastic/elasticsearch,c151f2137a23c36d59aed30153a6d989872a5262,"Internal: Remove all uses of ImmutableList

We are in the process of getting rid of guava, and this removes a major
use. The replacement is mostly Collections.emptyList(), Arrays.asList
and Collections.unmodifiableList. While it is questionable whether we
need the last one (as these are usually placed in final members), we can
continue to refactor later by removing unnecessary wrappings.",https://github.com/elastic/elasticsearch/commit/c151f2137a23c36d59aed30153a6d989872a5262
3980,3980.0,4154.0,elastic/elasticsearch,2b5cb6b9f287f8f2341fd24c87c66b132822c50a,"Fix compile after removal of apache commons and refactoring of plugin api

Original commit: elastic/x-pack-elasticsearch@5171192d16f14483bc60e72d6ee361b4d78bd6e3",https://github.com/elastic/elasticsearch/commit/2b5cb6b9f287f8f2341fd24c87c66b132822c50a
3981,3981.0,4155.0,elastic/elasticsearch,99ac70860fc70d53ca2d4f9459561876e89b9cde,"Refactoring of Indices Query

Relates to #10217

This PR is against the query-refactoring branch.

Closes #12031",https://github.com/elastic/elasticsearch/commit/99ac70860fc70d53ca2d4f9459561876e89b9cde
3982,3982.0,4156.0,elastic/elasticsearch,4a3faf1126800a4e4be736e11fae64269e7a4e55,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/NotQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java",https://github.com/elastic/elasticsearch/commit/4a3faf1126800a4e4be736e11fae64269e7a4e55
3983,3983.0,4157.0,elastic/elasticsearch,3843ae484d2196d084444d010e118c669a831f2c,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/3843ae484d2196d084444d010e118c669a831f2c
3984,3984.0,4158.0,elastic/elasticsearch,3f04ee076e605dbf28c75f79bf08988ddc18079b,"Internal: IndicesQueriesRegitry back to being created only once

With #12921 we refactored IndicesModule but we forgot to make sure we create IndicesQueriesRegistry once. IndicesQueriesModule used to do `bind(IndicesQueriesRegistry.class).asEagerSingleton();` otherwise we get multiple instances of the registry. This needs to be ported do the IndicesModule.",https://github.com/elastic/elasticsearch/commit/3f04ee076e605dbf28c75f79bf08988ddc18079b
3985,3985.0,4159.0,elastic/elasticsearch,de54671173003750b5df2671c1ab64d1903fe8fb,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/GeoBoundingBoxQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/GeoBoundingBoxQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/GeoPolygonQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/GeoPolygonQueryParser.java
	core/src/main/java/org/elasticsearch/indices/query/IndicesQueriesModule.java
	core/src/test/java/org/elasticsearch/index/query/plugin/DummyQueryParserPlugin.java",https://github.com/elastic/elasticsearch/commit/de54671173003750b5df2671c1ab64d1903fe8fb
3986,3986.0,4160.0,elastic/elasticsearch,260a929e3bc1166c4f60bb15f6e9d9a829667393,"[TEST] inject a random index to TestClusterService in BaseQueryTestCase#init

Some of our next queries to refactor rely on some state taken from the cluster state. That is why we need to mock cluster service and inject an index to it, the index that we simulate the execution of the queries against. The best would be to have multiple indices actually, but that would make our setup a lot more complicated, especially given that IndexQueryParseService is still per index. We might be able to improve that in the future though, for now this is as good as it gets.",https://github.com/elastic/elasticsearch/commit/260a929e3bc1166c4f60bb15f6e9d9a829667393
3987,3987.0,4161.0,elastic/elasticsearch,b2ba3847f73ace98d73ea63e82b44cf5be326add,"Refactor geo_point validate* and normalize* options to ignore_malformed and coerce*

For consistency geo_point mapper's validate and normalize options are converted to ignore_malformed and coerced",https://github.com/elastic/elasticsearch/commit/b2ba3847f73ace98d73ea63e82b44cf5be326add
3988,3988.0,4162.0,elastic/elasticsearch,3ebf7a43f5291ef84522dc76e870a3479fb94c37,"Refactors WrapperQueryBuilder and Parser

Relates to #10217
Closes #12037

This PR is against the query-refactoring branch.",https://github.com/elastic/elasticsearch/commit/3ebf7a43f5291ef84522dc76e870a3479fb94c37
3989,3989.0,4163.0,elastic/elasticsearch,d62128fc7855280f355ba95e7015bb6a946b0ab9,"Revert ""Refactors WrapperQueryBuilder and Parser""

This reverts commit afcbd2915dc2471e9725da16b5dc844aff9504ff.",https://github.com/elastic/elasticsearch/commit/d62128fc7855280f355ba95e7015bb6a946b0ab9
3990,3990.0,4164.0,elastic/elasticsearch,afcbd2915dc2471e9725da16b5dc844aff9504ff,"Refactors WrapperQueryBuilder and Parser

Relates to #10217
Closes #12037

This PR is against the query-refactoring branch.",https://github.com/elastic/elasticsearch/commit/afcbd2915dc2471e9725da16b5dc844aff9504ff
3991,3991.0,4165.0,elastic/elasticsearch,e424701819b87237e8270c434cf88df390e4c3c8,"Merge pull request #12922 from xuzha/xu-network

Refactor, remove _node/network and _node/stats/network. 

Closes #12889 , Closes #12922",https://github.com/elastic/elasticsearch/commit/e424701819b87237e8270c434cf88df390e4c3c8
3992,3992.0,4166.0,elastic/elasticsearch,32dfd249e95feede1732b3df7479059c30d5c3a6,"Merge branch 'master' into feature/query-refactoring

 Conflicts:
	core/src/test/java/org/elasticsearch/plugins/PluginManagerIT.java",https://github.com/elastic/elasticsearch/commit/32dfd249e95feede1732b3df7479059c30d5c3a6
3993,3993.0,4167.0,elastic/elasticsearch,569949257562ea4bcb6532bd449b3a8cb17e628c,"Merge pull request #12917 from HarishAtGitHub/refactorprocessFirstPhase

Refactor - shard variable dependency from processFirstPhaseResults as shard is no more needed",https://github.com/elastic/elasticsearch/commit/569949257562ea4bcb6532bd449b3a8cb17e628c
3994,3994.0,4168.0,elastic/elasticsearch,f8a90edab28fe6039b2d418519393f34d2f8da80,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/TermsLookupQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java",https://github.com/elastic/elasticsearch/commit/f8a90edab28fe6039b2d418519393f34d2f8da80
3995,3995.0,4169.0,elastic/elasticsearch,4010e7e9a7148d66d5fb3699c5a042053efea1f4,"Java api: restore support for minimumShouldMatch and disableCoord in TermsQueryBuilder

 TermsQueryParser still parses those values although deprecated. These need to be present in the java api as well to get ready for the query refactoring, where the builders are the intermediate query format that we parse our json queries into. Whatever the parser supports need to be supported by the builder as well.

Closes #12870",https://github.com/elastic/elasticsearch/commit/4010e7e9a7148d66d5fb3699c5a042053efea1f4
3996,3996.0,4170.0,elastic/elasticsearch,0f3ada159e02c3802191fefb170e5948df73ffd6,"Release: Create pre release script

Refactored a part out of the release script, so the user can
change the version locally as well as move the documentation
and change the Version.java

The background of this change is to have a very simple release
process that puts stuff into a staging environment, so the beta
release can be tested, before it is officially released.

This means the build_release script can be removed soon.",https://github.com/elastic/elasticsearch/commit/0f3ada159e02c3802191fefb170e5948df73ffd6
3997,3997.0,4171.0,elastic/elasticsearch,71a3bdb8e8c89b8a17f6828ac4dcba73a99d6637,"Merge pull request #12863 from rjernst/fix/12784

Refactor classes only plugged in by tests to use package private extension points",https://github.com/elastic/elasticsearch/commit/71a3bdb8e8c89b8a17f6828ac4dcba73a99d6637
3998,3998.0,4172.0,elastic/elasticsearch,ccef0551efb0a288d4ca94d140f2ff785e3235c6,"Tests: Refactor classes only plugged in by tests to use package private extension points

We previous used something like Class.forName to load mock classes,
where tests would set a setting that was *supposed* to only be used by
tests. This change make these impls package private so that only tests
can change out these implementations, through test plugins.

closes #12784",https://github.com/elastic/elasticsearch/commit/ccef0551efb0a288d4ca94d140f2ff785e3235c6
3999,3999.0,4173.0,elastic/elasticsearch,8ac439fc1b40893ae12d09319a15b40b5ed2dc9d,Query refactoring: resolve guice injection issue after last commit,https://github.com/elastic/elasticsearch/commit/8ac439fc1b40893ae12d09319a15b40b5ed2dc9d
4000,4000.0,4174.0,elastic/elasticsearch,c7974454579e4e7f8fa4c5003f2782725ab393ae,Query refactoring: simplified generic types in IndicesQueriesRegistry and IndexQueryParseService,https://github.com/elastic/elasticsearch/commit/c7974454579e4e7f8fa4c5003f2782725ab393ae
4001,4001.0,4175.0,elastic/elasticsearch,babfea0ab7a1114f35cc3f3ea76da26b0882d4ff,"Query refactoring: fixed some leftover generics warnings

Leftover after adding the query builder type to QueryParser. getBuilderPrototype is better typed now and doesn't require unchecked cast anymore. Fixed also some Tuple usage without types.",https://github.com/elastic/elasticsearch/commit/babfea0ab7a1114f35cc3f3ea76da26b0882d4ff
4002,4002.0,4176.0,elastic/elasticsearch,a67ee73ee2bd1367d09837a199f6748e3a8be722,"Merge pull request #12808 from cbuescher/feature/query-refactoring-dupCodeAndParser

Remove duplicate code in AndQueryParser",https://github.com/elastic/elasticsearch/commit/a67ee73ee2bd1367d09837a199f6748e3a8be722
4003,4003.0,4177.0,elastic/elasticsearch,397a4305ad08781ec15d258c638fb9ccaafaac70,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/397a4305ad08781ec15d258c638fb9ccaafaac70
4004,4004.0,4178.0,elastic/elasticsearch,b7bfcdc5f83e496075a6efd1697afff29ada17c7,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/b7bfcdc5f83e496075a6efd1697afff29ada17c7
4005,4005.0,4179.0,elastic/elasticsearch,a1be2d63f937e282d6a5f7f2dedd418bce7d09ae,"Query refactoring: better naming consistency for getters

In the query refactoring branch we've been introducing getter methods for every bit that you can set to each query. The naming is not every consistent at the moment. The applied naming convention are the following:

- `innerQuery()` for any inner query, when there's only one of them
- when there's more than one inner query, use a prefix that identifies which query it is, and the `query` suffix (e.g. `positiveQuery` or `littleQuery`)
- `fieldName()` for the name of the field to be queried
- `value()` for the actual query

These changes don't break bw comp given that these getters were all introduced with the query refactoring which hasn't been released yet. Also we are modifying getters that don't have a corresponding setter, as the fields are final, hence we are not breaking consistency between getter and setter.

Closes #12800",https://github.com/elastic/elasticsearch/commit/a1be2d63f937e282d6a5f7f2dedd418bce7d09ae
4006,4006.0,4180.0,elastic/elasticsearch,e2181990c439138f5fce28c7ba3e8cd5e07d2b2c,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringParser.java",https://github.com/elastic/elasticsearch/commit/e2181990c439138f5fce28c7ba3e8cd5e07d2b2c
4007,4007.0,4181.0,elastic/elasticsearch,097511601cda6cef2a7bed7711d932f12337b20b,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/097511601cda6cef2a7bed7711d932f12337b20b
4008,4008.0,4182.0,elastic/elasticsearch,626b1abde4dcf19489308d1c32b79a3bbe4b7f58,"Refactoring of FuzzyQuery

Relates to #10217

This PR is against the query-refactoring branch.

Closes #11865",https://github.com/elastic/elasticsearch/commit/626b1abde4dcf19489308d1c32b79a3bbe4b7f58
4009,4009.0,4183.0,elastic/elasticsearch,d90552e2fb66a1a6d101d6ec403520dfcebaa992,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/d90552e2fb66a1a6d101d6ec403520dfcebaa992
4010,4010.0,4184.0,elastic/elasticsearch,5ecf3e5f7266c8dcd02c1a52238b76d18cb4ee1a,"Merge pull request #12731 from cbuescher/feature/query-refactoring-isFilterCleanup

Move flag to track filter context to QueryShardContext",https://github.com/elastic/elasticsearch/commit/5ecf3e5f7266c8dcd02c1a52238b76d18cb4ee1a
4011,4011.0,4185.0,elastic/elasticsearch,a3c294d4e9415445ebb451aff2433a99efe2c4a6,"Move flag to track filter context to QueryShardContext

Currently there is a flag in the QueryParseContext that keeps track
of whether an inner query sits inside a filter and should therefore
produce an unscored lucene query. This is done in the
parseInnerFilter...() methods that are called in the fromXContent()
methods or the parse() methods we haven't refactored yet. This needs
to move to the toQuery() method in the refactored builders, since the
query builders themselves have no information about the parent query
they might be nested in.

This PR moves the isFilter flag from the QueryParseContext to the re-
cently introduces QueryShardContext. The parseInnerFilter... methods
need to stay in the QueryParseContext for now, but they already delegate
to the flag that is kept in QueryShardContext. For refactored queries
(like BoolQueryBuilder) references to isFilter() are moved from the
parser to the corresponding builder. Builders where the inner query
was previously parsed using parseInnerFilter...() now use a newly
introduces toFilter(shardContext) method that produces the nested lucene
query with the filter context flag switched on.

Closes #12731",https://github.com/elastic/elasticsearch/commit/a3c294d4e9415445ebb451aff2433a99efe2c4a6
4012,4012.0,4186.0,elastic/elasticsearch,4e936d196469306ad410132ba016ad836432cdca,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/4e936d196469306ad410132ba016ad836432cdca
4013,4013.0,4187.0,elastic/elasticsearch,d920c9d6bfa1ec4cfa839a19df6fa3e9f5e94fa5,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/d920c9d6bfa1ec4cfa839a19df6fa3e9f5e94fa5
4014,4014.0,4188.0,elastic/elasticsearch,5edb287d3a5e9e774698f3e8f610b0fcef9fb23b,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java",https://github.com/elastic/elasticsearch/commit/5edb287d3a5e9e774698f3e8f610b0fcef9fb23b
4015,4015.0,4189.0,elastic/elasticsearch,d79faab0f581ecf7f81fc4d6f36bc8b7c024bcb1,Merge branch 'merge/named_writeable' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/d79faab0f581ecf7f81fc4d6f36bc8b7c024bcb1
4016,4016.0,4190.0,elastic/elasticsearch,20f944bf9459c5dd0b8326641c43782ddc0880b4,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/common/io/stream/FilterStreamInput.java
	core/src/main/java/org/elasticsearch/common/io/stream/NamedWriteableRegistry.java
	core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java
	core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java
	core/src/main/java/org/elasticsearch/transport/netty/MessageChannelHandler.java
	core/src/test/java/org/elasticsearch/common/io/stream/BytesStreamsTests.java
	core/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTests.java",https://github.com/elastic/elasticsearch/commit/20f944bf9459c5dd0b8326641c43782ddc0880b4
4017,4017.0,4191.0,elastic/elasticsearch,b763265f677132fe3772d51135734f542540e6bb,"Merge branch 'master' into feature/query-refactoring

 Conflicts:
	core/src/main/java/org/elasticsearch/transport/local/LocalTransport.java",https://github.com/elastic/elasticsearch/commit/b763265f677132fe3772d51135734f542540e6bb
4018,4018.0,4192.0,elastic/elasticsearch,15e5247e03bbf7b69ac547c2bad3d17a89149c61,"Get plugin smoketester running in jenkins.

We have a smoke_test_plugins.py, but its a bit slow, not integrated
into our build, etc.

I converted this into an integration test. It is definitely uglier
but more robust and fast (e.g. 20 seconds time to verify).

Also there is refactoring of existing integ tests logic, like printing
out commands we execute and stuff",https://github.com/elastic/elasticsearch/commit/15e5247e03bbf7b69ac547c2bad3d17a89149c61
4019,4019.0,4193.0,elastic/elasticsearch,07c2e48e96dffaf039a41b80dd5f92ab735f719d,"Merge pull request #12527 from cbuescher/feature/query-refactoring-queryCreationContext

Separating QueryParseContext and QueryShardContext",https://github.com/elastic/elasticsearch/commit/07c2e48e96dffaf039a41b80dd5f92ab735f719d
4020,4020.0,4194.0,elastic/elasticsearch,904cbf53409ae62bb67cd07c31ef88121cff9361,"Separating QueryParseContext and QueryShardContext

We are currently splitting the parse() method in the query parsers into a
query parsing part (fromXContent(QueryParseContext)) and a new method that
generates the lucene query (toQuery(QueryParseContext)). At some point we
would like to be able to excute these two steps in different phases, one
on the coordinating node and one on the shards.

This PR tries to anticipate this by renaming the existing QueryParseContext
to QueryShardContext to make it clearer that this context object will provide
the information needed to generate the lucene queries on the shard. A new
QueryParseContext is introduced and all the functionality needed for parsing
the XContent in the request is moved there (parser, helper methods for parsing
inner queries).

While the refactoring is not finished, the new QueryShardContext will expose the
QueryParseContext via the parseContext() method. Also, for the time beeing the
QueryParseContext will contain a link back to the QueryShardContext it wraps, which
eventually will be deleted once the refactoring is done.

Closes #12527
Relates to #10217",https://github.com/elastic/elasticsearch/commit/904cbf53409ae62bb67cd07c31ef88121cff9361
4021,4021.0,4195.0,elastic/elasticsearch,2784e2f7f0ca56b2c022523bb8209cd035a7ec9c,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/2784e2f7f0ca56b2c022523bb8209cd035a7ec9c
4022,4022.0,4196.0,elastic/elasticsearch,4cceb08a0b786788c8fba7c1c2a80ed1d8f1d441,"Merge branch 'master' into feature/query-refactoring

 Conflicts:
	core/src/test/java/org/elasticsearch/common/io/streams/BytesStreamsTests.java
	core/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchIT.java
	core/src/test/java/org/elasticsearch/search/query/SearchQueryIT.java
	core/src/test/java/org/elasticsearch/test/transport/AssertingLocalTransport.java",https://github.com/elastic/elasticsearch/commit/4cceb08a0b786788c8fba7c1c2a80ed1d8f1d441
4023,4023.0,4197.0,elastic/elasticsearch,d349deb9b7f86f1dda909de79d5dac3d6e3f9ad1,"Merge pull request #12613 from rjernst/refactor/integ-tests

Rename integ tests to IT suffix",https://github.com/elastic/elasticsearch/commit/d349deb9b7f86f1dda909de79d5dac3d6e3f9ad1
4024,4024.0,4198.0,elastic/elasticsearch,99398ad3114f3e8fcbc0d3962c9940f4fc57a47d,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/99398ad3114f3e8fcbc0d3962c9940f4fc57a47d
4025,4025.0,4199.0,elastic/elasticsearch,7f28dc14eeb12585a0e8c0fcaec95e40843e444b,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/7f28dc14eeb12585a0e8c0fcaec95e40843e444b
4026,4026.0,4200.0,elastic/elasticsearch,af751178458a685077063ca8170762cf9e74a0f2,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/af751178458a685077063ca8170762cf9e74a0f2
4027,4027.0,4201.0,elastic/elasticsearch,63ddbc9adb63b8e2eb8169953f163e3602579067,"Marvel: Refactor IndexStatsCollector to use Renderer/XContentFiltering (aka 'filter_path') feature

Original commit: elastic/x-pack-elasticsearch@562ffea0b8df8021c7bf86fc5d91412f4bfd9a08",https://github.com/elastic/elasticsearch/commit/63ddbc9adb63b8e2eb8169953f163e3602579067
4028,4028.0,4202.0,elastic/elasticsearch,a1948350a56a97da07ce1b6ec4bb286c5d3cbd3d,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/a1948350a56a97da07ce1b6ec4bb286c5d3cbd3d
4029,4029.0,4203.0,elastic/elasticsearch,b780346cb7bb51c0c8b08198f488161213224c1d,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/b780346cb7bb51c0c8b08198f488161213224c1d
4030,4030.0,4204.0,elastic/elasticsearch,012825207521ad97adbe82d08aab4c835378909f,"Merge branch 'master' into feature/query-refactoring

	core/src/test/java/org/elasticsearch/aliases/IndexAliasesTests.java",https://github.com/elastic/elasticsearch/commit/012825207521ad97adbe82d08aab4c835378909f
4031,4031.0,4205.0,elastic/elasticsearch,3d534136503ac860df7f6b775823a9cf3db1acaa,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/3d534136503ac860df7f6b775823a9cf3db1acaa
4032,4032.0,4206.0,elastic/elasticsearch,db5d73a6174b38828b26276a1387b84a3ac8344e,"Merge pull request #12444 from cbuescher/feature/query-refactoring-nullCheckCleanup

Query Refactoring: Move null-checks to validate",https://github.com/elastic/elasticsearch/commit/db5d73a6174b38828b26276a1387b84a3ac8344e
4033,4033.0,4207.0,elastic/elasticsearch,081d264f401ceced5344d20111e68a38316bd96b,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/081d264f401ceced5344d20111e68a38316bd96b
4034,4034.0,4208.0,elastic/elasticsearch,15a09a04f2cc62650d54a20ae85c94e92d4d7de9,"Query Refactoring: Move null-checks from constructors and setters to validate

Following up to #12427, this PR does same changes, moving null-checks from construtors
and setters in query builder to the validate() method.

PR against query-refactoring branch",https://github.com/elastic/elasticsearch/commit/15a09a04f2cc62650d54a20ae85c94e92d4d7de9
4035,4035.0,4209.0,elastic/elasticsearch,8776463084d097b31ad442059b065083fb808900,"Merge pull request #12440 from cbuescher/feature/query-refactoring-constructorCleanup

Extended SpanFirstQueryBuilderTest",https://github.com/elastic/elasticsearch/commit/8776463084d097b31ad442059b065083fb808900
4036,4036.0,4210.0,elastic/elasticsearch,94d13c73c786181245a9296c22b032e44afff6f5,"Refactors WildcardQueryBuilder and Parser

Relates to #10217
Closes #12110

This PR is against the query-refactoring branch.",https://github.com/elastic/elasticsearch/commit/94d13c73c786181245a9296c22b032e44afff6f5
4037,4037.0,4211.0,elastic/elasticsearch,817b9925115b98ecb3b5c849426f4cd875381661,"Merge pull request #12427 from cbuescher/feature/query-refactoring-constructorCleanup

Moving null-checks from constructors to validate()",https://github.com/elastic/elasticsearch/commit/817b9925115b98ecb3b5c849426f4cd875381661
4038,4038.0,4212.0,elastic/elasticsearch,7099e6ca93c5b2c35e409fe07b7a8909a92287a2,"Refactors ScriptQueryBuilder and Parser

Relates to #10217
Closes #12115

This PR is against the query-refactoring branch.",https://github.com/elastic/elasticsearch/commit/7099e6ca93c5b2c35e409fe07b7a8909a92287a2
4039,4039.0,4213.0,elastic/elasticsearch,4d4dc5cceb3cb5c1f7a833b98180c84733812949,"Refactors TypeQuery

Relates to #10217
Closes #12035

This PR is against the query-refactoring branch.",https://github.com/elastic/elasticsearch/commit/4d4dc5cceb3cb5c1f7a833b98180c84733812949
4040,4040.0,4214.0,elastic/elasticsearch,37c6347bcef7bf587c72e4dcf88abf90b8c283a0,"Refactors PrefixQuery

Relates to #10217
Closes #12032

This PR is against the query-refactoring branch.",https://github.com/elastic/elasticsearch/commit/37c6347bcef7bf587c72e4dcf88abf90b8c283a0
4041,4041.0,4215.0,elastic/elasticsearch,a4e9f642c26f932717be4bcc4c8df80d7ed3ddd2,"Refactoring of MissingQuery

Relates to #10217
Closes #12030

This PR is against the query-refactoring branch.",https://github.com/elastic/elasticsearch/commit/a4e9f642c26f932717be4bcc4c8df80d7ed3ddd2
4042,4042.0,4216.0,elastic/elasticsearch,93674b8b1b9fed1427e62eb96438938294a6317c,"Refactoring of RegexpQuery

Relates to #10217
Closes #11896

This PR is against the query-refactoring branch.",https://github.com/elastic/elasticsearch/commit/93674b8b1b9fed1427e62eb96438938294a6317c
4043,4043.0,4217.0,elastic/elasticsearch,026fd3843deb2e4759e793e17ece025971b579e1,"Merge pull request #12342 from cbuescher/feature/query-refactoring-spanor

Query refactoring: SpanOrQueryBuilder and Parser",https://github.com/elastic/elasticsearch/commit/026fd3843deb2e4759e793e17ece025971b579e1
4044,4044.0,4218.0,elastic/elasticsearch,2b675ccf037fabea89439d10e17a63a90a6fdafd,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/2b675ccf037fabea89439d10e17a63a90a6fdafd
4045,4045.0,4219.0,elastic/elasticsearch,36991192729d244f211f8c29e810c8437967c449,"Remove unused QueryParseContext argument in MappedFieldType#rangeQuery()

The rangeQuery() method in MappedFieldType and some overwriting subtypes takes
a nullable QueryParseContext argument which is unused and can be deleted.
This is also useful for the current query parsing refactoring, since
we want to avoid passing the context object around unnecessarily.",https://github.com/elastic/elasticsearch/commit/36991192729d244f211f8c29e810c8437967c449
4046,4046.0,4220.0,elastic/elasticsearch,4040f194f528c76c88be70b119cf9d7d6fcea99b,"Refactor pluginservice

Closes #12367

Squashed commit of the following:

commit 9453c411798121aa5439c52e95301f60a022ba5f
Merge: 3511a9c 828d8c7
Author: Robert Muir <rmuir@apache.org>
Date:   Wed Jul 22 08:22:41 2015 -0400

    Merge branch 'master' into refactor_pluginservice

commit 3511a9c616503c447de9f0df9b4e9db3e22abd58
Author: Ryan Ernst <ryan@iernst.net>
Date:   Tue Jul 21 21:50:15 2015 -0700

    Remove duplicated constant

commit 4a9b5b4621b0ef2e74c1e017d9c8cf624dd27713
Author: Ryan Ernst <ryan@iernst.net>
Date:   Tue Jul 21 21:01:57 2015 -0700

    Add check that plugin must specify at least site or jvm

commit 19aef2f0596153a549ef4b7f4483694de41e101b
Author: Ryan Ernst <ryan@iernst.net>
Date:   Tue Jul 21 20:52:58 2015 -0700

    Change plugin ""plugin"" property to ""classname""

commit 07ae396f30ed592b7499a086adca72d3f327fe4c
Author: Robert Muir <rmuir@apache.org>
Date:   Tue Jul 21 23:36:05 2015 -0400

    remove test with no methods

commit 550e73bf3d0f94562f4dde95239409dc5a24ce25
Author: Robert Muir <rmuir@apache.org>
Date:   Tue Jul 21 23:31:58 2015 -0400

    fix loading to use classname

commit 04463aed12046da0da5cac2a24c3ace51a79f799
Author: Robert Muir <rmuir@apache.org>
Date:   Tue Jul 21 23:24:19 2015 -0400

    rename to classname

commit 9f3afadd1caf89448c2eb913757036da48758b2d
Author: Ryan Ernst <ryan@iernst.net>
Date:   Tue Jul 21 20:18:46 2015 -0700

    moved PluginInfo and refactored parsing from properties file

commit df63ccc1b8b7cc64d3e59d23f6c8e827825eba87
Author: Robert Muir <rmuir@apache.org>
Date:   Tue Jul 21 23:08:26 2015 -0400

    fix test

commit c7febd844be358707823186a8c7a2d21e37540c9
Author: Robert Muir <rmuir@apache.org>
Date:   Tue Jul 21 23:03:44 2015 -0400

    remove test

commit 017b3410cf9d2b7fca1b8653e6f1ebe2f2519257
Author: Robert Muir <rmuir@apache.org>
Date:   Tue Jul 21 22:58:31 2015 -0400

    fix test

commit c9922938df48041ad43bbb3ed6746f71bc846629
Merge: ad59af4 01ea89a
Author: Robert Muir <rmuir@apache.org>
Date:   Tue Jul 21 22:37:28 2015 -0400

    Merge branch 'master' into refactor_pluginservice

commit ad59af465e1f1ac58897e63e0c25fcce641148a7
Author: Areek Zillur <areek.zillur@elasticsearch.com>
Date:   Tue Jul 21 19:30:26 2015 -0400

    [TEST] Verify expected number of nodes in cluster before issuing shardStores request

commit f0f5a1e087255215b93656550fbc6bd89b8b3205
Author: Lee Hinman <lee@writequit.org>
Date:   Tue Jul 21 11:27:28 2015 -0600

    Ignore EngineClosedException during translog fysnc

    When performing an operation on a primary, the state is captured and the
    operation is performed on the primary shard. The original request is
    then modified to increment the version of the operation as preparation
    for it to be sent to the replicas.

    If the request first fails on the primary during the translog sync
    (because the Engine is already closed due to shadow primaries closing
    the engine on relocation), then the operation is retried on the new primary
    after being modified for the replica shards. It will then fail due to the
    version being incorrect (the document does not yet exist but the request
    expects a version of ""1"").

    Order of operations:

    - Request is executed against primary
    - Request is modified (version incremented) so it can be sent to replicas
    - Engine's translog is fsync'd if necessary (failing, and throwing an exception)
    - Modified request is retried against new primary

    This change ignores the exception where the engine is already closed
    when syncing the translog (similar to how we ignore exceptions when
    refreshing the shard if the ?refresh=true flag is used).

commit 4ac68bb1658688550ced0c4f479dee6d8b617777
Author: Shay Banon <kimchy@gmail.com>
Date:   Tue Jul 21 22:37:29 2015 +0200

    Replica allocator unit tests
    First batch of unit tests to verify the behavior of replica allocator

commit 94609fc5943c8d85adc751b553847ab4cebe58a3
Author: Jason Tedor <jason@tedor.me>
Date:   Tue Jul 21 14:04:46 2015 -0400

    Correctly list blobs in Azure storage to prevent snapshot corruption and do not unnecessarily duplicate Lucene segments in Azure Storage

    This commit addresses an issue that was leading to snapshot corruption for snapshots stored as blobs in Azure Storage.

    The underlying issue is that in cases when multiple snapshots of an index were taken and persisted into Azure Storage, snapshots subsequent
    to the first would repeatedly overwrite the snapshot files. This issue does render useless all snapshots except the final snapshot.

    The root cause of this is due to String concatenation involving null. In particular, to list all of the blobs in a snapshot directory in
    Azure the code would use the method listBlobsByPrefix where the prefix is null. In the listBlobsByPrefix method, the path keyPath + prefix
    is constructed. However, per 5.1.11, 5.4 and 15.18.1 of the Java Language Specification, the reference null is first converted to the string
    ""null"" before performing the concatenation. This leads to no blobs being returned and therefore the snapshot mechanism would operate as if
    it were writing the first snapshot of the index. The fix is simply to check if prefix is null and handle the concatenation accordingly.

    Upon fixing this issue so that subsequent snapshots would no longer overwrite earlier snapshots, it was discovered that the snapshot metadata
    returned by the listBlobsByPrefix method was not sufficient for the snapshot layer to detect whether or not the Lucene segments had already
    been copied to the Azure storage layer in an earlier snapshot. This led the snapshot layer to unnecessarily duplicate these Lucene segments
    in Azure Storage.

    The root cause of this is due to known behavior in the CloudBlobContainer.getBlockBlobReference method in the Azure API. Namely, this method
    does not fetch blob attributes from Azure. As such, the lengths of all the blobs appeared to the snapshot layer to be of length zero and
    therefore they would compare as not equal to any new blobs that the snapshot layer is going to persist. To remediate this, the method
    CloudBlockBlob.downloadAttributes must be invoked. This will fetch the attributes from Azure Storage so that a proper comparison of the
    blobs can be performed.

    Closes elastic/elasticsearch-cloud-azure#51, closes elastic/elasticsearch-cloud-azure#99

commit cf1d481ce5dda0a45805e42f3b2e0e1e5d028b9e
Author: Lee Hinman <lee@writequit.org>
Date:   Mon Jul 20 08:41:55 2015 -0600

    Unit tests for `nodesAndVersions` on shared filesystems

    With the `recover_on_any_node` setting, these unit tests check that the
    correct node list and versions are returned.

commit 3c27cc32395c3624f7c794904d9ea4faf2eccbfb
Author: Robert Muir <rmuir@apache.org>
Date:   Tue Jul 21 14:15:59 2015 -0400

    don't fail junit4 integration tests if there are no tests.

    instead fail the failsafe plugin, which means the external cluster will still get shut down

commit 95d2756c5a8c21a157fa844273fc83dfa3c00aea
Author: Alexander Reelsen <alexander@reelsen.net>
Date:   Tue Jul 21 17:16:53 2015 +0200

    Testing: Fix help displaying tests under windows

    The help files are using a unix based file separator, where as
    the test relies on the help being based on the file system separator.

    This commit fixes the test to remove all `\r` characters before
    comparing strings.

    The test has also been moved into its own CliToolTestCase, as it does
    not need to be an integration test.

commit 944f06ea36bd836f007f8eaade8f571d6140aad9
Author: Clinton Gormley <clint@traveljury.com>
Date:   Tue Jul 21 18:04:52 2015 +0200

    Refactored check_license_and_sha.pl to accept a license dir and package path

    In preparation for the move to building the core zip, tar.gz, rpm, and deb as separate modules, refactored check_license_and_sha.pl to:

    * accept a license dir and path to the package to check on the command line
    * to be able to extract zip, tar.gz, deb, and rpm
    * all packages except rpm will work on Windows

commit 2585431e8dfa5c82a2cc5b304cd03eee9bed7a4c
Author: Chris Earle <pickypg@users.noreply.github.com>
Date:   Tue Jul 21 08:35:28 2015 -0700

    Updating breaking changes

    - field names cannot be mapped with `.` in them
    - fixed asciidoc issue where the list was not recognized as a list

commit de299b9d3f4615b12e2226a1e2eff5a38ecaf15f
Author: Shay Banon <kimchy@gmail.com>
Date:   Tue Jul 21 13:27:52 2015 +0200

    Replace primaryPostAllocated flag and use UnassignedInfo
    There is no need to maintain additional state as to if a primary was allocated post api creation on the index routing table, we hold all this information already in the UnassignedInfo class.
    closes #12374

commit 43080bff40f60bedce5bdbc92df302f73aeb9cae
Author: Alexander Reelsen <alexander@reelsen.net>
Date:   Tue Jul 21 15:45:05 2015 +0200

    PluginManager: Fix bin/plugin calls in scripts/bats test

    The release and smoke test python scripts used to install
    plugins in the old fashion.

    Also the BATS testing suite installed/removed plugins in that
    way. Here the marvel tests have been removed, as marvel currently
    does not work with the master branch.

    In addition documentation has been updated as well, where it was
    still missing.

commit b81ccba48993bc13c7678e6d979fd96998499233
Author: Boaz Leskes <b.leskes@gmail.com>
Date:   Tue Jul 21 11:37:50 2015 +0200

    Discovery: make sure NodeJoinController.ElectionCallback is always called from the update cluster state thread

    This is important for correct handling of the joining thread. This causes assertions to trip in our test runs. See http://build-us-00.elastic.co/job/es_g1gc_master_metal/11653/ as an example

    Closes #12372

commit 331853790bf29e34fb248ebc4c1ba585b44f5cab
Author: Boaz Leskes <b.leskes@gmail.com>
Date:   Tue Jul 21 15:54:36 2015 +0200

    Remove left over no commit from TransportReplicationAction

    It asks to double check thread pool rejection. I did and don't see problems with it.

commit e5724931bbc1603e37faa977af4235507f4811f5
Author: Alexander Reelsen <alexander@reelsen.net>
Date:   Tue Jul 21 15:31:57 2015 +0200

    CliTool: Various PluginManager fixes

    The new plugin manager parser was not called correctly in the scripts.
    In addition the plugin manager now creates a plugins/ directory in case
    it does not exist.

    Also the integration tests called the plugin manager in the deprecated way.

commit 7a815a370f83ff12ffb12717ac2fe62571311279
Author: Alexander Reelsen <alexander@reelsen.net>
Date:   Tue Jul 21 13:54:18 2015 +0200

    CLITool: Port PluginManager to use CLITool

    In order to unify the handling and reuse the CLITool infrastructure
    the plugin manager should make use of this as well.

    This obsolets the -i and --install options but requires the user
    to use `install` as the first argument of the CLI.

    This is basically just a port of the existing functionality, which
    is also the reason why this is not a refactoring of the plugin manager,
    which will come in a separate commit.

commit 7f171eba7b71ac5682a355684b6da703ffbfccc7
Author: Martijn van Groningen <martijn.v.groningen@gmail.com>
Date:   Tue Jul 21 10:44:21 2015 +0200

    Remove custom execute local logic in TransportSingleShardAction and TransportInstanceSingleOperationAction and rely on transport service to execute locally. (forking thread etc.)

    Change TransportInstanceSingleOperationAction to have shardActionHandler to, so we can execute locally without endless spinning.

commit 0f38e3eca6b570f74b552e70b4673f47934442e1
Author: Ryan Ernst <ryan@iernst.net>
Date:   Tue Jul 21 17:36:12 2015 -0700

    More readMetadata tests and pickiness

commit 880b47281bd69bd37807e8252934321b089c9f8e
Author: Ryan Ernst <ryan@iernst.net>
Date:   Tue Jul 21 14:42:09 2015 -0700

    Started unit tests for plugin service

commit cd7c8ddd7b8c4f3457824b493bffb19c156c7899
Author: Robert Muir <rmuir@apache.org>
Date:   Tue Jul 21 07:21:07 2015 -0400

    fix tests

commit 673454f0b14f072f66ed70e32110fae4f7aad642
Author: Robert Muir <rmuir@apache.org>
Date:   Tue Jul 21 06:58:25 2015 -0400

    refactor pluginservice",https://github.com/elastic/elasticsearch/commit/4040f194f528c76c88be70b119cf9d7d6fcea99b
4047,4047.0,4221.0,elastic/elasticsearch,885b258871b678684910a11e7f4adcd1a69ad34b,"Query refactoring: SpanNearQueryBuilder and Parser

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings.

Relates to #10217",https://github.com/elastic/elasticsearch/commit/885b258871b678684910a11e7f4adcd1a69ad34b
4048,4048.0,4222.0,elastic/elasticsearch,82555fd5f9605aad231e533df7d332966ae434e5,"Merge pull request #12396 from cbuescher/feature/query-refactoring-spanwithin

Query refactoring: SpanWithinQueryBuilder and Parser",https://github.com/elastic/elasticsearch/commit/82555fd5f9605aad231e533df7d332966ae434e5
4049,4049.0,4223.0,elastic/elasticsearch,fc1b5a993e7ba9a1a151b72c373f6cb876b539af,"Query refactoring: SpanWithinQueryBuilder and Parser

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings.

Relates to #10217",https://github.com/elastic/elasticsearch/commit/fc1b5a993e7ba9a1a151b72c373f6cb876b539af
4050,4050.0,4224.0,elastic/elasticsearch,83fe825eebb7ea41c50716fa92387acd84bead43,"Merge pull request #12365 from cbuescher/feature/query-refactoring-spannot

Query refactoring: SpanNotQueryBuilder and Parser",https://github.com/elastic/elasticsearch/commit/83fe825eebb7ea41c50716fa92387acd84bead43
4051,4051.0,4225.0,elastic/elasticsearch,7f88cc596b2b94aa8cc3cce34342ec8a6781e513,"Query refactoring: SpanNotQueryBuilder and Parser

Moving the query building functionality from the parser to the builders
new doToQuery() method analogous to other recent query refactorings.

Relates to #10217
Closes #12365",https://github.com/elastic/elasticsearch/commit/7f88cc596b2b94aa8cc3cce34342ec8a6781e513
4052,4052.0,4226.0,elastic/elasticsearch,22dcc77062e93df509544775ba8d03a2936f097f,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/22dcc77062e93df509544775ba8d03a2936f097f
4053,4053.0,4227.0,elastic/elasticsearch,1a09633a624d6f6a1a2885a17e03e45b62f76141,"Merge pull request #12182 from cbuescher/feature/query-refactoring-spanmultiterm

Query refactoring: SpanMultiTermQueryBuilder and Parser",https://github.com/elastic/elasticsearch/commit/1a09633a624d6f6a1a2885a17e03e45b62f76141
4054,4054.0,4228.0,elastic/elasticsearch,966c02b1ac441381b426bcd63835570ea36493f8,"Query refactoring: SpanMultiTermQueryBuilder and Parser

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings.

Relates to #10217
Closes #12182",https://github.com/elastic/elasticsearch/commit/966c02b1ac441381b426bcd63835570ea36493f8
4055,4055.0,4229.0,elastic/elasticsearch,aeb0ca0aef9390a5d5baef12655efefbae3ccf83,"Merge pull request #12377 from clintongormley/license_check_all_packages

Refactored check_license_and_sha.pl to accept a license dir and package path",https://github.com/elastic/elasticsearch/commit/aeb0ca0aef9390a5d5baef12655efefbae3ccf83
4056,4056.0,4230.0,elastic/elasticsearch,f84757e8bb30b6f2112bfc9b39fee881b30e8d9b,"Refactored check_license_and_sha.pl to accept a license dir and package path

In preparation for the move to building the core zip, tar.gz, rpm, and deb as separate modules, refactored check_license_and_sha.pl to:

* accept a license dir and path to the package to check on the command line
* to be able to extract zip, tar.gz, deb, and rpm
* all packages except rpm will work on Windows",https://github.com/elastic/elasticsearch/commit/f84757e8bb30b6f2112bfc9b39fee881b30e8d9b
4057,4057.0,4231.0,elastic/elasticsearch,2f54b89a23ccd95df7df89d2b1da04efece4ae16,"CLITool: Port PluginManager to use CLITool

In order to unify the handling and reuse the CLITool infrastructure
the plugin manager should make use of this as well.

This obsolets the -i and --install options but requires the user
to use `install` as the first argument of the CLI.

This is basically just a port of the existing functionality, which
is also the reason why this is not a refactoring of the plugin manager,
which will come in a separate commit.",https://github.com/elastic/elasticsearch/commit/2f54b89a23ccd95df7df89d2b1da04efece4ae16
4058,4058.0,4232.0,elastic/elasticsearch,37cdc1344ab6e6a1d7eb891703a2a0dac1bfe2a7,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/37cdc1344ab6e6a1d7eb891703a2a0dac1bfe2a7
4059,4059.0,4233.0,elastic/elasticsearch,ca3e0c6d4976b24c6b6a8f833603e92159271ba5,"Initial Refactor Gateway Allocator
Break it into more manageable code by separating allocation primaries and allocating replicas. Start adding basic unit tests for primary shard allocator.",https://github.com/elastic/elasticsearch/commit/ca3e0c6d4976b24c6b6a8f833603e92159271ba5
4060,4060.0,4234.0,elastic/elasticsearch,7540ad5d507911bfdb036f7d8ba1d6e1a4f71dc3,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/7540ad5d507911bfdb036f7d8ba1d6e1a4f71dc3
4061,4061.0,4235.0,elastic/elasticsearch,c0490215c7dcc48a042e712aaaa851754bc03df2,"Merge branch 'master' into feature/query-refactoring

 Conflicts:
	core/src/main/java/org/elasticsearch/index/query/PrefixQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/RegexpQueryParser.java",https://github.com/elastic/elasticsearch/commit/c0490215c7dcc48a042e712aaaa851754bc03df2
4062,4062.0,4236.0,elastic/elasticsearch,c56ce0e2426b8eae3a9d77353f5bf7ee5ceb2b58,Docs: Refactored the mapping meta-fields docs,https://github.com/elastic/elasticsearch/commit/c56ce0e2426b8eae3a9d77353f5bf7ee5ceb2b58
4063,4063.0,4237.0,elastic/elasticsearch,4b33d2e5dfebd6c61202b7c18432bec29774ad27,"Merge pull request #12252 from rmuir/refactor_integ

Refactor integration tests",https://github.com/elastic/elasticsearch/commit/4b33d2e5dfebd6c61202b7c18432bec29774ad27
4064,4064.0,4238.0,elastic/elasticsearch,68143dedf21279227e87d321cbf3ebf42126a72f,"Refactor integration tests

1. tests don't have a bogus test dependency on zips anymore,
   instead we handle this in pre-integration-test. This reduces
   lots of confusion for e.g. mvn clean test.
2. refactor integ logic so that core/ and plugin/ share it.
   previously they were duplicates but the above change simplifies life.
   it also makes it easier for doing more interesting stuff",https://github.com/elastic/elasticsearch/commit/68143dedf21279227e87d321cbf3ebf42126a72f
4065,4065.0,4239.0,elastic/elasticsearch,52859e3a523983275cea0bbb0bd2d4f0203f69cf,"Internal: refactored MetaData to split the concrete index name resolution to IndexNameExpressionResolver.

Changes in a nutshell:
* All expression logic is now encapsulated by ExpressionResolver interface.
* MetaData#convertFromWildcards() gets replaced by WildcardExpressionResolver.
* All of the indices expansion methods are being moved from MetaData class to the new IndexNameExpressionResolver class.
* All single index expansion optimisations are removed.

The logic for resolving a concrete index name from an expression has been moved from MetaData to IndexExpressionResolver. The logic has been cleaned up and simplified were was possible without breaking bwc.

Also the notion of aliasOrIndex has been changed to index expression.

The IndexNameExpressionResolver translates index name expressions into concrete indices. The list of index name expressions are first delegated to the known ExpressionResolverS. An ExpressionResolver is responsible for translating if possible an expression into another expression (possibly but not required this can be concrete indices or aliases) otherwise the expressions are left untouched. Concretely this means converting wildcard expressions into concrete indices or aliases, but in the future other implementations could convert expressions based on different rules.

To prevent many overloading of methods, DocumentRequest extends now from IndicesRequest. All implementation of DocumentRequest already did implement IndicesRequest indirectly.",https://github.com/elastic/elasticsearch/commit/52859e3a523983275cea0bbb0bd2d4f0203f69cf
4066,4066.0,4240.0,elastic/elasticsearch,dda11e16a717dc1cbeb6a2dce909d66c3df5133d,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/dda11e16a717dc1cbeb6a2dce909d66c3df5133d
4067,4067.0,4241.0,elastic/elasticsearch,76e9a171534fd8ea681328a3e5494bff03864cef,"Merge pull request #12156 from cbuescher/feature/query-refactoring-spannear

Query refactoring: SpanNearQueryBuilder and Parser",https://github.com/elastic/elasticsearch/commit/76e9a171534fd8ea681328a3e5494bff03864cef
4068,4068.0,4242.0,elastic/elasticsearch,c689e891d9ea53dca32bbb1e76501d8883c44043,"Query refactoring: SpanNearQueryBuilder and Parser

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings.

Relates to #10217",https://github.com/elastic/elasticsearch/commit/c689e891d9ea53dca32bbb1e76501d8883c44043
4069,4069.0,4243.0,elastic/elasticsearch,fc1b178dc4b844070f29074ce27f8bc348a9499f,"Merge branch 'master' into feature/query-refactoring

 Conflicts:
	core/src/main/java/org/elasticsearch/index/query/FuzzyQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/FuzzyQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/RegexpQueryParser.java",https://github.com/elastic/elasticsearch/commit/fc1b178dc4b844070f29074ce27f8bc348a9499f
4070,4070.0,4244.0,elastic/elasticsearch,a0cccec86f949408b516668c056e3fb5ebf72d34,"Merge pull request #11885 from MaineC/feature/filter-query-builder-refactoring

Refactors FilteredQueryBuilder.

Relates to #10217",https://github.com/elastic/elasticsearch/commit/a0cccec86f949408b516668c056e3fb5ebf72d34
4071,4071.0,4245.0,elastic/elasticsearch,8d9053a84127b49896fe54b57553e58588915d09,"Merge pull request #12089 from rjernst/refactor/field-mapper-collapse

Remove AbstractFieldMapper",https://github.com/elastic/elasticsearch/commit/8d9053a84127b49896fe54b57553e58588915d09
4072,4072.0,4246.0,elastic/elasticsearch,85a25bdf7384ad3fb864c1589ef9d3ebe7b80917,"harden logic around integ test workspace and process mgmt

there is more to do here, but this is already a lot more robust.

* don't clean workspace in teardown, it might be useful for debugging if stuff fails.
* kill ES/clean workspace in setup, so things always work even in the case of ^C
* use pidfile to kill
* fail if kill errors
* refactor a bit more logic here",https://github.com/elastic/elasticsearch/commit/85a25bdf7384ad3fb864c1589ef9d3ebe7b80917
4073,4073.0,4247.0,elastic/elasticsearch,de277d99d98c28269e5d7d2399a241bc7ecfa885,"Make MultiTermQueryBuilder an interface again

This PR is against the query-refactoring branch.

Closes #12074",https://github.com/elastic/elasticsearch/commit/de277d99d98c28269e5d7d2399a241bc7ecfa885
4074,4074.0,4248.0,elastic/elasticsearch,d8e56e9a6da391bf49ef90c22eab6aae059be4cb,"Merge pull request #12073 from cbuescher/feature/query-refactoring-spanfirst

Query refactoring: SpanFirstQueryBuilder and Parser",https://github.com/elastic/elasticsearch/commit/d8e56e9a6da391bf49ef90c22eab6aae059be4cb
4075,4075.0,4249.0,elastic/elasticsearch,ecba81a856729986e48f3c95b1f632867ac37ea8,"Merge pull request #12072 from cbuescher/feature/query-refactoring-fixemptyqb

Query Refactoring: Make EmptyQueryBuilder implement QueryBuilder directly",https://github.com/elastic/elasticsearch/commit/ecba81a856729986e48f3c95b1f632867ac37ea8
4076,4076.0,4250.0,elastic/elasticsearch,51a27ab082e426590df79be97d4a9ee338452b03,"Query Refactoring: Make EmptyQueryBuilder implement QueryBuilder directly

By extending AbstractQueryBuilder, EmptyQueryBuilder had setters for boost and
queryname which defeats its original purpose of beeing a stand-in
singleton for empty queries. By directly implementing QueryBuilder (and
temporarily also extending ToXContentToBytes) this is prevented",https://github.com/elastic/elasticsearch/commit/51a27ab082e426590df79be97d4a9ee338452b03
4077,4077.0,4251.0,elastic/elasticsearch,53db46b560f28e6662a8f69dac681a9ddac36f18,"Query refactoring: SpanFirstQueryBuilder and Parser

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings.

Relates to #10217",https://github.com/elastic/elasticsearch/commit/53db46b560f28e6662a8f69dac681a9ddac36f18
4078,4078.0,4252.0,elastic/elasticsearch,6c023010328e8838ee3c097e818a09dbbbcf8e49,"Merge pull request #12057 from cbuescher/feature/query-refactoring-spancontaining

Query refactoring: SpanContainingQueryBuilder and Parser",https://github.com/elastic/elasticsearch/commit/6c023010328e8838ee3c097e818a09dbbbcf8e49
4079,4079.0,4253.0,elastic/elasticsearch,4dd59da997a1b5e8ee22f9338462a28d071905f7,"Query refactoring: SpanContainingQueryBuilder and Parser

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings.

Relates to #10217",https://github.com/elastic/elasticsearch/commit/4dd59da997a1b5e8ee22f9338462a28d071905f7
4080,4080.0,4254.0,elastic/elasticsearch,e2da4eb732776157b10616d2809b5bed36b8f233,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/e2da4eb732776157b10616d2809b5bed36b8f233
4081,4081.0,4255.0,elastic/elasticsearch,d225a8f56c4445228d8b1fb7d50e4f9fd5a0f8d1,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/d225a8f56c4445228d8b1fb7d50e4f9fd5a0f8d1
4082,4082.0,4256.0,elastic/elasticsearch,faa4e98aa5ffc3abe5e8ea2542c6d7273b1a857a,"Merge pull request #11915 from cbuescher/feature/query-refactoring-emptyquerybuilder

Query Refactoring: Make parsing nested queries always return query builder",https://github.com/elastic/elasticsearch/commit/faa4e98aa5ffc3abe5e8ea2542c6d7273b1a857a
4083,4083.0,4257.0,elastic/elasticsearch,c51cfbb6d0729a1e6075db45b756ae96b7f9aeb1,"Query Refactoring: Make sure that parsing nested queries always returns an query builder

Currently parsing inner queries can return `null` which leads to unnecessary complicated
null checks further up the query hierarchy. By introducing a special EmptyQueryBuilder
that can be used to signal that this query clause should be ignored upstream where possible,
we can avoid additional null checks in parent query builders and still allow for this query
to be ignored when creating the lucene query later.

This new builder returns `null` when calling its `toQuery()` method, so at this point
we still need to handle it, but having an explicit object for the intermediate query
representation makes it easier to differentiate between cases where inner query clauses are
empty (legal) or are not set at all (illegal).

Also added check for empty inner builder list to BoolQueryBuilder and OrQueryBuilder.
Removed setters for positive/negatice query in favour of constructor with
mandatory non-null arguments in BoostingQueryBuilder.

Closes #11915",https://github.com/elastic/elasticsearch/commit/c51cfbb6d0729a1e6075db45b756ae96b7f9aeb1
4084,4084.0,4258.0,elastic/elasticsearch,63530631f9fe1f63b9677af61019639bd8cb78cf,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/ConstantScoreQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/NotQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/RangeQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/ScriptQueryParser.java",https://github.com/elastic/elasticsearch/commit/63530631f9fe1f63b9677af61019639bd8cb78cf
4085,4085.0,4259.0,elastic/elasticsearch,ba9202a5de30941b81c9ad80f284fcaec9fe4ba5,"Merge pull request elastic/elasticsearch#51 from elastic/plugin-api

Refactored api for plugins into it's own module

Original commit: elastic/x-pack-elasticsearch@8136be7e539441f62d031072e601e9d381157890",https://github.com/elastic/elasticsearch/commit/ba9202a5de30941b81c9ad80f284fcaec9fe4ba5
4086,4086.0,4260.0,elastic/elasticsearch,d7187238a21cdf5aaee75e2820855893a36a7e16,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/transport/netty/MessageChannelHandler.java",https://github.com/elastic/elasticsearch/commit/d7187238a21cdf5aaee75e2820855893a36a7e16
4087,4087.0,4261.0,elastic/elasticsearch,cab3a68cc073fd4d9b4db985a271d77a8675694a,"Query refactoring: unify boost and query name

Following the discussion in #11744, move boost and query _name to base class AbstractQueryBuilder with their getters and setters. Unify their serialization code and equals/hashcode handling in the base class too. This guarantess that every query supports both _name and boost and nothing needs to be done around those in subclasses besides properly parsing the fields in the parsers and printing them out as part of the doXContent method in the builders. More specifically, these are the performed changes:

- Introduced printBoostAndQueryName utility method in AbstractQueryBuilder that subclasses can use to print out _name and boost in their doXContent method.

- readFrom and writeTo are now final methods that take care of _name and boost serialization. Subclasses have to implement doReadFrom and doWriteTo instead.

- toQuery is a final method too that takes care of properly applying _name and boost to the lucene query. Subclasses have to implement doToQuery instead. The query returned will have boost and queryName applied automatically.

- Removed BoostableQueryBuilder interface, given that every query is boostable after this change. This won't have any negative effect on filters, as the boost simply gets ignored in that case.

- Extended equals and hashcode to handle queryName and boost automatically as well.

- Update the query test infra so that queryName and boost are tested automatically, and whenever they are forgotten in parser or doXContent tests fail, so this makes things a lot less error-prone

- Introduced DEFAULT_BOOST constant to make sure we don't repeat 1.0f all the time for default boost values.

SpanQueryBuilder is again a marker interface only. The convenient toQuery that allowed us to override the return type to SpanQuery cannot be supported anymore due to a clash with the toQuery implementation from AbstractQueryBuilder. We have to go back to castin lucene Query to SpanQuery when dealing with span queries unfortunately.

Note that this change touches not only the already refactored queries but also the untouched ones, by making sure that we parse _name and boost whenever we need to and that we print them out as part of QueryBuilder#doXContent. This will result in printing out the default boost all the time rather than skipping it in non refactored queries, something that we would have changed anyway as part of the query refactoring.

The following are the queries that support boost now while previously they didn't (parser now parses it and builder prints it out): and, exists, fquery, geo_bounding_box, geo_distance, geo_distance_range, geo_hash_cell, geo_polygon, indices, limit, missing, not, or, script, type.

The following are the queries that support _name now while previously they didn't (parser now parses it and builder prints it out): boosting, constant_score, function_score, limit, match_all,  type.

Range query parser supports now _name at the same level as boost too (_name is still supported on the outer object though for bw comp).

There are two exceptions that despite have getters and setters for queryName and boost don't really support boost and queryName: query filter and span multi term query. The reason for this is that they only support a single inner object which is another query that they wrap, no other elements.

Relates to #11744
Closes #10776
Closes #11974",https://github.com/elastic/elasticsearch/commit/cab3a68cc073fd4d9b4db985a271d77a8675694a
4088,4088.0,4262.0,elastic/elasticsearch,654dc20897b0e4eb479c5dea64b3a87dc496ba4e,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java
	core/src/main/java/org/elasticsearch/transport/local/LocalTransport.java
	core/src/main/java/org/elasticsearch/transport/netty/MessageChannelHandler.java",https://github.com/elastic/elasticsearch/commit/654dc20897b0e4eb479c5dea64b3a87dc496ba4e
4089,4089.0,4263.0,elastic/elasticsearch,10f80167e66901ce9b208b974d4d8ac2bdc6fa53,"Query refactoring: validate inner queries whenever supported

Added validation for all inner queries that any already refactored query may hold. Added also tests around this. At the end of the refactoring validate will be called by SearchRequest#validate during TransportSearchAction execution, which will call validate against the top level query builder that will need to go and validate its data plus all of its inner queries, and so on.

Closes #11889",https://github.com/elastic/elasticsearch/commit/10f80167e66901ce9b208b974d4d8ac2bdc6fa53
4090,4090.0,4264.0,elastic/elasticsearch,4406d236de9483a35d4e3b08be8a2558e8f99274,"Merge branch 'master' into feature/query-refactoring

 Conflicts:
	core/src/main/java/org/elasticsearch/transport/netty/MessageChannelHandler.java",https://github.com/elastic/elasticsearch/commit/4406d236de9483a35d4e3b08be8a2558e8f99274
4091,4091.0,4265.0,elastic/elasticsearch,53f6bf0625e682ebddc21ff7f3286812d9bdd76c,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/53f6bf0625e682ebddc21ff7f3286812d9bdd76c
4092,4092.0,4266.0,elastic/elasticsearch,6678acfe23bf9a10bcfaa9028a3f18c25970e0f1,"Merge branch 'master' into feature/query-refactoring

 Conflicts:
	core/src/main/java/org/elasticsearch/index/query/RangeQueryBuilder.java",https://github.com/elastic/elasticsearch/commit/6678acfe23bf9a10bcfaa9028a3f18c25970e0f1
4093,4093.0,4267.0,elastic/elasticsearch,9d47e809c67fc39e71548385f03fcca7faf11774,"Merge pull request #11834 from cbuescher/feature/query-refactoring-minorcleanup

Query Refactoring: Minor consistency cleanups for default values and validation",https://github.com/elastic/elasticsearch/commit/9d47e809c67fc39e71548385f03fcca7faf11774
4094,4094.0,4268.0,elastic/elasticsearch,28506d7b8781d545a5f20c1774d5bac7de463b17,"Revisited the queries already refactored, corrected and aligned some of
the codebase based on the conventions that we decided to follow. Also including
some cosmetic fixes (making members final where possible, avoiding this
references outside of setters/getters).

In addition to that this PR changes:

* prevent NPEs in doXContent when rendering out nested queries that are null. We now render out empty object ({ }) which then gets parser to null to be consistent with queries than come only through the rest layer
* prevent adding nested null queries to collections of clauses like in BoolQueryBuilder
* add validate() method to all builders (even when empty)

Closes #11834",https://github.com/elastic/elasticsearch/commit/28506d7b8781d545a5f20c1774d5bac7de463b17
4095,4095.0,4269.0,elastic/elasticsearch,556e43aa84172e09a2245ad456de7a42a68a73d8,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/556e43aa84172e09a2245ad456de7a42a68a73d8
4096,4096.0,4270.0,elastic/elasticsearch,a2122fdc2b88861841ded9e1fd95c91ce2ad9e30,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/a2122fdc2b88861841ded9e1fd95c91ce2ad9e30
4097,4097.0,4271.0,elastic/elasticsearch,f379a13fb412ef5c9d63c24e0550ed42b6be7591,"Extract all shard-level snapshot operation into dedicated SnapshotShardsService

Currently the SnapshotsService is concerned with both maintaining the global snapshot lifecycle on the master node as well as responsible for keeping track of individual shards on the data nodes. This refactoring separates two areas of concerns by moving all shard-level operations into a separate SnapshotShardsService.

Closes #11756",https://github.com/elastic/elasticsearch/commit/f379a13fb412ef5c9d63c24e0550ed42b6be7591
4098,4098.0,4272.0,elastic/elasticsearch,cf6f4422e1bc1058352edc48eb890c12e4bc64b0,"Merge pull request elastic/elasticsearch#438 from simianhacker/master

Refactor Plugin Layout and Settings

Original commit: elastic/x-pack-elasticsearch@c5d8fa0219abc42c0f1b143f26ee12d2a4582550",https://github.com/elastic/elasticsearch/commit/cf6f4422e1bc1058352edc48eb890c12e4bc64b0
4099,4099.0,4273.0,elastic/elasticsearch,03380b74e070d41cc849075921636b3521537a4b,"Refactor plugin layout; add settings; start issues work

Original commit: elastic/x-pack-elasticsearch@dae4d50d495d018cf489c3f8da4a8aebe8cf62c9",https://github.com/elastic/elasticsearch/commit/03380b74e070d41cc849075921636b3521537a4b
4100,4100.0,4274.0,elastic/elasticsearch,29d16cd1e83c215c61e49f8902ad731fd7ff4dc4,"Refactors CommonTermsQuery

Refactors CommonTermsQuery analogous to TermQueryBuilder. Still left to do are
the tests to compare between builder and actual Lucene query.

Relates to #10217

This PR is against the query-refactoring branch.",https://github.com/elastic/elasticsearch/commit/29d16cd1e83c215c61e49f8902ad731fd7ff4dc4
4101,4101.0,4275.0,elastic/elasticsearch,7afa37c62e984dbf12cb4d0f9a1b1bf96d045365,"Merge pull request #11274 from MaineC/feature/simple-query-string-refactoring

Refactors SimpleQueryStringBuilder/Parser",https://github.com/elastic/elasticsearch/commit/7afa37c62e984dbf12cb4d0f9a1b1bf96d045365
4102,4102.0,4276.0,elastic/elasticsearch,e170c8e498cb0868cfb6df1a25f65bf6424d10ee,"Refactors SimpleQueryStringBuilder/Parser

This commit makes SimpleQueryStringBuilder streamable, add hashCode and equals. Adds a dedicated builder/parser unit test, fixes formatting, adds JavaDoc where needed, adjust the handling of default values according to https://github.com/elastic/dev/blob/master/design/queries/general-guidelines.md

Switched to using toLanguageTag/forLanguageTag when parsing Locales. Using LocaleUtils from either Elasticsearch or Apache commons resulted in Locales not passing the roundtrip test. For more info see https://issues.apache.org/jira/browse/LUCENE-4021

Relates to #10217",https://github.com/elastic/elasticsearch/commit/e170c8e498cb0868cfb6df1a25f65bf6424d10ee
4103,4103.0,4277.0,elastic/elasticsearch,7653376ece28a66786f1c7a2494d589fa5e7034d,"Query refactoring: simplify equals implementation and dedup code

Closes #11818",https://github.com/elastic/elasticsearch/commit/7653376ece28a66786f1c7a2494d589fa5e7034d
4104,4104.0,4278.0,elastic/elasticsearch,0da9f2038f5088cac619cd26f526d803ccfbfd0d,"Merge pull request #11823 from cbuescher/feature/query-refactoring-not

Query refactoring: NotQueryBuilder and Parser",https://github.com/elastic/elasticsearch/commit/0da9f2038f5088cac619cd26f526d803ccfbfd0d
4105,4105.0,4279.0,elastic/elasticsearch,682b499f4640820ae78d29e9c35d5ead8ab4ed98,"Query refactoring: NotQueryBuilder and Parser

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings.

Relates to #10217
Closes #11823",https://github.com/elastic/elasticsearch/commit/682b499f4640820ae78d29e9c35d5ead8ab4ed98
4106,4106.0,4280.0,elastic/elasticsearch,fdc4d0121e505d2005954fcd706e51b4f2bcc5ee,"Merge pull request #11817 from cbuescher/feature/query-refactoring-or

Query refactoring: OrQueryBuilder and Parser",https://github.com/elastic/elasticsearch/commit/fdc4d0121e505d2005954fcd706e51b4f2bcc5ee
4107,4107.0,4281.0,elastic/elasticsearch,99147228d721acfad158a6b0166783e3ab930ebb,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/GeoShapeQueryBuilder.java
	core/src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java",https://github.com/elastic/elasticsearch/commit/99147228d721acfad158a6b0166783e3ab930ebb
4108,4108.0,4282.0,elastic/elasticsearch,f123a53d7258349a171e47a35f4581899d8fa776,Docs: Refactored modules and index modules sections,https://github.com/elastic/elasticsearch/commit/f123a53d7258349a171e47a35f4581899d8fa776
4109,4109.0,4283.0,elastic/elasticsearch,6f8c0ce9667840cfd5fcc291088f395f00e23dba,"Query refactoring: OrQueryBuilder and Parser

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings.

Relates to #10217",https://github.com/elastic/elasticsearch/commit/6f8c0ce9667840cfd5fcc291088f395f00e23dba
4110,4110.0,4284.0,elastic/elasticsearch,33b3323a6332d40e6c211bc14d762065c6a5d0d4,"Merge pull request #11717 from cbuescher/feature/query-refactoring-fieldmaskingspan

Query refactoring: FieldMaskingSpanQueryBuilder and Parser",https://github.com/elastic/elasticsearch/commit/33b3323a6332d40e6c211bc14d762065c6a5d0d4
4111,4111.0,4285.0,elastic/elasticsearch,570022e37be22f9f31c7a8f2feda9d71fe429f74,"Merge pull request #11729 from cbuescher/feature/query-refactoring-fquery

Query refactoring: QueryFilterBuilder and Parser",https://github.com/elastic/elasticsearch/commit/570022e37be22f9f31c7a8f2feda9d71fe429f74
4112,4112.0,4286.0,elastic/elasticsearch,b6cdc46a6193a5784e87eff8f2f84df682f5997e,"Query refactoring: QueryFilterBuilder and Parser

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings. In
this case this also includes FQueryFilterParser, since both queries are
closely related.

Relates to #10217
Closes #11729",https://github.com/elastic/elasticsearch/commit/b6cdc46a6193a5784e87eff8f2f84df682f5997e
4113,4113.0,4287.0,elastic/elasticsearch,107635b194c5bd727734ebd3fd4ff153b6a49305,"Query refactoring: FieldMaskingSpanQueryBuilder and Parser

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings.

Relates to #10217
Closes #11717",https://github.com/elastic/elasticsearch/commit/107635b194c5bd727734ebd3fd4ff153b6a49305
4114,4114.0,4288.0,elastic/elasticsearch,fabe91633f9fa3d62dea2fd44f2e0777a29b4b23,"Query refactoring: make QueryBuilder an interface again and rename current abstract class to AbstractQueryBuilder

It is handy to have a base interface, not just an abstract class, for all of our query builders. This gives us  more flexibility especialy with complex class hierarchies. For instance SpanTermQueryBuilder extends BaseTermQueryBuilder, but also needs to be marked as a SpanQueryBuilder. The latter is a marker interface that should extend QueryBuilder which is not possible unless QueryBuilder actually is an interface.

Also remove queryId method as it created confusion, getName is good enough for the purpose, and override the return type of toQuery method for SpanQueryBuilders to SpanQuery.

Closes #11796",https://github.com/elastic/elasticsearch/commit/fabe91633f9fa3d62dea2fd44f2e0777a29b4b23
4115,4115.0,4289.0,elastic/elasticsearch,1a34d91641ca6106136743276dde0479f1a8b446,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/1a34d91641ca6106136743276dde0479f1a8b446
4116,4116.0,4290.0,elastic/elasticsearch,fa8a300f71cc044f4cddffde16ac6f4b189c1730,"Merge pull request #11783 from rjernst/refactor/field-type-merge

Move merge simulation of fieldtype settings to fieldtype method",https://github.com/elastic/elasticsearch/commit/fa8a300f71cc044f4cddffde16ac6f4b189c1730
4117,4117.0,4291.0,elastic/elasticsearch,7162c45ca79c102d856bed442e9c598c5709ceaa,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/7162c45ca79c102d856bed442e9c598c5709ceaa
4118,4118.0,4292.0,elastic/elasticsearch,f09e0d7fb4335eb96b62e9b0cf56617c48157ff4,"Mappings: Replace fieldType access in mappers with getter

A small refactoring to allow changing how the field type is stored later.",https://github.com/elastic/elasticsearch/commit/f09e0d7fb4335eb96b62e9b0cf56617c48157ff4
4119,4119.0,4293.0,elastic/elasticsearch,cccc71f1e4adbb25c2563e1afb971fac95337777,"Merge branch 'master' into feature/query-refactoring

 Conflicts:
	core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java",https://github.com/elastic/elasticsearch/commit/cccc71f1e4adbb25c2563e1afb971fac95337777
4120,4120.0,4294.0,elastic/elasticsearch,42049276dc18e8b42a5501ad728b8eb06f1d0538,"Merge pull request #11703 from cbuescher/feature/query-refactoring-dismax

Query Refactoring: DisMaxQueryBuilder and Parser",https://github.com/elastic/elasticsearch/commit/42049276dc18e8b42a5501ad728b8eb06f1d0538
4121,4121.0,4295.0,elastic/elasticsearch,3f4b493114f8fbdd3c39b6c3c7c9e9b08b07a2fc,"Query Refactoring: DisMaxQueryBuilder and Parser

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings.

Relates to #10217
Closes #11703",https://github.com/elastic/elasticsearch/commit/3f4b493114f8fbdd3c39b6c3c7c9e9b08b07a2fc
4122,4122.0,4296.0,elastic/elasticsearch,9171ff095989646994b5a7ca1a64620ce688dd72,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/9171ff095989646994b5a7ca1a64620ce688dd72
4123,4123.0,4297.0,elastic/elasticsearch,33668a8df0c47db0390ac91baff206416c9ebc8d,"Merge pull request #11621 from cbuescher/feature/query-refactoring-boostingquery

Query refactoring: BoostingQueryBuilder and Parser",https://github.com/elastic/elasticsearch/commit/33668a8df0c47db0390ac91baff206416c9ebc8d
4124,4124.0,4298.0,elastic/elasticsearch,22cf442231e7541dc56d5926e05f4d165c1ccabf,"Merge pull request #11628 from cbuescher/feature/query-refactoring-and

Query refactoring: AndQueryBuilder and Parser",https://github.com/elastic/elasticsearch/commit/22cf442231e7541dc56d5926e05f4d165c1ccabf
4125,4125.0,4299.0,elastic/elasticsearch,5a16ddc55fb9e2435c97e5b18e7ba5daa55a3fb5,"Query refactoring: AndQueryBuilder and Parser

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings.

Relates to #10217
Closes #11628",https://github.com/elastic/elasticsearch/commit/5a16ddc55fb9e2435c97e5b18e7ba5daa55a3fb5
4126,4126.0,4300.0,elastic/elasticsearch,620211800e434c097ef04b1b0663c16b6522b69b,"Query refactoring: BoostingQueryBuilder and Parser

As part of the refactoring of queries this PR splits the parsers parse() method
into a parsing and a query building part, adding serialization, hashCode() and
equals() to the builder.

Relates to #10217
Closes #11621",https://github.com/elastic/elasticsearch/commit/620211800e434c097ef04b1b0663c16b6522b69b
4127,4127.0,4301.0,elastic/elasticsearch,d25acdfad2b280645d56474b9a8733e3cc32a8fb,"Merge pull request #11629 from cbuescher/feature/query-refactoring-constantscore

Query refactoring: ConstantScoreQueryBuilder and Parser",https://github.com/elastic/elasticsearch/commit/d25acdfad2b280645d56474b9a8733e3cc32a8fb
4128,4128.0,4302.0,elastic/elasticsearch,5d3bedfe9680c002b2b2eca578669ba06d92df70,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/ExistsQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java",https://github.com/elastic/elasticsearch/commit/5d3bedfe9680c002b2b2eca578669ba06d92df70
4129,4129.0,4303.0,elastic/elasticsearch,2bc033d786b2fa694d1599a448d375b2debfa2a1,"Merge pull request #11477 from dadoonet/doc/update-java-api-master

[doc] fix outdated java api examples

Some API have been changed in master. Master documentation should reflect be updated:

* QueryBuilders.queryString is now QueryBuilders.queryStringQuery
* DateHistogram.Interval is now DateHistogramInterval
* Refactoring of buckets in aggs
* FilterBuilders has been replaced by QueryBuilders

Closes #9976.",https://github.com/elastic/elasticsearch/commit/2bc033d786b2fa694d1599a448d375b2debfa2a1
4130,4130.0,4304.0,elastic/elasticsearch,65b1ce9900b8479a11f1d264d66a772920303cd1,"[doc] fix outdated java api examples

* QueryBuilders.queryString is now QueryBuilders.queryStringQuery
* DateHistogram.Interval is now DateHistogramInterval
* Refactoring of buckets in aggs
* FilterBuilders has been replaced by QueryBuilders

Closes #9976.",https://github.com/elastic/elasticsearch/commit/65b1ce9900b8479a11f1d264d66a772920303cd1
4131,4131.0,4305.0,elastic/elasticsearch,7ab0009e41b222d13a2e212c2272572b030a1c45,"Merge pull request #11644 from rjernst/refactor/field-type-equality

Add equals/hashcode to fieldtypes",https://github.com/elastic/elasticsearch/commit/7ab0009e41b222d13a2e212c2272572b030a1c45
4132,4132.0,4306.0,elastic/elasticsearch,1c0b7b3b06c244c8af058ac00d62e25c7f417f36,"Query refactoring: ConstantScoreQueryBuilder and Parser

Moving the query building functionality from the parser to the builders
new toQuery() method analogous to other recent query refactorings.

Relates to #10217
Closes #11629",https://github.com/elastic/elasticsearch/commit/1c0b7b3b06c244c8af058ac00d62e25c7f417f36
4133,4133.0,4307.0,elastic/elasticsearch,5cdb1e65370f0145d1ccc20facc364088ee1df32,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/5cdb1e65370f0145d1ccc20facc364088ee1df32
4134,4134.0,4308.0,elastic/elasticsearch,c5a74df643d8f44cf738782dd062798c3a5c4c6e,"Refactored api for plugins into it's own module

Original commit: elastic/x-pack-elasticsearch@c3505f6c659f3993c319d4ae3bc9e70134f3c4a0",https://github.com/elastic/elasticsearch/commit/c5a74df643d8f44cf738782dd062798c3a5c4c6e
4135,4135.0,4309.0,elastic/elasticsearch,93beea1f670f1e0d53bc3fd3ee671bc235d5f1aa,"Snapshot/Restore: Move in-progress snapshot and restore information from custom metadata to custom cluster state part

Information about in-progress snapshot and restore processes is not really metadata and should be represented as a part of the cluster state similar to discovery nodes, routing table, and cluster blocks. Since in-progress snapshot and restore information is no longer part of metadata, this refactoring also enables us to handle cluster blocks in more consistent manner and allow creation of snapshots of a read-only cluster.

Closes #8102",https://github.com/elastic/elasticsearch/commit/93beea1f670f1e0d53bc3fd3ee671bc235d5f1aa
4136,4136.0,4310.0,elastic/elasticsearch,2a468fdcd33df16e20053444e7624102f6567ea9,"Merge pull request #11607 from cbuescher/feature/query-refactoring-rangequery-fix

Fixing edge case in RangeQueryBuilder when using time zone",https://github.com/elastic/elasticsearch/commit/2a468fdcd33df16e20053444e7624102f6567ea9
4137,4137.0,4311.0,elastic/elasticsearch,bd2e1632de77dfb0e2730029b80eab9f4b3edfd5,"Merge pull request #11427 from cbuescher/feature/query-refactoring-exists

Query Refactoring: ExistsQueryBuilder and Parser",https://github.com/elastic/elasticsearch/commit/bd2e1632de77dfb0e2730029b80eab9f4b3edfd5
4138,4138.0,4312.0,elastic/elasticsearch,c928852d4ab7d8c744063979208709ed4429b8e9,"Query Refactoring: ExistsQueryBuilder and Parser

Refactors ExistsQueryBuilder and Parser, splitting the parse() method into a parsing
and a query building part. Also moving newFilter() utility method from parser to query builder.

Changes in the BaseQueryTestCase include introduction of randomized version to test disabled
FieldNamesFieldMappers and also getting rid of the need for createEmptyBuilder() method by
using registered prototype constants.

Relates to #10217
Closes #11427",https://github.com/elastic/elasticsearch/commit/c928852d4ab7d8c744063979208709ed4429b8e9
4139,4139.0,4313.0,elastic/elasticsearch,4f4b1b74df829049f8092ff25059df18fec39513,"Merge pull request #11121 from cbuescher/feature/query-refactoring-boolquery

Query refactoring: BoolQueryBuilder and Parser",https://github.com/elastic/elasticsearch/commit/4f4b1b74df829049f8092ff25059df18fec39513
4140,4140.0,4314.0,elastic/elasticsearch,458d62e4a07e6a1d66e1c6b368b7c0a2cbf4c43d,"Refactors BoolQueryBuilder and Parser. Splits the parse(QueryParseContext ctx) method into a parsing
and a query building part, adding NamedWriteable implementation for serialization and hashCode(),
equals() for testing.

This change also adds tests using fixed set of leaf queries (Terms, Ids, MatchAll) as nested Queries in test query setup.
Also QueryParseContext is adapted to return QueryBuilder instances for inner filter parses instead of
previously returning Query instances, keeping old methods in place but deprecating them.

Relates to #10217
Closes #11427",https://github.com/elastic/elasticsearch/commit/458d62e4a07e6a1d66e1c6b368b7c0a2cbf4c43d
4141,4141.0,4315.0,elastic/elasticsearch,22c5205e678b9cacfacb4cea65c2f5def7659ac8,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/22c5205e678b9cacfacb4cea65c2f5def7659ac8
4142,4142.0,4316.0,elastic/elasticsearch,ff9041dc486adf0a8dec41f80bbfbdd49f97016a,"Transport: allow to de-serialize arbitrary objects given their name

As part of the query refactoring, we want to be able to serialize queries by having them extend Writeable, rather than serializing their json. When reading them though, we need to be able to identify which query we have to create, based on its name.

For this purpose we introduce a new abstraction called NamedWriteable, which is supported by StreamOutput and StreamInput through writeNamedWriteable and readNamedWriteable methods. A new NamedWriteableRegistry is introduced also where named writeable prototypes need to be registered so that we are able to retrieve the proper instance of query given its name and then de-serialize it calling readFrom against it.

Closes #11553",https://github.com/elastic/elasticsearch/commit/ff9041dc486adf0a8dec41f80bbfbdd49f97016a
4143,4143.0,4317.0,elastic/elasticsearch,5f66f681358f6376eb000eaecae72bc34de45ddf,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/RangeQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/SpanTermQueryParser.java
	core/src/main/java/org/elasticsearch/index/query/TermQueryParser.java",https://github.com/elastic/elasticsearch/commit/5f66f681358f6376eb000eaecae72bc34de45ddf
4144,4144.0,4318.0,elastic/elasticsearch,9787266b60afd6a9926231fd5145a2f027ea30b3,"Merge pull request #11544 from rjernst/refactor/null-value

Mapping: Move null value handling into MappedFieldType",https://github.com/elastic/elasticsearch/commit/9787266b60afd6a9926231fd5145a2f027ea30b3
4145,4145.0,4319.0,elastic/elasticsearch,bf805168e9660fb91da8e7fa55eef1ef075e6b59,Merge branch 'master' into refactor/null-value,https://github.com/elastic/elasticsearch/commit/bf805168e9660fb91da8e7fa55eef1ef075e6b59
4146,4146.0,4320.0,elastic/elasticsearch,3672aceee354861c89579f6e1c4d27c73124ca6a,"Merge pull request #11551 from cbuescher/feature/query-refactoring-limit

Query refactoring: refactored LimitQueryBuilder and Parser and added test",https://github.com/elastic/elasticsearch/commit/3672aceee354861c89579f6e1c4d27c73124ca6a
4147,4147.0,4321.0,elastic/elasticsearch,aadfd1794c4e50356e8f56c6db20a8e7f1a654a8,"Query refactoring: refactored LimitQueryBuilder and Parser and added test

Split the parse method into a parsing and a query building part, adding serialization
and hashCode(), equals() for better testing. Add basic unit test for Builder and Parser.

Closes #11551",https://github.com/elastic/elasticsearch/commit/aadfd1794c4e50356e8f56c6db20a8e7f1a654a8
4148,4148.0,4322.0,elastic/elasticsearch,42acee358705868f099edd3e6c6c92e7c18cf80e,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/main/java/org/elasticsearch/index/query/IdsQueryBuilder.java",https://github.com/elastic/elasticsearch/commit/42acee358705868f099edd3e6c6c92e7c18cf80e
4149,4149.0,4323.0,elastic/elasticsearch,8cdd042cecbec84778e87ad90b35fbcaec2fc338,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/8cdd042cecbec84778e87ad90b35fbcaec2fc338
4150,4150.0,4324.0,elastic/elasticsearch,7f673fbdfd92a204b06a4ec307909a338d4721fe,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	core/src/test/java/org/elasticsearch/index/query/SimpleIndexQueryParserTests.java
	core/src/test/java/org/elasticsearch/index/query/guice/MyJsonQueryParser.java
	core/src/test/java/org/elasticsearch/index/query/plugin/PluginJsonQueryParser.java",https://github.com/elastic/elasticsearch/commit/7f673fbdfd92a204b06a4ec307909a338d4721fe
4151,4151.0,4325.0,elastic/elasticsearch,f743ebb87f3a9685d6358b69c2e9227fa7d45bc9,Fix compile errors after elasticsearch-core master refactorings and multi-module builds,https://github.com/elastic/elasticsearch/commit/f743ebb87f3a9685d6358b69c2e9227fa7d45bc9
4152,4152.0,4326.0,elastic/elasticsearch,f1426abe3af878f10274f888ce59da7b2edbfb1a,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/f1426abe3af878f10274f888ce59da7b2edbfb1a
4153,4153.0,4327.0,elastic/elasticsearch,0f856cc7f96c819e5719a4f838bd7b1b66f8e3c8,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/0f856cc7f96c819e5719a4f838bd7b1b66f8e3c8
4154,4154.0,4328.0,elastic/elasticsearch,83f8849026eaf95f85d1852cc57a36ed286aaef8,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/83f8849026eaf95f85d1852cc57a36ed286aaef8
4155,4155.0,4329.0,elastic/elasticsearch,313e9c67697a8c6f0b332e2005a39cf69f68c3df,"Merge branch 'master' into feature/query-refactoring

 Conflicts:
	src/main/java/org/elasticsearch/index/query/RangeQueryParser.java
	src/main/java/org/elasticsearch/index/query/SpanTermQueryParser.java",https://github.com/elastic/elasticsearch/commit/313e9c67697a8c6f0b332e2005a39cf69f68c3df
4156,4156.0,4330.0,elastic/elasticsearch,a3f51544d51f8fc88595d40432e7bccb08a62930,"Merge pull request #11422 from rjernst/pr/fieldtype-mapper-split

Mappings: Refactor core index/query time properties into FieldType",https://github.com/elastic/elasticsearch/commit/a3f51544d51f8fc88595d40432e7bccb08a62930
4157,4157.0,4331.0,elastic/elasticsearch,b1f6d1abd65735f6abee642212bb4b4569fe1aca,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java
	src/main/java/org/elasticsearch/index/query/HasParentQueryParser.java
	src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java
	src/main/java/org/elasticsearch/index/query/ScriptQueryParser.java
	src/main/java/org/elasticsearch/index/query/TemplateQueryBuilder.java
	src/main/java/org/elasticsearch/index/query/TemplateQueryParser.java",https://github.com/elastic/elasticsearch/commit/b1f6d1abd65735f6abee642212bb4b4569fe1aca
4158,4158.0,4332.0,elastic/elasticsearch,433566963590feb1d56baa3f29be884a42b03c26,"Refactoring: Introduced TriggeredWatch concept.

Before WatchRecord was used to keep track of an execution of a Watch and used to store actual end results to it before sealing it. (for example build dashboard on the history indices)

The keeping track of an execution has been moved from WatchRecord to TriggeredWatch. If a watch triggers a TriggeredWatch is stored. The TriggeredWatch has its own index and only the watch_id (is part of id), trigger event and state is stored. If the execution of a Watch has finished (regardless if it was successfully) a WatchRecord is stored in a history index and the TriggeredWatch is deleted.

When a watch is getting executedtThe triggered watch is used the create the watch context.

Also the WatchRecord.State has been removed to its own enum class named ExecutionState. The CHECKING value has been removed, because it wasn't really used. The CHECKING state was set when the execution began, but it was never persisted and because of this state has also been removed from triggered watch.

By separating the result of a watch execution we are more flexible to in the future change the document format of WatchRecord. The history indices will be used by users to build analytics on top of watcher. Also the history indices become truely append only indices.

When update the watch status, only change the status part with the update api
Also set the version when we delete the watch on the in memory instance enforce more ensureStarted() in the components

Removed all watch record and result parsing code (actions, conditions, inputs and transforms)

Original commit: elastic/x-pack-elasticsearch@8f5ffdac13873e7d2a9413d6ead737ae043e6a28",https://github.com/elastic/elasticsearch/commit/433566963590feb1d56baa3f29be884a42b03c26
4159,4159.0,4333.0,elastic/elasticsearch,1cfb6a79f1e130dc73ac62a51be7420564a95c82,"Parent/child: refactored _parent field mapper and parent/child queries

* Cut the `has_child` and `has_parent` queries over to use Lucene's query time global ordinal join. The main benefit of this change is that parent/child queries can now efficiently execute if parent/child queries are wrapped in a bigger boolean query. If the rest of the query only hit a few documents both has_child and has_parent queries don't need to evaluate all parent or child documents any more.
* Cut the `_parent` field over to use doc values. This significantly reduces the on heap memory footprint of parent/child, because the parent id values are never loaded into memory.

Breaking changes:
* The `type` option on the `_parent` field can only point to a parent type that doesn't exist yet, so this means that an existing type/mapping can't become a parent type any longer.
* The `has_child` and `has_parent` queries can no longer be use in alias filters.

All these changes, improvements and breaks in compatibility only apply for indices created with ES version 2.0 or higher. For indices creates with ES <= 2.0 the older implementation is used.

It is highly recommended to re-index all your indices with parent and child documents to benefit from all the improvements that come with this refactoring. The easiest way to achieve this is by using the scan and bulk apis using a simple script.

Closes #6107
Closes #8134",https://github.com/elastic/elasticsearch/commit/1cfb6a79f1e130dc73ac62a51be7420564a95c82
4160,4160.0,4334.0,elastic/elasticsearch,1f2c42fd0be06e7a7ab9cf2c5e70d82988a11856,"Mappings: Refactor core index/query time properties into FieldType

Mappers are currently used at both index and query time for deciding
how to ""use"" a field.  For #8871, we need the index wide view of
mappings to have a unified set of settings for each field of a given
name within the index.

This change moves all the current settings (and methods defining
query time behavior) into subclasses of FieldType. In a future
PR, this will allow storing the field type at the index level,
instead of mappers (which can still have settings that differ
per document type).

The change is quite large (I'm sorry). I could not see a way to
migrate to this in a more piecemeal way. I did leave out cutting
over callers of the query methods to using the field type, as
that can be done in a follow up.",https://github.com/elastic/elasticsearch/commit/1f2c42fd0be06e7a7ab9cf2c5e70d82988a11856
4161,4161.0,4335.0,elastic/elasticsearch,61e94617562e8046b0aa6a794d1b2b48b1d5bb65,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/61e94617562e8046b0aa6a794d1b2b48b1d5bb65
4162,4162.0,4336.0,elastic/elasticsearch,bbbeb46488d6add145744c6071d1f0f5796cd55a,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/bbbeb46488d6add145744c6071d1f0f5796cd55a
4163,4163.0,4337.0,elastic/elasticsearch,55fc3a727b0d0ba18ba2852e7e630b07beee29a8,"Core: refactor upgrade API to use transport and write minimum compatible version that the index was upgraded to

In #11072 we are adding a check that will prevent opening of old indices. However, this check doesn't take into consideration the fact that indices can be made compatible with the current version through upgrade API. In order to make compatibility check aware of the upgrade, the upgrade API should write a new setting `index.version.minimum_compatible` that will indicate the minimum compatible version of lucene this index is compatible with and `index.version.upgraded` that will indicate the version of elasticsearch that performed the upgrade.

Closes #11095",https://github.com/elastic/elasticsearch/commit/55fc3a727b0d0ba18ba2852e7e630b07beee29a8
4164,4164.0,4338.0,elastic/elasticsearch,9a50944679f28b433c9d75dd76a0dcd9375484ca,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/9a50944679f28b433c9d75dd76a0dcd9375484ca
4165,4165.0,4339.0,elastic/elasticsearch,dd5ecfc9437fc62bba319dc1ccca836eab75674f,"Merge pull request #11344 from cbuescher/feature/query-refactoring-linkParsers

Query Refactoring: Adding getBuilderPrototype() method to all QueryParsers",https://github.com/elastic/elasticsearch/commit/dd5ecfc9437fc62bba319dc1ccca836eab75674f
4166,4166.0,4340.0,elastic/elasticsearch,8a37cc2a3c2a718d17ed2e4883cb791f214e27c7,"Query refactoring: Adding getBuilderPrototype() method to all QueryParsers

Currently there is a registry for all QueryParsers accessible via the IndicesQueriesModule.
For deserializing nested queries e.g. for the BoolQueryBuilder (#11121) we need to look up
query builders by their name to be able to deserialize using a prototype builder of the concrete
class. This PR adds a getBuilderPrototype() method to each query parser so we can re-use the
parser registry to get the corresponding builder using the query name.

Closes #11344",https://github.com/elastic/elasticsearch/commit/8a37cc2a3c2a718d17ed2e4883cb791f214e27c7
4167,4167.0,4341.0,elastic/elasticsearch,f66987acf2ad29a62e8f98acd6ed57b0d43ae867,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/f66987acf2ad29a62e8f98acd6ed57b0d43ae867
4168,4168.0,4342.0,elastic/elasticsearch,f47d9937155c514cbb236ca091b17400d2dd3c52,"Search: Refactor of MultiValueMode removing apply and reduce

Simplification of MultiValueMode by removing the apply and reduce
methods for each mode. This creates a more consistent environment for
sorting methods since all sorting must now go through select methods.
This allows for better error handling and better encapsulation for
sorting fields with multiple values.

Note that apply and reduce had inconsistencies in the code base
prior to this change since different calls were assuming that the
accumulator for apply was the first input versus the second input.

Also added is an UnsortedNumericDoubleValues interface to allow
customized values to be input into the different sort modes. This
prevents the need for apply/reduce outside of MultiValueMode.

closes #11290",https://github.com/elastic/elasticsearch/commit/f47d9937155c514cbb236ca091b17400d2dd3c52
4169,4169.0,4343.0,elastic/elasticsearch,1c60436d1c4f850273d412ff66ddf7f61a659843,"Merge pull request #11178 from cbuescher/feature/query-refactoring-movename

Query Refactoring: Moving parser NAME constant to corresponding query builder",https://github.com/elastic/elasticsearch/commit/1c60436d1c4f850273d412ff66ddf7f61a659843
4170,4170.0,4344.0,elastic/elasticsearch,283fe90e7a5e734be14967f569db1ea21e7d8846,"Query Refactoring: Moving parser NAME constant to corresponding query builder

As part of the query refactoring, this PR moves the NAME field that currently identifies each query parser to the
corresponding query builder. The reason for this, as discussed in #11121 (comment), is that we need still need to
be able to link parser and builder implementations, but that the query builder is independent of the parser (queries
don't necessarily need to be coverted to XContent any more). Builders don't need to know about their parsers, but
parsers need to be linked to their respective builders.

Closes #11178",https://github.com/elastic/elasticsearch/commit/283fe90e7a5e734be14967f569db1ea21e7d8846
4171,4171.0,4345.0,elastic/elasticsearch,ca702971c3a034974ad78c6d48375361fcd1df9e,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/ca702971c3a034974ad78c6d48375361fcd1df9e
4172,4172.0,4346.0,elastic/elasticsearch,028ff7e49eeb6d0be97233a6dc915627356d8839,"Query refactoring: QueryBuilder to extend Writeable

`QueryBuilder`s need to become streamable over the wire, so we can use them as our own intermediate query representation and send it over the wire. Using `Writeable` rather than `Streamable` allows us to make some fields `final` and delete default constructors needed only for serialization purposes.

Taken the chance also to revise the internals of `IdsQueryBuilder` (modified some internal data type and added deduplication of ids to reduce bits to serialize). Expanded also `IdsQueryBuilderTest`, injected random types and improved comparison.

Moved all query builder tests to leverage lucene's equals and hashcode to compare result of `toQuery` with expected lucene query

Also refactored spanterm and term query tests, more core could be shared.

Also changed `RangeQueryBuilderTest` to remove the need for query rewriting and added some more coverage (we don't test when search context is null only anymore, search context gets now randomly set)

Closes #11191",https://github.com/elastic/elasticsearch/commit/028ff7e49eeb6d0be97233a6dc915627356d8839
4173,4173.0,4347.0,elastic/elasticsearch,b964004a6a3751f6260069475e6ade56bed32b30,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	src/main/java/org/elasticsearch/index/query/GeoShapeQueryParser.java
	src/main/java/org/elasticsearch/index/query/IdsQueryParser.java
	src/main/java/org/elasticsearch/index/query/RangeQueryParser.java
	src/main/java/org/elasticsearch/index/query/SpanTermQueryParser.java
	src/main/java/org/elasticsearch/index/query/TermQueryParser.java",https://github.com/elastic/elasticsearch/commit/b964004a6a3751f6260069475e6ade56bed32b30
4174,4174.0,4348.0,elastic/elasticsearch,ea3c5d5820b8ca7a9c9b1df354f928c729cd63a2,"Merge pull request #11272 from rjernst/refactor/mapper-names

Mappings: Cleanup names handling",https://github.com/elastic/elasticsearch/commit/ea3c5d5820b8ca7a9c9b1df354f928c729cd63a2
4175,4175.0,4349.0,elastic/elasticsearch,8949cb85fbac3e2209b5ca05936c8e2d009809c2,"[RECOVERY] Add engine failure on recovery finalization corruption back

This engine failure on finalization corruption was lost on refactorings and
should be added back.",https://github.com/elastic/elasticsearch/commit/8949cb85fbac3e2209b5ca05936c8e2d009809c2
4176,4176.0,4350.0,elastic/elasticsearch,4131bcbec745485161edd0f304186dbc649b9e90,"Search: Make FilteredQuery a forbidden API.

This commit makes FilteredQuery a forbidden API and also removes some more usage
of the Filter API. There are some remaining code using filters for parent/child
queries but I'm not touching this as they are already being refactored in #6511.",https://github.com/elastic/elasticsearch/commit/4131bcbec745485161edd0f304186dbc649b9e90
4177,4177.0,4351.0,elastic/elasticsearch,1bfa75e3575cd2a3004ffafd4b29c33ddaea3615,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/1bfa75e3575cd2a3004ffafd4b29c33ddaea3615
4178,4178.0,4352.0,elastic/elasticsearch,b99cb2103cf112ee799c4f2a9ecd434dcc5c86ec,"Query Refactoring: Add RangeQueryBuilder and Parser refactoring and test.

Split the parse(QueryParseContext ctx) method into a parsing and a query building part,
adding Streamable support for serialization and hashCode(), equals() for better testing.

This PR also adds test setup for two mappes fields (integer, date) to the BaseQueryTestCase
and introduces helper methods for optional conversion of String fields to BytesRef representation
that is shared with the already refactored BaseTermQueryBuilder.

Relates to #10217
Closes #11108",https://github.com/elastic/elasticsearch/commit/b99cb2103cf112ee799c4f2a9ecd434dcc5c86ec
4179,4179.0,4353.0,elastic/elasticsearch,87d1bdd3fd6faf1d05457aeded65f0b195b89aa8,"Merge pull request #11005 from MaineC/feature/span-term-query-refactoring

Refactors SpanTermQueryBuilder.

Due to similarities with TermQueryBuilder a lot of code was moved into separate abstract classes that can be used by both - TermQueryBuilder and SpanTermQueryBuilder.

Relates to #10217",https://github.com/elastic/elasticsearch/commit/87d1bdd3fd6faf1d05457aeded65f0b195b89aa8
4180,4180.0,4354.0,elastic/elasticsearch,7a7c7f47168d4acfc5bc6663d158642c084f0aa1,"Adjusting SpanTermQuery to work w/ latest changes.

One final refactoring of the SpanTermQuery - makes sure the class hierarchy works again.

Relates to #10217",https://github.com/elastic/elasticsearch/commit/7a7c7f47168d4acfc5bc6663d158642c084f0aa1
4181,4181.0,4355.0,elastic/elasticsearch,65f2641695b04ecd2cd9931b53bf3fbf09140dec,"Refactors SpanTermQueryBuilder.

This attempts to do to SpanTermQueryBuilder what has already been changed for TermQueryBuilder. The commit tries to avoid code duplication where possible by pulling what is the same for both QueryBuilders and tests into separate classes.

Relates to #10217",https://github.com/elastic/elasticsearch/commit/65f2641695b04ecd2cd9931b53bf3fbf09140dec
4182,4182.0,4356.0,elastic/elasticsearch,d7884b662c21eff2235bb62fdb001e831aeaefb0,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/d7884b662c21eff2235bb62fdb001e831aeaefb0
4183,4183.0,4357.0,elastic/elasticsearch,020ad5a72366838e38369b4668447d66f4c5ea4a,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	src/main/java/org/elasticsearch/index/query/BaseQueryBuilder.java
	src/main/java/org/elasticsearch/index/query/FilteredQueryParser.java
	src/main/java/org/elasticsearch/index/query/IdsQueryBuilder.java
	src/main/java/org/elasticsearch/index/query/MatchAllQueryBuilder.java
	src/main/java/org/elasticsearch/index/query/QueryBuilder.java
	src/main/java/org/elasticsearch/index/query/TermQueryBuilder.java",https://github.com/elastic/elasticsearch/commit/020ad5a72366838e38369b4668447d66f4c5ea4a
4184,4184.0,4358.0,elastic/elasticsearch,25b9b7324c9978171f5f0c0aca842398b94afd29,Adapting dummy query builder in SimpleIndexQueryParserTests to refactored interfaces,https://github.com/elastic/elasticsearch/commit/25b9b7324c9978171f5f0c0aca842398b94afd29
4185,4185.0,4359.0,elastic/elasticsearch,922f68d7f286083778a2c94be60d53fe82dea4c9,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/922f68d7f286083778a2c94be60d53fe82dea4c9
4186,4186.0,4360.0,elastic/elasticsearch,c776b03366d411db4775a77d9034af6879b77716,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/c776b03366d411db4775a77d9034af6879b77716
4187,4187.0,4361.0,elastic/elasticsearch,34e98d7dfba409492e8f60bb8a29e1c26494fa61,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/34e98d7dfba409492e8f60bb8a29e1c26494fa61
4188,4188.0,4362.0,elastic/elasticsearch,9e01dedef5518f470f1b2773196654f994f4df7f,"Java api: remove redundant BytesQueryBuilder in favour of using WrapperQueryBuilder internally

BytesQueryBuilder was introduced to be used internally by the phrase suggester and its collate feature. It ended up being exposed via Java api but the existing WrapperQueryBuilder could be used instead. Added WrapperQueryBuilder constructor that accepts a BytesReference as argument.

One other reason why this filter builder should be removed is that it gets on the way of the query parsers refactoring, given that it's the only query builder that allows to build a query through java api without having a respective query parser.

Closes #10919",https://github.com/elastic/elasticsearch/commit/9e01dedef5518f470f1b2773196654f994f4df7f
4189,4189.0,4363.0,elastic/elasticsearch,0c7eb0fddce92f81cf1c04508621d617919be455,"Query refactoring: refactored IdsQueryBuilder and Parser and added test

Split the parse(QueryParseContext ctx) method into a parsing and a query building part,
adding Streamable for serialization and hashCode(), equals() for better testing.
Add basic unit test for Builder and Parser.

Closes #10670",https://github.com/elastic/elasticsearch/commit/0c7eb0fddce92f81cf1c04508621d617919be455
4190,4190.0,4364.0,elastic/elasticsearch,2a84818dd6bad6cdd0e0de197c48db63e4754adf,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/2a84818dd6bad6cdd0e0de197c48db63e4754adf
4191,4191.0,4365.0,elastic/elasticsearch,c98f290d927b15d5840f92ac4e68562e60cd901f,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	src/main/java/org/elasticsearch/index/query/ConstantScoreQueryBuilder.java
	src/main/java/org/elasticsearch/index/query/FilterBuilder.java
	src/main/java/org/elasticsearch/index/query/FilterParser.java
	src/main/java/org/elasticsearch/index/query/GeoShapeQueryBuilder.java
	src/main/java/org/elasticsearch/index/query/QueryParseContext.java
	src/main/java/org/elasticsearch/index/query/TermQueryParser.java
	src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java",https://github.com/elastic/elasticsearch/commit/c98f290d927b15d5840f92ac4e68562e60cd901f
4192,4192.0,4366.0,elastic/elasticsearch,0dbffbebcc55efb9797c4b08884b55423467d917,"Revert ""Filter refactoring: Introduce toFilter() and fromXContent() in FilterBuilders and FilterParsers""

This reverts commit 580ef6f855a761eb5594856fe7719d51375ddb0f given that FilterBuilder and FilterParser are going away with #10985

Conflicts:
	src/main/java/org/elasticsearch/index/query/BaseFilterBuilder.java
	src/main/java/org/elasticsearch/index/query/BaseFilterParser.java
	src/main/java/org/elasticsearch/index/query/BaseFilterParserTemp.java
	src/main/java/org/elasticsearch/index/query/FilterWrappingFilterBuilder.java",https://github.com/elastic/elasticsearch/commit/0dbffbebcc55efb9797c4b08884b55423467d917
4193,4193.0,4367.0,elastic/elasticsearch,bcdc371539f4639ec959301ad04d6ba6aa25f741,"Query Refactoring: Increase coverage of BaseQueryTestCase

We are creating random queries for testing purposes in BaseQueryTestCase and discussed
using more repetitions of the basic test cases (e.g. serialization, fromXContent parsing)
for better coverage if the query has more options.

Closes #11021",https://github.com/elastic/elasticsearch/commit/bcdc371539f4639ec959301ad04d6ba6aa25f741
4194,4194.0,4368.0,elastic/elasticsearch,e44c026fa1a0a4059f3b7f129ee15035d6710376,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/e44c026fa1a0a4059f3b7f129ee15035d6710376
4195,4195.0,4369.0,elastic/elasticsearch,8730b066c10aabf0ae90210a2bbc1c57583b2f3f,"Refactored `WatcherService.State`

- Moved it to its own top level enum `WatcherState`
- Also changed the key holding the current state in the `stats` API to `watcher_state`

Original commit: elastic/x-pack-elasticsearch@2e5ca90f57d9b46650481e0d74391f438a3f22c2",https://github.com/elastic/elasticsearch/commit/8730b066c10aabf0ae90210a2bbc1c57583b2f3f
4196,4196.0,4370.0,elastic/elasticsearch,e0b1e84dcff262e8252ac9f533284bfe3f59f25e,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/e0b1e84dcff262e8252ac9f533284bfe3f59f25e
4197,4197.0,4371.0,elastic/elasticsearch,e14c7a49424bcf41a2f0be5af1ccfedb8761a980,"Query refactoring: TermQueryBuilder refactoring and test

Also extended BaseQueryTestCase so it has helper methods for parsing the query header and
extended the toQuery() test method so it passes down parse context to sublass to make
assertions on side effects calling toQuery() has on the parseContext.

Added validate() method to QueryBuilder and BaseQueryBuilder that can be used to validate
a query and that returns a QueryValidationException containing all collected validation
errors.",https://github.com/elastic/elasticsearch/commit/e14c7a49424bcf41a2f0be5af1ccfedb8761a980
4198,4198.0,4372.0,elastic/elasticsearch,229c372def992944c09e979a5f3e1e21dfb1b91f,Adapted new SpanWithinQueryBuilder/Parser and SpanContainingQueryBuilder/Parser merged in from master to query refactoring base clases.,https://github.com/elastic/elasticsearch/commit/229c372def992944c09e979a5f3e1e21dfb1b91f
4199,4199.0,4373.0,elastic/elasticsearch,1a8ab9a33dd9a0276b107d2a890b6b0138a9c7f1,"Merge branch 'master' into feature/query-refactoring

 Conflicts:
	src/main/java/org/elasticsearch/index/query/FilterBuilder.java
	src/main/java/org/elasticsearch/index/query/QueryParseContext.java",https://github.com/elastic/elasticsearch/commit/1a8ab9a33dd9a0276b107d2a890b6b0138a9c7f1
4200,4200.0,4374.0,elastic/elasticsearch,580ef6f855a761eb5594856fe7719d51375ddb0f,"Filter refactoring: Introduce toFilter() and fromXContent() in FilterBuilders and FilterParsers

 The planned refactoring of search queries requires to split the ""parse()"" method in FilterParsers into two methods, first a ""fromXContent(...)"" method that allows parsing to an intermediate filter representation (currently called FooFilterBuilder) and second a ""Filter toFilter(...)"" method on these intermediate representations that create the actual lucene filters.
This PR is a first step in that direction as it introduces the interface changes necessary for the further refactoring. It introduces the new interface methods while for now keeping the old Builder/Parsers still in place by delegating the new ""toFilter()"" implementations to the existing ""parse()"" methods, and by introducing a ""catch-all"" ""fromXContent()"" implementation in a BaseFilterParser that returns a temporary FilterBuilder wrapper implementation. This allows us to refactor the existing FilterBuilders step by step while already being able to start refactoring queries and filters with inner queries/filters.",https://github.com/elastic/elasticsearch/commit/580ef6f855a761eb5594856fe7719d51375ddb0f
4201,4201.0,4375.0,elastic/elasticsearch,1cbc7c619f6d8918c8b4e50624c62173a8dd7197,Query refactoring: updated javadocs for new methods and added missing @Overrides annotations,https://github.com/elastic/elasticsearch/commit/1cbc7c619f6d8918c8b4e50624c62173a8dd7197
4202,4202.0,4376.0,elastic/elasticsearch,d596f5cc45284a60a88276b90f2bb1937415307b,"Decouple recoveries from engine flush

In order to safely complete recoveries / relocations we have to keep all operation done since the recovery start at available for replay. At the moment we do so by preventing the engine from flushing and thus making sure that the operations are kept in the translog. A side effect of this is that the translog keeps on growing until the recovery is done. This is not a problem as we do need these operations but if the another recovery starts concurrently it may have an unneededly long translog to replay. Also, if we shutdown the engine for some reason at this point (like when a node is restarted)  we have to recover a long translog when we come back.

To void this, the translog is changed to be based on multiple files instead of a single one. This allows recoveries to keep hold to the files they need while allowing the engine to flush and do a lucene commit (which will create a new translog files bellow the hood).

Change highlights:
- Refactor Translog file management to allow for multiple files.
- Translog maintains a list of referenced files, both by outstanding recoveries and files containing operations not yet committed to Lucene.
- A new Translog.View concept is introduced, allowing recoveries to get a reference to all currently uncommitted translog files plus all future translog files created until the view is closed. They can use this view to iterate over operations.
- Recovery phase3 is removed. That phase was replaying operations while preventing new writes to the engine. This is unneeded as standard indexing also send all operations from the start of the recovery  to the recovering shard. Replay all ops in the view acquired in recovery start is enough to guarantee no operation is lost.
- IndexShard now creates the translog together with the engine. The translog is closed by the engine on close. ShadowIndexShards do not open the translog.
- Moved the ownership of translog fsyncing to the translog it self, changing the responsible setting to `index.translog.sync_interval` (was `index.gateway.local.sync`)

Closes #10624",https://github.com/elastic/elasticsearch/commit/d596f5cc45284a60a88276b90f2bb1937415307b
4203,4203.0,4377.0,elastic/elasticsearch,79cac8258bfb23760da1b75225e8ab1adf3a85a4,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/79cac8258bfb23760da1b75225e8ab1adf3a85a4
4204,4204.0,4378.0,elastic/elasticsearch,0fd7ed4bcddc833aac32f5a403a00f1a1c22d970,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java
	src/main/java/org/elasticsearch/index/query/GeoShapeQueryParser.java
	src/main/java/org/elasticsearch/index/query/HasParentQueryParser.java
	src/main/java/org/elasticsearch/index/query/QueryBuilder.java
	src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilder.java",https://github.com/elastic/elasticsearch/commit/0fd7ed4bcddc833aac32f5a403a00f1a1c22d970
4205,4205.0,4379.0,elastic/elasticsearch,280732a120a4cda45bd2581e0a21e3badb17dd93,"Better handling of sensitive data in registered watches and watcher settings

A watch may contain sensitive data that typically you don't want to expose in plain text. Exposing means:
 - storing it as plain text in the `.watches` and `.watch_history` indices
 - storing it in memory in plain text (can be access via mem dump)
 - returning it to the user via API in plain text

Examples of such sensitive data:
 - The `password` for the email service (can be configured on the watch itself)
 - The `password` for http input when using basic auth
 - The `passowrd` for webhook action when using basic auth

A new `SecretService` (you heard it right... secret service) was added to handel the secrets across the board. When a watch is first added to watcher, this service converts all the sensitive data to secrets. From that moment on, all sensitive data associated with the watch (whether in stored in the index or in memory) is hidden behind the secret. This service is also used to ""reveal"" the original sensitive data on-demand when needed (for example, when the email is sent, it is sent with the original text).

There are two implementations for the `SecretService`. The default one is ""plain text"" where the created secrets don't really hide anything. The second implementation is based on Shield. If Shield is installed and enabled, the `ShieldSecretService` is used which uses shield's crypto service to potentially encrypt the sensitive data (only potentially because Shield's system key must be defined for encryption to take effect, without the system key, the crypto service will not encrypt and instead return the sensitive data in plain text)

Note, even when Shield is installed, the encryption of sensitive data will only be applied if the `watcher.shield.encrypt_sensitive_data` setting is set to `true`. By default it is set to `false`.

The `get watch` and `execute watch` APIs were updated to filter out sensitive data (using special ""hide secrets"" parameter).

When shield is integrated, we use shield's settings filter to filter out sensitive settings from the REST nodes info API (when shield is not installed or enabled, we don't do this filtering).

For this change several other refactoring needed to take place
 - The http auth codebase was refactored to be more modular. Just like with other modular constructs in watcher, we separated `HttpAuth` from `ApplicableHttpAuth` where the former is the configuration construct and tha latter is the applicable (""executable"") construct.
 - Changed `WatchStore#put` to accept a watch (instead of the watch source). That's more natural way of looking at a store. Also, a `Watch` can now create and return itself as `ByteReference`. In addition, we now don't directly store the watch source as it was sent by the user, instead, we first parse it to a watch (important step to both validate the source and convert all sensitive data to secrets) and then serialize the watch back to `ByteReference`. This way we're sure that only the secrets are stored and not the original sensitive data.
 - All `ToXContent` implementation were updated to properly propagate the `Params`

Docs were added to the Shield Integration chapter

Original commit: elastic/x-pack-elasticsearch@4490fb0ab8218ed3fe2fdc82396762b90b47a0c7",https://github.com/elastic/elasticsearch/commit/280732a120a4cda45bd2581e0a21e3badb17dd93
4206,4206.0,4380.0,elastic/elasticsearch,f599c237bdee7624bd5a67cf26828ccac32dbcc7,"Security manager cleanups

1. initialize SM after things like mlockall. Their tests currently
   don't run with securitymanager enabled, and its simpler to just
   run mlockall etc first.
2. remove redundant test permissions (junit4.childvm.cwd/temp). This
   is alreay added as java.io.tmpdir.
3. improve tests to load the generated policy with some various
   settings and assert things about the permissions on configured
   directories.
4. refactor logic to make it easier to fine-grain the permissions later.
   for example we currently allow write access to conf/. In the future
   I think we can improve testing so we are able to make improvements here.",https://github.com/elastic/elasticsearch/commit/f599c237bdee7624bd5a67cf26828ccac32dbcc7
4207,4207.0,4381.0,elastic/elasticsearch,75ff5b5a89a179d006b7b57c84b8c9130b240e57,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/75ff5b5a89a179d006b7b57c84b8c9130b240e57
4208,4208.0,4382.0,elastic/elasticsearch,afdab84f2df7c3bec2db81b25432fe76f25f3a98,Refactor all actions into inner actions in SyncedFlushService. Add an inflight counter action. Add SyncedFlushResult counter,https://github.com/elastic/elasticsearch/commit/afdab84f2df7c3bec2db81b25432fe76f25f3a98
4209,4209.0,4383.0,elastic/elasticsearch,8dbb79c96af8b2d7efc10c8dc3552cf0e2042407,"refactor and cleanup transport request handling

This refactoring and cleanup is that each request handler ends up
implementing too many methods that can be provided when the request handler itself
is registered, including a prototype like class that can be used to instantiate
new request instances for streaming.
closes #10730",https://github.com/elastic/elasticsearch/commit/8dbb79c96af8b2d7efc10c8dc3552cf0e2042407
4210,4210.0,4384.0,elastic/elasticsearch,5bdfdc42d99b12e7999fb36c8f1a72d43d7b5606,"Refactor TransportShardReplicationOperationAction

Refactor TransportShardReplicationOperationAction state management into clear separate Primary phase and Replication phase. The primary phase is responsible for routing the request to the node holding the primary, validating it and performing the operation on the primary. The Replication phase is responsible for sending the request to the replicas and managing their responses.

This also adds unit test infrastructure for this class, and some basic tests. We can extend later as we continue developing.

Closes #10749",https://github.com/elastic/elasticsearch/commit/5bdfdc42d99b12e7999fb36c8f1a72d43d7b5606
4211,4211.0,4385.0,elastic/elasticsearch,ec8c9046b3721eec038af88a59ffcbe9f719c71d,"Refactored life cycle starting.

* The validation happens separately from the actual starting and loading. Also the validation happens on the cluster update thread, so that we don't miss any cluster state update.
* The starting/loading part happens on a forked thread, but if it fails then it always retry after a small timeout.
* Simplified the starting code, so that we don't need the callback interface.

Closes elastic/elasticsearch#212

Original commit: elastic/x-pack-elasticsearch@b5cd48e5bb12404e9feb6ed66978a9349a235c12",https://github.com/elastic/elasticsearch/commit/ec8c9046b3721eec038af88a59ffcbe9f719c71d
4212,4212.0,4386.0,elastic/elasticsearch,0865d220f4d55d9dca858710d2f8240b0c87e7d2,"Remove crazy permissions for filestores, ssds, now that
this logic has been refactored.

Log a warning when security is disabled.",https://github.com/elastic/elasticsearch/commit/0865d220f4d55d9dca858710d2f8240b0c87e7d2
4213,4213.0,4387.0,elastic/elasticsearch,05138151a2dfae56ee88a2bdc0720ca4db7227b2,"Merge pull request #10755 from rmuir/filestores

refactor SSD/FileStore logic out of NodeEnvironment",https://github.com/elastic/elasticsearch/commit/05138151a2dfae56ee88a2bdc0720ca4db7227b2
4214,4214.0,4388.0,elastic/elasticsearch,a66cf85f37a016d30a473dd29951e05c5857f24d,refactor SSD/FileStore logic out of NodeEnvironment,https://github.com/elastic/elasticsearch/commit/a66cf85f37a016d30a473dd29951e05c5857f24d
4215,4215.0,4389.0,elastic/elasticsearch,345f610bdf089098e4ffd9636fe6dc969e2b7dba,"Cleanup and Refactored Templates

Mainly how templates read/write themselves from/to xcontent. Instead of using `text`, use `template`

Original commit: elastic/x-pack-elasticsearch@0d6f3175397c00dc469847852d7649aaa719dba5",https://github.com/elastic/elasticsearch/commit/345f610bdf089098e4ffd9636fe6dc969e2b7dba
4216,4216.0,4390.0,elastic/elasticsearch,ae1d4021c0ac13454097f3f84d273a6f806c9ef6,"Cleanup and Refactoring

- Changed watch `name` to watch `id
- `TriggerEngine.Job#name` -> `TriggerEngine.Job#id`
- Removed `Trigger.SourceBuilder` in favor of `Trigger.Builder`
- Fixed compile warnings in `EmailTemplate`

Original commit: elastic/x-pack-elasticsearch@b7fb23712c05f83030842f14ac55caee4008605d",https://github.com/elastic/elasticsearch/commit/ae1d4021c0ac13454097f3f84d273a6f806c9ef6
4217,4217.0,4391.0,elastic/elasticsearch,d6dc563c6f211e4fa4f8093780b5050d56c7742b,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/d6dc563c6f211e4fa4f8093780b5050d56c7742b
4218,4218.0,4392.0,elastic/elasticsearch,690af790b284b2fc20a9376b91e1e808beae84cd,"Cleanup and Refactoring of the transforms

* Split the transform into two constructs: `Transform` and `ExecutableTransform`. The former holds all the transform configuration, the latter can execute the transform based on that configuration (an executable transform holds a transform)
 - This makes the code clearer to understand and maintain.
 - This also enabled to pull some common implementation code into the `ExecutableTransform` and by that reduce the implementation details of each executable to the minimum required.

* Also, extracted the `Transform.Parser` to its own top level class, and renamed it to - `TransformFactory`. The main thing that the factory does is: 1) delegate to the parsing to the `Transform` class, 2) construct & wire up the `ExecutableTransform`.

* With the introduction of `Transform`, we no longer need the `SourceBuilder` for transforms. Instead, we have `Transform.Builder` that help you build a transform. This is much more intuitive from the client perspective.

Original commit: elastic/x-pack-elasticsearch@f6ee0d0c75079a6f31095833e20f68973c8a6ef8",https://github.com/elastic/elasticsearch/commit/690af790b284b2fc20a9376b91e1e808beae84cd
4219,4219.0,4393.0,elastic/elasticsearch,3f26a1b2e05afb2e404deddf4015f6b141ceafed,"Adds initial schedule engine implementation

- `TimerScheduleTriggerEngine` - a single threaded Java `Timer`based scheduler. ""Ticks"" every second and checks all the registered schedules.

- `SimpleTickerScheduleTriggerEngine` - a single threaded scheduler. ""Ticks"" every second and checks all the registered schedules

- `SchedulerScheduleTriggerEngine` - a single threaded engine based on Java's schedule executor service. Here, every job is added as a scheduled task to the executor and each job is managing its own execution times.

- `HashWheelScheduleTriggerEngine` - a single threaded engine based on Netty's `HashWheelTimer`. Like with the `scheduler` above, every job is added as a scheduled task to the executor and each job is managing its own execution times.

Also:

- Added an undocumented feature to configure the schedule engine in the settings using `watcher.trigger.schedule.engine` (optional values right now are `quartz`, `simple`, `timer`, `hashwheel` and `scheduler`)
- `Cron` is a fork/copy of quartz `CronExpression`.. a bit cleaned up though.
- `Schedule` now exposes `nextScheduledTimeAfter` to return the next scheduled time after the given one.
- `CronnableSchedule` is now based on `Cron` (this exposed bugs in the schedule tests where we generated invalid cron expression. Now, since `Cronnable` creates the actual cron, validation is in place to make sure only valid expressions are created)
- While at it... refactored how the thread pool settings are set. Removed it from the plugin class, now each module is responsible for the settings of its own TPs. Also, if the thread pools are already configured in node settings we don't configure our default ones. This will enable users to configure the TPs in `elasticsearch.yml`
- Also updated `CronEvalTool` to work with `DateTime` construct (instead of java's `Date`)

Original commit: elastic/x-pack-elasticsearch@40d107c66ed45d1a00748eda0ebf3043fa1ba620",https://github.com/elastic/elasticsearch/commit/3f26a1b2e05afb2e404deddf4015f6b141ceafed
4220,4220.0,4394.0,elastic/elasticsearch,dd679a3a3842aeb34326cce7bdb2bcdaa70cfafc,"Upgrade to lucene-5.2-snapshot-1675363.

This snapshot contains in particular LUCENE-6446 (refactored explanation API)
and LUCENE-6448 (better equals/hashcode for filters).",https://github.com/elastic/elasticsearch/commit/dd679a3a3842aeb34326cce7bdb2bcdaa70cfafc
4221,4221.0,4395.0,elastic/elasticsearch,eea7ee5d25e0fceb5eb61686a79cdf5f3ce18898,Query refactoring: Add refactored MatchAllQuery and BaseQueryTestCase,https://github.com/elastic/elasticsearch/commit/eea7ee5d25e0fceb5eb61686a79cdf5f3ce18898
4222,4222.0,4396.0,elastic/elasticsearch,6c32279cdd9265453df050ac5edeb5fc04c5dd36,"Merge branch 'master' into feature/query-refactoring

Conflicts:
	src/main/java/org/elasticsearch/index/query/IdsQueryParser.java",https://github.com/elastic/elasticsearch/commit/6c32279cdd9265453df050ac5edeb5fc04c5dd36
4223,4223.0,4397.0,elastic/elasticsearch,ebda02438e3b86234bda47c188384d52e83ab275,"Cleanup and Refactoring of the inputs

* Split the action into two constructs: `Input` and `ExecutableInput`. The former holds all the input configuration, the latter can execute the input based on that configuration (an executable input holds an input)
 - This the code clearer to understand and maintain.
 - This also enabled to pull some common implementation code into the `ExecutableInput` and by that reduce the implementation details of each executable to the minimum required.

* Also, extracted the `Input.Parser` to its own top level class, and renamed it to - `InputFactory`. The main thing that the factory does is: 1) delegate to the parsing to the `Input` class, 2) construct & wire up the `ExecutableInput`.

* With the introduction of `Input`, we no longer need the `SourceBuilder` for inputs. Instead, we have an `Input.Builder` that help you build an input. This is much more intuitive from the client perspective.

* Changed the `request` xcontent field in the http input result to `sent_request` for clarity
* Changed the `request` xcontent field in the search input result to `executed_request` for clarity

Original commit: elastic/x-pack-elasticsearch@63b93f9c7b38649ef99ed6800c1c4a2f966fbb85",https://github.com/elastic/elasticsearch/commit/ebda02438e3b86234bda47c188384d52e83ab275
4224,4224.0,4398.0,elastic/elasticsearch,3a04d3ca91b7e72c2965e56a20bca74b0f0e8ccb,"Mappings: Remove dead code after previous refactorings

This is mostly removing code that handled deletion of types, which was
removed in #8877.

closes #10666",https://github.com/elastic/elasticsearch/commit/3a04d3ca91b7e72c2965e56a20bca74b0f0e8ccb
4225,4225.0,4399.0,elastic/elasticsearch,59d4dcd612cb7a646bb2e495c5b9b1f40f9c35da,Merge branch 'master' into feature/query-refactoring,https://github.com/elastic/elasticsearch/commit/59d4dcd612cb7a646bb2e495c5b9b1f40f9c35da
4226,4226.0,4400.0,elastic/elasticsearch,f54c610c29026b910f17f2d13609b87e615b0574,"Cleanup and Refactoring of the conditions

* Split the action into two constructs: `Condition` and `ExecutableCondition`. The former holds all the condition configuration, the latter can execute the condition based on that configuration (an executable condition holds a condition)
 - This the code clearer to understand and maintain.
 - This also enabled to pull some common implementation code into the `ExecutableCondition` and by that reduce the implementation details of each executable to the minimum required.

* Also, extracted the `Condition.Parser` to its own top level class, and renamed it to - `ConditionFactory`. The main thing that the factory does is: 1) delegate to the parsing to the `Condition` class, 2) construct & wire up the `ExecutableCondition`.

* With the introduction of `Condition`, we no longer need the `SourceBuilder` for conditions. Instead, we have `Condiiton.Builder` that help you build condition. This is much more intuitive from the client perspective.

* Renamed `always_true` condition type to `always`
* Renamed `always_false` condition type to `never`

* Updated docs (also added docs for the `never` condition)

Original commit: elastic/x-pack-elasticsearch@0f8eb494ca831623ff8210afd0b943344cbe01f0",https://github.com/elastic/elasticsearch/commit/f54c610c29026b910f17f2d13609b87e615b0574
4227,4227.0,4401.0,elastic/elasticsearch,a4a4f19d13c8a76e84dde5fa70dd8f1c83a878c2,"Query refactoring: Introduce toQuery() and fromXContent() in QueryBuilders and QueryParsers

The planed refactoring of search queries layed out in #9901 requires to split the ""parse()""
method in QueryParsers into two methods, first a ""fromXContent(...)"" method that allows parsing
to an intermediate query representation (currently called FooQueryBuilder) and second a
""Query toQuery(...)"" method on these intermediate representations that create the actual lucene queries.

This PR is a first step in that direction as it introduces the interface changes necessary for the further
refactoring. It introduces the new interface methods while for now keeping the old Builder/Parsers still
in place by delegating the new ""toQuery()"" implementations to the existing ""parse()"" methods, and by
introducing a ""catch-all"" ""fromXContent()"" implementation in a BaseQueryParser that returns a temporary
QueryBuilder wrapper implementation. This allows us to refactor the existing QueryBuilders step by step
while already beeing able to start refactoring queries with nested inner queries.

Closes #10580",https://github.com/elastic/elasticsearch/commit/a4a4f19d13c8a76e84dde5fa70dd8f1c83a878c2
4228,4228.0,4402.0,elastic/elasticsearch,13573d6c6da02558313697e42749590879d1dacd,"Cleanup and Refactoring of the actions

* Split the action into two constructs: `Action` and `ExecutableAction`. The former holds all the action configuration, the latter can execute the action based on that configuration (an executable action holds an action)
 - This the code clearer to understand and maintain.
 - This also enabled to pull some common implementation code into the `ExecutableAction` and by that reduce the implementation details of each executable to the minimum required.

* Also, extracted teh `Action.Parser` to its own top level class, and renamed it to - `ActionFactory`. The main thing that the parser does is: 1) delegate to the parsing to the `Action` class, 2) construct & wire up the `ExecutableAction`.

* Cleaned up and aligned the log messages across all actions. Introduced
 - introduced parameterized exceptions (now the exception messages are constructed exactly like that log messages - using `{}` params)
 - Introduced the notion of `Wid` - Watch (execution) ID`. Now the `WatchExecutionContext` and the `WatchRecord` hold this construct as their ID (instead of an opaque string). The Wid has a well defined structure where it's prefixed with the watch id. This is very helpful to provide context to parsing the different constructs (actions in our case) as when parsing error occurs we can point directly to the place were we found the error (ie. watch id, record id and action id).

* With the introduction of `Action`, we no longer need the `SourceBuilder` for actions. Instead, we have `Action.Builder` that help you build actions. This is much more intuitive from the client perspective.

Original commit: elastic/x-pack-elasticsearch@df22da4e1f08ddf621184cb7ea9276f093c148bf",https://github.com/elastic/elasticsearch/commit/13573d6c6da02558313697e42749590879d1dacd
4229,4229.0,4403.0,elastic/elasticsearch,3e9c10907957feb0a3199e1e677df0400b5e5433,"This commit contains a major refactoring to some of the core constructs in watcher.

- What used to be the `HistoryService` is not named `ExecutionService`. In fact, it always was an execution context and was simply named wrong and place in the wrog place in the code.

- A new `execution` package was created, to contain all execution related contsructs which includes the new `ExecutionService`, `WatchExecutionContext`, `WatchExecutor`, `InternalWatchExecutor`.

- The `WatchExecutionContext` role in the execution process was extended to also enable it to ""control"" the execution. ""control"" in the sence that it can now provide default results to some of the contructs (for example, it can provide a default input and by that skip the execution of the input). Also, it enables simulating actions (more bellow).

- There are two implementations now of the `WatchExecutionContext`. A `TriggeredExecutionContext` which is used when the trigger service triggers the execution of a watch. And `ManualExecutionContext` enabling to manually execute a watch. The latter, can be configured such that different phases in the normal executions of the watch can be skipped. This is great for simulating a watch execution, that is, executing a watch without actually fully executing the actions (e.g. create the emails that the email action would have normally send, but without actually sending it). Both of these new context implementations also sit in the new `execution` package.

- With the changes described above, the actions now consult the execution context before actually performing their tasks. If the execution context indicates that the action should run in a ""simulated"" mode, the action will semi execute and return a `Simulated` result. Each action type defines what is ""simulated mode"" for it. For example, the email action creates the email and renders all its templats but doesn't actually send it, the returned `Email.Simulated` result will contain the email that would have been sent if it was running under normal conditions (non-simulated mode). The `index` action, doesn't actually indexes anything (just creating the index request that would have been executed), and the `webhook` action only creates the HTTP request but doesn't actually send it.

- A new `execute` API was introduced that utilizes all of the above and enables to manually execute registered watches. The API provides all the tools to control what actions are simulated and enables skipping the execution of the watch `input` and `condition`. By default it also skip the recording of the execution in the watch history (though this can be enabled if desired). This API is exposed both by the Java `WatcherClient` and via a dedicated REST endpoint. (documentation around this new API was added as well)

Closes elastic/elasticsearch#149

Original commit: elastic/x-pack-elasticsearch@ee8fe0490a093faa7b62a8dcd8534cd2c9d30242",https://github.com/elastic/elasticsearch/commit/3e9c10907957feb0a3199e1e677df0400b5e5433
4230,4230.0,4404.0,elastic/elasticsearch,6b16b32174063a17d9755960479766358bfc3700,"Aggregations: Fix multi-level breadth-first aggregations.

The refactoring in #9544 introduced a regression that broke multi-level
aggregations using breadth-first. This was due to sub-aggregators creating
deferred collectors before their parent aggregator and then the parent
aggregator trying to collect sub aggregators directly instead of going through
the deferred wrapper.

This commit fixes the issue but we should try to simplify all the pre/post
collection logic that we have.

Also `breadth_first` is now automatically ignored if the sub aggregators need
scores (just like we ignore `execution_mode` when the value does not make sense
like using ordinals on a script).

Close #9823",https://github.com/elastic/elasticsearch/commit/6b16b32174063a17d9755960479766358bfc3700
4231,4231.0,4405.0,elastic/elasticsearch,78d86bcf411ebd940e10539f039282b3d115c5a0,"[STATE] Refactor state format to use incremental state IDs

Today there is a chance that the state version for shard, index or cluster
state goes backwards or is reset on a full restart etc. depending on
several factors not related to the state. To prevent any collisions
with already existing state files and to maintain write-once properties
this change introductes an incremental state ID instead of using the plain
state version. This also fixes a bug when the previous legacy state had a
greater version than the current state which causes an exception on node
startup or if left-over files are present.

Closes #10316",https://github.com/elastic/elasticsearch/commit/78d86bcf411ebd940e10539f039282b3d115c5a0
4232,4232.0,4406.0,elastic/elasticsearch,171e415a473859cdeabf38304e373f6c5e2dc081,"Tests: Assert that we do not leak SearchContexts.

Even if there is a background thread that periodically closes search contexts
that seem unused (every minute by default), it is important to close search
contexts as soon as possible in order to not keep unnecessary open files or
to prevent segments from being deleted.

This check would help ensure that refactorings of the SearchContext management
like #9296 are correct.",https://github.com/elastic/elasticsearch/commit/171e415a473859cdeabf38304e373f6c5e2dc081
4233,4233.0,4407.0,elastic/elasticsearch,a1505e71649c54c2a8892a2a441b56a3837f4c4a,"Tests: Assert that we do not leak SearchContexts.

Even if there is a background thread that periodically closes search contexts
that seem unused (every minute by default), it is important to close search
contexts as soon as possible in order to not keep unnecessary open files or
to prevent segments from being deleted.

This check would help ensure that refactorings of the SearchContext management
like #9296 are correct.",https://github.com/elastic/elasticsearch/commit/a1505e71649c54c2a8892a2a441b56a3837f4c4a
4234,4234.0,4408.0,elastic/elasticsearch,91ce4830b71fc6008b5c9bd69ee0a950e1aed206,"[ENGINE] Inc store reference before reading segments info

If a tragic even happens while we are reading the segments info from the
store the store might have been closed concurrently. We had this
behavior before and was lost in a refactoring.",https://github.com/elastic/elasticsearch/commit/91ce4830b71fc6008b5c9bd69ee0a950e1aed206
4235,4235.0,4409.0,elastic/elasticsearch,565ee05cda600b8cdb595e56039ad1370510832e,"[ENGINE] Inc store reference before reading segments info

If a tragic even happens while we are reading the segments info
from the store the store might have been closed concurrently. We had this behavior
before and was lost in a refactoring.",https://github.com/elastic/elasticsearch/commit/565ee05cda600b8cdb595e56039ad1370510832e
4236,4236.0,4410.0,elastic/elasticsearch,0cec37f3c3f191a775ebcef833a00d57d1f0fe94,"Recovery: unify RecoveryState management to IndexShard and clean up semantics

We keep track of the current stage of recovery using an instance of RecoveryState which is stored on the relevant IndexShard. At the moment changes to this object are made in many places of the code, which are charged of doing it in the right order, keeping track of timers and many more. Also the changes to shard state are decoupled from the recovery stages which caused #9503.

This PR refactors this and brings all of the changes into IndexShard. It also makes all recovery follow the exact same stages and shortcut some. This is in order to keep things simple and always the same (those shortcuts didn't add anything, we ended doing it all anyway).

Also, all timer management is now folded into RecoveryState and unit tests are added.

This closes #9503 by moving the shard to post recovery only once the recovery is done (before they were decoupled), meaning that master promotion of the target shard to started can not cancel the recovery.

Closes #9902",https://github.com/elastic/elasticsearch/commit/0cec37f3c3f191a775ebcef833a00d57d1f0fe94
4237,4237.0,4411.0,elastic/elasticsearch,432f5788076270fab3ea7d946b03b3a0ded694e5,"Internal: refactor settings filtering

Refactor how settings filters are handled. Instead of specifying settings filters as filtering class, settings filters are now specified as list of settings that needs to be filtered out. Regex syntax is supported. This is breaking change and will require small change in plugins that are using settingsFilters. This change is needed in order to simplify cluster state diff implementation.

Contributes to #6295",https://github.com/elastic/elasticsearch/commit/432f5788076270fab3ea7d946b03b3a0ded694e5
4238,4238.0,4412.0,elastic/elasticsearch,0fa5b87fddc10ce487299c10fd3a833962058959,"Add missing @Override annotations.

These help a lot when refactoring, upgrading lucene, etc, and
can prevent code duplication (as you get a compile error for outdated stuff).

Closes #9832.",https://github.com/elastic/elasticsearch/commit/0fa5b87fddc10ce487299c10fd3a833962058959
4239,4239.0,4413.0,elastic/elasticsearch,8e0907024666ceaaa78faef9a89926c3ded01992,"[RESTORE] Refactor how restore cleans up files after snapshot was restored

Today we restore files by running through the directory removeing all files
not in the snapshot. Some files in that direcotry might belong there even though
we remove them. This commit moves the responsiblity of cleaning up pending files
to lucene by utilizing IndexWriter#IndexFileDeleter",https://github.com/elastic/elasticsearch/commit/8e0907024666ceaaa78faef9a89926c3ded01992
4240,4240.0,4414.0,elastic/elasticsearch,eb666f7f50e8510ff6afbdfc34b863f3f174751b,"Add shadow replicas for shared filesystems

Squashed commit of the following:

commit 20835037c98e7d2fac4206c372717a05a27c4790
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 18 15:27:17 2015 -0700

    Use Enum for ""_primary"" preference

commit 325acbe4585179190a959ba3101ee63b99f1931a
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 18 14:32:41 2015 -0700

    Use ?preference=_primary automatically for realtime GET operations

commit edd49434af5de7e55928f27a1c9ed0fddb1fb133
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 18 14:32:06 2015 -0700

    Move engine creation into protected createNewEngine method

commit 67a797a9235d4aa376ff4af16f3944d907df4577
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 18 13:14:01 2015 -0700

    Factor out AssertingSearcher so it can be used by mock Engines

commit 62b0c28df8c23cc0b8205b33f7595c68ff940e2b
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 18 11:43:17 2015 -0700

    Use IndexMetaData.isIndexUsingShadowReplicas helper

commit 1a0d45629457578a60ae5bccbeba05acf5d79ddd
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 18 09:59:31 2015 -0700

    Rename usesSharedFilesystem -> isOnSharedFilesystem

commit 73c62df4fc7da8a5ed557620a83910d89b313aa1
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 18 09:58:02 2015 -0700

    Add MockShadowEngine and hook it up to be used

commit c8e8db473830fce1bdca3c4df80a685e782383bc
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 18 09:45:50 2015 -0700

    Clarify comment about pre-defined mappings

commit 60a4d5374af5262bd415f4ef40f635278ed12a03
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 18 09:18:22 2015 -0700

    Add a test for shadow replicas that uses field data

commit 7346f9f382f83a21cd2445b3386fe67472bc3184
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 18 08:37:14 2015 -0700

    Revert changes to RecoveryTarget.java

commit d90d6980c9b737bd8c0f4339613a5373b1645e95
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 18 08:35:44 2015 -0700

    Rename `ownsShard` to `canDeleteShardContent`

commit 23001af834d66278ac84d9a72c37b5d1f3a10a7b
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 18 08:35:25 2015 -0700

    Remove ShadowEngineFactory, add .newReadOnlyEngine method in EngineFactory

commit b64fef1d2c5e167713e869b22d388ff479252173
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 18 08:25:19 2015 -0700

    Add warning that predefined mappings should be used

commit a1b8b8cf0db49d1bd1aeb84e51491f7f0de43b59
Author: Lee Hinman <lee@writequit.org>
Date:   Tue Feb 17 14:31:50 2015 -0700

    Remove unused import and fix index creation example in docs

commit 0b1b852365ceafc0df86866ac3a4ffb6988b08e4
Merge: b9d1fed a22bd49
Author: Lee Hinman <lee@writequit.org>
Date:   Tue Feb 17 10:56:02 2015 -0700

    Merge remote-tracking branch 'refs/remotes/origin/master' into shadow-replicas

commit b9d1fed25ae472a9dce1904eb806702fba4d9786
Merge: 4473e63 41fd4d8
Author: Lee Hinman <lee@writequit.org>
Date:   Tue Feb 17 09:02:27 2015 -0700

    Merge remote-tracking branch 'refs/remotes/origin/master' into shadow-replicas

commit 4473e630460e2f0ca2a2e2478f3712f39a64c919
Author: Lee Hinman <lee@writequit.org>
Date:   Tue Feb 17 09:00:39 2015 -0700

    Add asciidoc documentation for shadow replicas

commit eb699c19f04965952ae45e2caf107124837c4654
Author: Simon Willnauer <simonw@apache.org>
Date:   Tue Feb 17 16:15:39 2015 +0100

    remove last nocommit

commit c5ece6d16d423fbdd36f5d789bd8daa5724d77b0
Author: Simon Willnauer <simonw@apache.org>
Date:   Tue Feb 17 16:13:12 2015 +0100

    simplify shadow engine

commit 45cd34a12a442080477da3ef14ab2fe7947ea97e
Author: Simon Willnauer <simonw@apache.org>
Date:   Tue Feb 17 11:32:57 2015 +0100

    fix tests

commit 744f228c192602a6737051571e040731d413ba8b
Author: Simon Willnauer <simonw@apache.org>
Date:   Tue Feb 17 11:28:12 2015 +0100

    revert changes to IndexShardGateway - these are leftovers from previous iterations

commit 11886b7653dabc23655ec76d112f291301f98f4a
Author: Simon Willnauer <simonw@apache.org>
Date:   Tue Feb 17 11:26:48 2015 +0100

    Back out non-shared FS code. this will go in in a second iteration

commit 77fba571f150a0ca7fb340603669522c3ed65363
Merge: e8ad614 2e3c6a9
Author: Simon Willnauer <simonw@apache.org>
Date:   Tue Feb 17 11:16:46 2015 +0100

    Merge branch 'master' into shadow-replicas

    Conflicts:
    	src/main/java/org/elasticsearch/index/engine/Engine.java

commit e8ad61467304e6d175257e389b8406d2a6cf8dba
Merge: 48a700d 1b8d8da
Author: Simon Willnauer <simonw@apache.org>
Date:   Tue Feb 17 10:54:20 2015 +0100

    Merge branch 'master' into shadow-replicas

commit 48a700d23cff117b8e4851d4008364f92b8272a0
Author: Simon Willnauer <simonw@apache.org>
Date:   Tue Feb 17 10:50:59 2015 +0100

    add test for failing shadow engine / remove nocommit

commit d77414c5e7b2cde830a8e3f70fe463ccc904d4d0
Author: Simon Willnauer <simonw@apache.org>
Date:   Tue Feb 17 10:27:56 2015 +0100

    remove nocommits in IndexMetaData

commit abb696563a9e418d3f842a790fcb832f91150be2
Author: Simon Willnauer <simonw@apache.org>
Date:   Mon Feb 16 17:05:02 2015 +0100

    remove nocommit and simplify delete logic

commit 82b9f0449108cd4741568d9b4495bf6c10a5b019
Author: Simon Willnauer <simonw@apache.org>
Date:   Mon Feb 16 16:45:27 2015 +0100

    reduce the changes compared to master

commit 28f069b6d99a65e285ac8c821e6a332a1d8eb315
Author: Simon Willnauer <simonw@apache.org>
Date:   Mon Feb 16 16:43:46 2015 +0100

    fix primary relocation

commit c4c999dd61a44a7a0db9798275a622f2b85b1039
Merge: 2ae80f9 455a85d
Author: Simon Willnauer <simonw@apache.org>
Date:   Mon Feb 16 15:04:26 2015 +0100

    Merge branch 'master' into shadow-replicas

commit 2ae80f9689346f8fd346a0d3775a6341874d8bef
Author: Lee Hinman <lee@writequit.org>
Date:   Fri Feb 13 16:25:34 2015 -0700

    throw UnsupportedOperationException on write operations in ShadowEngine

commit 740c28dd9ef987bf56b670fa1a8bcc6de2845819
Merge: e5bc047 305ba33
Author: Lee Hinman <lee@writequit.org>
Date:   Fri Feb 13 15:38:39 2015 -0700

    Merge branch 'master' into shadow-replicas

commit e5bc047d7c872ae960d397b1ae7b4b78d6a1ea10
Author: Lee Hinman <lee@writequit.org>
Date:   Fri Feb 13 11:38:09 2015 -0700

    Don't replicate document request when using shadow replicas

commit 213292e0679d8ae1492ea11861178236f4abd8ea
Author: Simon Willnauer <simonw@apache.org>
Date:   Fri Feb 13 13:58:05 2015 +0100

    add one more nocommit

commit 83d171cf632f9b77cca9de58505f7db8fcda5599
Merge: aea9692 09eb8d1
Author: Simon Willnauer <simonw@apache.org>
Date:   Fri Feb 13 13:52:29 2015 +0100

    Merge branch 'master' into shadow-replicas

commit aea96920d995dacef294e48e719ba18f1ecf5860
Author: Simon Willnauer <simonw@apache.org>
Date:   Fri Feb 13 09:56:41 2015 +0100

    revert unneeded changes on Store

commit ea4e3e58dc6959a92c06d5990276268d586735f3
Author: Lee Hinman <lee@writequit.org>
Date:   Thu Feb 12 14:26:30 2015 -0700

    Add documentation to ShadowIndexShard, remove nocommit

commit 4f71c8d9f706a0c1c39aa3a370efb1604559d928
Author: Lee Hinman <lee@writequit.org>
Date:   Thu Feb 12 14:17:22 2015 -0700

    Add documentation to ShadowEngine

commit 28a9d1842722acba7ea69e0fa65200444532a30c
Author: Lee Hinman <lee@writequit.org>
Date:   Thu Feb 12 14:08:25 2015 -0700

    Remove nocommit, document canDeleteIndexContents

commit d8d59dbf6d0525cd823d97268d035820e5727ac9
Author: Lee Hinman <lee@writequit.org>
Date:   Thu Feb 12 10:34:32 2015 -0700

    Refactor more shared methods into the abstract Engine

commit a7eb53c1e8b8fbfd9281b43ae39eacbe3cd1a0a6
Author: Simon Willnauer <simonw@apache.org>
Date:   Thu Feb 12 17:38:59 2015 +0100

    Simplify shared filesystem recovery by using a dedicated recovery handler that skip
    most phases and enforces shard closing on the soruce before the target opens it's engine

commit a62b9a70adad87d7492c526f4daf868cb05018d9
Author: Simon Willnauer <simonw@apache.org>
Date:   Thu Feb 12 15:59:54 2015 +0100

    fix compile error after upstream changes

commit abda7807bc3328a89fd783ca7ad8c6deac35f16f
Merge: f229719 35f6496
Author: Simon Willnauer <simonw@apache.org>
Date:   Thu Feb 12 15:57:28 2015 +0100

    Merge branch 'master' into shadow-replicas

    Conflicts:
    	src/main/java/org/elasticsearch/index/engine/Engine.java

commit f2297199b7dd5d3f9f1f109d0ddf3dd83390b0d1
Author: Simon Willnauer <simonw@apache.org>
Date:   Thu Feb 12 12:41:32 2015 +0100

    first cut at catchup from primary
    make flush to a refresh
    factor our ShadowIndexShard to have IndexShard be idential to the master and least intrusive

    cleanup abstractions

commit 4a367c07505b84b452807a58890f1cbe21711f27
Author: Simon Willnauer <simonw@apache.org>
Date:   Thu Feb 12 09:50:36 2015 +0100

    fix primary promotion

commit cf2fb807e7e243f1ad603a79bc9d5f31a499b769
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 11 16:45:41 2015 -0700

    Make assertPathHasBeenCleared recursive

commit 5689b7d2f84ca1c41e4459030af56cb9c0151eff
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 11 15:58:19 2015 -0700

    Add testShadowReplicaNaturalRelocation

commit fdbe4133537eaeb768747c2200cfc91878afeb97
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 11 15:28:57 2015 -0700

    Use check for shared filesystem in primary -> primary relocation

    Also adds a nocommit

commit 06e2eb4496762130af87ce68a47d360962091697
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 11 15:21:32 2015 -0700

    Add a test checking that indices with shadow replicas clean up after themselves

commit e4dbfb09a689b449f0edf6ee24222d7eaba2a215
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 11 15:08:18 2015 -0700

    Fix segment info for ShadowEngine, remove test nocommit

commit 80cf0e884c66eda7d59ac5d59235e1ce215af8f5
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 11 14:30:13 2015 -0700

    Remove nocommit in ShadowEngineTests#testFailStart()

commit 5e33eeaca971807b342f9be51a6a566eee005251
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 11 14:22:59 2015 -0700

    Remove overly-complex test

commit 2378fbb917b467e79c0262d7a41c23321bbeb147
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 11 13:45:44 2015 -0700

    Fix missing import

commit 52e9cd1b8334a5dd228d5d68bd03fd0040e9c8e9
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 11 13:45:05 2015 -0700

    Add a test for replica -> primary promotion

commit a95adbeded426d7f69f6ddc4cbd6712b6f6380b4
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 11 12:54:14 2015 -0700

    Remove tests that don't apply to ShadowEngine

commit 1896feda9de69e4f9cf774ef6748a5c50e953946
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 11 10:29:12 2015 -0700

    Add testShadowEngineIgnoresWriteOperations and testSearchResultRelease

commit 67d7df41eac5e10a1dd63ddb31de74e326e9d38b
Author: Lee Hinman <lee@writequit.org>
Date:   Wed Feb 11 10:06:05 2015 -0700

    Add start of ShadowEngine unit tests

commit ca9beb2d93d9b5af9aa6c75dbc0ead4ef57e220d
Merge: 2d42736 57a4646
Author: Simon Willnauer <simonw@apache.org>
Date:   Wed Feb 11 18:03:53 2015 +0100

    Merge branch 'master' into shadow-replicas

commit 2d42736fed3ed8afda7e4aff10b65d292e1c6f92
Author: Simon Willnauer <simonw@apache.org>
Date:   Wed Feb 11 17:51:22 2015 +0100

    shortcut recovery if we are on a shared FS - no need to compare files etc.

commit 24d36c92dd82adce650e7ac8e9f0b43c83b2dc53
Author: Simon Willnauer <simonw@apache.org>
Date:   Wed Feb 11 17:08:08 2015 +0100

    utilize the new delete code

commit 2a2eed10f58825aae29ffe4cf01aefa5743a97c7
Merge: 343dc0b 173cfc1
Author: Simon Willnauer <simonw@apache.org>
Date:   Wed Feb 11 16:07:41 2015 +0100

    Merge branch 'master' into shadow-replicas

    Conflicts:
    	src/main/java/org/elasticsearch/gateway/GatewayMetaState.java

commit 343dc0b527a7052acdc783ac5abcaad1ef78dbda
Author: Simon Willnauer <simonw@apache.org>
Date:   Wed Feb 11 16:05:28 2015 +0100

    long adder is not available in java7

commit be02cabfeebaea74b51b212957a2a466cfbfb716
Author: Lee Hinman <lee@writequit.org>
Date:   Tue Feb 10 22:04:24 2015 -0700

    Add test that restarts nodes to ensure shadow replicas recover

commit 7fcb373f0617050ca1a5a577b8cf32e32dc612b0
Author: Simon Willnauer <simonw@apache.org>
Date:   Tue Feb 10 23:19:21 2015 +0100

    make test more evil

commit 38135af0c1991b88f168ece0efb72ffe9498ff59
Author: Simon Willnauer <simonw@apache.org>
Date:   Tue Feb 10 22:25:11 2015 +0100

    make tests pass

commit 05975af69e6db63cb95f3e40d25bfa7174e006ea
Author: Lee Hinman <lee@writequit.org>
Date:   Mon Jan 12 18:44:29 2015 +0100

    Add ShadowEngine",https://github.com/elastic/elasticsearch/commit/eb666f7f50e8510ff6afbdfc34b863f3f174751b
4241,4241.0,4415.0,elastic/elasticsearch,61761286e05641b94780a40851b0dc79b6c6f99c,"Refactoring

- moved alert execution logic to the history service (the history service now listener to schedule events)
- introduced `AlertLockService` - used by both alerts service and history service to lock alerts across services
- the history service is now responsible for executing the previous ""not yet executed"" fired alerts.
- renamed `AlertContext` to `ExecutionContext`
- renamed `AlertRun` to `AlertExecution`
- improved actions result parsing logic (`success` field is mandatory)
- renamed the alert history type to `fired_alert` (used to be `alerthistory`)
- renamed fired alert `error_msg` to just `message`.

Original commit: elastic/x-pack-elasticsearch@09f26ce3cf71e3cdbf3b91c81d28fc96e1861a11",https://github.com/elastic/elasticsearch/commit/61761286e05641b94780a40851b0dc79b6c6f99c
4242,4242.0,4416.0,elastic/elasticsearch,de41981373995dfbe815429525d547d1bc7bd443,"Aggs: Refactor aggregations to use lucene5-style collectors.

Aggregators now return a new collector instance per segment, like Lucene 5 does
with its oal.search.Collector API. This is important for us because things like
knowing whether the field is single or multi-valued is only known at a segment
level.

In order to do that I had to change aggregators to notify their sub aggregators
of new incoming segments (pretty much in the spirit of #6477) while everything
used to be centralized in the AggregationContext class. While this might slow
down a bit deeply nested aggregation trees, this also makes the children
aggregation and the `breadth_first` collection mode much better options since
they can now only replay what they need while they used to have to replay the
whole aggregation tree.

I also took advantage of this big refactoring to remove some abstractions that
were not really required like ValuesSource.MetaData or BucketAnalysisCollector.
I also splitted Aggregator into Aggregator and AggregatorBase in order to
separate the Aggregator API from implementation helpers.

Close #9544",https://github.com/elastic/elasticsearch/commit/de41981373995dfbe815429525d547d1bc7bd443
4243,4243.0,4417.0,elastic/elasticsearch,622d2c8e429b1f77d2b6f8e5bed6d5c9ef70fb32,"[CORE] Refactor InternalEngine into AbstractEngine and classes

InternalEngine contains a number of inner classes that it uses, however,
this makes the class overly large and hard to extend. In order to be
able to easily add other Engines (such as the ShadowEngine), these
helping methods have been extracted into an AbstractEngine class. The
classes that were previously in `InternalEngine` have been moved to
separate classes, which will allow for better unit testing as well.

None of the functionality of InternalEngine has been changed, this is
only refactoring.

Note that this is a change I originally made on my shadow-replica
branch, however it is easier to review piecemeal so I extracted it into
a separate PR.",https://github.com/elastic/elasticsearch/commit/622d2c8e429b1f77d2b6f8e5bed6d5c9ef70fb32
4244,4244.0,4418.0,elastic/elasticsearch,241444437f74d1de88ee18eebf2e7b4da259b247,"Refactored `Alert` and `Alert.Status`

 - all alerts are now ackable (there's no way to define an ""unackable"" alert)
 - `Alert.Status` now holds an `ack` that represents the ack status
 - `Alert.Status` now holds a `lastThrottle` that represents the state of the last throttle (will be `null` if not throttled yet)
 - changed the `Alert.Status.Ack.State` to hold more intuitive values - `awaits_execution`, `ackable` and `acked`
 - `Alert.Status` is now streamble
 - introduced additional info method on `Alert.Status` (e.g. `executed()`, `triggered()`, `ran()`)

Original commit: elastic/x-pack-elasticsearch@3eda1c211a16e52d11d241be0f2e4aaedf332a3c",https://github.com/elastic/elasticsearch/commit/241444437f74d1de88ee18eebf2e7b4da259b247
4245,4245.0,4419.0,elastic/elasticsearch,f261d8aeaf7af6d0bbb54d0264aeb92caa99021d,"Componentized the history service and alert record parser.
Renamed AlertRecord to FiredAlert
Refactored the persistence part of FiredAlert out of HistoryService to HistoryStore.
Moved AlertActionState to FiredAlert.State

Original commit: elastic/x-pack-elasticsearch@595c733cfca157131e0122a3a779ecced70277b9",https://github.com/elastic/elasticsearch/commit/f261d8aeaf7af6d0bbb54d0264aeb92caa99021d
4246,4246.0,4420.0,elastic/elasticsearch,3147927e205a5a5090f7cd41b033310550833c8c,"Refactor actions to match trigger refactoring.

This change refactors the old AlertActions code into Actions to mirror the triggers code.
This work also includes the configuration changes and webhook changes from master.
TemplateUtils has been renamed to StringTemplateUtils. References to the old AlertActions code have been removed and updated
to reference the new code.
Action.Result now implements ToXContent
This allows the FiredAlerts to track the history of the actions.

Original commit: elastic/x-pack-elasticsearch@a3d5d3bd4d3a6a8e1df0d9c5be90f6536f522228",https://github.com/elastic/elasticsearch/commit/3147927e205a5a5090f7cd41b033310550833c8c
4247,4247.0,4421.0,elastic/elasticsearch,7d9d0aae05be7d43af5fe62d623bb564f7592252,"Refactoring of the codebase

Original commit: elastic/x-pack-elasticsearch@08872f71ea924695da7288a5c8788e12ac6b9fef",https://github.com/elastic/elasticsearch/commit/7d9d0aae05be7d43af5fe62d623bb564f7592252
4248,4248.0,4422.0,elastic/elasticsearch,79ee2ed62e95466fb2bb3d572c87d9b10246d592,"[cleanup] Refactoring of the code base

- Renamed `AlertingModule` to `AlertsModule`
- Started modularizing the code base.. each module has its own guice module and `AlertsModule` spawn all the sub-modules
- Renamed `*Helper` classes to `*Utils` for consistency sake and moved all utilities to `support` package
- Moved `AlertsPlugin` to the base package (no need for `plugin` package... it just creates noise)
- Moved `State` to be inner enum within `AlertsService` (that's where it belongs)
- Moved all the rest actions to `rest.action` package

Original commit: elastic/x-pack-elasticsearch@4ce9bf8dcd674553cfdc17faf821e23dc46417a4",https://github.com/elastic/elasticsearch/commit/79ee2ed62e95466fb2bb3d572c87d9b10246d592
4249,4249.0,4423.0,elastic/elasticsearch,380fcd1d02abb68493ddc7fe6c8ce3467f96a1aa,"Reset MergePolicProvider settings only if the value actually changed

Due to some unreleased refactorings we lost the persitence of
a perviously set values in MergePolicyProvider. This commit adds this
back and adds a simple unittest.

Closes #8890",https://github.com/elastic/elasticsearch/commit/380fcd1d02abb68493ddc7fe6c8ce3467f96a1aa
4250,4250.0,4424.0,elastic/elasticsearch,da5299e4c5047f27a95d3347ee8cc5d96368d4de,"LDAP refactoring

- Introduced a strategy for group search. This is applied on the `AbstractLdapConnection` level.
- The `LdapConnection` and `ActiveDirectoryConnection` are now clean of logic
- The `AbstractLdapConnection` holds a timeout
- Introduced `SearchScope` for better settings support.
- fixed a bug in `LdapConnectionFactory:74`... `settings.getAsArray` will never return `null`

Original commit: elastic/x-pack-elasticsearch@1f4a43d037a48b06ebf7b5dd85228338651f140a",https://github.com/elastic/elasticsearch/commit/da5299e4c5047f27a95d3347ee8cc5d96368d4de
4251,4251.0,4425.0,elastic/elasticsearch,d226a973f715183ccd5aa6d643562b15bb37d7c1,"core: upgrade to lucene 5 r1650327.

refactor _version docvalues migration to be more efficient.

closes #9206",https://github.com/elastic/elasticsearch/commit/d226a973f715183ccd5aa6d643562b15bb37d7c1
4252,4252.0,4426.0,elastic/elasticsearch,90f98579a24100921f1c15572e1363fc4d38d03f,"Upgrade to Lucene 5.0.0-snapshot-1649544.

A couple of changes that triggerred a refactoring in Elasticsearch:

 - LUCENE-6148: Accountable.getChildResources returns a collection instead of
   a list.

 - LUCENE-6121: CachingTokenFilter now propagates reset(), as a result
   SimpleQueryParser.newPossiblyAnalyzedQuery has been fixed to not reset both
   the underlying stream and the wrapper (otherwise lucene would barf because of
   a doubl reset).

 - LUCENE-6119: The auto-throttle issue changed a couple of method
   names/parameters. It also made
   `UpdateSettingsTests.testUpdateMergeMaxThreadCount` dead slow so I muted this
   test until we clea up merge throttling to use LUCENE-6119.

Close #9145",https://github.com/elastic/elasticsearch/commit/90f98579a24100921f1c15572e1363fc4d38d03f
4253,4253.0,4427.0,elastic/elasticsearch,38a0ec9c3e62468622e06ba8d9c60facb0de3806,"Guice: Ensure no exceptions are thrown in constructor

Because this leads to endless loops when starting elasticsearch
some components have been refactored to AbstractLifecycleComponents
so that the exception throwing logic can executed in the
`doStart()` method.

Closes elastic/elasticsearch#505

Original commit: elastic/x-pack-elasticsearch@75d1fd358a923775551e556e559f02e745b3d3a2",https://github.com/elastic/elasticsearch/commit/38a0ec9c3e62468622e06ba8d9c60facb0de3806
4254,4254.0,4428.0,elastic/elasticsearch,f308049a90b8e92b062491095cb3ea48e97f9d7e,"[ENGINE] Fix updates dynamic settings in InternalEngineHolder

After the refactoring in #8784 some settings didn't get passed to the
actual engine and there exists a race if the settings are updated while
the engine is started such that the actual starting engine doesn't see
the latest settings. This commit fixes the concurrency issue as well as
adds tests to ensure the settings are reflected.",https://github.com/elastic/elasticsearch/commit/f308049a90b8e92b062491095cb3ea48e97f9d7e
4255,4255.0,4429.0,elastic/elasticsearch,8ffe8e025927f0e40981bb155eee33220aa3f396,[TEST] compare strings and strings - leftover from Path API refactoring,https://github.com/elastic/elasticsearch/commit/8ffe8e025927f0e40981bb155eee33220aa3f396
4256,4256.0,4430.0,elastic/elasticsearch,63a483e77e5a286b40eed57e4b37b0f5c45b94df,"[Cleanup] - refactored out N2NAuthenticator

N2NAuthenticator was not really used. Only the ip filtering authenticator was used, and was used directory (no use for a generic interface). `IPFilteringN2NAuthenticator` is now `IPFilter` and all relevant classes were moved to `shield.transport.filter` package.

Original commit: elastic/x-pack-elasticsearch@43f6faeb4bb3d7b9f4d87706e87f86e9b164eb3d",https://github.com/elastic/elasticsearch/commit/63a483e77e5a286b40eed57e4b37b0f5c45b94df
4257,4257.0,4431.0,elastic/elasticsearch,fc955551d4dcd52aadbf0ad0fde5d0644059fa4f,"[GEO] Fix for geo_shape query with polygon from -180/90 to 180/-90

This fix adds a simple consistency check that intersection edges appear pairwise. Polygonal boundary tests were passing (false positive) on the Eastern side of the dateline simply due to the initial order (edge direction) of the intersection edges.  Polygons in the Eastern hemispehere (which were not being tested) were correctly failing inside of JTS due to an attempt to connect incorrect intersection edges (that is, edges that were not even intersections). While this patch fixes issue/8467 (and adds broader test coverage) it is not intented as a long term solution.  The mid term fix (in work) will refactor all geospatial computational geometry to use ENU / ECF coordinate systems for higher accuracy and eliminate brute force mercator checks and conversions.

Closes #8467",https://github.com/elastic/elasticsearch/commit/fc955551d4dcd52aadbf0ad0fde5d0644059fa4f
4258,4258.0,4432.0,elastic/elasticsearch,48002d0d455a775f350fb669d3eca46a4f730bdc,"Internal: don't override user in the context if already existing

This bug was caused by the fact that we serialize the user and don't re-authenticate on each node anymore. With auto create index, we ended up overriding the user in the context with system due to wrong checks (we would check the headers instead of the context). This bug was revealed by our REST tests.

Also refactored the method for readability and removed check for token.

Original commit: elastic/x-pack-elasticsearch@2aa260b46c99a02b26e28c9385a41124c10267ca",https://github.com/elastic/elasticsearch/commit/48002d0d455a775f350fb669d3eca46a4f730bdc
4259,4259.0,4433.0,elastic/elasticsearch,22eea8aba0bef1db05fe928bcae2d849f875b47a,"[Cleanup] - Refactored security filter

Nuked the security filter and separated the different filter to their own constructs:

- Added a shield action package & module that is responsible for binding the shield action filter (and later will hold all shield actions)
- Added a shield rest package & module that is responsible for binding the shield rest filter and registering all the rest actions
- Moved the client & server transport filters to the transport package

General cleanup:

- Code formatting
- moved `ShieldPlugin` to the top level package `org.elasticsearch.shield`

Original commit: elastic/x-pack-elasticsearch@d652041860180d87872681f20cd95f407d35938b",https://github.com/elastic/elasticsearch/commit/22eea8aba0bef1db05fe928bcae2d849f875b47a
4260,4260.0,4434.0,elastic/elasticsearch,32af5a9d9cca1aa3e80bc28f3abce1b942538c1d,"Remove third-party licensing library

Incorporate Feedback:
 - verify signature for signed licenses whenever it is read from cluster state
 - encrypt trial licenses with default pass phrase when storing it
 - moved toSignature & fromSignature to License

Make LicenseManager a Utility class

Refactor:
 - renamed LicenseManager to LicenseVerifier
 - LicensesMetaData now holds a list of license objects (for signed licenses) and a set of encoded strings (trial licenses)
 - minor test cleanup

incorporate feedback

incorporated feedback

switch to a stronger secret key gen algo; clean up build files & LicensesMetaData

cosmetic changes to LicenseSigner

incorporate LicnesesMetaData feedback

Original commit: elastic/x-pack-elasticsearch@0510091d2d9d8ac61ca05ad4f2bed10daf28f1e0",https://github.com/elastic/elasticsearch/commit/32af5a9d9cca1aa3e80bc28f3abce1b942538c1d
4261,4261.0,4435.0,elastic/elasticsearch,2b108203fbed404684a03bce15701405b8dcef78,"SSL/TLS: Added support for different certs per profile

In order to run on different certs per port, we needed to adapt
the logic of starting up.

Also different profiles can now be applied to the N2NAuthenticator, so that
a different profile can allow/deny different hosts.

In addition minor refactorings have been done
* Group keystore/truststore settings instead of using underscores
* Change to transport profile settings instead of using specific shield ones

Documentation has been updated as well

Closes elastic/elasticsearch#290

Original commit: elastic/x-pack-elasticsearch@ad1ab974eafcdc454fd702b141e1d2c92dc9545d",https://github.com/elastic/elasticsearch/commit/2b108203fbed404684a03bce15701405b8dcef78
4262,4262.0,4436.0,elastic/elasticsearch,a94fb92ac5936e137cee028fc96d73bd7dc3a03d,"Aggregations: Fix geohash grid aggregation on multi-valued fields.

This aggregation creates an anonymous fielddata instance that takes geo points
and turns them into a geo hash encoded as a long. A bug was introduced in 1.4
because of a fielddata refactoring: the fielddata instance tries to populate
an array with values without first making sure that it is large enough.

Close #8507",https://github.com/elastic/elasticsearch/commit/a94fb92ac5936e137cee028fc96d73bd7dc3a03d
4263,4263.0,4437.0,elastic/elasticsearch,f004275641d2161f3106965fc9a2b8f32df48850,"Refactoring: Make TransportFilter work for inbound connections only

As netty uses different bootstraps for sending/receiving requests, having a
single interface for filtering incoming/outgoing messages does not make a
lot of sense.

This commit changes from a TransportFilter interface to a InboundTransportFilter
interface, which is only able to filter incoming messages - which is all we do
anyway right now.

Original commit: elastic/x-pack-elasticsearch@545ff241366e32dd7d6aacc857b438a946de560d",https://github.com/elastic/elasticsearch/commit/f004275641d2161f3106965fc9a2b8f32df48850
4264,4264.0,4438.0,elastic/elasticsearch,176b4eb1edd6adf9eac160ebe40522d8eee43e43,Fix synchronization - leftover from refactoring,https://github.com/elastic/elasticsearch/commit/176b4eb1edd6adf9eac160ebe40522d8eee43e43
4265,4265.0,4439.0,elastic/elasticsearch,f7d0f4d4e27c5e8a460c664fe87571ba07de2150,"Refactor term analysis for simple_query_string prefix queries

Also fixes an issue where the token stream could be non-closed if an
exception occured.",https://github.com/elastic/elasticsearch/commit/f7d0f4d4e27c5e8a460c664fe87571ba07de2150
4266,4266.0,4440.0,elastic/elasticsearch,f95a1989264769952f82fb27c3004f6f4e016bdc,"[DOCS]: added license-tool Usage & Reference
- minor refactoring of tests & plugin

Original commit: elastic/x-pack-elasticsearch@44ad694457a22e84d574c1ccd8bd60c25c013be4",https://github.com/elastic/elasticsearch/commit/f95a1989264769952f82fb27c3004f6f4e016bdc
4267,4267.0,4441.0,elastic/elasticsearch,da15a66d1e461c590797171a2d56bcb95e5a80dd,"Massive refactoring to permission infrastructure

- The Permission class changed such that now there isn't a single `check` method that all permission types must implement. Instead, each permission type has its own (if at all) check method that is relevant to what the permssion is supposed to check.

- Moved the indices resolving logic outside of the indices permission class to the authorization service. Also, the authroization service has all the logic on how to check each one of the indices against a compound/merged permission view over all the user's roles. This fixes a critical bug where if a user had more than one role, its permission wouldn't be checked appropriately (they were checked separately which introduced invalid results)

- Cleaned up and got rid of unused code

- System role is no longer implementing Permission (no need for that)

- Additional tests were added with different users/roles configuration to try an capture such bugs

Fixes elastic/elasticsearch#304

Original commit: elastic/x-pack-elasticsearch@5c9a581019ec605b11feae9200bd89c2742e9748",https://github.com/elastic/elasticsearch/commit/da15a66d1e461c590797171a2d56bcb95e5a80dd
4268,4268.0,4442.0,elastic/elasticsearch,f0f6a2c396f0723235e4a71a4c9cf229e159d08c,"Refactor shard recovery from anonymous class to ShardRecoveryHandler

Previously the bulk of our shard recovery code was in a 300-line
anonymous class in `RecoverySource`. This made it difficult to find and
more difficult to read.

This factors out that code into a `ShardRecoveryHandler` class, adding
javadocs for each function and phase of the recovery, as well as
comments explaining some of the more esoteric functions performed during
recovery.

It's hoped that this will help more people understand Elasticsearch's
recovery procedure.

No *major* functionality has changed, only typo corrections, some minor
allocation improvements and logging clarification changes.",https://github.com/elastic/elasticsearch/commit/f0f6a2c396f0723235e4a71a4c9cf229e159d08c
4269,4269.0,4443.0,elastic/elasticsearch,8e9574a9256e88b08b28a025b54e04bde885afdd,"Make LicensesService tests more robust
 - split out LicensesManagerService & LicensesClientService tests
 - add removeLicenses tests
 - other refactoring

Original commit: elastic/x-pack-elasticsearch@a47dc586d7b4388041ffbb909c6c93fb3749ab31",https://github.com/elastic/elasticsearch/commit/8e9574a9256e88b08b28a025b54e04bde885afdd
4270,4270.0,4444.0,elastic/elasticsearch,bce97abc1db5fbe64c430ff3aaa536ced75202e6,"Refactor and rename transport layer

This commit removes the update action and renames the create action to index.
It also hides the Alert objects behind the interface rather than exposing them.
This means that all interactions should be via BytesReferences.

Original commit: elastic/x-pack-elasticsearch@87ac377d3e3905cca44741d1d54a67ce11b1eac2",https://github.com/elastic/elasticsearch/commit/bce97abc1db5fbe64c430ff3aaa536ced75202e6
4271,4271.0,4445.0,elastic/elasticsearch,abd129fa7a6bef89702d71a369a1f6f28d6bc7d9,"Refactored licensing tools to use CliTool as base
- rewrote licensing tool tests

Original commit: elastic/x-pack-elasticsearch@e5e70a491a7b48a466312650c7289583b9c6a420",https://github.com/elastic/elasticsearch/commit/abd129fa7a6bef89702d71a369a1f6f28d6bc7d9
4272,4272.0,4446.0,elastic/elasticsearch,6c116e2fb3525da489b8f10f90f8aad9bc7fadcc,"- added serialization tests
- added license signature tests
- refactor unit tests
- testing infra
- cleanup license tools
- nuked FileBasedLicenseProvider

Original commit: elastic/x-pack-elasticsearch@2af36aecfab1876cd232175bd287fdd19387504c",https://github.com/elastic/elasticsearch/commit/6c116e2fb3525da489b8f10f90f8aad9bc7fadcc
4273,4273.0,4447.0,elastic/elasticsearch,e0ec8f60592bf03c3bedcc7c5ff80d63d67b6874,"Tests & Refactoring:
 - Added LicensesPluginsIntegrationTests (test with more than one consumer plugin)
 - Minor fix for LicensesService
 - Remove public_key_file from verify-license
 - WIP: STATE_NOT_RECOVERED_BLOCK tests

Original commit: elastic/x-pack-elasticsearch@372034a86a9040aaed00a1d34e55b3470a770cec",https://github.com/elastic/elasticsearch/commit/e0ec8f60592bf03c3bedcc7c5ff80d63d67b6874
4274,4274.0,4448.0,elastic/elasticsearch,4ac7b02ce7d2c07e1f217788ac676cac1516fc32,"Reroute shards automatically when high disk watermark is exceeded

This adds a Listener interface to the ClusterInfoService, this is used
by the DiskThresholdDecider, which adds a listener to check for nodes
passing the high watermark. If a node is past the high watermark an
empty reroute is issued so shards can be reallocated if desired.

A reroute will only be issued once every
`cluster.routing.allocation.disk.reroute_interval`, which is ""60s"" by
default.

Refactors InternalClusterInfoService to delegate the nodes stats and
indices stats gathering into separate methods so they have be overriden
by extending classes. Each stat gathering method returns a
CountDownLatch that can be used to wait until processing for that part
is successful before calling the listeners.

Fixes #8146",https://github.com/elastic/elasticsearch/commit/4ac7b02ce7d2c07e1f217788ac676cac1516fc32
4275,4275.0,4449.0,elastic/elasticsearch,9a64f00802fbc57c2b257194c068fededa19fb8f,"Refactored & improved LicensesTransportTests
Ensure that invalid licenses never make it to clusterState

Original commit: elastic/x-pack-elasticsearch@c6dfb6226dfa043653c548beb8909edc5ec5feb2",https://github.com/elastic/elasticsearch/commit/9a64f00802fbc57c2b257194c068fededa19fb8f
4276,4276.0,4450.0,elastic/elasticsearch,61b1750058091e8ae2dcfcc0a03770748deb40ed,"Refactor license serialization/deserialization

Original commit: elastic/x-pack-elasticsearch@ac0bb4a147134469cf9b4879df597af52a34fd75",https://github.com/elastic/elasticsearch/commit/61b1750058091e8ae2dcfcc0a03770748deb40ed
4277,4277.0,4451.0,elastic/elasticsearch,a57164ec67fd7f682edbd2bdf510059915e76d4e,"REFACTOR: convert internal license feature to json blob

Original commit: elastic/x-pack-elasticsearch@21d99b221944d141c1fcd8e412b27e181414099a",https://github.com/elastic/elasticsearch/commit/a57164ec67fd7f682edbd2bdf510059915e76d4e
4278,4278.0,4452.0,elastic/elasticsearch,24bc8d331eb28a686233573bdcaf9cadd9a6dc5b,"Recovery: refactor RecoveryTarget state management

This commit rewrites the state controls in the RecoveryTarget family classes to make it easier to guarantee that:
- recovery resources are only cleared once there are no ongoing requests
- recovery is automatically canceled when the target shard is closed/removed
- canceled recoveries do not leave temp files behind when canceled.

Highlights of the change:
1) All temporary files are cleared upon failure/cancel (see #7315 )
2) All newly created files are always temporary
3) Doesn't list local files on the cluster state update thread (which throw unwanted exception)
4) Recoveries are canceled by a listener to IndicesLifecycle.beforeIndexShardClosed, so we don't need to explicitly call it.
5) Simplifies RecoveryListener to only notify when a recovery is done or failed. Removed subtleties like ignore and retry (they are dealt with internally)

Closes #8092 , Closes #7315",https://github.com/elastic/elasticsearch/commit/24bc8d331eb28a686233573bdcaf9cadd9a6dc5b
4279,4279.0,4453.0,elastic/elasticsearch,f517a6a8f31a4d6d2f592215dbdad777214d6178,"Refactors ""urls"" -> ""url""

This lets the url be configured as a single element (the most likely usage) or as an array.  This also checks that multiple urls are either all ""ldaps"", or all ""ldap"", as it is not possible to mix them.

Original commit: elastic/x-pack-elasticsearch@b5a94b1d3544ac66f803a4c18edf1426f8fe4bf1",https://github.com/elastic/elasticsearch/commit/f517a6a8f31a4d6d2f592215dbdad777214d6178
4280,4280.0,4454.0,elastic/elasticsearch,d7b3f77586a701dba6e268632c0766dd8afe302f,"Packaging system refactoring (WIP)

Original commit: elastic/x-pack-elasticsearch@29751a866df082cbc798ae9776df527740497554",https://github.com/elastic/elasticsearch/commit/d7b3f77586a701dba6e268632c0766dd8afe302f
4281,4281.0,4455.0,elastic/elasticsearch,e59cf4538a0be57be00a81b302f67a49c5536388,"major refactor: make ESLicense more consistent; restructure ESLicenseManager

Original commit: elastic/x-pack-elasticsearch@cb60bfb539492a50dc3a74ace5c1060302572566",https://github.com/elastic/elasticsearch/commit/e59cf4538a0be57be00a81b302f67a49c5536388
4282,4282.0,4456.0,elastic/elasticsearch,9f84847681c0c860d0fadc44bf85c116725116e0,"First round of refactoring

ESLicenceManager is no longer a static singleton

Original commit: elastic/x-pack-elasticsearch@3e46f315a1233b1670d103f92cc8d589365d3d50",https://github.com/elastic/elasticsearch/commit/9f84847681c0c860d0fadc44bf85c116725116e0
4283,4283.0,4457.0,elastic/elasticsearch,1c4d07c96f060fd5fbd9e27a799071c178642985,"Allow setting individual breakers to ""noop"" breakers

This adds a NoopCircuitBreaker, and then adds the settings
`indices.breaker.fielddata.type` and `indices.breaker.request.type`,
which can be set to ""noop"" in order to use a breaker that will never
break, and incurs no overhead during computation.

This also refactors the tests for the CircuitBreakerService to use
@Before and @After functions as well as adding settings in
ElasticsearchIntegrationTest to occasionally use NOOP breakers for all
tests.",https://github.com/elastic/elasticsearch/commit/1c4d07c96f060fd5fbd9e27a799071c178642985
4284,4284.0,4458.0,elastic/elasticsearch,a8f5f0151dfda518739f0766df1bcf26c42f1e32,"Refactor injection mechanism

Original commit: elastic/x-pack-elasticsearch@a85d5213bf6061a1e5159bd5a63e257ec0f01a1c",https://github.com/elastic/elasticsearch/commit/a8f5f0151dfda518739f0766df1bcf26c42f1e32
4285,4285.0,4459.0,elastic/elasticsearch,d7ec84afd7608b61dfa5abc00374ebbfc402a73e,"Major refactoring of LicenseManager; Initial integration with LicenseService; still a lot of TODOs

Original commit: elastic/x-pack-elasticsearch@880984062a051cb79d2de84db349f128f84f424d",https://github.com/elastic/elasticsearch/commit/d7ec84afd7608b61dfa5abc00374ebbfc402a73e
4286,4286.0,4460.0,elastic/elasticsearch,2ed4dd7fb677809a3a5f104997ea4b6c76aea53e,"ldap: Adds OpenLdap and Active Directory tests, and refactors SSLConfig

SSLConfig is split into SSLConfig and SSLTrustConfig.

OpenLdapTests and ActiveDirectory tests connect via TLS to EC2 instances.

Original commit: elastic/x-pack-elasticsearch@ea38e58dea645523cfa786e09f7aa3b965656926",https://github.com/elastic/elasticsearch/commit/2ed4dd7fb677809a3a5f104997ea4b6c76aea53e
4287,4287.0,4461.0,elastic/elasticsearch,168b3752ef5f9a0f85e561aa3757cf3794643f3a,"Refactor the Translog.read(Location) method

It was only used by `readSource`, it has been changed to return a
Translog.Operation, which can have .getSource() called on it to return
the source. `readSource` has been removed.

This also removes the checked IOException, any exception thrown is
unexpected and should throw a runtime exception.

Moves the ReleasableBytesStreamOutput allocation into the body of the
try-catch block so the lock can be released in the event of an exception
during allocation.",https://github.com/elastic/elasticsearch/commit/168b3752ef5f9a0f85e561aa3757cf3794643f3a
4288,4288.0,4462.0,elastic/elasticsearch,3ed32e022efe12e5cfbaecc45ef68a00b160a01a,"[SNAPSHOT] Trigger retry logic also if we hit a JsonException

We rely on retry logic when reading a snapshot since it's concurrently
serialized. We should move to a better logic here but the refactoring
of the blobstore change the semantics and this now throws Json
exceptions rather than returning an unexpected Token",https://github.com/elastic/elasticsearch/commit/3ed32e022efe12e5cfbaecc45ef68a00b160a01a
4289,4289.0,4463.0,elastic/elasticsearch,4ab268bab2cfd7fc3cb4c4808f706d5049c1fae5,"Internal: refactor copy headers mechanism to not require a client factory

With #7594 we replaced the static `BaseRestHandler#addUsefulHeaders` by introducing the `RestClientFactory` that can be injected and used to register the relevant headers. To simplify things, we can now register relevant headers through the `RestController` and remove the `RestClientFactory` that was just introduced.

Closes #7675",https://github.com/elastic/elasticsearch/commit/4ab268bab2cfd7fc3cb4c4808f706d5049c1fae5
4290,4290.0,4464.0,elastic/elasticsearch,5bea31cb96ded0308408788deefbf57abc036ccf,"Internal: refactor copy headers mechanism

The functionality of copying headers in the REST layer (from REST requests to transport requests) remains the same. Made it a bit nicer by introducing a RestClientFactory component that is a singleton and allows to register useful headers without requiring static methods.

Plugins just have to inject the RestClientFactory now, and call its `addRelevantHeaders` method that is not static anymore.

Relates to #6513
Closes #7594",https://github.com/elastic/elasticsearch/commit/5bea31cb96ded0308408788deefbf57abc036ccf
4291,4291.0,4465.0,elastic/elasticsearch,333a39cf3034c59fa88f4432f53b3989bbd26eee,"Extended ActionFilter to also enable filtering the response side

Enables filtering the actions on both sides - request and response. Also added a base class for filter implementations (cleans up filters that only need to filter one side)

Also refactored the filter & filter chain methods to more intuitive names",https://github.com/elastic/elasticsearch/commit/333a39cf3034c59fa88f4432f53b3989bbd26eee
4292,4292.0,4466.0,elastic/elasticsearch,221eafab59acc80a42d84e52b5a1b2df8d6de988,"Refactored TransportMessage context

Removed CHM in favour of an OpenHashMap and synchronized accessor/mutator methods. Also, the context is now lazily inititialied (just like we do with the headers)",https://github.com/elastic/elasticsearch/commit/221eafab59acc80a42d84e52b5a1b2df8d6de988
4293,4293.0,4467.0,elastic/elasticsearch,34f4ca763c5bb16b4fa9fb0b657b89971003fb74,"[Cluster] Refactored ClusterStateUpdateTask protection against execution on a non master

Previous implementation used a marker interface and had no explicit failure call back for the case update task was run on a non master (i.e., the master stepped down after it was submitted). That lead to a couple of instance of checks.

This approach moves ClusterStateUpdateTask from an interface to an abstract class, which allows adding a flag to indicate whether it should only run on master nodes (defaults to true). It also adds an explicit onNoLongerMaster call back to allow different error handling for that case. This also removed the need for the  NoLongerMaster.

Closes #7511",https://github.com/elastic/elasticsearch/commit/34f4ca763c5bb16b4fa9fb0b657b89971003fb74
4294,4294.0,4468.0,elastic/elasticsearch,65afa1d93b702c842479100c9e5e738a2efe73eb,"FunctionScore: Refactor RandomScoreFunction to be consistent, and return values in rang [0.0, 1.0]

RandomScoreFunction previously relied on the order the documents were
iterated in from Lucene. This caused changes in ordering, with the same
seed, if documents moved to different segments. With this change, a
murmur32 hash of the _uid for each document is used as the ""random""
value. Also, the hash is adjusted so as to only return values between
0.0 and 1.0 to enable easier manipulation to fit into users' scoring
models.

closes #6907, #7446",https://github.com/elastic/elasticsearch/commit/65afa1d93b702c842479100c9e5e738a2efe73eb
4295,4295.0,4469.0,elastic/elasticsearch,eaf392163c12aa26665cbf9c15076cec6212ed9e,"Add translog checksums

Switches TranslogStreams to check a header in the file to determine the
translog format, delegating to the version-specific stream.

Version 1 of the translog format writes a header using Lucene's
CodecUtil at the beginning of the file and appends a checksum for each
translog operation written.

Also refactors much of the translog operations, such as merging
.hasNext() and .next() in FsChannelSnapshot

Relates to #6554",https://github.com/elastic/elasticsearch/commit/eaf392163c12aa26665cbf9c15076cec6212ed9e
4296,4296.0,4470.0,elastic/elasticsearch,b745b0151c67d5fbeb4591bd99eb0eb2e31e8b3d,"Fielddata: Remove soft/resident caches.

These caches have no advantage compared to the default node cache. Additionally,
the soft cache makes use of soft references which make fielddata loading quite
unpredictable in addition to pushing more pressure on the garbage collector.

The `none` cache is still there because of tests. There is no other good
reason to use it.

LongFieldDataBenchmark has been removed because the refactoring exposed a
compilation error in this class, which seems to not having been working for a
long time. In addition it's not as much useful now that we are progressively
moving more fields to doc values.

Close #7443",https://github.com/elastic/elasticsearch/commit/b745b0151c67d5fbeb4591bd99eb0eb2e31e8b3d
4297,4297.0,4471.0,elastic/elasticsearch,247ff7d80117ee841b3e8296d125df5aad6f0d30,"Transport: Refactor guice startup

* Removed & refactored unused module code
* Allowed to set transports programmatically
* Allow to set the source of the changed transport

Note: The current implementation breaks BWC as you need to specify a concrete
transport now instead of a module if you want to use a different
Transport or HttpServerTransport

Closes #7289",https://github.com/elastic/elasticsearch/commit/247ff7d80117ee841b3e8296d125df5aad6f0d30
4298,4298.0,4472.0,elastic/elasticsearch,1728c2a3818a006dea17f4dae7495e96b832b310,"Fixed comments on Transport service filter commit

- Fixed a bug in the logic of applying the indices group permission check
- For the rest, mainly cosmetics refactoring (renaming & redundant code removal)

Original commit: elastic/x-pack-elasticsearch@748575dc2e2aaee1aae5fdbab2a66e3ac4703ad1",https://github.com/elastic/elasticsearch/commit/1728c2a3818a006dea17f4dae7495e96b832b310
4299,4299.0,4473.0,elastic/elasticsearch,0f63e0a8daec56a9caaa9458ef281cee892093f5,"Aggregations: Merge LongTermsAggregator and DoubleTermsAggregator.

These two aggregators basically do exactly the same thing, they just interpret
bytes differently. This refactoring found an (unreleased) bug in the long terms
aggregator which didn't work correctly with duplicate values.

Close #7279",https://github.com/elastic/elasticsearch/commit/0f63e0a8daec56a9caaa9458ef281cee892093f5
4300,4300.0,4474.0,elastic/elasticsearch,5d987ad5e29cdd00bb710fad0a10e95c3611130e,"Internal: changed every single index operation to not replace the index within the original request

An anti-pattern that we have in our code, noticeable for java API users, is that we modify incoming requests by replacing the index or alias with the concrete index. This way not only the request has changed, but all following communications that use that request will lose the information on whether the original request was performed against an alias or an index.

Refactored the following base classes: `TransportShardReplicationOperationAction`, `TransportShardSingleOperationAction`, `TransportSingleCustomOperationAction`, `TransportInstanceSingleOperationAction` and all subclasses by introduced an InternalRequest object that contains the original request plus additional info (e.g. the concrete index). This internal request doesn't get sent over the transport but rebuilt on each node on demand (not different to what currently happens anyway, as concrete index gets set on each node). When the request becomes a shard level request, instead of using the only int shardId we serialize the ShardId that contains both concrete index name (which might then differ ffrom the original one within the request) and shard id.

Using this pattern we can move get, multi_get, explain, analyze, term_vector, multi_term_vector, index, delete, update, bulk to not replace the index name with the concrete one within the request. The index name within the original request will stay the same.

Made it also clearer within the different transport actions when the index needs to be resolved and when that's not needed (e.g. shard level request), by exposing `resolveIndex` method. Moved check block methods to parent classes as their content was always the same on every subclass.

Improved existing tests by randomly introducing the use of an alias, and verifying that the responses always contain the concrete index name and not the original one, as that's the expected behaviour.

Added backwards compatibility tests to make sure that the change is applied in a backwards compatible manner.

Closes #7223",https://github.com/elastic/elasticsearch/commit/5d987ad5e29cdd00bb710fad0a10e95c3611130e
4301,4301.0,4475.0,elastic/elasticsearch,a03860970b36d01bf183a655aef547ee9d9bb5ad,"Internal: refactored TransportSingleCustomOperationAction, subclasses and requests

TransportSingleCustomOperationAction is subclassed by two similar, yet different transport action: TransportAnalyzeAction and TransportGetFieldMappingsAction. Made their difference and similarities more explicit by sharing common code and moving specific code to subclasses:
- moved index field to the parent SingleCustomOperationAction class
- moved the common check blocks code to the parent transport action class
- moved the main transport handler to the TransportAnalyzeAction subclass as it is only used to receive external requests through clients. In the case of the TransportGetFieldMappingsIndexAction instead, the action is internal and executed only locally as part of the user facing TransportGetFieldMappingsAction. The corresponding request gets sent over the transport though as part of the related shard request
- removed the get field mappings index action from the action names mapping as it is not a transport handler anymore. It was before although never used.

Closes #7214",https://github.com/elastic/elasticsearch/commit/a03860970b36d01bf183a655aef547ee9d9bb5ad
4302,4302.0,4476.0,elastic/elasticsearch,51c10c18bafc4538d4eccde8dad5eabc11c2c7f8,"Tests: refactor tests

We need to simplify a bit our tests.
Also, we need to mark as `@Ignore` tests as they break now due to some cluster controls after each test in elasticsearch test infra.

See [org.elasticsearch.test.ElasticsearchIntegrationTest#ensureClusterSizeConsistency()](https://github.com/elasticsearch/elasticsearch/blob/v1.3.1/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java#L974-L979)

Closes #33.",https://github.com/elastic/elasticsearch/commit/51c10c18bafc4538d4eccde8dad5eabc11c2c7f8
4303,4303.0,4477.0,elastic/elasticsearch,ce864d4016a4e6d0598beef0216e316a8bfdb284,"[REFACTOR] TransportActions

Get rid of boilerplate code for handling transport actions.
Make these transport actions extend HandledTransportAction where this code
now lives.",https://github.com/elastic/elasticsearch/commit/ce864d4016a4e6d0598beef0216e316a8bfdb284
4304,4304.0,4478.0,elastic/elasticsearch,1816951b6b0320e7a011436c7c7519ec2bfabc6e,"Netty: Refactoring to make MessageChannelHandler extensible

Small refactorings to make the MessageChannelHandler more extensible.
Also allowed access to the different netty pipelines

This is the fix after the first version had problems with the HTTP
transport due to wrong reusing channel handlers, which is the reason
why tests failed.

Relates #6889
Closes #6915",https://github.com/elastic/elasticsearch/commit/1816951b6b0320e7a011436c7c7519ec2bfabc6e
4305,4305.0,4479.0,elastic/elasticsearch,bb421d7ea3a02ca1f462cf4492bde20ae2150bf1,"Revert ""Netty: Refactoring to make MessageChannelHandler extensible""

This results in unstable tests, most likely due to Channels being mixed
up by wrongly creating the pipelines. Needs investigation and a test.

This reverts commit db7f0d36af6692b1648cbea6e1e7147e7cfa70dc.",https://github.com/elastic/elasticsearch/commit/bb421d7ea3a02ca1f462cf4492bde20ae2150bf1
4306,4306.0,4480.0,elastic/elasticsearch,9714dd55c2c7a447618a459e5065ea0975093f0f,"Refactoring: Rename FieldMapper.termsFilter to fieldDataTermsFilter.

FieldMapper has two methods
`Filter termsFilter(List values, @Nullable QueryParseContext)` which is supposed
to work on the inverted index and
`Filter termsFilter(QueryParseContext, List, QueryParseContext)` which is
supposed to work on field data. Let's rename the second one to
`fieldDataTermsFilter` and remove the unused `QueryParseContext`.

Close #6888",https://github.com/elastic/elasticsearch/commit/9714dd55c2c7a447618a459e5065ea0975093f0f
4307,4307.0,4481.0,elastic/elasticsearch,db7f0d36af6692b1648cbea6e1e7147e7cfa70dc,"Netty: Refactoring to make MessageChannelHandler extensible

Small refactorings to make the MessageChannelHandler more extensible.
Also allowed access to the different netty pipelines

Closes #6889",https://github.com/elastic/elasticsearch/commit/db7f0d36af6692b1648cbea6e1e7147e7cfa70dc
4308,4308.0,4482.0,elastic/elasticsearch,bdf77fec6552604478f62edc28ba241184aa2921,"[BUILD] Randomization script refactoring

1) Refactored randomization logic to the top
2) Add logics to support window platforms",https://github.com/elastic/elasticsearch/commit/bdf77fec6552604478f62edc28ba241184aa2921
4309,4309.0,4483.0,elastic/elasticsearch,4091162d91acf26308ca7d5a5fcc7eaeada90572,"Refactoring: Replaced string values with static constants

in TransportShardBulkAction after fixing an issue.",https://github.com/elastic/elasticsearch/commit/4091162d91acf26308ca7d5a5fcc7eaeada90572
4310,4310.0,4484.0,elastic/elasticsearch,f16451a4464fe7d0a32d41693fc8c3f517610417,"Refactored AckedClusterStateUpdateTask & co. to remove code repetitions in subclasses

Made AckedClusterStateUpdateTask an abstract class instead of an interface, which contains the common methods.
Also introduced the AckedRequest interface to mark both AcknowledgedRequest & ClusterStateUpdateRequest so that the different ways of updating the cluster state (with or without a MetaData*Service) can share the same code.
Removed ClusterStateUpdateListener as we can just use its base class ActionListener instead.

Closes #6559",https://github.com/elastic/elasticsearch/commit/f16451a4464fe7d0a32d41693fc8c3f517610417
4311,4311.0,4485.0,elastic/elasticsearch,943f2552f9c6a7371b4d0ac0ac7d12bb9f59058a,"Update to elasticsearch 1.3.0

And refactor integration tests

Closes #17.

(cherry picked from commit f5b444e)
(cherry picked from commit 1e63f86)",https://github.com/elastic/elasticsearch/commit/943f2552f9c6a7371b4d0ac0ac7d12bb9f59058a
4312,4312.0,4486.0,elastic/elasticsearch,d4a0eb818e580ae6806cd0dacdf5545df1df11ac,"refactor: make requiredSize, shardSize, minDocCount and shardMinDocCount a single parameter

Every class using these parameters has their own member where these four
are stored. This clutters the code. Because they mostly needed together
it might make sense to group them.",https://github.com/elastic/elasticsearch/commit/d4a0eb818e580ae6806cd0dacdf5545df1df11ac
4313,4313.0,4487.0,elastic/elasticsearch,8e3bcb5e2f6ce4238060a170602b505b7e1c2f50,"refactor: unify terms and significant_terms parsing

Both need the requiredSize, shardSize, minDocCount and shardMinDocCount.
Parsing should not be duplicated.",https://github.com/elastic/elasticsearch/commit/8e3bcb5e2f6ce4238060a170602b505b7e1c2f50
4314,4314.0,4488.0,elastic/elasticsearch,705c7e2469546fcb241f119570265a76262eac75,"Recycled bytes in http + rest layer refactoring phase 2
Refactor the rest layer handlers to simplify common code paths (like handling) failures, and introduce optional (enabled for netty) rest channel bytes recycling",https://github.com/elastic/elasticsearch/commit/705c7e2469546fcb241f119570265a76262eac75
4315,4315.0,4489.0,elastic/elasticsearch,7f640dbcc6776280f49602884e5693609f90d4f8,"Refactor common code for unmapped aggregators into `NonCollectingAggregator`.

Our aggregators that are dedicated to unmapped fields all look more or less
the same so this hopefully helps remove some spaghetti code.

Close #5528",https://github.com/elastic/elasticsearch/commit/7f640dbcc6776280f49602884e5693609f90d4f8
4316,4316.0,4490.0,elastic/elasticsearch,5429019920b94ed2b3463b987fe1109513273df1,"refactor SimpleQueryParser settings into separate class, add ""lenient"" option

Fixes #5011",https://github.com/elastic/elasticsearch/commit/5429019920b94ed2b3463b987fe1109513273df1
4317,4317.0,4491.0,elastic/elasticsearch,c58c9cd3520709878e5aa38ea603ec0391451135,"Refactored TransportIndexReplicationOperationAction to be able to expose the shard id related to a shard failure

The `ShardOperationFailedException` is now created within `TransportIndexReplicationAction` passing in the current shard id as a constructor argument.
Also replaced `AtomicReferenceArray<Object>` with `AtomicReferenceArray<ShardActionResult>`, where `ShardActionResult` wraps the `ShardResponse` or the failure, containing all the needed info.",https://github.com/elastic/elasticsearch/commit/c58c9cd3520709878e5aa38ea603ec0391451135
4318,4318.0,4492.0,elastic/elasticsearch,e01f8c250d9c79911180b2e383fb184f4d278222,"Change the default recycler type.

Recycling is not thread-local anymore by default but instead there are several
pools of objects to recycle that threads may use depending on their id.
Each pool is protected by its own lock so up to ${number of pools} threads may
recycler objects concurrently.

Recyclers have also been refactored for better composability, for example there
is a soft recycler that creates a recycler that wraps data around a
SoftReference and a thread-local recycler that can take any factory or recyclers
and instantiates a dedicated instance per thread.

RecyclerBenchmark has been added to try to figure out the overhead of object
recycling depending on the recycler type and the number of threads trying to
recycle objects concurrently.

Close #4647",https://github.com/elastic/elasticsearch/commit/e01f8c250d9c79911180b2e383fb184f4d278222
4319,4319.0,4493.0,elastic/elasticsearch,fe1344107c3cb9db1ac118dc7ce8b0cce813f318,[SPEC] refactor cluster.node_info json spec to reflect clients' apis,https://github.com/elastic/elasticsearch/commit/fe1344107c3cb9db1ac118dc7ce8b0cce813f318
4320,4320.0,4494.0,elastic/elasticsearch,316a1411d08fe03b8197a103bef021f65068d93e,"Move tests to elasticsearch test framework

Move tests to elasticsearch test framework.
In addition to this, we want to refactor some package names to prepare next snapshot/restore feature (see #2).

Closes #3.",https://github.com/elastic/elasticsearch/commit/316a1411d08fe03b8197a103bef021f65068d93e
4321,4321.0,4495.0,elastic/elasticsearch,4271d573d60f39564c458e2d3fb7c14afb82d4d8,"Page-based cache recycling.

Refactor cache recycling so that it only caches large arrays (pages) that can
later be used to build more complex data-structures such as hash tables.

 - QueueRecycler now takes a limit like other non-trivial recyclers.
 - New PageCacheRecycler (inspired of CacheRecycler) has the ability to cache
   byte[], int[], long[], double[] or Object[] arrays using a fixed amount of
   memory (either globally or per-thread depending on the Recycler impl, eg.
   queue is global while thread_local is per-thread).
 - Paged arrays in o.e.common.util can now optionally take a PageCacheRecycler
   to reuse existing pages.
 - All aggregators' data-structures now use PageCacheRecycler:
   - for all arrays (counts, mins, maxes, ...)
   - LongHash can now take a PageCacheRecycler
   - there is a new BytesRefHash (inspired from Lucene but quite different,
     still; for instance it cheats on BytesRef comparisons by using Unsafe)
     that also takes a PageCacheRecycler

Close #4557",https://github.com/elastic/elasticsearch/commit/4271d573d60f39564c458e2d3fb7c14afb82d4d8
4322,4322.0,4496.0,elastic/elasticsearch,6e4d33bb4d68b06bc296f6793e8b01020233fecc,"Refactored create index api to make use of the new recently introduced generic ack mechanism

Closes #4421",https://github.com/elastic/elasticsearch/commit/6e4d33bb4d68b06bc296f6793e8b01020233fecc
4323,4323.0,4497.0,elastic/elasticsearch,630641f2927436b2954d79d110614f58400558a6,"Refactored put mapping api to make use of the new recently introduced generic ack mechanism

Note: we were previously waiting for ack only from all nodes that contain shards for the indices that the mapping updatewas applied to. This change introduces a wait for ack from all nodes, consitent with other api as the ack is meant more on the cluster state itself, which is held by all nodes and needs to be updated on all nodes anyway.

Closes #4228",https://github.com/elastic/elasticsearch/commit/630641f2927436b2954d79d110614f58400558a6
4324,4324.0,4498.0,elastic/elasticsearch,8257370415a0a2da1c7574baca7faaf4cf9e621c,"Refactoring IndicesAnalysisService

Using enums where possible in order to clean up the code in IndicesAnalysisService

Also introduced a simpler generic caching mechanism, and tests.",https://github.com/elastic/elasticsearch/commit/8257370415a0a2da1c7574baca7faaf4cf9e621c
4325,4325.0,4499.0,elastic/elasticsearch,39c606c59a2e7e2a71d067c54316b47650450332,"Refactored open/close index api to make use of the new recently introduced generic ack mechanism

Closes #4169",https://github.com/elastic/elasticsearch/commit/39c606c59a2e7e2a71d067c54316b47650450332
4326,4326.0,4500.0,elastic/elasticsearch,b2ad34cf9993c554eec0c8a926c2319f547648a8,"Refactored indices aliases api to make use of the new recently introduced generic ack mechanism

Closes #4114",https://github.com/elastic/elasticsearch/commit/b2ad34cf9993c554eec0c8a926c2319f547648a8
4327,4327.0,4501.0,elastic/elasticsearch,48ac9747a8c9a3206aaff165add1c12e75c79604,"Added third highlighter type based on lucene postings highlighter

Requires field index_options set to ""offsets"" in order to store positions and offsets in the postings list.
Considerably faster than the plain highlighter since it doesn't require to reanalyze the text to be highlighted: the larger the documents the better the performance gain should be.
Requires less disk space than term_vectors, needed for the fast_vector_highlighter.
Breaks the text into sentences and highlights them. Uses a BreakIterator to find sentences in the text. Plays really well with natural text, not quite the same if the text contains html markup for instance.
Treats the document as the whole corpus, and scores individual sentences as if they were documents in this corpus, using the BM25 algorithm.

Uses forked version of lucene postings highlighter to support:
- per value discrete highlighting for fields that have multiple values, needed when number_of_fragments=0 since we want to return a snippet per value
- manually passing in query terms to avoid calling extract terms multiple times, since we use a different highlighter instance per doc/field, but the query is always the same

The lucene postings highlighter api is  quite different compared to the existing highlighters api, the main difference being that it allows to highlight multiple fields in multiple docs with a single call, ensuring sequential IO.
The way it is introduced in elasticsearch in this first round is a compromise trying not to change the current highlight api, which works per document, per field. The main disadvantage is that we lose the sequential IO, but we can always refactor the highlight api to work with multiple documents.

Supports pre_tag, post_tag, number_of_fragments (0 highlights the whole field), require_field_match, no_match_size, order by score and html encoding.

Closes #3704",https://github.com/elastic/elasticsearch/commit/48ac9747a8c9a3206aaff165add1c12e75c79604
4328,4328.0,4502.0,elastic/elasticsearch,7867de4f5bb7bed1641e6be8d58118d3bc0c5ce3,"Refactor FieldData iterations

This commit primarily folds [Double|Bytes|Long|GeoPoint]Values.Iter
into [Double|Bytes|Long|GeoPoint]Values. Iterations now don't require
a auxillary class (Iter) but instead driven by native for loops. All
[Double|Bytes|Long|GeoPoint]Values are stateful and provide `setDocId`
and `nextValue` methods to iterate over all values in a document.
This has several advantage:

 * The amout of specialized classes is reduced
 * Iteration is clearly stateful ie. Iters can't be confused to be local.
 * All iterations are size bounded which prevents runtime checks and
   allows JIT optimizations / loop un-rolling and most iterations are
   branch free.
 * Due to the bounded iteration the need for a `hasNext` method call
   is removed.
 * Value iterations feels more native.

This commit also adds consistent documentation and unifies the calcualtion
if SortMode is involved.

This commit also changes the runtime behavior of BytesValues#getValue() such that it
will never return `null` anymore. If a document has no value in a field
this method still returns a `BytesRef` with a `length` of 0. To identify
documents with no values #hasValue() or #setDocument(int) should be used.
The latter should be preferred if the value will be consumed in the case
the document has a value.",https://github.com/elastic/elasticsearch/commit/7867de4f5bb7bed1641e6be8d58118d3bc0c5ce3
4329,4329.0,4503.0,elastic/elasticsearch,18c71b16b5e002666acb8a40a30f18c0276be7e9,"Refactor term vector api

This is necessary to allow adding a mult term vector request",https://github.com/elastic/elasticsearch/commit/18c71b16b5e002666acb8a40a30f18c0276be7e9
4330,4330.0,4504.0,elastic/elasticsearch,f0914d13af4e4c0a2c363e9e64c930e815d8aaba,"refactor cache recycler, introduce thread local one, and default to it",https://github.com/elastic/elasticsearch/commit/f0914d13af4e4c0a2c363e9e64c930e815d8aaba
4331,4331.0,4505.0,elastic/elasticsearch,0c2d12bda34fbbe0ffd3cef5140f5d5a3919b080,"Geo-Refactoring
===============
The code handling geo-shapes is not centralized and creating points takes
place at different places. Also the collection of supported geo_shapes is
not complete regarding to the GEOJSon specification. This commit
centralizes the code related to GEO calculations and extends the old API by
a set of new shapes.

Null-Shapes
===========
The latest implementation of geo-shapes allows to index null-shapes. This
means a field that is defined to hold a geo-shape can be set to null. In
example:
    {

        ""shape"": null
    }

New Shapes
==========
The geo-shapes multipoint and multilinestring have been added to the
geo_shape types. Also geo_circle is introduced by this commit.

Dateline wrapping
=================
A major issue of geo-shapes is the spherical geometry. Since ElasticSearch
works on the Geo-Coordinates by wrapping the Earths surface to a plane,
some shapes are hard to define if it’s crossing the +180°, -180 longitude.
To solve this issue ElasticSearch offers the possibility to define geo
shapes crossing this borders and decompose these shapes and automatically
re-compose them in a spherical manner. This feature may change the indexed
shape-type. If for example a polygon is defined, that crosses the dateline,
it will be re-assembled to a set of polygons. This causes indexing a
multipolygon. Also linestrings crossing the dateline might be re-assembled
to multilinestrings.

Builders
========
The API has been refactored to use builders instead of using shapes. So
parsing geo-shapes will result in builder objects. These builders can be
parsed and serialized without generating any shapes. this causes shape
generation only on the nodes executing the actual operation. Also the
baseclass ShapeBuilder implements the ToXContent interface which allows to
set fields of XContent directly.

TODO’s
======
 - The geo-circle will not work, if it’s crossing the dateline
 - The envelope also needs to wrapped

Closes #1997 #2708",https://github.com/elastic/elasticsearch/commit/0c2d12bda34fbbe0ffd3cef5140f5d5a3919b080
4332,4332.0,4506.0,elastic/elasticsearch,a5837b0f8d1b6eaa45521027f95131b449d251ea,"Stableize SearchStatsTest after search refactoring

SearchStatsTest depends on a given set of nodes and shards. The test
needed to be adjusted to reflect a possibly random number of nodes.",https://github.com/elastic/elasticsearch/commit/a5837b0f8d1b6eaa45521027f95131b449d251ea
4333,4333.0,4507.0,elastic/elasticsearch,b4d75a50bf141f7b18bf250041a77d8e01bad749,"Dates accessed from scripts should use UTC timezone
this was broken in the field data refactoring we did in 0.90, fixes #3091",https://github.com/elastic/elasticsearch/commit/b4d75a50bf141f7b18bf250041a77d8e01bad749
4334,4334.0,4508.0,elastic/elasticsearch,70355f693f51ba79de4042eab7147aacc06d58fe,"Refactoring SpanMultiTermQuery support

* Added license headers where needed
* Refactored SpanMultiTermQueryParser
* Refactored tests to adhere to other tests",https://github.com/elastic/elasticsearch/commit/70355f693f51ba79de4042eab7147aacc06d58fe
4335,4335.0,4509.0,elastic/elasticsearch,7f814691374d8d2c88d6523343b41eadae620af4,Refactor BytesValues to be reused as the interface for HashedBytesValues and remove HashBytesValues.,https://github.com/elastic/elasticsearch/commit/7f814691374d8d2c88d6523343b41eadae620af4
4336,4336.0,4510.0,elastic/elasticsearch,52ca251276c69e84a34f7e22a3c03a5cacbe1a5b,"Move to Elasticsearch 0.21.0.Beta1
Due to refactoring in 0.21.x we have to update this plugin
Closes #2.",https://github.com/elastic/elasticsearch/commit/52ca251276c69e84a34f7e22a3c03a5cacbe1a5b
4337,4337.0,4511.0,elastic/elasticsearch,9902102997cec1d6bcf213e9e5a5e9a8ba79dddc,"Move to Elasticsearch 0.21.0.Beta1
Due to refactoring in 0.21.x we have to update this plugin
Closes #5.",https://github.com/elastic/elasticsearch/commit/9902102997cec1d6bcf213e9e5a5e9a8ba79dddc
4338,4338.0,4512.0,elastic/elasticsearch,d080a75e7d2a789fa4dd0a550163d83835da930e,"Move to Elasticsearch 0.21.0.Beta1
Due to refactoring in 0.21.x we have to update this plugin
Closes #2.",https://github.com/elastic/elasticsearch/commit/d080a75e7d2a789fa4dd0a550163d83835da930e
4339,4339.0,4513.0,elastic/elasticsearch,cf7ce9f407a09abdd66ad7b50f63d27909f6ffab,"Move to Elasticsearch 0.21.0.Beta1
Due to refactoring in 0.21.x we have to update this plugin
Closes #4.",https://github.com/elastic/elasticsearch/commit/cf7ce9f407a09abdd66ad7b50f63d27909f6ffab
4340,4340.0,4514.0,elastic/elasticsearch,935e512c3186484285ec9a49edd76c05c22ff5e6,"Move to Elasticsearch 0.21.0.Beta1
Due to refactoring in 0.21.x we have to update this plugin
Closes #3.",https://github.com/elastic/elasticsearch/commit/935e512c3186484285ec9a49edd76c05c22ff5e6
4341,4341.0,4515.0,elastic/elasticsearch,eeb4bdbb3464a250adac39966d287ac91b1c4411,"Move to Elasticsearch 0.21.0.Beta1
Due to refactoring in 0.21.x we have to update this plugin
Closes #3.",https://github.com/elastic/elasticsearch/commit/eeb4bdbb3464a250adac39966d287ac91b1c4411
4342,4342.0,4516.0,elastic/elasticsearch,595e0e254e34ac4358bed8eb814fb5240caaf9de,"[Code refactoring] IndicesStats -> IndicesStatsResponse
fixes #1782",https://github.com/elastic/elasticsearch/commit/595e0e254e34ac4358bed8eb814fb5240caaf9de
4343,4343.0,4517.0,elastic/elasticsearch,942b87b763a6da0de834a75680b7597aee93195f,"Move to Elasticsearch 0.21.0.Beta1
Due to refactoring in 0.21.x we have to update this plugin
Closes #24.",https://github.com/elastic/elasticsearch/commit/942b87b763a6da0de834a75680b7597aee93195f
4344,4344.0,4518.0,elastic/elasticsearch,7bb092440ae1de74bcca79704a2725e693e868e1,"facet refactoring, default collector base post implementation
automatically implement post based on collector",https://github.com/elastic/elasticsearch/commit/7bb092440ae1de74bcca79704a2725e693e868e1
4345,4345.0,4519.0,elastic/elasticsearch,cc83c2f848be69a77f1275fe1ff5363dcdd4c955,"refactoring getter/setters

Fixes #2657",https://github.com/elastic/elasticsearch/commit/cc83c2f848be69a77f1275fe1ff5363dcdd4c955
4346,4346.0,4520.0,elastic/elasticsearch,73a447da861d2413269064899443b297b9ca3f88,"initial facet refactoring
the main goal of the facet refactoring is to allow for two modes of facet execution, collector based, that get callbacks as hist match, and post based, which iterates over all the relevant hits
it also includes a some simplification of the facet implementation",https://github.com/elastic/elasticsearch/commit/73a447da861d2413269064899443b297b9ca3f88
4347,4347.0,4521.0,elastic/elasticsearch,a74e7f8099d6acb872f8da27d0b43669903957d0,refactor geo to extract common classes,https://github.com/elastic/elasticsearch/commit/a74e7f8099d6acb872f8da27d0b43669903957d0
4348,4348.0,4522.0,elastic/elasticsearch,9ad05ecdea7bb2e374de1de1a74e4f2490256361,"lucene 4: make FieldVistors behave similar to FieldSelectors

Added back reset() method for now to make things work. Will refactor it out when we have tests passing.",https://github.com/elastic/elasticsearch/commit/9ad05ecdea7bb2e374de1de1a74e4f2490256361
4349,4349.0,4523.0,elastic/elasticsearch,8009b80481cc61a24b2703cd5e7c79a1974f43a7,lucene 4: fix access to segment name due to SegmentInfo refactoring,https://github.com/elastic/elasticsearch/commit/8009b80481cc61a24b2703cd5e7c79a1974f43a7
4350,4350.0,4524.0,elastic/elasticsearch,cfe7504d1cee2cffd3ed06c3b61d0c77de63b67f,"introduce TransportRequest (with optional headers)
introduce a new class, TransportRequest, which includes headers. This class can be used when sending requests over the transport layer, and ActionRequest also extends it now.
This is the first phase of the refactoring part in the transport layer and action layer to allow for simpler implementations of those as well as simpler ""filtering"" capabilities in the future",https://github.com/elastic/elasticsearch/commit/cfe7504d1cee2cffd3ed06c3b61d0c77de63b67f
4351,4351.0,4525.0,elastic/elasticsearch,08ecd9d772e845437b5406219dc9810eb9b5dbcc,refactor all Queue and BlockingQueue creations into a single factory method,https://github.com/elastic/elasticsearch/commit/08ecd9d772e845437b5406219dc9810eb9b5dbcc
4352,4352.0,4526.0,elastic/elasticsearch,35233564fdc6d455f4492085c18038e76b1ae1b6,"buffer management refactoring
First phase at improving buffer management and reducing even further buffer copies. Introduce a BytesReference abstraction, allowing to more easily slice and ""read/write references"" from streams. This is the foundation for later using it to create smarter buffers on top of composite netty channels for example (which http now produces) as well as reducing buffer copies when sending transport/rest responses.",https://github.com/elastic/elasticsearch/commit/35233564fdc6d455f4492085c18038e76b1ae1b6
4353,4353.0,4527.0,elastic/elasticsearch,f6b036f713956448c040be1e1a2525b85858da13,Refactor validate to validateQuery and move into indices admin action,https://github.com/elastic/elasticsearch/commit/f6b036f713956448c040be1e1a2525b85858da13
4354,4354.0,4528.0,elastic/elasticsearch,6b894d9f537012a3f0ae5483edae82044716d7e9,"add the option to get mapping as a parsed map, also do some internal refactoring to share the code that parses into a map",https://github.com/elastic/elasticsearch/commit/6b894d9f537012a3f0ae5483edae82044716d7e9
4355,4355.0,4529.0,elastic/elasticsearch,afb690e2337caa1cb6b34ca921ae7d0edb7600b9,refactor sub fetch phase to also allow for hits level execution,https://github.com/elastic/elasticsearch/commit/afb690e2337caa1cb6b34ca921ae7d0edb7600b9
4356,4356.0,4530.0,elastic/elasticsearch,c1ca21f4d5b683ad03180fa7e5b8673c51221aee,more internal refactoring in directory providers,https://github.com/elastic/elasticsearch/commit/c1ca21f4d5b683ad03180fa7e5b8673c51221aee
4357,4357.0,4531.0,elastic/elasticsearch,bdfa07934ef9c2d90c1e0ed84e49b389d5969aba,refactor creation of lucene directory and simplify different directories implemenation strcture,https://github.com/elastic/elasticsearch/commit/bdfa07934ef9c2d90c1e0ed84e49b389d5969aba
4358,4358.0,4532.0,elastic/elasticsearch,a9bc77521364c64c30461106bd49b9080d54d624,more refactoring to generalize root level field mappers,https://github.com/elastic/elasticsearch/commit/a9bc77521364c64c30461106bd49b9080d54d624
4359,4359.0,4533.0,elastic/elasticsearch,821c3524a22e17fd9b0e696a2c5595ca12c9d0c6,more refactoring to generalize root level field mappers,https://github.com/elastic/elasticsearch/commit/821c3524a22e17fd9b0e696a2c5595ca12c9d0c6
4360,4360.0,4534.0,elastic/elasticsearch,0bbf71188cb94185b87859a2cb52ea4863cfea2b,make broadcast action more extendable by refactoring out type/id,https://github.com/elastic/elasticsearch/commit/0bbf71188cb94185b87859a2cb52ea4863cfea2b
4361,4361.0,4535.0,elastic/elasticsearch,b7d492af4b3166fc1cf324a28534c2d9fcd75a12,fix synonym filter problem due to refactoring done in analysis components regestrations,https://github.com/elastic/elasticsearch/commit/b7d492af4b3166fc1cf324a28534c2d9fcd75a12
4362,4362.0,4536.0,elastic/elasticsearch,abfc7f0db4d934526203d3fd2675877e2106cb90,internal refactoring simplifying the type mapping system,https://github.com/elastic/elasticsearch/commit/abfc7f0db4d934526203d3fd2675877e2106cb90
4363,4363.0,4537.0,elastic/elasticsearch,0a4e582404de860c367e078b5fad701d65ba677a,"Query Parser Module Refactor, closes #994.",https://github.com/elastic/elasticsearch/commit/0a4e582404de860c367e078b5fad701d65ba677a
4364,4364.0,4538.0,elastic/elasticsearch,ebd95b7eb80cb89dfc4c9567a00cca715f4e999b,"change internal fs translog to be less blocking, and easier to refactor later for better flush concurrency",https://github.com/elastic/elasticsearch/commit/ebd95b7eb80cb89dfc4c9567a00cca715f4e999b
4365,4365.0,4539.0,elastic/elasticsearch,2cc4a286f8ac043be4c3cf6afce2c7cc6790a4b1,small refactor,https://github.com/elastic/elasticsearch/commit/2cc4a286f8ac043be4c3cf6afce2c7cc6790a4b1
4366,4366.0,4540.0,elastic/elasticsearch,77cf3e1924d21c21ed6c8c0ac92b3914220d6b4f,"small refactor in index settings, allowing for future dynamic changes to it",https://github.com/elastic/elasticsearch/commit/77cf3e1924d21c21ed6c8c0ac92b3914220d6b4f
4367,4367.0,4541.0,elastic/elasticsearch,3ed848a495a494538a9071ccd447f23fa07fb7f2,"ThreadPool: Refactor into several pools, with configurable types per pool, closes #687.",https://github.com/elastic/elasticsearch/commit/3ed848a495a494538a9071ccd447f23fa07fb7f2
4368,4368.0,4542.0,elastic/elasticsearch,cebdae5707a351be6bb02695fb5bdd1cc613bc99,"refactor script execution handling to improve performance, also introduce specific search script executor",https://github.com/elastic/elasticsearch/commit/cebdae5707a351be6bb02695fb5bdd1cc613bc99
4369,4369.0,4543.0,elastic/elasticsearch,bdb87c7a62d6eaf80e52775e11072cc4f5124f85,refactor a bit search script execution,https://github.com/elastic/elasticsearch/commit/bdb87c7a62d6eaf80e52775e11072cc4f5124f85
4370,4370.0,4544.0,elastic/elasticsearch,95dc08fa3bf7193bfa117deed1aca7fef3a58a76,refactor search tests into separate packages,https://github.com/elastic/elasticsearch/commit/95dc08fa3bf7193bfa117deed1aca7fef3a58a76
4371,4371.0,4545.0,elastic/elasticsearch,b4e5a542f3b3858a7c7218dcf9629060b512c612,internal refactoring/simplification in percolator,https://github.com/elastic/elasticsearch/commit/b4e5a542f3b3858a7c7218dcf9629060b512c612
4372,4372.0,4546.0,elastic/elasticsearch,dc17d10b81cf4c942a29921eb649674937a85345,small refactor,https://github.com/elastic/elasticsearch/commit/dc17d10b81cf4c942a29921eb649674937a85345
4373,4373.0,4547.0,elastic/elasticsearch,c7fca8f0e0a1ef2a53023bfe23d06d28d81854f3,"refactor terms facet into string terms facets, paving the way for optimized ones for numeric values",https://github.com/elastic/elasticsearch/commit/c7fca8f0e0a1ef2a53023bfe23d06d28d81854f3
4374,4374.0,4548.0,elastic/elasticsearch,f993c4b72b4b2126dd02f02fa0e01c86aa5ab45c,start refactoring of facets to make them more pluggable,https://github.com/elastic/elasticsearch/commit/f993c4b72b4b2126dd02f02fa0e01c86aa5ab45c
4375,4375.0,4549.0,elastic/elasticsearch,51c18cd9c1b563d27f1d3e96ad81785362cbfb95,refactor ip field mapper into its own package,https://github.com/elastic/elasticsearch/commit/51c18cd9c1b563d27f1d3e96ad81785362cbfb95
4376,4376.0,4550.0,elastic/elasticsearch,e44604b44174a6d2d91b6c65590668ef7e308ee0,"better transport exception handling, refactor out an action based transport exception, and don't fill stack trace only for remote ones",https://github.com/elastic/elasticsearch/commit/e44604b44174a6d2d91b6c65590668ef7e308ee0
4377,4377.0,4551.0,elastic/elasticsearch,6e0180db6a725d17cdc051fe0786d87008aa5305,refactor node data location of index and shard into common code,https://github.com/elastic/elasticsearch/commit/6e0180db6a725d17cdc051fe0786d87008aa5305
4378,4378.0,4552.0,elastic/elasticsearch,34ed85a40f186a2892007e89aabcfc8552bca36e,internal refactoring of field data type,https://github.com/elastic/elasticsearch/commit/34ed85a40f186a2892007e89aabcfc8552bca36e
4379,4379.0,4553.0,elastic/elasticsearch,31ebed11fd690f265a769f53a731de01e5d89d29,"script handling refactoring, better support for languages that perform better with some caching on a per search aspect (and execution per doc)",https://github.com/elastic/elasticsearch/commit/31ebed11fd690f265a769f53a731de01e5d89d29
4380,4380.0,4554.0,elastic/elasticsearch,7a783743989d0510ba7a47188ca734bbff0b0e56,fix wrong refactoring...,https://github.com/elastic/elasticsearch/commit/7a783743989d0510ba7a47188ca734bbff0b0e56
4381,4381.0,4555.0,elastic/elasticsearch,a1299a3d4fef7b6cb5539adf3fa0d9366dc2c9b5,refactoring in routing logic to allow adding allocation explanation that later can be shown,https://github.com/elastic/elasticsearch/commit/a1299a3d4fef7b6cb5539adf3fa0d9366dc2c9b5
4382,4382.0,4556.0,elastic/elasticsearch,b5b36215aeaa447e30648e9b21700d1d108857a8,refactoring in routing logic to allow adding allocation explanation that later can be shown,https://github.com/elastic/elasticsearch/commit/b5b36215aeaa447e30648e9b21700d1d108857a8
4383,4383.0,4557.0,elastic/elasticsearch,38aeba438d6d14e2af913b7bcb0d8fee3dc1ffa2,"XContent refactoring, closes #367.",https://github.com/elastic/elasticsearch/commit/38aeba438d6d14e2af913b7bcb0d8fee3dc1ffa2
4384,4384.0,4558.0,elastic/elasticsearch,1e75638b311c9e314d46e2133e936d858587e757,refactor field funtion to use internal docmap to be used in scripts,https://github.com/elastic/elasticsearch/commit/1e75638b311c9e314d46e2133e936d858587e757
4385,4385.0,4559.0,elastic/elasticsearch,163b7be639ba507956f078a25f672f36c3d4ba55,refactor gateway service to allow for more custom gateway implemenations,https://github.com/elastic/elasticsearch/commit/163b7be639ba507956f078a25f672f36c3d4ba55
4386,4386.0,4560.0,elastic/elasticsearch,939d583550258d4522ba8b8cdba04545ff505709,"initial chunk of work on refactoring the gateway, syntatic gateway files names, commit points that include translog information",https://github.com/elastic/elasticsearch/commit/939d583550258d4522ba8b8cdba04545ff505709
4387,4387.0,4561.0,elastic/elasticsearch,b49d331c86ed9650442a8da0532f7a3d9fc77430,"initial chunk of work on refactoring the gateway, syntatic gateway files names, commit points that include translog information",https://github.com/elastic/elasticsearch/commit/b49d331c86ed9650442a8da0532f7a3d9fc77430
4388,4388.0,4562.0,elastic/elasticsearch,5bd37f6f47bc9428cdb13fe5749f3dfb299e0389,"initial chunk of work on refactoring the gateway, syntatic gateway files names, commit points that include translog information",https://github.com/elastic/elasticsearch/commit/5bd37f6f47bc9428cdb13fe5749f3dfb299e0389
4389,4389.0,4563.0,elastic/elasticsearch,1517fa3d286e069af8806bbc2f0e8783eaddabbf,"initial chunk of work on refactoring the gateway, syntatic gateway files names, commit points that include translog information",https://github.com/elastic/elasticsearch/commit/1517fa3d286e069af8806bbc2f0e8783eaddabbf
4390,4390.0,4564.0,elastic/elasticsearch,aa28b93610f779b92967cbe51a39a243e80a4396,"refactor how throttling is done, instead of doing it after a shard is allocated to a node, and then wait till its allowed to recover, do it on the allocation level, and don't allocate a shard to a node that has N number of recoveries going on it",https://github.com/elastic/elasticsearch/commit/aa28b93610f779b92967cbe51a39a243e80a4396
4391,4391.0,4565.0,elastic/elasticsearch,5ded04c5cb884a6b3c67121c9d26bc65cd084383,"refactor shard allocation to be more pluggable for node allocation ""deciders""",https://github.com/elastic/elasticsearch/commit/5ded04c5cb884a6b3c67121c9d26bc65cd084383
4392,4392.0,4566.0,elastic/elasticsearch,c10544479f3d774548a0b1243010ab36a8f9d3e8,refactor cached streams into a separate class,https://github.com/elastic/elasticsearch/commit/c10544479f3d774548a0b1243010ab36a8f9d3e8
4393,4393.0,4567.0,elastic/elasticsearch,7c5f0fe40528e63f6a7b88d3cd0ea95d23e9181b,"minor transport refactoring, add options to send response, though no options to set yet",https://github.com/elastic/elasticsearch/commit/7c5f0fe40528e63f6a7b88d3cd0ea95d23e9181b
4394,4394.0,4568.0,elastic/elasticsearch,6611e7db44e0abdf63ae095de06be4952ac81df7,"refactor custom sort parsing to be ""code"" pluggable",https://github.com/elastic/elasticsearch/commit/6611e7db44e0abdf63ae095de06be4952ac81df7
4395,4395.0,4569.0,elastic/elasticsearch,ff8d743337e548ec268f9f2dc1923fc2ce7a05fd,"add geo distance sort option, refactor java level sort API to have sort builders (similar to facets)",https://github.com/elastic/elasticsearch/commit/ff8d743337e548ec268f9f2dc1923fc2ce7a05fd
4396,4396.0,4570.0,elastic/elasticsearch,3d31c38f11b0ec27411d252ed59a0ab04035d4d7,refactoring transport service to allow for send options,https://github.com/elastic/elasticsearch/commit/3d31c38f11b0ec27411d252ed59a0ab04035d4d7
4397,4397.0,4571.0,elastic/elasticsearch,fefcfb5b5c2fcc5d3b14bed903b1d1c46c3d1a74,"refactor recovery to be handled on the node level (and not per shard), with better retry mechanism when doing peer shard recovery",https://github.com/elastic/elasticsearch/commit/fefcfb5b5c2fcc5d3b14bed903b1d1c46c3d1a74
4398,4398.0,4572.0,elastic/elasticsearch,892dadca59e3bc74ffdc4d47e2af1b25bdf6fc26,refactor meta data opertions into discrete services that do all operations within the cluster update process,https://github.com/elastic/elasticsearch/commit/892dadca59e3bc74ffdc4d47e2af1b25bdf6fc26
4399,4399.0,4573.0,elastic/elasticsearch,703657699a527a52cc4b83e854769c6541c3adbe,"refactor new thread pools in, remove dynamic ones",https://github.com/elastic/elasticsearch/commit/703657699a527a52cc4b83e854769c6541c3adbe
4400,4400.0,4574.0,elastic/elasticsearch,514df4ee3f99b8f860847a06b3b44e137af70234,"refactor the shard routing abstraction, no need for it",https://github.com/elastic/elasticsearch/commit/514df4ee3f99b8f860847a06b3b44e137af70234
4401,4401.0,4575.0,elastic/elasticsearch,00d2abef408721f0b711477ba53c5e16d900e55f,refactor facets builder API to make it more manageable,https://github.com/elastic/elasticsearch/commit/00d2abef408721f0b711477ba53c5e16d900e55f
4402,4402.0,4576.0,elastic/elasticsearch,3d84af2a4045c7c8cf84dbf20de2a7c452868e54,refactor hdfs gateway to use the new common blobstore,https://github.com/elastic/elasticsearch/commit/3d84af2a4045c7c8cf84dbf20de2a7c452868e54
4403,4403.0,4577.0,elastic/elasticsearch,7ed7c6db4e680b641c218aa4c8571d22af1bff8d,"Gateway: Internal refactoring, requires manual upgrade when using fs gateway, closes #232.",https://github.com/elastic/elasticsearch/commit/7ed7c6db4e680b641c218aa4c8571d22af1bff8d
4404,4404.0,4578.0,elastic/elasticsearch,abde45bb82d6d653b557fef94a590af04f95dce2,refactor util.xcontent to common.xcontent in groovy cliet,https://github.com/elastic/elasticsearch/commit/abde45bb82d6d653b557fef94a590af04f95dce2
4405,4405.0,4579.0,elastic/elasticsearch,891c69f8de26eb986e86248f0d1fe0058d984dca,refactor builder requets into common base class,https://github.com/elastic/elasticsearch/commit/891c69f8de26eb986e86248f0d1fe0058d984dca
4406,4406.0,4580.0,elastic/elasticsearch,f75abbaa007df649f664eff7a9c6177185a151a8,"big refactoring thanks to proper jarjar built from source with asm 3.3 allowing to jarjar guice and others, includes package relocations",https://github.com/elastic/elasticsearch/commit/f75abbaa007df649f664eff7a9c6177185a151a8
4407,4407.0,4581.0,elastic/elasticsearch,d5bd77cc38b8656b373d03db8eb5ae667843dbb0,"big refactoring thanks to proper jarjar built from source with asm 3.3 allowing to jarjar guice and others, includes package relocations",https://github.com/elastic/elasticsearch/commit/d5bd77cc38b8656b373d03db8eb5ae667843dbb0
4408,4408.0,4582.0,elastic/elasticsearch,636bfe846648b77dfcaed8d46e2d5963b0bc3348,"big refactoring thanks to proper jarjar built from source with asm 3.3 allowing to jarjar guice and others, includes package relocations",https://github.com/elastic/elasticsearch/commit/636bfe846648b77dfcaed8d46e2d5963b0bc3348
4409,4409.0,4583.0,elastic/elasticsearch,a9fc276a3ec849bb94fbe22e4039c4c3128ccef4,refactor the custom boost factor query into a more general function boost query,https://github.com/elastic/elasticsearch/commit/a9fc276a3ec849bb94fbe22e4039c4c3128ccef4
4410,4410.0,4584.0,elastic/elasticsearch,d36cea07f3fa02ae23c6ee4a0efa058d426aefa2,refactor some facet support,https://github.com/elastic/elasticsearch/commit/d36cea07f3fa02ae23c6ee4a0efa058d426aefa2
4411,4411.0,4585.0,elastic/elasticsearch,88ba980f79dfb1cc034c026f09bf8f14e122b495,refactoring of facets to be more open for different facet types,https://github.com/elastic/elasticsearch/commit/88ba980f79dfb1cc034c026f09bf8f14e122b495
4412,4412.0,4586.0,elastic/elasticsearch,bac0ef98c4dafbc6a3325d19997f01b538ed69e0,more refactoring and proper exception when using cloud plugin,https://github.com/elastic/elasticsearch/commit/bac0ef98c4dafbc6a3325d19997f01b538ed69e0
4413,4413.0,4587.0,elastic/elasticsearch,10f0eaad68557ff2aae92dd65e8f1b9037ea0942,refactor plugins into sub groups,https://github.com/elastic/elasticsearch/commit/10f0eaad68557ff2aae92dd65e8f1b9037ea0942
4414,4414.0,4588.0,elastic/elasticsearch,38d8fad8d0721ab46b3b9d18527e7adeb28557a2,"clean and refactor the way fs index gateway work, should work nicer with NFS",https://github.com/elastic/elasticsearch/commit/38d8fad8d0721ab46b3b9d18527e7adeb28557a2
4415,4415.0,4589.0,elastic/elasticsearch,5957f580e337f50cecc8d8d69e7fd572c43f6bfd,refactor lifecycle components to a shards base class #cleancode,https://github.com/elastic/elasticsearch/commit/5957f580e337f50cecc8d8d69e7fd572c43f6bfd
4416,4416.0,4590.0,elastic/elasticsearch,f8a615f9a31940240b675a0d40412e0ad93c5685,"refactor internal transport streams to be more effecient, heavily reduce stream size",https://github.com/elastic/elasticsearch/commit/f8a615f9a31940240b675a0d40412e0ad93c5685
4417,4417.0,4591.0,elastic/elasticsearch,7bf0f1ffca589df6e626d61182689bde005ce649,"refactor client api, remove execXXX, and simple remain with the actual operation name as the method name, one that returns a future, and one that accepts a listener",https://github.com/elastic/elasticsearch/commit/7bf0f1ffca589df6e626d61182689bde005ce649
4418,4418.0,4592.0,elastic/elasticsearch,a5790cab28d2180a64a13755a7bd87557a2fbca5,"refactor from and size in url to use the new ""extraSource"" in it",https://github.com/elastic/elasticsearch/commit/a5790cab28d2180a64a13755a7bd87557a2fbca5
4419,4419.0,4593.0,elastic/elasticsearch,a8af609eba660982bd82ad2618f4a90058cac7e8,refactor index service into a service package,https://github.com/elastic/elasticsearch/commit/a8af609eba660982bd82ad2618f4a90058cac7e8
4420,4420.0,4594.0,elastic/elasticsearch,46ff97af5e05034de8f171945f0847a98c15c5e3,"refactor json handling to use byte[] instead of string for better performance, storage, and memory consumption (apply to search)",https://github.com/elastic/elasticsearch/commit/46ff97af5e05034de8f171945f0847a98c15c5e3
4421,4421.0,4595.0,elastic/elasticsearch,defb6a336daa8fb13e22a6b05ac47886f20e819f,"refactor json handling to use byte[] instead of string for better performance, storage, and memory consumption (apply to count and delete by query)",https://github.com/elastic/elasticsearch/commit/defb6a336daa8fb13e22a6b05ac47886f20e819f
4422,4422.0,4596.0,elastic/elasticsearch,c111e1ab80c37bd229123e32b49c37a41f90b6a0,"refactor json handling to use byte[] instead of string for better performance, storage, and memory consumption",https://github.com/elastic/elasticsearch/commit/c111e1ab80c37bd229123e32b49c37a41f90b6a0
4423,4423.0,4597.0,elastic/elasticsearch,ce58723cc5b463097725c56aed70941cdb2aefb6,"refactor mapping names into a separate class (Names), create a NamedAnalyzer wrapper which allows to know the logical name the analyzer was created under",https://github.com/elastic/elasticsearch/commit/ce58723cc5b463097725c56aed70941cdb2aefb6
4424,4424.0,4598.0,elastic/elasticsearch,7631b1383b2702d0cf844c49e54a2fb3794f3d52,"change broadcast support to be able to run on all shards replicas (in parallel) and not just one shard per replica group. Change flush and refresh to use broadcast and not replicaiton. Remove shards transport support since broadcast now does exactly the same, and refactor index status to use broadcast (across all shards).",https://github.com/elastic/elasticsearch/commit/7631b1383b2702d0cf844c49e54a2fb3794f3d52
4425,4425.0,,algorithmfoundry/foundry,c560f475246cca55f77b43b7db2da2a772888d67,Fixing imports due to refactoring.,https://github.com/algorithmfoundry/foundry/commit/c560f475246cca55f77b43b7db2da2a772888d67
4426,4426.0,,algorithmfoundry/foundry,7970f87dc2e94155c6870040b7a164e6fc522e6d,Refactored some of the method names.,https://github.com/algorithmfoundry/foundry/commit/7970f87dc2e94155c6870040b7a164e6fc522e6d
4427,,,klevis/DigitRecognizer,00000364b3b82b5c6d70d5abb447cb1139c32d7d,refactor,https://github.com/klevis/DigitRecognizer/commit/00000364b3b82b5c6d70d5abb447cb1139c32d7d
4428,,,klevis/DigitRecognizer,c0512c1864ea819b1930faf56eafc6cc32637cd1,refactor,https://github.com/klevis/DigitRecognizer/commit/c0512c1864ea819b1930faf56eafc6cc32637cd1
